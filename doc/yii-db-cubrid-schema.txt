
*yii/db/cubrid/Schema*   >> |yii/db/Schema|
======================


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/cubrid/Schema::$db*

 See |yii/db/Schema::$db|

$defaultSchema				*yii/db/cubrid/Schema::$defaultSchema*

 See |yii/db/Schema::$defaultSchema|

$exceptionMap				*yii/db/cubrid/Schema::$exceptionMap*

 (array) Map of DB errors and corresponding exceptions If left part is found
 in DB error message exception class from the right part is used.

$columnSchemaClass			*yii/db/cubrid/Schema::$columnSchemaClass*

 See |yii/db/Schema::$columnSchemaClass|

$typeMap				*yii/db/cubrid/Schema::$typeMap*

 (array) Mapping from physical column types (keys) to abstract column types
 (values) Please refer to [CUBRID
 manual](http://www.cubrid.org/manual/91/en/sql/datatype.html) for details on
 data types.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/cubrid/Schema::className*				public

 See |yii/base/BaseObject::className|


*yii/db/cubrid/Schema::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/db/cubrid/Schema::init*				public

 See |yii/base/BaseObject::init|


*yii/db/cubrid/Schema::__get*				public

 See |yii/base/BaseObject::__get|


*yii/db/cubrid/Schema::__set*				public

 See |yii/base/BaseObject::__set|


*yii/db/cubrid/Schema::__isset*				public

 See |yii/base/BaseObject::__isset|


*yii/db/cubrid/Schema::__unset*				public

 See |yii/base/BaseObject::__unset|


*yii/db/cubrid/Schema::__call*				public

 See |yii/base/BaseObject::__call|


*yii/db/cubrid/Schema::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/db/cubrid/Schema::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/db/cubrid/Schema::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/db/cubrid/Schema::hasMethod*				public

 See |yii/base/BaseObject::hasMethod|


*yii/db/cubrid/Schema::resolveTableName*			protected

 See |yii/db/Schema::resolveTableName|


*yii/db/cubrid/Schema::findSchemaNames*			protected

 See |yii/db/Schema::findSchemaNames|


*yii/db/cubrid/Schema::findTableNames*			protected
>
 findTableNames($schema='''')
<
return (array) All table names in the database. The names have NO schema name prefix.



 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception.



    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema.


*yii/db/cubrid/Schema::loadTableSchema*			protected
>
 loadTableSchema($name)
<
return (\yii\db\TableSchema|null) DBMS-dependent table metadata, 'null' if the table
does not exist.







    [$name] (string) Table name


*yii/db/cubrid/Schema::createColumnSchema*		protected

 See |yii/db/Schema::createColumnSchema|


*yii/db/cubrid/Schema::getTableSchema*			public

 See |yii/db/Schema::getTableSchema|


*yii/db/cubrid/Schema::getTableSchemas*			public

 See |yii/db/Schema::getTableSchemas|


*yii/db/cubrid/Schema::getSchemaNames*			public

 See |yii/db/Schema::getSchemaNames|


*yii/db/cubrid/Schema::getTableNames*			public

 See |yii/db/Schema::getTableNames|


*yii/db/cubrid/Schema::getQueryBuilder*			public

 See |yii/db/Schema::getQueryBuilder|


*yii/db/cubrid/Schema::getPdoType*			public
>
 getPdoType($data)
<
return (int) The PDO type

    [$data] (mixed) The data whose PDO type is to be determined


*yii/db/cubrid/Schema::refresh*				public

 See |yii/db/Schema::refresh|


*yii/db/cubrid/Schema::refreshTableSchema*		public

 See |yii/db/Schema::refreshTableSchema|


*yii/db/cubrid/Schema::createQueryBuilder*		public
>
 createQueryBuilder()
<
return (\yii\db\cubrid\QueryBuilder) Query builder instance



*yii/db/cubrid/Schema::createColumnSchemaBuilder*		public
>
 createColumnSchemaBuilder($type, $length='null')
<
return (\yii\db\ColumnSchemaBuilder) Column schema builder instance



 This method may be overridden by child classes to create a DBMS-specific
 column schema builder.



    [$type] (string) Type of the column. See 'ColumnSchemaBuilder::$type'.
    [$length] (int|string|array) Length or precision of the column. See
    'ColumnSchemaBuilder::$length'.


*yii/db/cubrid/Schema::findUniqueIndexes*			public

 See |yii/db/Schema::findUniqueIndexes|


*yii/db/cubrid/Schema::getLastInsertID*			public

 See |yii/db/Schema::getLastInsertID|


*yii/db/cubrid/Schema::supportsSavepoint*			public

 See |yii/db/Schema::supportsSavepoint|


*yii/db/cubrid/Schema::createSavepoint*			public

 See |yii/db/Schema::createSavepoint|


*yii/db/cubrid/Schema::releaseSavepoint*			public
>
 releaseSavepoint($name)
<
return (void)







    [$name] (string) The savepoint name


*yii/db/cubrid/Schema::rollBackSavepoint*			public

 See |yii/db/Schema::rollBackSavepoint|


*yii/db/cubrid/Schema::setTransactionIsolationLevel*	public
>
 setTransactionIsolationLevel($level)
<
return (void)







    [$level] (string) The transaction isolation level to use for this
    transaction. This can be one of 'Transaction::READ_UNCOMMITTED',
    'Transaction::READ_COMMITTED', 'Transaction::REPEATABLE_READ' and
    'Transaction::SERIALIZABLE' but also a string containing DBMS specific
    syntax to be used after 'SET TRANSACTION ISOLATION LEVEL'.


*yii/db/cubrid/Schema::insert*				public

 See |yii/db/Schema::insert|


*yii/db/cubrid/Schema::quoteValue*			public

 See |yii/db/Schema::quoteValue|


*yii/db/cubrid/Schema::quoteTableName*			public

 See |yii/db/Schema::quoteTableName|


*yii/db/cubrid/Schema::quoteColumnName*			public

 See |yii/db/Schema::quoteColumnName|


*yii/db/cubrid/Schema::quoteSimpleTableName*		public
>
 quoteSimpleTableName($name)
<
return (string) The properly quoted table name

 A simple table name has no schema prefix.

    [$name] (string) Table name


*yii/db/cubrid/Schema::quoteSimpleColumnName*		public
>
 quoteSimpleColumnName($name)
<
return (string) The properly quoted column name

 A simple column name has no prefix.

    [$name] (string) Column name


*yii/db/cubrid/Schema::getRawTableName*			public

 See |yii/db/Schema::getRawTableName|


*yii/db/cubrid/Schema::getColumnPhpType*			protected

 See |yii/db/Schema::getColumnPhpType|


*yii/db/cubrid/Schema::convertException*			public

 See |yii/db/Schema::convertException|


*yii/db/cubrid/Schema::isReadQuery*			public

 See |yii/db/Schema::isReadQuery|


*yii/db/cubrid/Schema::getCacheKey*			protected

 See |yii/db/Schema::getCacheKey|


*yii/db/cubrid/Schema::getCacheTag*			protected

 See |yii/db/Schema::getCacheTag|


*yii/db/cubrid/Schema::getTableMetadata*			protected

 See |yii/db/ConstraintFinderTrait::getTableMetadata|


*yii/db/cubrid/Schema::getSchemaMetadata*			protected

 See |yii/db/ConstraintFinderTrait::getSchemaMetadata|


*yii/db/cubrid/Schema::setTableMetadata*			protected

 See |yii/db/Schema::setTableMetadata|


*yii/db/cubrid/Schema::normalizePdoRowKeyCase*		protected

 See |yii/db/Schema::normalizePdoRowKeyCase|


*yii/db/cubrid/Schema::loadTablePrimaryKey*		protected
>
 loadTablePrimaryKey($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableForeignKeys*		protected
>
 loadTableForeignKeys($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableIndexes*			protected
>
 loadTableIndexes($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableUniques*			protected
>
 loadTableUniques($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableChecks*			protected
>
 loadTableChecks($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableDefaultValues*		protected
>
 loadTableDefaultValues($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::getTablePrimaryKey*		public

 See |yii/db/ConstraintFinderTrait::getTablePrimaryKey|


*yii/db/cubrid/Schema::getSchemaPrimaryKeys*		public

 See |yii/db/ConstraintFinderTrait::getSchemaPrimaryKeys|


*yii/db/cubrid/Schema::getTableForeignKeys*		public

 See |yii/db/ConstraintFinderTrait::getTableForeignKeys|


*yii/db/cubrid/Schema::getSchemaForeignKeys*		public

 See |yii/db/ConstraintFinderTrait::getSchemaForeignKeys|


*yii/db/cubrid/Schema::getTableIndexes*			public

 See |yii/db/ConstraintFinderTrait::getTableIndexes|


*yii/db/cubrid/Schema::getSchemaIndexes*			public

 See |yii/db/ConstraintFinderTrait::getSchemaIndexes|


*yii/db/cubrid/Schema::getTableUniques*			public

 See |yii/db/ConstraintFinderTrait::getTableUniques|


*yii/db/cubrid/Schema::getSchemaUniques*			public

 See |yii/db/ConstraintFinderTrait::getSchemaUniques|


*yii/db/cubrid/Schema::getTableChecks*			public

 See |yii/db/ConstraintFinderTrait::getTableChecks|


*yii/db/cubrid/Schema::getSchemaChecks*			public

 See |yii/db/ConstraintFinderTrait::getSchemaChecks|


*yii/db/cubrid/Schema::getTableDefaultValues*		public

 See |yii/db/ConstraintFinderTrait::getTableDefaultValues|


*yii/db/cubrid/Schema::getSchemaDefaultValues*		public

 See |yii/db/ConstraintFinderTrait::getSchemaDefaultValues|


*yii/db/cubrid/Schema::loadColumnSchema*			protected
>
 loadColumnSchema($info)
<
return (\yii\db\ColumnSchema) The column schema object

    [$info] (array) Column information



 vim:tw=78:ts=8:ft=help:norl:
