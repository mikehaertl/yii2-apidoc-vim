
*yii/db/cubrid/Schema*   >> |yii/db/Schema|
======================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/Schema::$db|
 |yii/db/Schema::$defaultSchema|
 |yii/db/Schema::$columnSchemaClass|
 |yii/db/Schema::$columnQuoteCharacter|
 |yii/db/Schema::$tableSchemas|
 |yii/db/Schema::$schemaNames|
 |yii/db/Schema::$tableNames|
 |yii/db/Schema::$queryBuilder|
 |yii/db/Schema::$lastInsertID|
 |yii/db/Schema::$serverVersion|
 |yii/db/ConstraintFinderTrait::$schemaPrimaryKeys|
 |yii/db/ConstraintFinderTrait::$schemaForeignKeys|
 |yii/db/ConstraintFinderTrait::$schemaIndexes|
 |yii/db/ConstraintFinderTrait::$schemaUniques|
 |yii/db/ConstraintFinderTrait::$schemaChecks|
 |yii/db/ConstraintFinderTrait::$schemaDefaultValues|


$exceptionMap				*yii/db/cubrid/Schema::$exceptionMap*

 (array) Map of DB errors and corresponding exceptions If left part is found
 in DB error message exception class from the right part is used.

$tableQuoteCharacter			*yii/db/cubrid/Schema::$tableQuoteCharacter*

 (string|string[]) 

 Character used to quote schema, table, etc. names. An array of 2 characters
 can be used in case starting and ending characters are different.



$typeMap				*yii/db/cubrid/Schema::$typeMap*

 (array) Mapping from physical column types (keys) to abstract column types
 (values) Please refer to [CUBRID
 manual](http://www.cubrid.org/manual/91/en/sql/datatype.html) for details on
 data types.

$transactionIsolationLevel		*yii/db/cubrid/Schema::$transactionIsolationLevel*

 (string) The transaction isolation level to use for this transaction. This
 can be one of 'Transaction::READ_UNCOMMITTED', 'Transaction::READ_COMMITTED',
 'Transaction::REPEATABLE_READ' and 'Transaction::SERIALIZABLE' but also a
 string containing DBMS specific syntax to be used after 'SET TRANSACTION
 ISOLATION LEVEL'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/db/Schema::resolveTableName|
 |yii/db/Schema::findSchemaNames|
 |yii/db/Schema::createColumnSchema|
 |yii/db/Schema::getTableSchema|
 |yii/db/Schema::getTableSchemas|
 |yii/db/Schema::getSchemaNames|
 |yii/db/Schema::getTableNames|
 |yii/db/Schema::getQueryBuilder|
 |yii/db/Schema::refresh|
 |yii/db/Schema::refreshTableSchema|
 |yii/db/Schema::findUniqueIndexes|
 |yii/db/Schema::getLastInsertID|
 |yii/db/Schema::supportsSavepoint|
 |yii/db/Schema::createSavepoint|
 |yii/db/Schema::rollBackSavepoint|
 |yii/db/Schema::insert|
 |yii/db/Schema::quoteValue|
 |yii/db/Schema::quoteTableName|
 |yii/db/Schema::getTableNameParts|
 |yii/db/Schema::quoteColumnName|
 |yii/db/Schema::quoteSimpleTableName|
 |yii/db/Schema::quoteSimpleColumnName|
 |yii/db/Schema::unquoteSimpleTableName|
 |yii/db/Schema::unquoteSimpleColumnName|
 |yii/db/Schema::getRawTableName|
 |yii/db/Schema::getColumnPhpType|
 |yii/db/Schema::convertException|
 |yii/db/Schema::isReadQuery|
 |yii/db/Schema::getServerVersion|
 |yii/db/Schema::getCacheKey|
 |yii/db/Schema::getCacheTag|
 |yii/db/ConstraintFinderTrait::getTableMetadata|
 |yii/db/ConstraintFinderTrait::getSchemaMetadata|
 |yii/db/Schema::setTableMetadata|
 |yii/db/Schema::normalizePdoRowKeyCase|
 |yii/db/ConstraintFinderTrait::getTablePrimaryKey|
 |yii/db/ConstraintFinderTrait::getSchemaPrimaryKeys|
 |yii/db/ConstraintFinderTrait::getTableForeignKeys|
 |yii/db/ConstraintFinderTrait::getSchemaForeignKeys|
 |yii/db/ConstraintFinderTrait::getTableIndexes|
 |yii/db/ConstraintFinderTrait::getSchemaIndexes|
 |yii/db/ConstraintFinderTrait::getTableUniques|
 |yii/db/ConstraintFinderTrait::getSchemaUniques|
 |yii/db/ConstraintFinderTrait::getTableChecks|
 |yii/db/ConstraintFinderTrait::getSchemaChecks|
 |yii/db/ConstraintFinderTrait::getTableDefaultValues|
 |yii/db/ConstraintFinderTrait::getSchemaDefaultValues|


*yii/db/cubrid/Schema::findTableNames*			protected
>
 findTableNames($schema='''')
<
return (array) All table names in the database. The names have NO schema name prefix.

 Returns all table names in the database.



 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception.



    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema.


*yii/db/cubrid/Schema::loadTableSchema*			protected
>
 loadTableSchema($name)
<
return (\yii\db\TableSchema|null) DBMS-dependent table metadata, 'null' if the table
does not exist.

 Loads the metadata for the specified table.







    [$name] (string) Table name


*yii/db/cubrid/Schema::getPdoType*			public
>
 getPdoType($data)
<
return (int) The PDO type

 Determines the PDO type for the given PHP data value.

    [$data] (mixed) The data whose PDO type is to be determined


*yii/db/cubrid/Schema::createQueryBuilder*		public
>
 createQueryBuilder()
<
return (\yii\db\cubrid\QueryBuilder) Query builder instance

 Creates a query builder for the CUBRID database.


*yii/db/cubrid/Schema::createColumnSchemaBuilder*		public
>
 createColumnSchemaBuilder($type, $length='null')
<
return (\yii\db\ColumnSchemaBuilder) Column schema builder instance

 Create a column schema builder instance giving the type and value precision.



 This method may be overridden by child classes to create a DBMS-specific
 column schema builder.



    [$type] (string) Type of the column. See 'ColumnSchemaBuilder::$type'.
    [$length] (int|string|array) Length or precision of the column. See
    'ColumnSchemaBuilder::$length'.


*yii/db/cubrid/Schema::releaseSavepoint*			public
>
 releaseSavepoint($name)
<
return (void)

 Releases an existing savepoint.







    [$name] (string) The savepoint name


*yii/db/cubrid/Schema::setTransactionIsolationLevel*	public
>
 setTransactionIsolationLevel($level)
<
return (void)

 Sets the isolation level of the current transaction.







    [$level] (string) The transaction isolation level to use for this
    transaction. This can be one of 'Transaction::READ_UNCOMMITTED',
    'Transaction::READ_COMMITTED', 'Transaction::REPEATABLE_READ' and
    'Transaction::SERIALIZABLE' but also a string containing DBMS specific
    syntax to be used after 'SET TRANSACTION ISOLATION LEVEL'.


*yii/db/cubrid/Schema::loadTablePrimaryKey*		protected
>
 loadTablePrimaryKey($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableForeignKeys*		protected
>
 loadTableForeignKeys($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableIndexes*			protected
>
 loadTableIndexes($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableUniques*			protected
>
 loadTableUniques($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableChecks*			protected
>
 loadTableChecks($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadTableDefaultValues*		protected
>
 loadTableDefaultValues($tableName)
<
return (void)

    [$tableName] () 


*yii/db/cubrid/Schema::loadColumnSchema*			protected
>
 loadColumnSchema($info)
<
return (\yii\db\ColumnSchema) The column schema object

 Loads the column information into a 'ColumnSchema' object.

    [$info] (array) Column information



 vim:tw=78:ts=8:ft=help:norl:
