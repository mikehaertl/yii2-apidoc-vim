
*yii/web/AssetManager*   >> |yii/base/Component|
======================

DESCRIPTION
------------------------------------------------------------------------------

 AssetManager is configured as an application component in
 '\yii\web\Application' by default. You can access that instance via
 'Yii::$app->assetManager'.

 You can modify its configuration by adding an array to your application
 config under 'components' as shown in the following example:

   'assetManager' => [
       'bundles' => [
           // you can override AssetBundle configs here
       ],
   ]

 For more details and usage information on AssetManager, see the [guide
 article on assets](guide:structure-assets).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|


$bundles				*yii/web/AssetManager::$bundles*

 (array|bool) List of asset bundle configurations. This property is provided
 to customize asset bundles. When a bundle is being loaded by 'getBundle()',
 if it has a corresponding configuration specified here, the configuration
 will be applied to the bundle.

 The array keys are the asset bundle names, which typically are asset bundle
 class names without leading backslash. The array values are the corresponding
 configurations. If a value is false, it means the corresponding asset bundle
 is disabled and 'getBundle()' should return null.

 If this property is false, it means the whole asset bundle feature is
 disabled and 'getBundle()' will always return null.

 The following example shows how to disable the bootstrap css file used by
 Bootstrap widgets (because you want to use your own styles):

   [
       'yii\bootstrap\BootstrapAsset' => [
           'css' => [],
       ],
   ]



$basePath				*yii/web/AssetManager::$basePath*

 (string) The root directory storing the published asset files.

$baseUrl				*yii/web/AssetManager::$baseUrl*

 (string) The base URL through which the published asset files can be
 accessed.

$assetMap				*yii/web/AssetManager::$assetMap*

 (array) Mapping from source asset files (keys) to target asset files
 (values).

 This property is provided to support fixing incorrect asset file paths in
 some asset bundles. When an asset bundle is registered with a view, each
 relative asset file in its 'AssetBundle::css|css' and 'AssetBundle::js|js'
 arrays will be examined against this map. If any of the keys is found to be
 the last part of an asset file (which is prefixed with
 'AssetBundle::sourcePath' if available), the corresponding value will replace
 the asset and be registered with the view. For example, an asset file
 'my/path/to/jquery.js' matches a key 'jquery.js'.

 Note that the target asset files should be absolute URLs, domain relative
 URLs (starting from '/') or paths relative to 'baseUrl' and 'basePath'.

 In the following example, any assets ending with 'jquery.min.js' will be
 replaced with 'jquery/dist/jquery.js' which is relative to 'baseUrl' and
 'basePath'.

   [
       'jquery.min.js' => 'jquery/dist/jquery.js',
   ]

 You may also use aliases while specifying map value, for example:

   [
       'jquery.min.js' => '@web/js/jquery/jquery.js',
   ]



$linkAssets				*yii/web/AssetManager::$linkAssets*

 (bool) Whether to use symbolic link to publish asset files. Defaults to
 false, meaning asset files are copied to 'basePath'. Using symbolic links has
 the benefit that the published assets will always be consistent with the
 source assets and there is no copy operation required. This is especially
 useful during development.

 However, there are special requirements for hosting environments in order to
 use symbolic links. In particular, symbolic links are supported only on
 Linux/Unix, and Windows Vista/2008 or greater.

 Moreover, some Web servers need to be properly configured so that the linked
 assets are accessible to Web users. For example, for Apache Web server, the
 following configuration directive should be added for the Web folder:

 '''apache Options FollowSymLinks '''

$fileMode				*yii/web/AssetManager::$fileMode*

 (int) The permission to be set for newly published asset files. This value
 will be used by PHP chmod() function. No umask will be applied. If not set,
 the permission will be determined by the current environment.

$dirMode				*yii/web/AssetManager::$dirMode*

 (int) The permission to be set for newly generated asset directories. This
 value will be used by PHP chmod() function. No umask will be applied.
 Defaults to 0775, meaning the directory is read-writable by owner and group,
 but read-only for other users.

$beforeCopy				*yii/web/AssetManager::$beforeCopy*

 (callback) A PHP callback that is called before copying each sub-directory or
 file. This option is used only when publishing a directory. If the callback
 returns false, the copy operation for the sub-directory or file will be
 cancelled.

 The signature of the callback should be: 'function ($from, $to)', where
 '$from' is the sub-directory or file to be copied from, while '$to' is the
 copy target.

 This is passed as a parameter 'beforeCopy' to
 '\yii\helpers\FileHelper::copyDirectory()'.

$afterCopy				*yii/web/AssetManager::$afterCopy*

 (callback) A PHP callback that is called after a sub-directory or file is
 successfully copied. This option is used only when publishing a directory.
 The signature of the callback is the same as for 'beforeCopy'. This is passed
 as a parameter 'afterCopy' to '\yii\helpers\FileHelper::copyDirectory()'.

$forceCopy				*yii/web/AssetManager::$forceCopy*

 (bool) Whether the directory being published should be copied even if it is
 found in the target directory. This option is used only when publishing a
 directory. You may want to set this to be 'true' during the development stage
 to make sure the published directory is always up-to-date. Do not set this to
 true on production servers as it will significantly degrade the performance.

$appendTimestamp			*yii/web/AssetManager::$appendTimestamp*

 (bool) Whether to append a timestamp to the URL of every published asset.
 When this is true, the URL of a published asset may look like
 '/path/to/asset?v=timestamp', where 'timestamp' is the last modification time
 of the published asset file. You normally would want to set this property to
 true when you have enabled HTTP caching for assets, because it allows you to
 bust caching when the assets are updated.

$hashCallback				*yii/web/AssetManager::$hashCallback*

 (callable) A callback that will be called to produce hash for asset directory
 generation. The signature of the callback should be as follows:

 ''' function ($path) '''

 where '$path' is the asset path. Note that the '$path' can be either
 directory where the asset files reside or a single file. For a CSS file that
 uses relative path in 'url()', the hash implementation should use the
 directory path of the file instead of the file path to include the relative
 asset files in the copying.

 If this is not set, the asset manager will use the default CRC32 and
 filemtime in the 'hash' method.

 Example of an implementation using MD4 hash:

   function ($path) {
       return hash('md4', $path);
   }



$converter				*yii/web/AssetManager::$converter*

 (\yii\web\AssetConverterInterface) The asset converter.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/web/AssetManager::init*				public
>
 init()
<
return (void)

 Initializes the component.


*yii/web/AssetManager::getBundle*				public
>
 getBundle($name, $publish='true')
<
return (\yii\web\AssetBundle) The asset bundle instance

 Returns the named asset bundle.

 This method will first look for the bundle in 'bundles'. If not found, it
 will treat '$name' as the class of the asset bundle and create a new instance
 of it.

    [$name] (string) The class name of the asset bundle (without the leading
    backslash)
    [$publish] (bool) Whether to publish the asset files in the asset bundle
    before it is returned. If you set this false, you must manually call
    'AssetBundle::publish()' to publish the asset files.


*yii/web/AssetManager::loadBundle*			protected
>
 loadBundle($name, $config='[]', $publish='true')
<
return (\yii\web\AssetBundle) 

 Loads asset bundle class by name.

    [$name] (string) Bundle name
    [$config] (array) Bundle object configuration
    [$publish] (bool) If bundle should be published


*yii/web/AssetManager::loadDummyBundle*			protected
>
 loadDummyBundle($name)
<
return (\yii\web\AssetBundle) 

 Loads dummy bundle by name.

    [$name] (string) 


*yii/web/AssetManager::getAssetUrl*			public
>
 getAssetUrl($bundle, $asset)
<
return (string) The actual URL for the specified asset.

 Returns the actual URL for the specified asset.

 The actual URL is obtained by prepending either 'AssetBundle::$baseUrl' or
 'AssetManager::$baseUrl' to the given asset path.

    [$bundle] (\yii\web\AssetBundle) The asset bundle which the asset file
    belongs to
    [$asset] (string) The asset path. This should be one of the assets listed
    in 'AssetBundle::$js' or 'AssetBundle::$css'.


*yii/web/AssetManager::getAssetPath*			public
>
 getAssetPath($bundle, $asset)
<
return (string|false) The actual file path, or 'false' if the asset is specified as
an absolute URL

 Returns the actual file path for the specified asset.

    [$bundle] (\yii\web\AssetBundle) The asset bundle which the asset file
    belongs to
    [$asset] (string) The asset path. This should be one of the assets listed
    in 'AssetBundle::$js' or 'AssetBundle::$css'.


*yii/web/AssetManager::resolveAsset*			protected
>
 resolveAsset($bundle, $asset)
<
return (string|bool) 

    [$bundle] (\yii\web\AssetBundle) 
    [$asset] (string) 


*yii/web/AssetManager::getConverter*			public
>
 getConverter()
<
return (\yii\web\AssetConverterInterface) The asset converter.

 Returns the asset converter.


*yii/web/AssetManager::setConverter*			public
>
 setConverter($value)
<
return (void)

 Sets the asset converter.

    [$value] (array|\yii\web\AssetConverterInterface) The asset converter.
    This can be either an object implementing the 'AssetConverterInterface',
    or a configuration array that can be used to create the asset converter
    object.


*yii/web/AssetManager::publish*				public
>
 publish($path, $options='[]')
<
return (array) The path (directory or file path) and the URL that the asset is
published as.

 Publishes a file or a directory.

 This method will copy the specified file or directory to 'basePath' so that
 it can be accessed via the Web server.

 If the asset is a file, its file modification time will be checked to avoid
 unnecessary file copying.

 If the asset is a directory, all files and subdirectories under it will be
 published recursively. Note, in case $forceCopy is false the method only
 checks the existence of the target directory to avoid repetitive copying
 (which is very expensive).

 By default, when publishing a directory, subdirectories and files whose name
 starts with a dot "." will NOT be published. If you want to change this
 behavior, you may specify the "beforeCopy" option as explained in the
 '$options' parameter.

 Note: On rare scenario, a race condition can develop that will lead to a
 one-time-manifestation of a non-critical problem in the creation of the
 directory that holds the published assets. This problem can be avoided
 altogether by 'requesting' in advance all the resources that are supposed to
 trigger a 'publish()' call, and doing that in the application deployment
 phase, before system goes live. See more in the following discussion:
 http://code.google.com/p/yii/issues/detail?id=2579

    [$path] (string) The asset (file or directory) to be published
    [$options] (array) The options to be applied when publishing a directory.
    The following options are supported:


      - only: array, list of patterns that the file paths should match if
      they want to be copied. 
      - except: array, list of patterns that the files or directories
      should match if they want to be excluded from being copied. 
      - caseSensitive: boolean, whether patterns specified at "only" or
      "except" should be case sensitive. Defaults to true. 
      - beforeCopy: callback, a PHP callback that is called before copying
      each sub-directory or file.   This overrides 'beforeCopy' if set. 
      - afterCopy: callback, a PHP callback that is called after a
      sub-directory or file is successfully copied.   This overrides
    'afterCopy' if set. 
      - forceCopy: boolean, whether the directory being published should
      be copied even if   it is found in the target directory. This option is
    used only when publishing a directory.   This overrides 'forceCopy' if
    set.


*yii/web/AssetManager::publishFile*			protected
>
 publishFile($src)
<
return (string[]) The path and the URL that the asset is published as.

 Publishes a file.

    [$src] (string) The asset file to be published


*yii/web/AssetManager::publishDirectory*			protected
>
 publishDirectory($src, $options)
<
return (string[]) The path directory and the URL that the asset is published as.

 Publishes a directory.

    [$src] (string) The asset directory to be published
    [$options] (array) The options to be applied when publishing a directory.
    The following options are supported:


      - only: array, list of patterns that the file paths should match if
      they want to be copied. 
      - except: array, list of patterns that the files or directories
      should match if they want to be excluded from being copied. 
      - caseSensitive: boolean, whether patterns specified at "only" or
      "except" should be case sensitive. Defaults to true. 
      - beforeCopy: callback, a PHP callback that is called before copying
      each sub-directory or file.   This overrides 'beforeCopy' if set. 
      - afterCopy: callback, a PHP callback that is called after a
      sub-directory or file is successfully copied.   This overrides
    'afterCopy' if set. 
      - forceCopy: boolean, whether the directory being published should
      be copied even if   it is found in the target directory. This option is
    used only when publishing a directory.   This overrides 'forceCopy' if
    set.


*yii/web/AssetManager::getPublishedPath*			public
>
 getPublishedPath($path)
<
return (string|false) String the published file path. False if the file or directory
does not exist

 Returns the published path of a file path.

 This method does not perform any publishing. It merely tells you if the file
 or directory is published, where it will go.

    [$path] (string) Directory or file path being published


*yii/web/AssetManager::getPublishedUrl*			public
>
 getPublishedUrl($path)
<
return (string|false) String the published URL for the file or directory. False if
the file or directory does not exist.

 Returns the URL of a published file path.

 This method does not perform any publishing. It merely tells you if the file
 path is published, what the URL will be to access it.

    [$path] (string) Directory or file path being published


*yii/web/AssetManager::hash*				protected
>
 hash($path)
<
return (string) Hashed string.

 Generate a CRC32 hash for the directory path. Collisions are higher than MD5
 but generates a much smaller hash string.

    [$path] (string) String to be hashed.



 vim:tw=78:ts=8:ft=help:norl:
