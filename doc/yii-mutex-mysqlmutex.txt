
*yii/mutex/MysqlMutex*   >> |yii/mutex/DbMutex|
======================

DESCRIPTION
------------------------------------------------------------------------------

 Application configuration example:

 ''' [     'components' => [         'db' => [             'class' =>
 'yii\db\Connection',             'dsn' => 'mysql:host=127.0.0.1;dbname=demo',
         ]         'mutex' => [             'class' => 'yii\mutex\MysqlMutex',
         ],     ], ] '''



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/mutex/Mutex::acquire|
 |yii/mutex/Mutex::release|


*yii/mutex/MysqlMutex::init*				public
>
 init()
<
return (void)

 Initializes MySQL specific mutex component implementation.


*yii/mutex/MysqlMutex::acquireLock*			protected
>
 acquireLock($name, $timeout=0)
<
return (bool) Acquiring result.

 Acquires lock by given name.

    [$name] (string) Of the lock to be acquired.
    [$timeout] (int) Time (in seconds) to wait for lock to become released.


*yii/mutex/MysqlMutex::releaseLock*			protected
>
 releaseLock($name)
<
return (bool) Release result.

 Releases lock by given name.

    [$name] (string) Of the lock to be released.


*yii/mutex/MysqlMutex::hashLockName*			protected
>
 hashLockName($name)
<
return (string) 

 Generate hash for lock name to avoid exceeding lock name length limit.

    [$name] (string) 



 vim:tw=78:ts=8:ft=help:norl:
