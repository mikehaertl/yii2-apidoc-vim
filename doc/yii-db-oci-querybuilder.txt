
*yii/db/oci/QueryBuilder*   >> |yii/db/QueryBuilder|
=========================


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/oci/QueryBuilder::$db*

 See |yii/db/QueryBuilder::$db|

$separator				*yii/db/oci/QueryBuilder::$separator*

 See |yii/db/QueryBuilder::$separator|

$typeMap				*yii/db/oci/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).

$conditionBuilders			*yii/db/oci/QueryBuilder::$conditionBuilders*

 See |yii/db/QueryBuilder::$conditionBuilders|

$likeEscapingReplacements		*yii/db/oci/QueryBuilder::$likeEscapingReplacements*

 (array) 

 Map of chars to their replacements in LIKE conditions. By default it's
 configured to escape '%', '_' and '\' with '\'.



$likeEscapeCharacter			*yii/db/oci/QueryBuilder::$likeEscapeCharacter*

 (string|null) 

 Character used to escape special characters in LIKE conditions. By default
 it's assumed to be '\'.





METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/oci/QueryBuilder::className*			public

 See |yii/base/BaseObject::className|


*yii/db/oci/QueryBuilder::__construct*			public

 See |yii/db/QueryBuilder::__construct|


*yii/db/oci/QueryBuilder::init*				public

 See |yii/base/BaseObject::init|


*yii/db/oci/QueryBuilder::__get*				public

 See |yii/base/BaseObject::__get|


*yii/db/oci/QueryBuilder::__set*				public

 See |yii/base/BaseObject::__set|


*yii/db/oci/QueryBuilder::__isset*			public

 See |yii/base/BaseObject::__isset|


*yii/db/oci/QueryBuilder::__unset*			public

 See |yii/base/BaseObject::__unset|


*yii/db/oci/QueryBuilder::__call*				public

 See |yii/base/BaseObject::__call|


*yii/db/oci/QueryBuilder::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/db/oci/QueryBuilder::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/db/oci/QueryBuilder::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/db/oci/QueryBuilder::hasMethod*			public

 See |yii/base/BaseObject::hasMethod|


*yii/db/oci/QueryBuilder::build*				public

 See |yii/db/QueryBuilder::build|


*yii/db/oci/QueryBuilder::insert*				public
>
 insert($table, $columns, $params)
<
return (string) The INSERT SQL



 For example,

   $sql = $queryBuilder->insert('user', [
       'name' => 'Sam',
       'age' => 30,
   ], $params);

 The method will properly escape the table and column names.



    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array|\yii\db\Query) The column data (name => value) to be
    inserted into the table or instance of 'yii\db\Query|Query' to perform
    INSERT INTO ... SELECT SQL statement. Passing of 'yii\db\Query|Query' is
    available since version 2.0.11.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the DB command later.


*yii/db/oci/QueryBuilder::prepareInsertSelectSubQuery*	protected

 See |yii/db/QueryBuilder::prepareInsertSelectSubQuery|


*yii/db/oci/QueryBuilder::batchInsert*			public
>
 batchInsert($table, $columns, $rows)
<
return (string) The batch INSERT SQL statement

 For example,

   $sql = $queryBuilder->batchInsert('user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ]);

 Note that the values in each row must match the corresponding column names.

    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column names
    [$rows] (array|\Generator) The rows to be batch inserted into the table


*yii/db/oci/QueryBuilder::update*				public

 See |yii/db/QueryBuilder::update|


*yii/db/oci/QueryBuilder::delete*				public

 See |yii/db/QueryBuilder::delete|


*yii/db/oci/QueryBuilder::createTable*			public

 See |yii/db/QueryBuilder::createTable|


*yii/db/oci/QueryBuilder::renameTable*			public
>
 renameTable($table, $newName)
<
return (string) The SQL statement for renaming a DB table.

    [$table] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/oci/QueryBuilder::dropTable*			public

 See |yii/db/QueryBuilder::dropTable|


*yii/db/oci/QueryBuilder::addPrimaryKey*			public

 See |yii/db/QueryBuilder::addPrimaryKey|


*yii/db/oci/QueryBuilder::dropPrimaryKey*			public

 See |yii/db/QueryBuilder::dropPrimaryKey|


*yii/db/oci/QueryBuilder::truncateTable*			public

 See |yii/db/QueryBuilder::truncateTable|


*yii/db/oci/QueryBuilder::addColumn*			public

 See |yii/db/QueryBuilder::addColumn|


*yii/db/oci/QueryBuilder::dropColumn*			public

 See |yii/db/QueryBuilder::dropColumn|


*yii/db/oci/QueryBuilder::renameColumn*			public

 See |yii/db/QueryBuilder::renameColumn|


*yii/db/oci/QueryBuilder::alterColumn*			public
>
 alterColumn($table, $column, $type)
<
return (string) The SQL statement for changing the definition of a column.

    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The new column type. The 'getColumnType' method will be
    invoked to convert abstract column type (if any) into the physical one.
    Anything that is not recognized as abstract type will be kept in the
    generated SQL. For example, 'string' will be turned into 'varchar(255)',
    while 'string not null' will become 'varchar(255) not null'.


*yii/db/oci/QueryBuilder::addForeignKey*			public
>
 addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete='null', $update='null')
<
return (string) The SQL statement for adding a foreign key constraint to an existing
table.



 The method will properly quote the table and column names.



    [$name] (string) The name of the foreign key constraint.
    [$table] (string) The table that the foreign key constraint will be added
    to.
    [$columns] (string|array) The name of the column to that the constraint
    will be added on. If there are multiple columns, separate them with commas
    or use an array to represent them.
    [$refTable] (string) The table that the foreign key references to.
    [$refColumns] (string|array) The name of the column that the foreign key
    references to. If there are multiple columns, separate them with commas or
    use an array to represent them.
    [$delete] (string) The ON DELETE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
    [$update] (string) The ON UPDATE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL


*yii/db/oci/QueryBuilder::dropForeignKey*			public

 See |yii/db/QueryBuilder::dropForeignKey|


*yii/db/oci/QueryBuilder::createIndex*			public

 See |yii/db/QueryBuilder::createIndex|


*yii/db/oci/QueryBuilder::dropIndex*			public
>
 dropIndex($name, $table)
<
return (string) The SQL statement for dropping an index.

    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/db/oci/QueryBuilder::addUnique*			public

 See |yii/db/QueryBuilder::addUnique|


*yii/db/oci/QueryBuilder::dropUnique*			public

 See |yii/db/QueryBuilder::dropUnique|


*yii/db/oci/QueryBuilder::addCheck*			public

 See |yii/db/QueryBuilder::addCheck|


*yii/db/oci/QueryBuilder::dropCheck*			public

 See |yii/db/QueryBuilder::dropCheck|


*yii/db/oci/QueryBuilder::addDefaultValue*		public

 See |yii/db/QueryBuilder::addDefaultValue|


*yii/db/oci/QueryBuilder::dropDefaultValue*		public

 See |yii/db/QueryBuilder::dropDefaultValue|


*yii/db/oci/QueryBuilder::resetSequence*			public
>
 resetSequence($table, $value='null')
<
return (string) The SQL statement for resetting sequence



 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.



    [$table] (string) The name of the table whose primary key sequence will be
    reset
    [$value] (array|string) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/oci/QueryBuilder::checkIntegrity*			public

 See |yii/db/QueryBuilder::checkIntegrity|


*yii/db/oci/QueryBuilder::addCommentOnColumn*		public

 See |yii/db/QueryBuilder::addCommentOnColumn|


*yii/db/oci/QueryBuilder::addCommentOnTable*		public

 See |yii/db/QueryBuilder::addCommentOnTable|


*yii/db/oci/QueryBuilder::dropCommentFromColumn*		public
>
 dropCommentFromColumn($table, $column)
<
return (string) The SQL statement for adding comment on column







    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.
    [$column] (string) The name of the column to be commented. The column name
    will be properly quoted by the method.


*yii/db/oci/QueryBuilder::dropCommentFromTable*		public
>
 dropCommentFromTable($table)
<
return (string) The SQL statement for adding comment on column







    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.


*yii/db/oci/QueryBuilder::getColumnType*			public

 See |yii/db/QueryBuilder::getColumnType|


*yii/db/oci/QueryBuilder::buildSelect*			public

 See |yii/db/QueryBuilder::buildSelect|


*yii/db/oci/QueryBuilder::buildFrom*			public

 See |yii/db/QueryBuilder::buildFrom|


*yii/db/oci/QueryBuilder::buildJoin*			public

 See |yii/db/QueryBuilder::buildJoin|


*yii/db/oci/QueryBuilder::buildWhere*			public

 See |yii/db/QueryBuilder::buildWhere|


*yii/db/oci/QueryBuilder::buildGroupBy*			public

 See |yii/db/QueryBuilder::buildGroupBy|


*yii/db/oci/QueryBuilder::buildHaving*			public

 See |yii/db/QueryBuilder::buildHaving|


*yii/db/oci/QueryBuilder::buildOrderByAndLimit*		public
>
 buildOrderByAndLimit($sql, $orderBy, $limit, $offset)
<
return (string) The SQL completed with ORDER BY/LIMIT/OFFSET (if any)







    [$sql] (string) The existing SQL (without ORDER BY/LIMIT/OFFSET)
    [$orderBy] (array) The order by columns. See 'Query::orderBy' for more
    details on how to specify this parameter.
    [$limit] (int) The limit number. See 'Query::limit' for more details.
    [$offset] (int) The offset number. See 'Query::offset' for more details.


*yii/db/oci/QueryBuilder::buildOrderBy*			public

 See |yii/db/QueryBuilder::buildOrderBy|


*yii/db/oci/QueryBuilder::buildLimit*			public

 See |yii/db/QueryBuilder::buildLimit|


*yii/db/oci/QueryBuilder::hasLimit*			protected

 See |yii/db/QueryBuilder::hasLimit|


*yii/db/oci/QueryBuilder::hasOffset*			protected

 See |yii/db/QueryBuilder::hasOffset|


*yii/db/oci/QueryBuilder::buildUnion*			public

 See |yii/db/QueryBuilder::buildUnion|


*yii/db/oci/QueryBuilder::buildColumns*			public

 See |yii/db/QueryBuilder::buildColumns|


*yii/db/oci/QueryBuilder::buildCondition*			public

 See |yii/db/QueryBuilder::buildCondition|


*yii/db/oci/QueryBuilder::buildHashCondition*		public

 See |yii/db/QueryBuilder::buildHashCondition|


*yii/db/oci/QueryBuilder::buildAndCondition*		public

 See |yii/db/QueryBuilder::buildAndCondition|


*yii/db/oci/QueryBuilder::buildNotCondition*		public

 See |yii/db/QueryBuilder::buildNotCondition|


*yii/db/oci/QueryBuilder::buildBetweenCondition*		public

 See |yii/db/QueryBuilder::buildBetweenCondition|


*yii/db/oci/QueryBuilder::buildInCondition*		public
>
 buildInCondition($operator, $operands, $params)
<
return (string) The generated SQL expression







    [$operator] (string) The operator to use (e.g. 'IN' or 'NOT IN')
    [$operands] (array) The first operand is the column name. If it is an
    array a composite IN condition will be generated. The second operand is an
    array of values that column value should be among. If it is an empty array
    the generated expression will be a 'false' value if operator is 'IN' and
    empty if operator is 'NOT IN'.
    [$params] (array) The binding parameters to be populated


*yii/db/oci/QueryBuilder::buildSubqueryInCondition*	protected

 See |yii/db/QueryBuilder::buildSubqueryInCondition|


*yii/db/oci/QueryBuilder::buildCompositeInCondition*	protected

 See |yii/db/QueryBuilder::buildCompositeInCondition|


*yii/db/oci/QueryBuilder::buildLikeCondition*		public
>
 buildLikeCondition($operator, $operands, $params)
<
return (string) The generated SQL expression







    [$operator] (string) The operator to use (e.g. 'LIKE', 'NOT LIKE', 'OR
    LIKE' or 'OR NOT LIKE')
    [$operands] (array) An array of two or three operands


      - The first operand is the column name. 
      - The second operand is a single value or an array of values that
      column value   should be compared with. If it is an empty array the
    generated expression will   be a 'false' value if operator is 'LIKE' or
    'OR LIKE', and empty if operator   is 'NOT LIKE' or 'OR NOT LIKE'. 
      - An optional third operand can also be provided to specify how to
      escape special characters   in the value(s). The operand should be an
    array of mappings from the special characters to their   escaped
    counterparts. If this operand is not provided, a default escape mapping
    will be used.   You may use 'false' or an empty array to indicate the
    values are already escaped and no escape   should be applied. Note that
    when using an escape mapping (or the third operand is not provided),   the
    values will be automatically enclosed within a pair of percentage
    characters.
    [$params] (array) The binding parameters to be populated


*yii/db/oci/QueryBuilder::buildExistsCondition*		public

 See |yii/db/QueryBuilder::buildExistsCondition|


*yii/db/oci/QueryBuilder::buildSimpleCondition*		public

 See |yii/db/QueryBuilder::buildSimpleCondition|


*yii/db/oci/QueryBuilder::selectExists*			public
>
 selectExists($rawSql)
<
return (string) The SELECT EXISTS() SQL statement.







    [$rawSql] (string) The subquery in a raw form to select from.


*yii/db/oci/QueryBuilder::splitInCondition*		protected
>
 splitInCondition($operator, $operands, $params)
<
return (null|string) Null when split is not required. Otherwise 
  - built SQL condition.

 This method splits long 'IN' condition into series of smaller ones.

    [$operator] (string) 
    [$operands] (array) 
    [$params] (array) 



 vim:tw=78:ts=8:ft=help:norl:
