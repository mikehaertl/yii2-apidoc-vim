
*yii/db/oci/QueryBuilder*   >> |yii/db/QueryBuilder|
=========================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/QueryBuilder::$db|
 |yii/db/QueryBuilder::$separator|
 |yii/db/QueryBuilder::$conditionBuilders|
 |yii/db/QueryBuilder::$conditionClasses|
 |yii/db/QueryBuilder::$expressionBuilders|


$typeMap				*yii/db/oci/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/db/QueryBuilder::__construct|
 |yii/db/QueryBuilder::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/db/QueryBuilder::defaultConditionClasses|
 |yii/db/QueryBuilder::setExpressionBuilders|
 |yii/db/QueryBuilder::setConditionClasses|
 |yii/db/QueryBuilder::build|
 |yii/db/QueryBuilder::buildExpression|
 |yii/db/QueryBuilder::getExpressionBuilder|
 |yii/db/QueryBuilder::insert|
 |yii/db/QueryBuilder::prepareInsertSelectSubQuery|
 |yii/db/QueryBuilder::prepareUpsertColumns|
 |yii/db/QueryBuilder::update|
 |yii/db/QueryBuilder::prepareUpdateSets|
 |yii/db/QueryBuilder::delete|
 |yii/db/QueryBuilder::createTable|
 |yii/db/QueryBuilder::dropTable|
 |yii/db/QueryBuilder::addPrimaryKey|
 |yii/db/QueryBuilder::dropPrimaryKey|
 |yii/db/QueryBuilder::truncateTable|
 |yii/db/QueryBuilder::addColumn|
 |yii/db/QueryBuilder::dropColumn|
 |yii/db/QueryBuilder::renameColumn|
 |yii/db/QueryBuilder::dropForeignKey|
 |yii/db/QueryBuilder::createIndex|
 |yii/db/QueryBuilder::addUnique|
 |yii/db/QueryBuilder::dropUnique|
 |yii/db/QueryBuilder::addCheck|
 |yii/db/QueryBuilder::dropCheck|
 |yii/db/QueryBuilder::addDefaultValue|
 |yii/db/QueryBuilder::dropDefaultValue|
 |yii/db/QueryBuilder::resetSequence|
 |yii/db/QueryBuilder::checkIntegrity|
 |yii/db/QueryBuilder::addCommentOnColumn|
 |yii/db/QueryBuilder::addCommentOnTable|
 |yii/db/QueryBuilder::createView|
 |yii/db/QueryBuilder::dropView|
 |yii/db/QueryBuilder::getColumnType|
 |yii/db/QueryBuilder::buildSelect|
 |yii/db/QueryBuilder::buildFrom|
 |yii/db/QueryBuilder::buildJoin|
 |yii/db/QueryBuilder::buildWhere|
 |yii/db/QueryBuilder::buildGroupBy|
 |yii/db/QueryBuilder::buildHaving|
 |yii/db/QueryBuilder::buildOrderBy|
 |yii/db/QueryBuilder::buildLimit|
 |yii/db/QueryBuilder::hasLimit|
 |yii/db/QueryBuilder::hasOffset|
 |yii/db/QueryBuilder::buildUnion|
 |yii/db/QueryBuilder::buildColumns|
 |yii/db/QueryBuilder::buildCondition|
 |yii/db/QueryBuilder::createConditionFromArray|
 |yii/db/QueryBuilder::buildHashCondition|
 |yii/db/QueryBuilder::buildAndCondition|
 |yii/db/QueryBuilder::buildNotCondition|
 |yii/db/QueryBuilder::buildBetweenCondition|
 |yii/db/QueryBuilder::buildInCondition|
 |yii/db/QueryBuilder::buildLikeCondition|
 |yii/db/QueryBuilder::buildExistsCondition|
 |yii/db/QueryBuilder::buildSimpleCondition|
 |yii/db/QueryBuilder::bindParam|


*yii/db/oci/QueryBuilder::defaultExpressionBuilders*	protected
>
 defaultExpressionBuilders()
<
return (array) 

 Contains array of default expression builders. Extend this method and
 override it, if you want to change default expression builders for this query
 builder. See 'expressionBuilders' docs for details.








*yii/db/oci/QueryBuilder::prepareInsertValues*		protected
>
 prepareInsertValues($table, $columns, $params='[]')
<
return (array) Array of column names, placeholders, values and params.

 Prepares a 'VALUES' part for an 'INSERT' SQL statement.







    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array|\yii\db\Query) The column data (name => value) to be
    inserted into the table or instance of 'yii\db\Query|Query' to perform
    INSERT INTO ... SELECT SQL statement.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the DB command later.


*yii/db/oci/QueryBuilder::batchInsert*			public
>
 batchInsert($table, $columns, $rows, $params='[]')
<
return (string) The batch INSERT SQL statement

 Generates a batch INSERT SQL statement.

 For example,

   $sql = $queryBuilder->batchInsert('user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ]);

 Note that the values in each row must match the corresponding column names.

    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column names
    [$rows] (array|\Generator) The rows to be batch inserted into the table
    [$params] () 


*yii/db/oci/QueryBuilder::upsert*				public
>
 upsert($table, $insertColumns, $updateColumns, $params)
<
return (string) The resulting SQL.

 Creates an SQL statement to insert rows into a database table if they do not
 already exist (matching unique constraints), or update them if they do.



 For example,

   $sql = $queryBuilder->upsert('pages', [
       'name' => 'Front page',
       'url' => 'http://example.com/', // url is unique
       'visits' => 0,
   ], [
       'visits' => new \yii\db\Expression('visits + 1'),
   ], $params);

 The method will properly escape the table and column names.



    [$table] (string) The table that new rows will be inserted into/updated
    in.
    [$insertColumns] (array|\yii\db\Query) The column data (name => value) to
    be inserted into the table or instance of 'Query' to perform 'INSERT INTO
    ... SELECT' SQL statement.
    [$updateColumns] (array|bool) The column data (name => value) to be
    updated if they already exist. If 'true' is passed, the column data will
    be updated to match the insert column data. If 'false' is passed, no
    update will be performed if the column data already exists.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the DB command later.


*yii/db/oci/QueryBuilder::renameTable*			public
>
 renameTable($table, $newName)
<
return (string) The SQL statement for renaming a DB table.

 Builds a SQL statement for renaming a DB table.

    [$table] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/oci/QueryBuilder::alterColumn*			public
>
 alterColumn($table, $column, $type)
<
return (string) The SQL statement for changing the definition of a column.

 Builds a SQL statement for changing the definition of a column.

    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The new column type. The 'getColumnType' method will be
    invoked to convert abstract column type (if any) into the physical one.
    Anything that is not recognized as abstract type will be kept in the
    generated SQL. For example, 'string' will be turned into 'varchar(255)',
    while 'string not null' will become 'varchar(255) not null'.


*yii/db/oci/QueryBuilder::addForeignKey*			public
>
 addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete='null', $update='null')
<
return (string) The SQL statement for adding a foreign key constraint to an existing
table.

 Builds a SQL statement for adding a foreign key constraint to an existing
 table.



 The method will properly quote the table and column names.



    [$name] (string) The name of the foreign key constraint.
    [$table] (string) The table that the foreign key constraint will be added
    to.
    [$columns] (string|array) The name of the column to that the constraint
    will be added on. If there are multiple columns, separate them with commas
    or use an array to represent them.
    [$refTable] (string) The table that the foreign key references to.
    [$refColumns] (string|array) The name of the column that the foreign key
    references to. If there are multiple columns, separate them with commas or
    use an array to represent them.
    [$delete] (string) The ON DELETE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
    [$update] (string) The ON UPDATE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL


*yii/db/oci/QueryBuilder::dropIndex*			public
>
 dropIndex($name, $table)
<
return (string) The SQL statement for dropping an index.

 Builds a SQL statement for dropping an index.

    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/db/oci/QueryBuilder::executeResetSequence*		public
>
 executeResetSequence($table, $value='null')
<
return (void)

 Execute a SQL statement for resetting the sequence value of a table's primary
 key.



 Reason for execute is that some databases (Oracle) need several queries to do
 so. The sequence is reset such that the primary key of the next new row
 inserted will have the specified value or the maximum existing value +1.



    [$table] (string) The name of the table whose primary key sequence is
    reset
    [$value] (array|string) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have the
    maximum existing value +1.


*yii/db/oci/QueryBuilder::dropCommentFromColumn*		public
>
 dropCommentFromColumn($table, $column)
<
return (string) The SQL statement for adding comment on column

 Builds a SQL command for adding comment to column.







    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.
    [$column] (string) The name of the column to be commented. The column name
    will be properly quoted by the method.


*yii/db/oci/QueryBuilder::dropCommentFromTable*		public
>
 dropCommentFromTable($table)
<
return (string) The SQL statement for adding comment on column

 Builds a SQL command for adding comment to table.







    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.


*yii/db/oci/QueryBuilder::buildOrderByAndLimit*		public
>
 buildOrderByAndLimit($sql, $orderBy, $limit, $offset)
<
return (string) The SQL completed with ORDER BY/LIMIT/OFFSET (if any)

 Builds the ORDER BY and LIMIT/OFFSET clauses and appends them to the given
 SQL.







    [$sql] (string) The existing SQL (without ORDER BY/LIMIT/OFFSET)
    [$orderBy] (array) The order by columns. See 'Query::orderBy' for more
    details on how to specify this parameter.
    [$limit] (int) The limit number. See 'Query::limit' for more details.
    [$offset] (int) The offset number. See 'Query::offset' for more details.


*yii/db/oci/QueryBuilder::selectExists*			public
>
 selectExists($rawSql)
<
return (string) The SELECT EXISTS() SQL statement.

 Creates a SELECT EXISTS() SQL statement.







    [$rawSql] (string) The subquery in a raw form to select from.



 vim:tw=78:ts=8:ft=help:norl:
