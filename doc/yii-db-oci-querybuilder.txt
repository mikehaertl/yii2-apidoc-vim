
*yii/db/oci/QueryBuilder*   >> |yii/db/QueryBuilder|
=========================



METHOD DETAILS
------------------------------------------------------------------------------

*yii/db/oci/QueryBuilder::className*			public
 See |yii/base/Object::className|


*yii/db/oci/QueryBuilder::__construct*			public
 See |yii/db/QueryBuilder::__construct|


*yii/db/oci/QueryBuilder::init*				public
 See |yii/base/Object::init|


*yii/db/oci/QueryBuilder::__get*				public
 See |yii/base/Object::__get|


*yii/db/oci/QueryBuilder::__set*				public
 See |yii/base/Object::__set|


*yii/db/oci/QueryBuilder::__isset*			public
 See |yii/base/Object::__isset|


*yii/db/oci/QueryBuilder::__unset*			public
 See |yii/base/Object::__unset|


*yii/db/oci/QueryBuilder::__call*				public
 See |yii/base/Object::__call|


*yii/db/oci/QueryBuilder::hasProperty*			public
 See |yii/base/Object::hasProperty|


*yii/db/oci/QueryBuilder::canGetProperty*			public
 See |yii/base/Object::canGetProperty|


*yii/db/oci/QueryBuilder::canSetProperty*			public
 See |yii/base/Object::canSetProperty|


*yii/db/oci/QueryBuilder::hasMethod*			public
 See |yii/base/Object::hasMethod|


*yii/db/oci/QueryBuilder::build*				public
>
 build($query, $params='[]')
<
(array) The generated SQL statement (the first array element) and the
corresponding parameters to be bound to the SQL statement (the second array
element). The parameters returned include those provided in '$params'.

    [$query] (\yii\db\Query) The 'Query' object from which the SQL statement
    will be generated.
    [$params] (array) The parameters to be bound to the generated SQL
    statement. These parameters will be included in the result with the
    additional parameters generated during the query building process.


*yii/db/oci/QueryBuilder::insert*				public
 See |yii/db/QueryBuilder::insert|


*yii/db/oci/QueryBuilder::batchInsert*			public
 See |yii/db/QueryBuilder::batchInsert|


*yii/db/oci/QueryBuilder::update*				public
 See |yii/db/QueryBuilder::update|


*yii/db/oci/QueryBuilder::delete*				public
 See |yii/db/QueryBuilder::delete|


*yii/db/oci/QueryBuilder::createTable*			public
 See |yii/db/QueryBuilder::createTable|


*yii/db/oci/QueryBuilder::renameTable*			public
>
 renameTable($table, $newName)
<
(string) The SQL statement for renaming a DB table.

    [$table] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/oci/QueryBuilder::dropTable*			public
 See |yii/db/QueryBuilder::dropTable|


*yii/db/oci/QueryBuilder::addPrimaryKey*			public
 See |yii/db/QueryBuilder::addPrimaryKey|


*yii/db/oci/QueryBuilder::dropPrimaryKey*			public
 See |yii/db/QueryBuilder::dropPrimaryKey|


*yii/db/oci/QueryBuilder::truncateTable*			public
 See |yii/db/QueryBuilder::truncateTable|


*yii/db/oci/QueryBuilder::addColumn*			public
 See |yii/db/QueryBuilder::addColumn|


*yii/db/oci/QueryBuilder::dropColumn*			public
 See |yii/db/QueryBuilder::dropColumn|


*yii/db/oci/QueryBuilder::renameColumn*			public
 See |yii/db/QueryBuilder::renameColumn|


*yii/db/oci/QueryBuilder::alterColumn*			public
>
 alterColumn($table, $column, $type)
<
(string) The SQL statement for changing the definition of a column.

    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The new column type. The {@link getColumnType} method
    will be invoked to convert abstract column type (if any) into the physical
    one. Anything that is not recognized as abstract type will be kept in the
    generated SQL. For example, 'string' will be turned into 'varchar(255)',
    while 'string not null' will become 'varchar(255) not null'.


*yii/db/oci/QueryBuilder::addForeignKey*			public
 See |yii/db/QueryBuilder::addForeignKey|


*yii/db/oci/QueryBuilder::dropForeignKey*			public
 See |yii/db/QueryBuilder::dropForeignKey|


*yii/db/oci/QueryBuilder::createIndex*			public
 See |yii/db/QueryBuilder::createIndex|


*yii/db/oci/QueryBuilder::dropIndex*			public
>
 dropIndex($name, $table)
<
(string) The SQL statement for dropping an index.

    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/db/oci/QueryBuilder::resetSequence*			public
>
 resetSequence($table, $value='null')
<
(string) The SQL statement for resetting sequence

 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.
    [$table] (string) The name of the table whose primary key sequence will be
    reset
    [$value] (array|string) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/oci/QueryBuilder::checkIntegrity*			public
 See |yii/db/QueryBuilder::checkIntegrity|


*yii/db/oci/QueryBuilder::getColumnType*			public
 See |yii/db/QueryBuilder::getColumnType|


*yii/db/oci/QueryBuilder::buildSelect*			public
 See |yii/db/QueryBuilder::buildSelect|


*yii/db/oci/QueryBuilder::buildFrom*			public
 See |yii/db/QueryBuilder::buildFrom|


*yii/db/oci/QueryBuilder::buildJoin*			public
 See |yii/db/QueryBuilder::buildJoin|


*yii/db/oci/QueryBuilder::buildWhere*			public
 See |yii/db/QueryBuilder::buildWhere|


*yii/db/oci/QueryBuilder::buildGroupBy*			public
 See |yii/db/QueryBuilder::buildGroupBy|


*yii/db/oci/QueryBuilder::buildHaving*			public
 See |yii/db/QueryBuilder::buildHaving|


*yii/db/oci/QueryBuilder::buildOrderBy*			public
 See |yii/db/QueryBuilder::buildOrderBy|


*yii/db/oci/QueryBuilder::buildLimit*			public
>
 buildLimit($limit, $offset)
<
(void)

    [$limit] () 
    [$offset] () 


*yii/db/oci/QueryBuilder::hasLimit*			protected
 See |yii/db/QueryBuilder::hasLimit|


*yii/db/oci/QueryBuilder::hasOffset*			protected
 See |yii/db/QueryBuilder::hasOffset|


*yii/db/oci/QueryBuilder::buildUnion*			public
 See |yii/db/QueryBuilder::buildUnion|


*yii/db/oci/QueryBuilder::buildColumns*			public
 See |yii/db/QueryBuilder::buildColumns|


*yii/db/oci/QueryBuilder::buildCondition*			public
 See |yii/db/QueryBuilder::buildCondition|


*yii/db/oci/QueryBuilder::buildHashCondition*		public
 See |yii/db/QueryBuilder::buildHashCondition|


*yii/db/oci/QueryBuilder::buildAndCondition*		public
 See |yii/db/QueryBuilder::buildAndCondition|


*yii/db/oci/QueryBuilder::buildNotCondition*		public
 See |yii/db/QueryBuilder::buildNotCondition|


*yii/db/oci/QueryBuilder::buildBetweenCondition*		public
 See |yii/db/QueryBuilder::buildBetweenCondition|


*yii/db/oci/QueryBuilder::buildInCondition*		public
 See |yii/db/QueryBuilder::buildInCondition|


*yii/db/oci/QueryBuilder::buildCompositeInCondition*	protected
 See |yii/db/QueryBuilder::buildCompositeInCondition|


*yii/db/oci/QueryBuilder::buildLikeCondition*		public
 See |yii/db/QueryBuilder::buildLikeCondition|


*yii/db/oci/QueryBuilder::buildExistsCondition*		public
 See |yii/db/QueryBuilder::buildExistsCondition|



 vim:tw=78:ts=8:ft=help:norl:
