
*yii/db/oci/QueryBuilder*   >> |yii/db/QueryBuilder|
=========================


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/oci/QueryBuilder::$db*

 See |yii/db/QueryBuilder::$db|

$separator				*yii/db/oci/QueryBuilder::$separator*

 See |yii/db/QueryBuilder::$separator|

$typeMap				*yii/db/oci/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).

$conditionBuilders			*yii/db/oci/QueryBuilder::$conditionBuilders*

 See |yii/db/QueryBuilder::$conditionBuilders|

$conditionClasses			*yii/db/oci/QueryBuilder::$conditionClasses*

 See |yii/db/QueryBuilder::$conditionClasses|

$expressionBuilders			*yii/db/oci/QueryBuilder::$expressionBuilders*

 See |yii/db/QueryBuilder::$expressionBuilders|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/oci/QueryBuilder::className*			public

 See |yii/base/BaseObject::className|


*yii/db/oci/QueryBuilder::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/db/oci/QueryBuilder::init*				public

 See |yii/base/BaseObject::init|


*yii/db/oci/QueryBuilder::__get*				public

 See |yii/base/BaseObject::__get|


*yii/db/oci/QueryBuilder::__set*				public

 See |yii/base/BaseObject::__set|


*yii/db/oci/QueryBuilder::__isset*			public

 See |yii/base/BaseObject::__isset|


*yii/db/oci/QueryBuilder::__unset*			public

 See |yii/base/BaseObject::__unset|


*yii/db/oci/QueryBuilder::__call*				public

 See |yii/base/BaseObject::__call|


*yii/db/oci/QueryBuilder::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/db/oci/QueryBuilder::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/db/oci/QueryBuilder::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/db/oci/QueryBuilder::hasMethod*			public

 See |yii/base/BaseObject::hasMethod|


*yii/db/oci/QueryBuilder::defaultConditionClasses*	protected

 See |yii/db/QueryBuilder::defaultConditionClasses|


*yii/db/oci/QueryBuilder::defaultExpressionBuilders*	protected
>
 defaultExpressionBuilders()
<
return (void)

 {@inheritdoc}


*yii/db/oci/QueryBuilder::setExpressionBuilders*		public

 See |yii/db/QueryBuilder::setExpressionBuilders|


*yii/db/oci/QueryBuilder::build*				public

 See |yii/db/QueryBuilder::build|


*yii/db/oci/QueryBuilder::buildExpression*		public

 See |yii/db/QueryBuilder::buildExpression|


*yii/db/oci/QueryBuilder::getExpressionBuilder*		public

 See |yii/db/QueryBuilder::getExpressionBuilder|


*yii/db/oci/QueryBuilder::insert*				public

 See |yii/db/QueryBuilder::insert|


*yii/db/oci/QueryBuilder::prepareInsertValues*		protected
>
 prepareInsertValues($table, $columns, $params='[]')
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$columns] () 
    [$params] () 


*yii/db/oci/QueryBuilder::prepareInsertSelectSubQuery*	protected

 See |yii/db/QueryBuilder::prepareInsertSelectSubQuery|


*yii/db/oci/QueryBuilder::batchInsert*			public
>
 batchInsert($table, $columns, $rows, $params='[]')
<
return (string) The batch INSERT SQL statement

 Generates a batch INSERT SQL statement.

 For example,

   $sql = $queryBuilder->batchInsert('user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ]);

 Note that the values in each row must match the corresponding column names.

    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column names
    [$rows] (array|\Generator) The rows to be batch inserted into the table
    [$params] () 


*yii/db/oci/QueryBuilder::upsert*				public
>
 upsert($table, $insertColumns, $updateColumns, $params)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$insertColumns] () 
    [$updateColumns] () 
    [$params] () 


*yii/db/oci/QueryBuilder::prepareUpsertColumns*		protected

 See |yii/db/QueryBuilder::prepareUpsertColumns|


*yii/db/oci/QueryBuilder::update*				public

 See |yii/db/QueryBuilder::update|


*yii/db/oci/QueryBuilder::prepareUpdateSets*		protected

 See |yii/db/QueryBuilder::prepareUpdateSets|


*yii/db/oci/QueryBuilder::delete*				public

 See |yii/db/QueryBuilder::delete|


*yii/db/oci/QueryBuilder::createTable*			public

 See |yii/db/QueryBuilder::createTable|


*yii/db/oci/QueryBuilder::renameTable*			public
>
 renameTable($table, $newName)
<
return (string) The SQL statement for renaming a DB table.

 Builds a SQL statement for renaming a DB table.

    [$table] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/oci/QueryBuilder::dropTable*			public

 See |yii/db/QueryBuilder::dropTable|


*yii/db/oci/QueryBuilder::addPrimaryKey*			public

 See |yii/db/QueryBuilder::addPrimaryKey|


*yii/db/oci/QueryBuilder::dropPrimaryKey*			public

 See |yii/db/QueryBuilder::dropPrimaryKey|


*yii/db/oci/QueryBuilder::truncateTable*			public

 See |yii/db/QueryBuilder::truncateTable|


*yii/db/oci/QueryBuilder::addColumn*			public

 See |yii/db/QueryBuilder::addColumn|


*yii/db/oci/QueryBuilder::dropColumn*			public

 See |yii/db/QueryBuilder::dropColumn|


*yii/db/oci/QueryBuilder::renameColumn*			public

 See |yii/db/QueryBuilder::renameColumn|


*yii/db/oci/QueryBuilder::alterColumn*			public
>
 alterColumn($table, $column, $type)
<
return (string) The SQL statement for changing the definition of a column.

 Builds a SQL statement for changing the definition of a column.

    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The new column type. The 'getColumnType' method will be
    invoked to convert abstract column type (if any) into the physical one.
    Anything that is not recognized as abstract type will be kept in the
    generated SQL. For example, 'string' will be turned into 'varchar(255)',
    while 'string not null' will become 'varchar(255) not null'.


*yii/db/oci/QueryBuilder::addForeignKey*			public
>
 addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete='null', $update='null')
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 
    [$columns] () 
    [$refTable] () 
    [$refColumns] () 
    [$delete] () 
    [$update] () 


*yii/db/oci/QueryBuilder::dropForeignKey*			public

 See |yii/db/QueryBuilder::dropForeignKey|


*yii/db/oci/QueryBuilder::createIndex*			public

 See |yii/db/QueryBuilder::createIndex|


*yii/db/oci/QueryBuilder::dropIndex*			public
>
 dropIndex($name, $table)
<
return (string) The SQL statement for dropping an index.

 Builds a SQL statement for dropping an index.

    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/db/oci/QueryBuilder::addUnique*			public

 See |yii/db/QueryBuilder::addUnique|


*yii/db/oci/QueryBuilder::dropUnique*			public

 See |yii/db/QueryBuilder::dropUnique|


*yii/db/oci/QueryBuilder::addCheck*			public

 See |yii/db/QueryBuilder::addCheck|


*yii/db/oci/QueryBuilder::dropCheck*			public

 See |yii/db/QueryBuilder::dropCheck|


*yii/db/oci/QueryBuilder::addDefaultValue*		public

 See |yii/db/QueryBuilder::addDefaultValue|


*yii/db/oci/QueryBuilder::dropDefaultValue*		public

 See |yii/db/QueryBuilder::dropDefaultValue|


*yii/db/oci/QueryBuilder::resetSequence*			public
>
 resetSequence($table, $value='null')
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$value] () 


*yii/db/oci/QueryBuilder::checkIntegrity*			public

 See |yii/db/QueryBuilder::checkIntegrity|


*yii/db/oci/QueryBuilder::addCommentOnColumn*		public

 See |yii/db/QueryBuilder::addCommentOnColumn|


*yii/db/oci/QueryBuilder::addCommentOnTable*		public

 See |yii/db/QueryBuilder::addCommentOnTable|


*yii/db/oci/QueryBuilder::dropCommentFromColumn*		public
>
 dropCommentFromColumn($table, $column)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$column] () 


*yii/db/oci/QueryBuilder::dropCommentFromTable*		public
>
 dropCommentFromTable($table)
<
return (void)

 {@inheritdoc}

    [$table] () 


*yii/db/oci/QueryBuilder::createView*			public

 See |yii/db/QueryBuilder::createView|


*yii/db/oci/QueryBuilder::dropView*			public

 See |yii/db/QueryBuilder::dropView|


*yii/db/oci/QueryBuilder::getColumnType*			public

 See |yii/db/QueryBuilder::getColumnType|


*yii/db/oci/QueryBuilder::buildSelect*			public

 See |yii/db/QueryBuilder::buildSelect|


*yii/db/oci/QueryBuilder::buildFrom*			public

 See |yii/db/QueryBuilder::buildFrom|


*yii/db/oci/QueryBuilder::buildJoin*			public

 See |yii/db/QueryBuilder::buildJoin|


*yii/db/oci/QueryBuilder::buildWhere*			public

 See |yii/db/QueryBuilder::buildWhere|


*yii/db/oci/QueryBuilder::buildGroupBy*			public

 See |yii/db/QueryBuilder::buildGroupBy|


*yii/db/oci/QueryBuilder::buildHaving*			public

 See |yii/db/QueryBuilder::buildHaving|


*yii/db/oci/QueryBuilder::buildOrderByAndLimit*		public
>
 buildOrderByAndLimit($sql, $orderBy, $limit, $offset)
<
return (void)

 {@inheritdoc}

    [$sql] () 
    [$orderBy] () 
    [$limit] () 
    [$offset] () 


*yii/db/oci/QueryBuilder::buildOrderBy*			public

 See |yii/db/QueryBuilder::buildOrderBy|


*yii/db/oci/QueryBuilder::buildLimit*			public

 See |yii/db/QueryBuilder::buildLimit|


*yii/db/oci/QueryBuilder::hasLimit*			protected

 See |yii/db/QueryBuilder::hasLimit|


*yii/db/oci/QueryBuilder::hasOffset*			protected

 See |yii/db/QueryBuilder::hasOffset|


*yii/db/oci/QueryBuilder::buildUnion*			public

 See |yii/db/QueryBuilder::buildUnion|


*yii/db/oci/QueryBuilder::buildColumns*			public

 See |yii/db/QueryBuilder::buildColumns|


*yii/db/oci/QueryBuilder::buildCondition*			public

 See |yii/db/QueryBuilder::buildCondition|


*yii/db/oci/QueryBuilder::createConditionFromArray*	public

 See |yii/db/QueryBuilder::createConditionFromArray|


*yii/db/oci/QueryBuilder::buildHashCondition*		public

 See |yii/db/QueryBuilder::buildHashCondition|


*yii/db/oci/QueryBuilder::buildAndCondition*		public

 See |yii/db/QueryBuilder::buildAndCondition|


*yii/db/oci/QueryBuilder::buildNotCondition*		public

 See |yii/db/QueryBuilder::buildNotCondition|


*yii/db/oci/QueryBuilder::buildBetweenCondition*		public

 See |yii/db/QueryBuilder::buildBetweenCondition|


*yii/db/oci/QueryBuilder::buildInCondition*		public

 See |yii/db/QueryBuilder::buildInCondition|


*yii/db/oci/QueryBuilder::buildLikeCondition*		public

 See |yii/db/QueryBuilder::buildLikeCondition|


*yii/db/oci/QueryBuilder::buildExistsCondition*		public

 See |yii/db/QueryBuilder::buildExistsCondition|


*yii/db/oci/QueryBuilder::buildSimpleCondition*		public

 See |yii/db/QueryBuilder::buildSimpleCondition|


*yii/db/oci/QueryBuilder::selectExists*			public
>
 selectExists($rawSql)
<
return (void)

 {@inheritdoc}

    [$rawSql] () 


*yii/db/oci/QueryBuilder::bindParam*			public

 See |yii/db/QueryBuilder::bindParam|



 vim:tw=78:ts=8:ft=help:norl:
