
*yii/di/Instance*  
=================

DESCRIPTION
------------------------------------------------------------------------------

 You may use 'get()' to obtain the actual object referenced by 'id'.

 Instance is mainly used in two places:


   - When configuring a dependency injection container, you use
   Instance to reference a class name, interface name   or alias name. The
 reference can later be resolved into the actual object by the container. 
   - In classes which use service locator to obtain dependent objects.

 The following example shows how to configure a DI container with Instance:

   $container = new \yii\di\Container;
   $container->set('cache', [
       'class' => 'yii\caching\DbCache',
       'db' => Instance::of('db')
   ]);
   $container->set('db', [
       'class' => 'yii\db\Connection',
       'dsn' => 'sqlite:path/to/file.db',
   ]);

 And the following example shows how a class retrieves a component from a
 service locator:

   class DbCache extends Cache
   {
       public $db = 'db';

       public function init()
       {
           parent::init();
           $this->db = Instance::ensure($this->db, 'yii\db\Connection');
       }
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/di/Instance::$id*

 (string) The component ID, class name, interface name or alias name



METHOD DETAILS
------------------------------------------------------------------------------


*yii/di/Instance::__construct*				protected
>
 __construct($id)
<
return (void)

 Constructor.

    [$id] (string) The component ID


*yii/di/Instance::of*					public
>
 of($id)
<
return (\yii\di\Instance) The new Instance object.

 Creates a new Instance object.

    [$id] (string) The component ID


*yii/di/Instance::ensure*					public
>
 ensure($reference, $type='null', $container='null')
<
return (object) The object referenced by the Instance, or '$reference' itself if it
is an object.

 Resolves the specified reference into the actual object and makes sure it is
 of the specified type.

 The reference may be specified as a string or an Instance object. If the
 former, it will be treated as a component ID, a class/interface name or an
 alias, depending on the container type.

 If you do not specify a container, the method will first try 'Yii::$app'
 followed by 'Yii::$container'.

 For example,

   use yii\db\Connection;

   // returns Yii::$app->db
   $db = Instance::ensure('db', Connection::className());
   // returns an instance of Connection using the given configuration
   $db = Instance::ensure(['dsn' => 'sqlite:path/to/my.db'],
 Connection::className());



    [$reference] (object|string|array|static) An object or a reference to the
    desired object. You may specify a reference in terms of a component ID or
    an Instance object. Starting from version 2.0.2, you may also pass in a
    configuration array for creating the object. If the "class" value is not
    specified in the configuration array, it will use the value of '$type'.
    [$type] (string) The class/interface name to be checked. If null, type
    check will not be performed.
    [$container] (\yii\di\ServiceLocator|\yii\di\Container) The container.
    This will be passed to 'get()'.


*yii/di/Instance::get*					public
>
 get($container='null')
<
return (object) The actual object referenced by this Instance object.

 Returns the actual object referenced by this Instance object.

    [$container] (\yii\di\ServiceLocator|\yii\di\Container) The container used
    to locate the referenced object. If null, the method will first try
    'Yii::$app' then 'Yii::$container'.


*yii/di/Instance::__set_state*				public
>
 __set_state($state)
<
return (\yii\di\Instance) 

 Restores class state after using 'var_export()'.

    [$state] (array) 



 vim:tw=78:ts=8:ft=help:norl:
