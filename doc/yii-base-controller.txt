
*yii/base/Controller*   >> |yii/base/Component|
=====================

SUBCLASSES
------------------------------------------------------------------------------

|yii/rest/Controller|
|yii/rest/ActiveController|
|yii/web/Controller|
|yii/console/Controller|
|yii/console/controllers/HelpController|
|yii/console/controllers/FixtureController|
|yii/console/controllers/AssetController|
|yii/console/controllers/ServeController|
|yii/console/controllers/MessageController|
|yii/console/controllers/MigrateController|
|yii/console/controllers/BaseMigrateController|
|yii/console/controllers/CacheController|
|yii/apidoc/commands/ApiController|
|yii/apidoc/commands/GuideController|
|yii/apidoc/components/BaseController|
|yii/debug/controllers/DefaultController|
|yii/debug/controllers/UserController|
|yii/faker/FixtureController|
|yii/gii/console/GenerateController|
|yii/gii/controllers/DefaultController|
|yii/mongodb/console/controllers/MigrateController|
|yii/queue/cli/Command|
|yii/queue/file/Command|
|yii/queue/db/Command|
|yii/queue/amqp_interop/Command|
|yii/queue/redis/Command|
|yii/queue/amqp/Command|
|yii/queue/gearman/Command|
|yii/queue/beanstalk/Command|

DESCRIPTION
------------------------------------------------------------------------------

 For more details and usage information on Controller, see the [guide article
 on controllers](guide:structure-controllers).


PROPERTY DETAILS
------------------------------------------------------------------------------


$id					*yii/base/Controller::$id*

 (string) The ID of this controller.

$module					*yii/base/Controller::$module*

 (\yii\base\Module) The module that this controller belongs to.

$defaultAction				*yii/base/Controller::$defaultAction*

 (string) The ID of the action that is used when the action ID is not
 specified in the request. Defaults to 'index'.

$layout					*yii/base/Controller::$layout*

 (null|string|false) The name of the layout to be applied to this controller's
 views. This property mainly affects the behavior of 'render()'. Defaults to
 null, meaning the actual layout value should inherit that from 'module''s
 layout value. If false, no layout will be applied.

$action					*yii/base/Controller::$action*

 (\yii\base\Action) The action that is currently being executed. This property
 will be set by 'run()' when it is called by 'Application' to run an action.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/base/Controller::__construct*			public
>
 __construct($id, $module, $config='[]')
<
return (void)

    [$id] (string) The ID of this controller.
    [$module] (\yii\base\Module) The module that this controller belongs to.
    [$config] (array) Name-value pairs that will be used to initialize the
    object properties.


*yii/base/Controller::actions*				public
>
 actions()
<
return (void)

 Declares external actions for the controller.

 This method is meant to be overwritten to declare external actions for the
 controller. It should return an array, with array keys being action IDs, and
 array values the corresponding action class names or action configuration
 arrays. For example,

   return [
       'action1' => 'app\components\Action1',
       'action2' => [
           'class' => 'app\components\Action2',
           'property1' => 'value1',
           'property2' => 'value2',
       ],
   ];

 '\Yii::createObject()' will be used later to create the requested action
 using the configuration provided here.


*yii/base/Controller::runAction*				public
>
 runAction($id, $params='[]')
<
return (mixed) The result of the action.

 Runs an action within this controller with the specified action ID and
 parameters.

 If the action ID is empty, the method will use 'defaultAction'.

    [$id] (string) The ID of the action to be executed.
    [$params] (array) The parameters (name-value pairs) to be passed to the
    action.


*yii/base/Controller::run*				public
>
 run($route, $params='[]')
<
return (mixed) The result of the action.

 Runs a request specified in terms of a route.

 The route can be either an ID of an action within this controller or a
 complete route consisting of module IDs, controller ID and action ID. If the
 route starts with a slash '/', the parsing of the route will start from the
 application; otherwise, it will start from the parent module of this
 controller.

    [$route] (string) The route to be handled, e.g., 'view', 'comment/view',
    '/admin/comment/view'.
    [$params] (array) The parameters to be passed to the action.


*yii/base/Controller::bindActionParams*			public
>
 bindActionParams($action, $params)
<
return (array) The valid parameters that the action can run with.

 Binds the parameters to the action.

 This method is invoked by 'Action' when it begins to run with the given
 parameters.

    [$action] (\yii\base\Action) The action to be bound with parameters.
    [$params] (array) The parameters to be bound to the action.


*yii/base/Controller::createAction*			public
>
 createAction($id)
<
return (\yii\base\Action|null) The newly created action instance. Null if the ID
doesn't resolve into any action.

 Creates an action based on the given action ID.

 The method first checks if the action ID has been declared in 'actions()'. If
 so, it will use the configuration declared there to create the action object.
 If not, it will look for a controller method whose name is in the format of
 'actionXyz' where 'Xyz' stands for the action ID. If found, an 'InlineAction'
 representing that method will be created and returned.

    [$id] (string) The action ID.


*yii/base/Controller::beforeAction*			public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to run.

 This method is invoked right before an action is executed.

 The method will trigger the 'EVENT_BEFORE_ACTION' event. The return value of
 the method will determine whether the action should continue to run.

 In case the action should not run, the request should be handled inside of
 the 'beforeAction' code by either providing the necessary output or
 redirecting the request. Otherwise the response will be empty.

 If you override this method, your code should look like the following:

   public function beforeAction($action)
   {
       // your custom code here, if you want the code to run before action
 filters,
       // which are triggered on the [[EVENT_BEFORE_ACTION]] event, e.g.
 PageCache or AccessControl

       if (!parent::beforeAction($action)) {
           return false;
       }

       // other custom code here

       return true; // or false to not run the action
   }



    [$action] (\yii\base\Action) The action to be executed.


*yii/base/Controller::afterAction*			public
>
 afterAction($action, $result)
<
return (mixed) The processed action result.

 This method is invoked right after an action is executed.

 The method will trigger the 'EVENT_AFTER_ACTION' event. The return value of
 the method will be used as the action return value.

 If you override this method, your code should look like the following:

   public function afterAction($action, $result)
   {
       $result = parent::afterAction($action, $result);
       // your custom code here
       return $result;
   }



    [$action] (\yii\base\Action) The action just executed.
    [$result] (mixed) The action return result.


*yii/base/Controller::getModules*				public
>
 getModules()
<
return (\yii\base\Module[]) All ancestor modules that this controller is located
within.

 Returns all ancestor modules of this controller.

 The first module in the array is the outermost one (i.e., the application
 instance), while the last is the innermost one.


*yii/base/Controller::getUniqueId*			public
>
 getUniqueId()
<
return (string) The controller ID that is prefixed with the module ID (if any).

 Returns the unique ID of the controller.


*yii/base/Controller::getRoute*				public
>
 getRoute()
<
return (string) The route (module ID, controller ID and action ID) of the current
request.

 Returns the route of the current request.


*yii/base/Controller::render*				public
>
 render($view, $params='[]')
<
return (string) The rendering result.

 Renders a view and applies layout if available.

 The view to be rendered can be specified in one of the following formats:


   - [path alias](guide:concept-aliases) (e.g.
   "@app/views/site/index"); 
   - absolute path within application (e.g. "//site/index"): the view
   name starts with double slashes.   The actual view file will be looked for
 under the 'Application::viewPath|view path' of the application. 
   - absolute path within module (e.g. "/site/index"): the view name
   starts with a single slash.   The actual view file will be looked for under
 the 'Module::viewPath|view path' of 'module'. 
   - relative path (e.g. "index"): the actual view file will be looked
   for under 'viewPath'.

 To determine which layout should be applied, the following two steps are
 conducted:

 1. In the first step, it determines the layout name and the context module:


   - If 'layout' is specified as a string, use it as the layout name
   and 'module' as the context module; 
   - If 'layout' is null, search through all ancestor modules of this
   controller and find the first   module whose 'Module::layout|layout' is not
 null. The layout and the corresponding module   are used as the layout name
 and the context module, respectively. If such a module is not found   or the
 corresponding layout is not a string, it will return false, meaning no
 applicable layout.

 2. In the second step, it determines the actual layout file according to the
 previously found layout name    and context module. The layout name can be:


   - a [path alias](guide:concept-aliases) (e.g.
   "@app/views/layouts/main"); 
   - an absolute path (e.g. "/main"): the layout name starts with a
   slash. The actual layout file will be   looked for under the
 'Application::layoutPath|layout path' of the application; 
   - a relative path (e.g. "main"): the actual layout file will be
   looked for under the   'Module::layoutPath|layout path' of the context
 module.

 If the layout name does not contain a file extension, it will use the default
 one '.php'.

    [$view] (string) The view name.
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view. These parameters will not be available in the
    layout.


*yii/base/Controller::renderContent*			public
>
 renderContent($content)
<
return (string) The rendering result of the layout with the given static string as
the '$content' variable. If the layout is disabled, the string will be
returned back.

 Renders a static string by applying a layout.

    [$content] (string) The static string being rendered


*yii/base/Controller::renderPartial*			public
>
 renderPartial($view, $params='[]')
<
return (string) The rendering result.

 Renders a view without applying layout.

 This method differs from 'render()' in that it does not apply any layout.

    [$view] (string) The view name. Please refer to 'render()' on how to
    specify a view name.
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view.


*yii/base/Controller::renderFile*				public
>
 renderFile($file, $params='[]')
<
return (string) The rendering result.

 Renders a view file.

    [$file] (string) The view file to be rendered. This can be either a file
    path or a [path alias](guide:concept-aliases).
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view.


*yii/base/Controller::getView*				public
>
 getView()
<
return (\yii\base\View|\yii\web\View) The view object that can be used to render
views or view files.

 Returns the view object that can be used to render views or view files.

 The 'render()', 'renderPartial()' and 'renderFile()' methods will use this
 view object to implement the actual view rendering. If not set, it will
 default to the "view" application component.


*yii/base/Controller::setView*				public
>
 setView($view)
<
return (void)

 Sets the view object to be used by this controller.

    [$view] (\yii\base\View|\yii\web\View) The view object that can be used to
    render views or view files.


*yii/base/Controller::getViewPath*			public
>
 getViewPath()
<
return (string) The directory containing the view files for this controller.

 Returns the directory containing view files for this controller.

 The default implementation returns the directory named as controller 'id'
 under the 'module''s 'viewPath' directory.


*yii/base/Controller::setViewPath*			public
>
 setViewPath($path)
<
return (void)

 Sets the directory that contains the view files.

    [$path] (string) The root directory of view files.


*yii/base/Controller::findLayoutFile*			public
>
 findLayoutFile($view)
<
return (string|bool) The layout file path, or false if layout is not needed. Please
refer to 'render()' on how to specify this parameter.

 Finds the applicable layout file.

    [$view] (\yii\base\View) The view object to render the layout file.



 vim:tw=78:ts=8:ft=help:norl:
