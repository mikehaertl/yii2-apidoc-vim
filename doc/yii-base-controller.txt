
*yii/base/Controller*   >> |yii/base/Component|
=====================

SUBCLASSES
------------------------------------------------------------------------------

|yii/console/Controller|
|yii/console/controllers/HelpController|
|yii/console/controllers/CacheController|
|yii/console/controllers/MessageController|
|yii/console/controllers/AssetController|
|yii/console/controllers/FixtureController|
|yii/console/controllers/MigrateController|
|yii/web/Controller|
|yii/rest/Controller|
|yii/rest/ActiveController|

DESCRIPTION
------------------------------------------------------------------------------




PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/base/Controller::$id*
 (string) The ID of this controller.

$module					*yii/base/Controller::$module*
 (\yii\base\Module) The module that this controller belongs to.

$defaultAction				*yii/base/Controller::$defaultAction*
 (string) The ID of the action that is used when the action ID is not
 specified in the request. Defaults to 'index'.

$layout					*yii/base/Controller::$layout*
 (string|boolean) The name of the layout to be applied to this controller's
 views. This property mainly affects the behavior of 'render()'. Defaults to
 null, meaning the actual layout value should inherit that from 'module''s
 layout value. If false, no layout will be applied.

$action					*yii/base/Controller::$action*
 (\yii\base\Action) The action that is currently being executed. This property
 will be set by 'run()' when it is called by 'Application' to run an action.

$behaviors				*yii/base/Controller::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$uniqueId				*yii/base/Controller::$uniqueId*
 (string) The controller ID that is prefixed with the module ID (if any).

$route					*yii/base/Controller::$route*
 (string) The route (module ID, controller ID and action ID) of the current
 request.

$view					*yii/base/Controller::$view*
 (\yii\base\View) The view object that can be used to render views or view
 files.

$viewPath				*yii/base/Controller::$viewPath*
 (string) The directory containing the view files for this controller.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/base/Controller::className*				public
 See |yii/base/Object::className|


*yii/base/Controller::__construct*			public
>
 __construct($id, $module, $config='[]')
<
(void)


    [$id] (string) The ID of this controller.
    [$module] (\yii\base\Module) The module that this controller belongs to.
    [$config] (array) Name-value pairs that will be used to initialize the
    object properties.


*yii/base/Controller::init*				public
 See |yii/base/Object::init|


*yii/base/Controller::__get*				public
 See |yii/base/Component::__get|


*yii/base/Controller::__set*				public
 See |yii/base/Component::__set|


*yii/base/Controller::__isset*				public
 See |yii/base/Component::__isset|


*yii/base/Controller::__unset*				public
 See |yii/base/Component::__unset|


*yii/base/Controller::__call*				public
 See |yii/base/Component::__call|


*yii/base/Controller::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/base/Controller::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/base/Controller::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/base/Controller::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/base/Controller::__clone*				public
 See |yii/base/Component::__clone|


*yii/base/Controller::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/base/Controller::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/base/Controller::on*					public
 See |yii/base/Component::on|


*yii/base/Controller::off*				public
 See |yii/base/Component::off|


*yii/base/Controller::trigger*				public
 See |yii/base/Component::trigger|


*yii/base/Controller::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/base/Controller::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/base/Controller::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/base/Controller::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/base/Controller::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/base/Controller::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/base/Controller::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/base/Controller::actions*				public
>
 actions()
<
(void)

 This method is meant to be overwritten to declare external actions for the
 controller. It should return an array, with array keys being action IDs, and
 array values the corresponding action class names or action configuration
 arrays. For example,

   return [
       'action1' => 'app\components\Action1',
       'action2' => [
           'class' => 'app\components\Action2',
           'property1' => 'value1',
           'property2' => 'value2',
       ],
   ];

 '\Yii::createObject()' will be used later to create the requested action
 using the configuration provided here.


*yii/base/Controller::runAction*				public
>
 runAction($id, $params='[]')
<
(mixed) The result of the action.

 If the action ID is empty, the method will use 'defaultAction'.
    [$id] (string) The ID of the action to be executed.
    [$params] (array) The parameters (name-value pairs) to be passed to the
    action.


*yii/base/Controller::run*				public
>
 run($route, $params='[]')
<
(mixed) The result of the action.

 The route can be either an ID of an action within this controller or a
 complete route consisting of module IDs, controller ID and action ID. If the
 route starts with a slash '/', the parsing of the route will start from the
 application; otherwise, it will start from the parent module of this
 controller.
    [$route] (string) The route to be handled, e.g., 'view', 'comment/view',
    '/admin/comment/view'.
    [$params] (array) The parameters to be passed to the action.


*yii/base/Controller::bindActionParams*			public
>
 bindActionParams($action, $params)
<
(array) The valid parameters that the action can run with.

 This method is invoked by 'Action' when it begins to run with the given
 parameters.
    [$action] (\yii\base\Action) The action to be bound with parameters.
    [$params] (array) The parameters to be bound to the action.


*yii/base/Controller::createAction*			public
>
 createAction($id)
<
(\yii\base\Action) The newly created action instance. Null if the ID doesn't
resolve into any action.

 The method first checks if the action ID has been declared in 'actions()'. If
 so, it will use the configuration declared there to create the action object.
 If not, it will look for a controller method whose name is in the format of
 'actionXyz' where 'Xyz' stands for the action ID. If found, an 'InlineAction'
 representing that method will be created and returned.
    [$id] (string) The action ID.


*yii/base/Controller::beforeAction*			public
>
 beforeAction($action)
<
(boolean) Whether the action should continue to be executed.

 You may override this method to do last-minute preparation for the action. If
 you override this method, please make sure you call the parent implementation
 first.
    [$action] (\yii\base\Action) The action to be executed.


*yii/base/Controller::afterAction*			public
>
 afterAction($action, $result)
<
(mixed) The processed action result.

 You may override this method to do some postprocessing for the action. If you
 override this method, please make sure you call the parent implementation
 first. Also make sure you return the action result, whether it is processed
 or not.
    [$action] (\yii\base\Action) The action just executed.
    [$result] (mixed) The action return result.


*yii/base/Controller::getUniqueId*			public
>
 getUniqueId()
<
(string) The controller ID that is prefixed with the module ID (if any).




*yii/base/Controller::getRoute*				public
>
 getRoute()
<
(string) The route (module ID, controller ID and action ID) of the current
request.




*yii/base/Controller::render*				public
>
 render($view, $params='[]')
<
(string) The rendering result.

 The view to be rendered can be specified in one of the following formats:

 - path alias (e.g. "@app/views/site/index"); - absolute path within
 application (e.g. "//site/index"): the view name starts with double slashes. 
  The actual view file will be looked for under the
 'Application::viewPath|view path' of the application. - absolute path within
 module (e.g. "/site/index"): the view name starts with a single slash.   The
 actual view file will be looked for under the 'Module::viewPath|view path' of
 'module'. - relative path (e.g. "index"): the actual view file will be looked
 for under 'viewPath'.

 To determine which layout should be applied, the following two steps are
 conducted:

 1. In the first step, it determines the layout name and the context module:

 - If 'layout' is specified as a string, use it as the layout name and
 'module' as the context module; - If 'layout' is null, search through all
 ancestor modules of this controller and find the first   module whose
 'Module::layout|layout' is not null. The layout and the corresponding module 
  are used as the layout name and the context module, respectively. If such a
 module is not found   or the corresponding layout is not a string, it will
 return false, meaning no applicable layout.

 2. In the second step, it determines the actual layout file according to the
 previously found layout name    and context module. The layout name can be:

 - a path alias (e.g. "@app/views/layouts/main"); - an absolute path (e.g.
 "/main"): the layout name starts with a slash. The actual layout file will be
   looked for under the 'Application::layoutPath|layout path' of the
 application; - a relative path (e.g. "main"): the actual layout layout file
 will be looked for under the   'Module::layoutPath|layout path' of the
 context module.

 If the layout name does not contain a file extension, it will use the default
 one '.php'.
    [$view] (string) The view name.
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view. These parameters will not be available in the
    layout.


*yii/base/Controller::renderPartial*			public
>
 renderPartial($view, $params='[]')
<
(string) The rendering result.

 This method differs from 'render()' in that it does not apply any layout.
    [$view] (string) The view name. Please refer to 'render()' on how to
    specify a view name.
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view.


*yii/base/Controller::renderFile*				public
>
 renderFile($file, $params='[]')
<
(string) The rendering result.


    [$file] (string) The view file to be rendered. This can be either a file
    path or a path alias.
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view.


*yii/base/Controller::getView*				public
>
 getView()
<
(\yii\base\View) The view object that can be used to render views or view
files.

 The 'render()', 'renderPartial()' and 'renderFile()' methods will use this
 view object to implement the actual view rendering. If not set, it will
 default to the "view" application component.


*yii/base/Controller::setView*				public
>
 setView($view)
<
(void)


    [$view] (\yii\base\View) The view object that can be used to render views
    or view files.


*yii/base/Controller::getViewPath*			public
>
 getViewPath()
<
(string) The directory containing the view files for this controller.

 The default implementation returns the directory named as controller 'id'
 under the 'module''s 'viewPath' directory.


*yii/base/Controller::findLayoutFile*			protected
>
 findLayoutFile($view)
<
(string|boolean) The layout file path, or false if layout is not needed.
Please refer to 'render()' on how to specify this parameter.


    [$view] (\yii\base\View) The view object to render the layout file.



 vim:tw=78:ts=8:ft=help:norl:
