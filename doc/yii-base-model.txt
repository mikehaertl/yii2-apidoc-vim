
*yii/base/Model*   >> |yii/base/Component|
================

SUBCLASSES
------------------------------------------------------------------------------

|yii/debug/models/Router|
|yii/debug/models/timeline/Search|
|yii/debug/models/search/Mail|
|yii/debug/models/search/Base|
|yii/debug/models/search/Db|
|yii/debug/models/search/Log|
|yii/debug/models/search/User|
|yii/debug/models/search/Profile|
|yii/debug/models/search/Debug|
|yii/debug/models/search/Event|
|yii/debug/models/UserSwitch|
|yii/elasticsearch/ActiveRecord|
|yii/gii/Generator|
|yii/gii/generators/form/Generator|
|yii/gii/generators/module/Generator|
|yii/gii/generators/extension/Generator|
|yii/gii/generators/crud/Generator|
|yii/gii/generators/model/Generator|
|yii/gii/generators/controller/Generator|
|yii/httpclient/debug/SearchModel|
|yii/mongodb/ActiveRecord|
|yii/mongodb/file/ActiveRecord|
|yii/mongodb/gii/model/Generator|
|yii/queue/gii/Generator|
|yii/redis/ActiveRecord|
|yii/sphinx/ActiveRecord|
|yii/sphinx/gii/model/Generator|
|yii/data/ActiveDataFilter|
|yii/data/DataFilter|
|yii/db/ActiveRecord|
|yii/db/BaseActiveRecord|
|yii/base/DynamicModel|

DESCRIPTION
------------------------------------------------------------------------------

 Model implements the following commonly used features:


   - attribute declaration: by default, every public class member is
   considered as   a model attribute 
   - attribute labels: each attribute may be associated with a label
   for display purpose 
   - massive attribute assignment 
   - scenario-based validation

 Model also raises the following events when performing data validation:


   - 'EVENT_BEFORE_VALIDATE': an event raised at the beginning of
   'validate()' 
   - 'EVENT_AFTER_VALIDATE': an event raised at the end of 'validate()'

 You may directly use Model to store model data, or extend it with
 customization.

 For more details and usage information on Model, see the [guide article on
 models](guide:structure-models).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|


$validators				*yii/base/Model::$validators*

 (\ArrayObject|\yii\validators\Validator[]) All the validators declared in the
 model.

$activeValidators			*yii/base/Model::$activeValidators*

 (\yii\validators\Validator[]) The validators applicable to the current
 'scenario'.

$errors					*yii/base/Model::$errors*

 (array) Errors for all attributes or the specified attribute. Empty array is
 returned if no error. Note that when returning errors for all attributes, the
 result is a two-dimensional array, like the following:

   [
       'username' => [
           'Username is required.',
           'Username must contain only word characters.',
       ],
       'email' => [
           'Email address is invalid.',
       ]
   ]



$firstErrors				*yii/base/Model::$firstErrors*

 (array) The first errors. The array keys are the attribute names, and the
 array values are the corresponding error messages. An empty array will be
 returned if there is no error.

$attributes				*yii/base/Model::$attributes*

 (array) Attribute values (name => value).

$scenario				*yii/base/Model::$scenario*

 (string) The scenario that this model is in. Defaults to 'SCENARIO_DEFAULT'.

$iterator				*yii/base/Model::$iterator*

 (\ArrayIterator) An iterator for traversing the items in the list.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/StaticInstanceTrait::instance|
 |yii/base/ArrayableTrait::extraFields|
 |yii/base/ArrayableTrait::toArray|
 |yii/base/ArrayableTrait::extractRootFields|
 |yii/base/ArrayableTrait::extractFieldsFor|
 |yii/base/ArrayableTrait::resolveFields|


*yii/base/Model::fields*					public
>
 fields()
<
return (array) The list of field names or field definitions.

 Returns the list of fields that should be returned by default by 'toArray()'
 when no specific fields are specified.

 A field is a named element in the returned array by 'toArray()'.

 This method should return an array of field names or field definitions. If
 the former, the field name will be treated as an object property name whose
 value will be used as the field value. If the latter, the array key should be
 the field name while the array value should be the corresponding field
 definition which can be either an object property name or a PHP callable
 returning the corresponding field value. The signature of the callable should
 be:

   function ($model, $field) {
       // return field value
   }

 For example, the following code declares four fields:


   - 'email': the field name is the same as the property name 'email'; 
   - 'firstName' and 'lastName': the field names are 'firstName' and
   'lastName', and their   values are obtained from the 'first_name' and
 'last_name' properties; 
   - 'fullName': the field name is 'fullName'. Its value is obtained by
   concatenating 'first_name'   and 'last_name'.

   return [
       'email',
       'firstName' => 'first_name',
       'lastName' => 'last_name',
       'fullName' => function ($model) {
           return $model->first_name . ' ' . $model->last_name;
       },
   ];

 In this method, you may also want to return different lists of fields based
 on some context information. For example, depending on 'scenario' or the
 privilege of the current application user, you may return different sets of
 visible fields or filter out some fields.

 The default implementation of this method returns 'attributes()' indexed by
 the same attribute names.


*yii/base/Model::rules*					public
>
 rules()
<
return (array) Validation rules

 Returns the validation rules for attributes.

 Validation rules are used by 'validate()' to check if attribute values are
 valid. Child classes may override this method to declare different validation
 rules.

 Each rule is an array with the following structure:

   [
       ['attribute1', 'attribute2'],
       'validator type',
       'on' => ['scenario1', 'scenario2'],
       //...other parameters...
   ]

 where

  
   - attribute list: required, specifies the attributes array to be
   validated, for single attribute you can pass a string;  
   - validator type: required, specifies the validator to be used. It
   can be a built-in validator name,    a method name of the model class, an
 anonymous function, or a validator class name.  
   - on: optional, specifies the 'scenario|scenarios' array in which
   the validation    rule can be applied. If this option is not set, the rule
 will apply to all scenarios.  
   - additional name-value pairs can be specified to initialize the
   corresponding validator properties.    Please refer to individual validator
 class API for possible properties.

 A validator can be either an object of a class extending 'Validator', or a
 model class method (called *inline validator*) that has the following
 signature:

   // $params refers to validation parameters given in the rule
   function validatorName($attribute, $params)

 In the above '$attribute' refers to the attribute currently being validated
 while '$params' contains an array of validator configuration options such as
 'max' in case of 'string' validator. The value of the attribute currently
 being validated can be accessed as '$this->$attribute'. Note the '$' before
 'attribute'; this is taking the value of the variable '$attribute' and using
 it as the name of the property to access.

 Yii also provides a set of 'Validator::builtInValidators|built-in
 validators'. Each one has an alias name which can be used when specifying a
 validation rule.

 Below are some examples:

   [
       // built-in "required" validator
       [['username', 'password'], 'required'],
       // built-in "string" validator customized with "min" and "max"
 properties
       ['username', 'string', 'min' => 3, 'max' => 12],
       // built-in "compare" validator that is used in "register" scenario
 only
       ['password', 'compare', 'compareAttribute' => 'password2', 'on' =>
 'register'],
       // an inline validator defined via the "authenticate()" method in the
 model class
       ['password', 'authenticate', 'on' => 'login'],
       // a validator of class "DateRangeValidator"
       ['dateRange', 'DateRangeValidator'],
   ];

 Note, in order to inherit rules defined in the parent class, a child class
 needs to merge the parent rules with child rules using functions such as
 'array_merge()'.


*yii/base/Model::scenarios*				public
>
 scenarios()
<
return (array) A list of scenarios and the corresponding active attributes.

 Returns a list of scenarios and the corresponding active attributes.

 An active attribute is one that is subject to validation in the current
 scenario. The returned array should be in the following format:

   [
       'scenario1' => ['attribute11', 'attribute12', ...],
       'scenario2' => ['attribute21', 'attribute22', ...],
       ...
   ]

 By default, an active attribute is considered safe and can be massively
 assigned. If an attribute should NOT be massively assigned (thus considered
 unsafe), please prefix the attribute with an exclamation character (e.g.
 ''!rank'').

 The default implementation of this method will return all scenarios found in
 the 'rules()' declaration. A special scenario named 'SCENARIO_DEFAULT' will
 contain all attributes found in the 'rules()'. Each scenario will be
 associated with the attributes that are being validated by the validation
 rules that apply to the scenario.


*yii/base/Model::formName*				public
>
 formName()
<
return (string) The form name of this model class.

 Returns the form name that this model class should use.

 The form name is mainly used by '\yii\widgets\ActiveForm' to determine how to
 name the input fields for the attributes in a model. If the form name is "A"
 and an attribute name is "b", then the corresponding input name would be
 "A[b]". If the form name is an empty string, then the input name would be
 "b".

 The purpose of the above naming schema is that for forms which contain
 multiple different models, the attributes of each model are grouped in
 sub-arrays of the POST-data and it is easier to differentiate between them.

 By default, this method returns the model class name (without the namespace
 part) as the form name. You may override it when the model is used in
 different forms.


*yii/base/Model::attributes*				public
>
 attributes()
<
return (array) List of attribute names.

 Returns the list of attribute names.

 By default, this method returns all public non-static properties of the
 class. You may override this method to change the default behavior.


*yii/base/Model::attributeLabels*				public
>
 attributeLabels()
<
return (array) Attribute labels (name => label)

 Returns the attribute labels.

 Attribute labels are mainly used for display purpose. For example, given an
 attribute 'firstName', we can declare a label 'First Name' which is more
 user-friendly and can be displayed to end users.

 By default an attribute label is generated using 'generateAttributeLabel()'.
 This method allows you to explicitly specify attribute labels.

 Note, in order to inherit labels defined in the parent class, a child class
 needs to merge the parent labels with child labels using functions such as
 'array_merge()'.


*yii/base/Model::attributeHints*				public
>
 attributeHints()
<
return (array) Attribute hints (name => hint)

 Returns the attribute hints.

 Attribute hints are mainly used for display purpose. For example, given an
 attribute 'isPublic', we can declare a hint 'Whether the post should be
 visible for not logged in users', which provides user-friendly description of
 the attribute meaning and can be displayed to end users.

 Unlike label hint will not be generated, if its explicit declaration is
 omitted.

 Note, in order to inherit hints defined in the parent class, a child class
 needs to merge the parent hints with child hints using functions such as
 'array_merge()'.


*yii/base/Model::validate*				public
>
 validate($attributeNames='null', $clearErrors='true')
<
return (bool) Whether the validation is successful without any error.

 Performs the data validation.

 This method executes the validation rules applicable to the current
 'scenario'. The following criteria are used to determine whether a rule is
 currently applicable:


   - the rule must be associated with the attributes relevant to the
   current scenario; 
   - the rules must be effective for the current scenario.

 This method will call 'beforeValidate()' and 'afterValidate()' before and
 after the actual validation, respectively. If 'beforeValidate()' returns
 false, the validation will be cancelled and 'afterValidate()' will not be
 called.

 Errors found during the validation can be retrieved via 'getErrors()',
 'getFirstErrors()' and 'getFirstError()'.

    [$attributeNames] (string[]|string) Attribute name or list of attribute
    names that should be validated. If this parameter is empty, it means any
    attribute listed in the applicable validation rules should be validated.
    [$clearErrors] (bool) Whether to call 'clearErrors()' before performing
    validation


*yii/base/Model::beforeValidate*				public
>
 beforeValidate()
<
return (bool) Whether the validation should be executed. Defaults to true. If false
is returned, the validation will stop and the model is considered invalid.

 This method is invoked before validation starts.

 The default implementation raises a 'beforeValidate' event. You may override
 this method to do preliminary checks before validation. Make sure the parent
 implementation is invoked so that the event can be raised.


*yii/base/Model::afterValidate*				public
>
 afterValidate()
<
return (void)

 This method is invoked after validation ends.

 The default implementation raises an 'afterValidate' event. You may override
 this method to do postprocessing after validation. Make sure the parent
 implementation is invoked so that the event can be raised.


*yii/base/Model::getValidators*				public
>
 getValidators()
<
return (\ArrayObject|\yii\validators\Validator[]) All the validators declared in the
model.

 Returns all the validators declared in 'rules()'.

 This method differs from 'getActiveValidators()' in that the latter only
 returns the validators applicable to the current 'scenario'.

 Because this method returns an ArrayObject object, you may manipulate it by
 inserting or removing validators (useful in model behaviors). For example,

   $model->validators[] = $newValidator;




*yii/base/Model::getActiveValidators*			public
>
 getActiveValidators($attribute='null')
<
return (\yii\validators\Validator[]) The validators applicable to the current
'scenario'.

 Returns the validators applicable to the current 'scenario'.

    [$attribute] (string) The name of the attribute whose applicable
    validators should be returned. If this is null, the validators for ALL
    attributes in the model will be returned.


*yii/base/Model::createValidators*			public
>
 createValidators()
<
return (\ArrayObject) Validators

 Creates validator objects based on the validation rules specified in
 'rules()'.

 Unlike 'getValidators()', each time this method is called, a new list of
 validators will be returned.


*yii/base/Model::isAttributeRequired*			public
>
 isAttributeRequired($attribute)
<
return (bool) Whether the attribute is required

 Returns a value indicating whether the attribute is required.

 This is determined by checking if the attribute is associated with a
 '\yii\validators\RequiredValidator|required' validation rule in the current
 'scenario'.

 Note that when the validator has a conditional validation applied using
 '\yii\validators\RequiredValidator::$when|$when' this method will return
 'false' regardless of the 'when' condition because it may be called be before
 the model is loaded with data.

    [$attribute] (string) Attribute name


*yii/base/Model::isAttributeSafe*				public
>
 isAttributeSafe($attribute)
<
return (bool) Whether the attribute is safe for massive assignments

 Returns a value indicating whether the attribute is safe for massive
 assignments.

    [$attribute] (string) Attribute name


*yii/base/Model::isAttributeActive*			public
>
 isAttributeActive($attribute)
<
return (bool) Whether the attribute is active in the current scenario

 Returns a value indicating whether the attribute is active in the current
 scenario.

    [$attribute] (string) Attribute name


*yii/base/Model::getAttributeLabel*			public
>
 getAttributeLabel($attribute)
<
return (string) The attribute label

 Returns the text label for the specified attribute.

    [$attribute] (string) The attribute name


*yii/base/Model::getAttributeHint*			public
>
 getAttributeHint($attribute)
<
return (string) The attribute hint

 Returns the text hint for the specified attribute.

    [$attribute] (string) The attribute name


*yii/base/Model::hasErrors*				public
>
 hasErrors($attribute='null')
<
return (bool) Whether there is any error.

 Returns a value indicating whether there is any validation error.

    [$attribute] (string|null) Attribute name. Use null to check all
    attributes.


*yii/base/Model::getErrors*				public
>
 getErrors($attribute='null')
<
return (array) Errors for all attributes or the specified attribute. Empty array is
returned if no error. Note that when returning errors for all attributes, the
result is a two-dimensional array, like the following:

  [
      'username' => [
          'Username is required.',
          'Username must contain only word characters.',
      ],
      'email' => [
          'Email address is invalid.',
      ]
  ]



 Returns the errors for all attributes or a single attribute.

    [$attribute] (string) Attribute name. Use null to retrieve errors for all
    attributes.


*yii/base/Model::getFirstErrors*				public
>
 getFirstErrors()
<
return (array) The first errors. The array keys are the attribute names, and the
array values are the corresponding error messages. An empty array will be
returned if there is no error.

 Returns the first error of every attribute in the model.


*yii/base/Model::getFirstError*				public
>
 getFirstError($attribute)
<
return (string) The error message. Null is returned if no error.

 Returns the first error of the specified attribute.

    [$attribute] (string) Attribute name.


*yii/base/Model::getErrorSummary*				public
>
 getErrorSummary($showAllErrors)
<
return (array) Errors for all attributes as a one-dimensional array. Empty array is
returned if no error.

 Returns the errors for all attributes as a one-dimensional array.

    [$showAllErrors] (bool) Boolean, if set to true every error message for
    each attribute will be shown otherwise only the first error message for
    each attribute will be shown.


*yii/base/Model::addError*				public
>
 addError($attribute, $error='''')
<
return (void)

 Adds a new error to the specified attribute.

    [$attribute] (string) Attribute name
    [$error] (string) New error message


*yii/base/Model::addErrors*				public
>
 addErrors($items)
<
return (void)

 Adds a list of errors.

    [$items] (array) A list of errors. The array keys must be attribute names.
    The array values should be error messages. If an attribute has multiple
    errors, these errors must be given in terms of an array. You may use the
    result of 'getErrors()' as the value for this parameter.


*yii/base/Model::clearErrors*				public
>
 clearErrors($attribute='null')
<
return (void)

 Removes errors for all attributes or a single attribute.

    [$attribute] (string) Attribute name. Use null to remove errors for all
    attributes.


*yii/base/Model::generateAttributeLabel*			public
>
 generateAttributeLabel($name)
<
return (string) The attribute label

 Generates a user friendly attribute label based on the give attribute name.

 This is done by replacing underscores, dashes and dots with blanks and
 changing the first letter of each word to upper case. For example,
 'department_name' or 'DepartmentName' will generate 'Department Name'.

    [$name] (string) The column name


*yii/base/Model::getAttributes*				public
>
 getAttributes($names='null', $except='[]')
<
return (array) Attribute values (name => value).

 Returns attribute values.

    [$names] (array) List of attributes whose value needs to be returned.
    Defaults to null, meaning all attributes listed in 'attributes()' will be
    returned. If it is an array, only the attributes in the array will be
    returned.
    [$except] (array) List of attributes whose value should NOT be returned.


*yii/base/Model::setAttributes*				public
>
 setAttributes($values, $safeOnly='true')
<
return (void)

 Sets the attribute values in a massive way.

    [$values] (array) Attribute values (name => value) to be assigned to the
    model.
    [$safeOnly] (bool) Whether the assignments should only be done to the safe
    attributes. A safe attribute is one that is associated with a validation
    rule in the current 'scenario'.


*yii/base/Model::onUnsafeAttribute*			public
>
 onUnsafeAttribute($name, $value)
<
return (void)

 This method is invoked when an unsafe attribute is being massively assigned.

 The default implementation will log a warning message if YII_DEBUG is on. It
 does nothing otherwise.

    [$name] (string) The unsafe attribute name
    [$value] (mixed) The attribute value


*yii/base/Model::getScenario*				public
>
 getScenario()
<
return (string) The scenario that this model is in. Defaults to 'SCENARIO_DEFAULT'.

 Returns the scenario that this model is used in.

 Scenario affects how validation is performed and which attributes can be
 massively assigned.


*yii/base/Model::setScenario*				public
>
 setScenario($value)
<
return (void)

 Sets the scenario for the model.

 Note that this method does not check if the scenario exists or not. The
 method 'validate()' will perform this check.

    [$value] (string) The scenario that this model is in.


*yii/base/Model::safeAttributes*				public
>
 safeAttributes()
<
return (string[]) Safe attribute names

 Returns the attribute names that are safe to be massively assigned in the
 current scenario.


*yii/base/Model::activeAttributes*			public
>
 activeAttributes()
<
return (string[]) Safe attribute names

 Returns the attribute names that are subject to validation in the current
 scenario.


*yii/base/Model::load*					public
>
 load($data, $formName='null')
<
return (bool) Whether 'load()' found the expected form in '$data'.

 Populates the model with input data.

 This method provides a convenient shortcut for:

   if (isset($_POST['FormName'])) {
       $model->attributes = $_POST['FormName'];
       if ($model->save()) {
           // handle success
       }
   }

 which, with 'load()' can be written as:

   if ($model->load($_POST) && $model->save()) {
       // handle success
   }

 'load()' gets the ''FormName'' from the model's 'formName()' method (which
 you may override), unless the '$formName' parameter is given. If the form
 name is empty, 'load()' populates the model with the whole of '$data',
 instead of '$data['FormName']'.

 Note, that the data being populated is subject to the safety check by
 'setAttributes()'.

    [$data] (array) The data array to load, typically '$_POST' or '$_GET'.
    [$formName] (string) The form name to use to load the data into the model.
    If not set, 'formName()' is used.


*yii/base/Model::loadMultiple*				public
>
 loadMultiple($models, $data, $formName='null')
<
return (bool) Whether at least one of the models is successfully populated.

 Populates a set of models with the data from end user.

 This method is mainly used to collect tabular data input. The data to be
 loaded for each model is '$data[formName][index]', where 'formName' refers to
 the value of 'formName()', and 'index' the index of the model in the
 '$models' array. If 'formName()' is empty, '$data[index]' will be used to
 populate each model. The data being populated to each model is subject to the
 safety check by 'setAttributes()'.

    [$models] (array) The models to be populated. Note that all models should
    have the same class.
    [$data] (array) The data array. This is usually '$_POST' or '$_GET', but
    can also be any valid array supplied by end user.
    [$formName] (string) The form name to be used for loading the data into
    the models. If not set, it will use the 'formName()' value of the first
    model in '$models'. This parameter is available since version 2.0.1.


*yii/base/Model::validateMultiple*			public
>
 validateMultiple($models, $attributeNames='null')
<
return (bool) Whether all models are valid. False will be returned if one or multiple
models have validation error.

 Validates multiple models.

 This method will validate every model. The models being validated may be of
 the same or different types.

    [$models] (array) The models to be validated
    [$attributeNames] (array) List of attribute names that should be
    validated. If this parameter is empty, it means any attribute listed in
    the applicable validation rules should be validated.


*yii/base/Model::getIterator*				public
>
 getIterator()
<
return (\ArrayIterator) An iterator for traversing the items in the list.

 Returns an iterator for traversing the attributes in the model.

 This method is required by the interface '\IteratorAggregate'.


*yii/base/Model::offsetExists*				public
>
 offsetExists($offset)
<
return (bool) Whether or not an offset exists.

 Returns whether there is an element at the specified offset.

 This method is required by the SPL interface '\ArrayAccess'. It is implicitly
 called when you use something like 'isset($model[$offset])'.

    [$offset] (mixed) The offset to check on.


*yii/base/Model::offsetGet*				public
>
 offsetGet($offset)
<
return (mixed) The element at the offset, null if no element is found at the offset

 Returns the element at the specified offset.

 This method is required by the SPL interface '\ArrayAccess'. It is implicitly
 called when you use something like '$value = $model[$offset];'.

    [$offset] (mixed) The offset to retrieve element.


*yii/base/Model::offsetSet*				public
>
 offsetSet($offset, $item)
<
return (void)

 Sets the element at the specified offset.

 This method is required by the SPL interface '\ArrayAccess'. It is implicitly
 called when you use something like '$model[$offset] = $item;'.

    [$offset] (int) The offset to set element
    [$item] (mixed) The element value


*yii/base/Model::offsetUnset*				public
>
 offsetUnset($offset)
<
return (void)

 Sets the element value at the specified offset to null.

 This method is required by the SPL interface '\ArrayAccess'. It is implicitly
 called when you use something like 'unset($model[$offset])'.

    [$offset] (mixed) The offset to unset element



 vim:tw=78:ts=8:ft=help:norl:
