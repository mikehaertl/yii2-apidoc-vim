
*yii/redis/Connection*   >> |yii/base/Component|
======================

DESCRIPTION
------------------------------------------------------------------------------

 By default it assumes there is a redis server running on localhost at port
 6379 and uses the database number 0.

 It is possible to connect to a redis server using 'hostname' and 'port' or
 using a 'unixSocket'.

 It also supports [the AUTH command](http://redis.io/commands/auth) of redis.
 When the server needs authentication, you can set the 'password' property to
 authenticate with the server after connect.

 The execution of [redis commands](http://redis.io/commands) is possible with
 via 'executeCommand()'.


PROPERTY DETAILS
------------------------------------------------------------------------------


$hostname				*yii/redis/Connection::$hostname*

 (string) The hostname or ip address to use for connecting to the redis
 server. Defaults to 'localhost'. If 'unixSocket' is specified, hostname and
 'port' will be ignored.

$port					*yii/redis/Connection::$port*

 (integer) The port to use for connecting to the redis server. Default port is
 6379. If 'unixSocket' is specified, 'hostname' and port will be ignored.

$unixSocket				*yii/redis/Connection::$unixSocket*

 (string) The unix socket path (e.g. '/var/run/redis/redis.sock') to use for
 connecting to the redis server. This can be used instead of 'hostname' and
 'port' to connect to the server using a unix socket. If a unix socket path is
 specified, 'hostname' and 'port' will be ignored.

$password				*yii/redis/Connection::$password*

 (string) The password for establishing DB connection. Defaults to null
 meaning no AUTH command is sent. See http://redis.io/commands/auth

$database				*yii/redis/Connection::$database*

 (integer) The redis database to use. This is an integer value starting from
 0. Defaults to 0. Since version 2.0.6 you can disable the SELECT command sent
 after connection by setting this property to 'null'.

$connectionTimeout			*yii/redis/Connection::$connectionTimeout*

 (float) Timeout to use for connection to redis. If not set the timeout set in
 php.ini will be used: 'ini_get("default_socket_timeout")'.

$dataTimeout				*yii/redis/Connection::$dataTimeout*

 (float) Timeout to use for redis socket when reading and writing data. If not
 set the php default value will be used.

$socketClientFlags			*yii/redis/Connection::$socketClientFlags*

 (integer) Bitmask field which may be set to any combination of connection
 flags passed to
 [stream_socket_client()](http://php.net/manual/en/function.stream-socket-client.php).
 Currently the select of connection flags is limited to
 'STREAM_CLIENT_CONNECT' (default), 'STREAM_CLIENT_ASYNC_CONNECT' and
 'STREAM_CLIENT_PERSISTENT'.

 > Warning: 'STREAM_CLIENT_PERSISTENT' will make PHP reuse connections to the
 same server. If you are using multiple > connection objects to refer to
 different redis '$database|databases' on the same 'port', redis commands may
 > get executed on the wrong database. 'STREAM_CLIENT_PERSISTENT' is only safe
 to use if you use only one database. > > You may still use persistent
 connections in this case when disambiguating ports as described > in [a
 comment on the PHP
 manual](http://php.net/manual/en/function.stream-socket-client.php#105393) >
 e.g. on the connection used for session storage, specify the port as: > >

   > 'port' => '6379/session'
   > 



$retries				*yii/redis/Connection::$retries*

 (integer) The number of times a command execution should be retried when a
 connection failure occurs. This is used in 'executeCommand()' when a
 'SocketException' is thrown. Defaults to 0 meaning no retries on failure.

$redisCommands				*yii/redis/Connection::$redisCommands*

 (array) List of available redis commands.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/redis/Connection::__sleep*				public
>
 __sleep()
<
return (array) 

 Closes the connection when this component is being serialized.


*yii/redis/Connection::getIsActive*			public
>
 getIsActive()
<
return (bool) Whether the DB connection is established

 Returns a value indicating whether the DB connection is established.


*yii/redis/Connection::open*				public
>
 open()
<
return (void)

 Establishes a DB connection.

 It does nothing if a DB connection has already been established.


*yii/redis/Connection::close*				public
>
 close()
<
return (void)

 Closes the currently active DB connection.

 It does nothing if the connection is already closed.


*yii/redis/Connection::initConnection*			protected
>
 initConnection()
<
return (void)

 Initializes the DB connection.

 This method is invoked right after the DB connection is established. The
 default implementation triggers an 'EVENT_AFTER_OPEN' event.


*yii/redis/Connection::getDriverName*			public
>
 getDriverName()
<
return (string) Name of the DB driver

 Returns the name of the DB driver for the current 'dsn'.


*yii/redis/Connection::getLuaScriptBuilder*		public
>
 getLuaScriptBuilder()
<
return (\yii\redis\LuaScriptBuilder) 



*yii/redis/Connection::__call*				public
>
 __call($name, $params)
<
return (mixed) 

 Allows issuing all supported commands via magic methods.



   $redis->hmset('test_collection', 'key1', 'val1', 'key2', 'val2')



    [$name] (string) Name of the missing method to execute
    [$params] (array) Method call arguments


*yii/redis/Connection::executeCommand*			public
>
 executeCommand($name, $params='[]')
<
return (array|bool|null|string) Dependent on the executed command this method will
return different data types:


  - 'true' for commands that return "status reply" with the message
  ''OK'' or ''PONG''. 
  - 'string' for commands that return "status reply" that does not
  have the message 'OK' (since version 2.0.1). 
  - 'string' for commands that return "integer reply"   as the value is in the
range of a signed 64 bit integer. 
  - 'string' or 'null' for commands that return "bulk reply". 
  - 'array' for commands that return "Multi-bulk replies".

See [redis protocol description](http://redis.io/topics/protocol) for details
on the mentioned reply types.

 Executes a redis command.

 For a list of available commands and their parameters see
 http://redis.io/commands.

 The params array should contain the params separated by white space, e.g. to
 execute 'SET mykey somevalue NX' call the following:

   $redis->executeCommand('SET', ['mykey', 'somevalue', 'NX']);



    [$name] (string) The name of the command
    [$params] (array) List of parameters for the command



 vim:tw=78:ts=8:ft=help:norl:
