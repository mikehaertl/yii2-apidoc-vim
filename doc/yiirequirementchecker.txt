
*YiiRequirementChecker*  
=======================

DESCRIPTION
------------------------------------------------------------------------------

 This class allows rendering of the check report for the web and console
 application interface.

 Example:

   require_once 'path/to/YiiRequirementChecker.php';
   $requirementsChecker = new YiiRequirementChecker();
   $requirements = array(
       array(
           'name' => 'PHP Some Extension',
           'mandatory' => true,
           'condition' => extension_loaded('some_extension'),
           'by' => 'Some application feature',
           'memo' => 'PHP extension "some_extension" required',
       ),
   );
   $requirementsChecker->checkYii()->check($requirements)->render();

 If you wish to render the report with your own representation, use
 'getResult()' instead of 'render()'

 Requirement condition could be in format "eval:PHP expression". In this case
 specified PHP expression will be evaluated in the context of this class
 instance. For example:

   $requirements = array(
       array(
           'name' => 'Upload max file size',
           'condition' => 'eval:$this->checkUploadMaxFileSize("5M")',
       ),
   );

 Note: this class definition does not match ordinary Yii style, because it
 should match PHP 4.3 and should not use features from newer PHP versions!



METHOD DETAILS
------------------------------------------------------------------------------


*YiiRequirementChecker::check*				public
>
 check($requirements)
<
return ($this) Self instance.

 Check the given requirements, collecting results into internal field.

 This method can be invoked several times checking different requirement sets.
 Use 'getResult()' or 'render()' to get the results.

    [$requirements] (array|string) Requirements to be checked. If an array, it
    is treated as the set of requirements; If a string, it is treated as the
    path of the file, which contains the requirements;


*YiiRequirementChecker::checkYii*				public
>
 checkYii()
<
return (\YiiRequirementChecker) Self instance.

 Performs the check for the Yii core requirements.


*YiiRequirementChecker::getResult*			public
>
 getResult()
<
return (array|null) Check results in format:

  array(
      'summary' => array(
          'total' => total number of checks,
          'errors' => number of errors,
          'warnings' => number of warnings,
      ),
      'requirements' => array(
          array(
              ...
              'error' => is there an error,
              'warning' => is there a warning,
          ),
          ...
      ),
  )



 Return the check results.


*YiiRequirementChecker::render*				public
>
 render()
<
return (void)

 Renders the requirements check result.

 The output will vary depending is a script running from web or from console.


*YiiRequirementChecker::checkPhpExtensionVersion*		public
>
 checkPhpExtensionVersion($extensionName, $version, $compare=''>='')
<
return (bool) If PHP extension version matches.

 Checks if the given PHP extension is available and its version matches the
 given one.

    [$extensionName] (string) PHP extension name.
    [$version] (string) Required PHP extension version.
    [$compare] (string) Comparison operator, by default '>='


*YiiRequirementChecker::checkPhpIniOn*			public
>
 checkPhpIniOn($name)
<
return (bool) Option is on.

 Checks if PHP configuration option (from php.ini) is on.

    [$name] (string) Configuration option name.


*YiiRequirementChecker::checkPhpIniOff*			public
>
 checkPhpIniOff($name)
<
return (bool) Option is off.

 Checks if PHP configuration option (from php.ini) is off.

    [$name] (string) Configuration option name.


*YiiRequirementChecker::compareByteSize*			public
>
 compareByteSize($a, $b, $compare=''>='')
<
return (bool) Comparison result.

 Compare byte sizes of values given in the verbose representation, like '5M',
 '15K' etc.

    [$a] (string) First value.
    [$b] (string) Second value.
    [$compare] (string) Comparison operator, by default '>='.


*YiiRequirementChecker::getByteSize*			public
>
 getByteSize($verboseSize)
<
return (int) Actual size in bytes.

 Gets the size in bytes from verbose size representation.

 For example: '5K' => 5*1024

    [$verboseSize] (string) Verbose size representation.


*YiiRequirementChecker::checkUploadMaxFileSize*		public
>
 checkUploadMaxFileSize($min='null', $max='null')
<
return (bool) Success.

 Checks if upload max file size matches the given range.

    [$min] (string|null) Verbose file size minimum required value, pass null
    to skip minimum check.
    [$max] (string|null) Verbose file size maximum required value, pass null
    to skip maximum check.


*YiiRequirementChecker::renderViewFile*			public
>
 renderViewFile($_viewFile_, $_data_='null', $_return_='false')
<
return (string) The rendering result. Null if the rendering result is not required.

 Renders a view file.

 This method includes the view file as a PHP script and captures the display
 result if required.

    [$_viewFile_] (string) View file
    [$_data_] (array) Data to be extracted and made available to the view file
    [$_return_] (bool) Whether the rendering result should be returned as a
    string


*YiiRequirementChecker::normalizeRequirement*		public
>
 normalizeRequirement($requirement, $requirementKey=0)
<
return (array) Normalized requirement.

 Normalizes requirement ensuring it has correct format.

    [$requirement] (array) Raw requirement.
    [$requirementKey] (int) Requirement key in the list.


*YiiRequirementChecker::usageError*			public
>
 usageError($message)
<
return (void)

 Displays a usage error.

 This method will then terminate the execution of the current application.

    [$message] (string) The error message


*YiiRequirementChecker::evaluateExpression*		public
>
 evaluateExpression($expression)
<
return (mixed) The expression result.

 Evaluates a PHP expression under the context of this class.

    [$expression] (string) A PHP expression to be evaluated.


*YiiRequirementChecker::getServerInfo*			public
>
 getServerInfo()
<
return (string) Server information.

 Returns the server information.


*YiiRequirementChecker::getNowDate*			public
>
 getNowDate()
<
return (string) Now date.

 Returns the now date if possible in string representation.



 vim:tw=78:ts=8:ft=help:norl:
