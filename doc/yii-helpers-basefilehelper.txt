
*yii/helpers/BaseFileHelper*  
============================

SUBCLASSES
------------------------------------------------------------------------------

|yii/helpers/FileHelper|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseFileHelper. Use 'FileHelper' instead.



METHOD DETAILS
------------------------------------------------------------------------------

yii/helpers/BaseFileHelper::normalizePath		       public
>
 normalizePath($path, $ds='DIRECTORY_SEPARATOR')
<
(string) The normalized file/directory path

 After normalization, the directory separators in the path will be
 'DIRECTORY_SEPARATOR', and any trailing directory separators will be removed.
 For example, '/home\demo/' on Linux will be normalized as '/home/demo'.
    [$path] (string) The file/directory path to be normalized
    [$ds] (string) The directory separator to be used in the normalized
    result. Defaults to 'DIRECTORY_SEPARATOR'.


yii/helpers/BaseFileHelper::localize			       public
>
 localize($file, $language='null', $sourceLanguage='null')
<
(string) The matching localized file, or the original file if the localized
version is not found. If the target and the source language codes are the
same, the original file will be returned.

 The searching is based on the specified language code. In particular, a file
 with the same name will be looked for under the subdirectory whose name is
 the same as the language code. For example, given the file "path/to/view.php"
 and language code "zh-CN", the localized file will be looked for as
 "path/to/zh-CN/view.php". If the file is not found, it will try a fallback
 with just a language code that is "zh" i.e. "path/to/zh/view.php". If it is
 not found as well the original file will be returned.

 If the target and the source language codes are the same, the original file
 will be returned.
    [$file] (string) The original file
    [$language] (string) The target language that the file should be localized
    to. If not set, the value of '\yii\base\Application::language' will be
    used.
    [$sourceLanguage] (string) The language that the original file is in. If
    not set, the value of '\yii\base\Application::sourceLanguage' will be
    used.


yii/helpers/BaseFileHelper::getMimeType 		       public
>
 getMimeType($file, $magicFile='null', $checkExtension='true')
<
(string) The MIME type (e.g. 'text/plain'). Null is returned if the MIME type
cannot be determined.

 This method will first try to determine the MIME type based on
 [finfo_open](http://php.net/manual/en/function.finfo-open.php). If this
 doesn't work, it will fall back to 'getMimeTypeByExtension()'.
    [$file] (string) The file name.
    [$magicFile] (string) Name of the optional magic database file, usually
    something like '/path/to/magic.mime'. This will be passed as the second
    parameter to
    [finfo_open](http://php.net/manual/en/function.finfo-open.php).
    [$checkExtension] (boolean) Whether to use the file extension to determine
    the MIME type in case 'finfo_open()' cannot determine it.


yii/helpers/BaseFileHelper::getMimeTypeByExtension	       public
>
 getMimeTypeByExtension($file, $magicFile='null')
<
(string) The MIME type. Null is returned if the MIME type cannot be
determined.

 This method will use a local map between extension names and MIME types.
    [$file] (string) The file name.
    [$magicFile] (string) The path of the file that contains all available
    MIME type information. If this is not set, the default file aliased by
    '@yii/util/mimeTypes.php' will be used.


yii/helpers/BaseFileHelper::copyDirectory		       public
>
 copyDirectory($src, $dst, $options='[]')
<
(void)

 The files and sub-directories will also be copied over.
    [$src] (string) The source directory
    [$dst] (string) The destination directory
    [$options] (array) Options for directory copy. Valid options are:

    - dirMode: integer, the permission to be set for newly copied directories.
    Defaults to 0775. - fileMode:  integer, the permission to be set for newly
    copied files. Defaults to the current environment setting. - filter:
    callback, a PHP callback that is called for each directory or file.   The
    signature of the callback should be: 'function ($path)', where '$path'
    refers the full path to be filtered.   The callback can return one of the
    following values:

      * true: the directory or file will be copied (the "only" and "except"
    options will be ignored)   * false: the directory or file will NOT be
    copied (the "only" and "except" options will be ignored)   * null: the
    "only" and "except" options will determine whether the directory or file
    should be copied

    - only: array, list of patterns that the file paths should match if they
    want to be copied.   A path matches a pattern if it contains the pattern
    string at its end.   For example, '.php' matches all file paths ending
    with '.php'.   Note, the '/' characters in a pattern matches both '/' and
    '\' in the paths.   If a file path matches a pattern in both "only" and
    "except", it will NOT be copied. - except: array, list of patterns that
    the files or directories should match if they want to be excluded from
    being copied.   A path matches a pattern if it contains the pattern string
    at its end.   Patterns ending with '/' apply to directory paths only, and
    patterns not ending with '/'   apply to file paths only. For example,
    '/a/b' matches all file paths ending with '/a/b';   and '.svn/' matches
    directory paths ending with '.svn'. Note, the '/' characters in a pattern
    matches   both '/' and '\' in the paths. - recursive: boolean, whether the
    files under the subdirectories should also be copied. Defaults to true. -
    beforeCopy: callback, a PHP callback that is called before copying each
    sub-directory or file.   If the callback returns false, the copy operation
    for the sub-directory or file will be cancelled.   The signature of the
    callback should be: 'function ($from, $to)', where '$from' is the
    sub-directory or   file to be copied from, while '$to' is the copy target.
    - afterCopy: callback, a PHP callback that is called after each
    sub-directory or file is successfully copied.   The signature of the
    callback should be: 'function ($from, $to)', where '$from' is the
    sub-directory or   file copied from, while '$to' is the copy target.


yii/helpers/BaseFileHelper::removeDirectory		       public
>
 removeDirectory($dir)
<
(void)


    [$dir] (string) The directory to be deleted recursively.


yii/helpers/BaseFileHelper::findFiles			       public
>
 findFiles($dir, $options='[]')
<
(array) Files found under the directory. The file list is sorted.


    [$dir] (string) The directory under which the files will be looked for.
    [$options] (array) Options for file searching. Valid options are:

    - filter: callback, a PHP callback that is called for each directory or
    file.   The signature of the callback should be: 'function ($path)', where
    '$path' refers the full path to be filtered.   The callback can return one
    of the following values:

      * true: the directory or file will be returned (the "only" and "except"
    options will be ignored)   * false: the directory or file will NOT be
    returned (the "only" and "except" options will be ignored)   * null: the
    "only" and "except" options will determine whether the directory or file
    should be returned

    - except: array, list of patterns excluding from the results matching file
    or directory paths.   Patterns ending with '/' apply to directory paths
    only, and patterns not ending with '/'   apply to file paths only. For
    example, '/a/b' matches all file paths ending with '/a/b';   and '.svn/'
    matches directory paths ending with '.svn'.   If the pattern does not
    contain a slash /, it is treated as a shell glob pattern and checked for a
    match against the pathname relative to $dir.   Otherwise, the pattern is
    treated as a shell glob suitable for consumption by fnmatch(3) with the
    FNM_PATHNAME flag: wildcards in the pattern will not match a / in the
    pathname.   For example, "views/*.php" matches "views/index.php" but not
    "views/controller/index.php".   A leading slash matches the beginning of
    the pathname. For example, "/*.php" matches "index.php" but not
    "views/start/index.php".   An optional prefix "!" which negates the
    pattern; any matching file excluded by a previous pattern will become
    included again.   If a negated pattern matches, this will override lower
    precedence patterns sources. Put a backslash ("\") in front of the first
    "!"   for patterns that begin with a literal "!", for example,
    "\!important!.txt".   Note, the '/' characters in a pattern matches both
    '/' and '\' in the paths. - only: array, list of patterns that the file
    paths should match if they are to be returned. Directory paths are not
    checked against them.   Same pattern matching rules as in the "except"
    option are used.   If a file path matches a pattern in both "only" and
    "except", it will NOT be returned. - recursive: boolean, whether the files
    under the subdirectories should also be looked for. Defaults to true.


yii/helpers/BaseFileHelper::filterPath			       public
>
 filterPath($path, $options)
<
(boolean) Whether the file or directory satisfies the filtering options.


    [$path] (string) The path of the file or directory to be checked
    [$options] (array) The filtering options. See 'findFiles()' for
    explanations of the supported options.


yii/helpers/BaseFileHelper::createDirectory		       public
>
 createDirectory($path, $mode=509, $recursive='true')
<
(boolean) Whether the directory is created successfully

 This method is similar to the PHP 'mkdir()' function except that it uses
 'chmod()' to set the permission of the created directory in order to avoid
 the impact of the 'umask' setting.
    [$path] (string) Path of the directory to be created.
    [$mode] (integer) The permission to be set for the created directory.
    [$recursive] (boolean) Whether to create parent directories if they do not
    exist.



 vim:tw=78:ts=8:ft=help:norl:
