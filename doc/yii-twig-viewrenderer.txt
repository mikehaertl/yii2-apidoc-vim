
*yii/twig/ViewRenderer*   >> |yii/base/ViewRenderer|
=======================


PROPERTY DETAILS
------------------------------------------------------------------------------

$cachePath				*yii/twig/ViewRenderer::$cachePath*

 (string) The directory or path alias pointing to where Twig cache will be
 stored. Set to false to disable templates cache.

$options				*yii/twig/ViewRenderer::$options*

 (array) Twig options.

$globals				*yii/twig/ViewRenderer::$globals*

 (array) Objects or static classes. Keys of the array are names to call in
 template, values are objects or names of static classes. Example: '['html' =>
 '\yii\helpers\Html']'. In the template you can use it like this: '{{
 html.a('Login', 'site/login') | raw }}'.

$functions				*yii/twig/ViewRenderer::$functions*

 (array) Custom functions. Keys of the array are names to call in template,
 values are names of functions or static methods of some class. Example:
 '['rot13' => 'str_rot13', 'a' => '\yii\helpers\Html::a']'. In the template
 you can use it like this: '{{ rot13('test') }}' or '{{ a('Login',
 'site/login') | raw }}'.

$filters				*yii/twig/ViewRenderer::$filters*

 (array) Custom filters. Keys of the array are names to call in template,
 values are names of functions or static methods of some class. Example:
 '['rot13' => 'str_rot13', 'jsonEncode' => '\yii\helpers\Json::encode']'. In
 the template you can use it like this: '{{ 'test'|rot13 }}' or '{{
 model|jsonEncode }}'.

$extensions				*yii/twig/ViewRenderer::$extensions*

 (array) Custom extensions. Example: '['Twig_Extension_Sandbox', new
 \Twig_Extension_Text()]'

$lexerOptions				*yii/twig/ViewRenderer::$lexerOptions*

 (array) Twig lexer options.

 Example: Smarty-like syntax:

   [
       'tag_comment'  => ['{*', '*}'],
       'tag_block'    => ['{', '}'],
       'tag_variable' => ['{$', '}']
   ]



$uses					*yii/twig/ViewRenderer::$uses*

 (array) Namespaces and classes to import.

 Example:

   [
       'yii\bootstrap',
       'app\assets',
       \yii\bootstrap\NavBar::className(),
   ]



$twig					*yii/twig/ViewRenderer::$twig*

 (\Twig_Environment) Twig environment object that renders twig templates

$behaviors				*yii/twig/ViewRenderer::$behaviors*

 See |yii/base/Component::$behaviors|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/twig/ViewRenderer::className*			public

 See |yii/base/Object::className|


*yii/twig/ViewRenderer::__construct*			public

 See |yii/base/Object::__construct|


*yii/twig/ViewRenderer::init*				public
>
 init()
<
return (void)



*yii/twig/ViewRenderer::__get*				public

 See |yii/base/Component::__get|


*yii/twig/ViewRenderer::__set*				public

 See |yii/base/Component::__set|


*yii/twig/ViewRenderer::__isset*				public

 See |yii/base/Component::__isset|


*yii/twig/ViewRenderer::__unset*				public

 See |yii/base/Component::__unset|


*yii/twig/ViewRenderer::__call*				public

 See |yii/base/Component::__call|


*yii/twig/ViewRenderer::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/twig/ViewRenderer::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/twig/ViewRenderer::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/twig/ViewRenderer::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/twig/ViewRenderer::__clone*				public

 See |yii/base/Component::__clone|


*yii/twig/ViewRenderer::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/twig/ViewRenderer::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/twig/ViewRenderer::on*				public

 See |yii/base/Component::on|


*yii/twig/ViewRenderer::off*				public

 See |yii/base/Component::off|


*yii/twig/ViewRenderer::trigger*				public

 See |yii/base/Component::trigger|


*yii/twig/ViewRenderer::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/twig/ViewRenderer::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/twig/ViewRenderer::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/twig/ViewRenderer::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/twig/ViewRenderer::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/twig/ViewRenderer::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/twig/ViewRenderer::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/twig/ViewRenderer::render*				public
>
 render($view, $file, $params)
<
return (string) The rendering result

 This method is invoked by 'View' whenever it tries to render a view. Child
 classes must implement this method to render the given view file.

    [$view] (\yii\base\View) The view object used for rendering the file.
    [$file] (string) The view file.
    [$params] (array) The parameters to be passed to the view file.


*yii/twig/ViewRenderer::addAliases*			protected
>
 addAliases($loader, $aliases)
<
return (void)

    [$loader] (\Twig_Loader_Filesystem) 
    [$aliases] (array) 


*yii/twig/ViewRenderer::addGlobals*			public
>
 addGlobals($globals)
<
return (void)

    [$globals] (array) @see self::$globals


*yii/twig/ViewRenderer::addFunctions*			public
>
 addFunctions($functions)
<
return (void)

    [$functions] (array) @see self::$functions


*yii/twig/ViewRenderer::addFilters*			public
>
 addFilters($filters)
<
return (void)

    [$filters] (array) @see self::$filters


*yii/twig/ViewRenderer::addExtensions*			public
>
 addExtensions($extensions)
<
return (void)

    [$extensions] (array) @see self::$extensions


*yii/twig/ViewRenderer::setLexerOptions*			public
>
 setLexerOptions($options)
<
return (void)

    [$options] (array) @see self::$lexerOptions



 vim:tw=78:ts=8:ft=help:norl:
