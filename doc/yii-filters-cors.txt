
*yii/filters/Cors*   >> |yii/base/ActionFilter|
==================

DESCRIPTION
------------------------------------------------------------------------------

 Make sure to read carefully what CORS does and does not. CORS do not secure
 your API, but allow the developer to grant access to third party code (ajax
 calls from external domain).

 You may use CORS filter by attaching it as a behavior to a controller or
 module, like the following,

   public function behaviors()
   {
       return [
           'corsFilter' => [
               'class' => \yii\filters\Cors::className(),
           ],
       ];
   }

 The CORS filter can be specialized to restrict parameters, like this, [MDN
 CORS
 Information](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)

   public function behaviors()
   {
       return [
           'corsFilter' => [
               'class' => \yii\filters\Cors::className(),
               'cors' => [
                   // restrict access to
                   'Origin' => ['http://www.myserver.com',
 'https://www.myserver.com'],
                   'Access-Control-Request-Method' => ['POST', 'PUT'],
                   // Allow only POST and PUT methods
                   'Access-Control-Request-Headers' => ['X-Wsse'],
                   // Allow only headers 'X-Wsse'
                   'Access-Control-Allow-Credentials' => true,
                   // Allow OPTIONS caching
                   'Access-Control-Max-Age' => 3600,
                   // Allow the X-Pagination-Current-Page header to be exposed
 to the browser.
                   'Access-Control-Expose-Headers' =>
 ['X-Pagination-Current-Page'],
               ],

           ],
       ];
   }

 For more information on how to add the CORS filter to a controller, see the
 [Guide on REST controllers](guide:rest-controllers#cors).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Behavior::$owner|
 |yii/base/ActionFilter::$only|
 |yii/base/ActionFilter::$except|


$request				*yii/filters/Cors::$request*

 (\yii\web\Request) The current request. If not set, the 'request' application
 component will be used.

$response				*yii/filters/Cors::$response*

 (\yii\web\Response) The response to be sent. If not set, the 'response'
 application component will be used.

$actions				*yii/filters/Cors::$actions*

 (array) Define specific CORS rules for specific actions

$cors					*yii/filters/Cors::$cors*

 (array) Basic headers handled for the CORS requests.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Behavior::events|
 |yii/base/ActionFilter::attach|
 |yii/base/ActionFilter::detach|
 |yii/base/ActionFilter::beforeFilter|
 |yii/base/ActionFilter::afterFilter|
 |yii/base/ActionFilter::afterAction|
 |yii/base/ActionFilter::getActionId|
 |yii/base/ActionFilter::isActive|


*yii/filters/Cors::beforeAction*				public
>
 beforeAction($action)
<
return (void)

 {@inheritdoc}

    [$action] () 


*yii/filters/Cors::overrideDefaultSettings*		public
>
 overrideDefaultSettings($action)
<
return (void)

 Override settings for specific action.

    [$action] (\yii\base\Action) The action settings to override


*yii/filters/Cors::extractHeaders*			public
>
 extractHeaders()
<
return (array) CORS headers to handle

 Extract CORS headers from the request.


*yii/filters/Cors::prepareHeaders*			public
>
 prepareHeaders($requestHeaders)
<
return (array) CORS headers ready to be sent

 For each CORS headers create the specific response.

    [$requestHeaders] (array) CORS headers we have detected


*yii/filters/Cors::prepareAllowHeaders*			protected
>
 prepareAllowHeaders($type, $requestHeaders, $responseHeaders)
<
return (void)

 Handle classic CORS request to avoid duplicate code.

    [$type] (string) The kind of headers we would handle
    [$requestHeaders] (array) CORS headers request by client
    [$responseHeaders] (array) CORS response headers sent to the client


*yii/filters/Cors::addCorsHeaders*			public
>
 addCorsHeaders($response, $headers)
<
return (void)

 Adds the CORS headers to the response.

    [$response] (\yii\web\Response) 
    [$headers] (array) CORS headers which have been computed


*yii/filters/Cors::headerize*				protected
>
 headerize($string)
<
return (string) The result in "header" format

 Convert any string (including php headers with HTTP prefix) to header format.

 Example:  
   - X-PINGOTHER -> X-Pingother  
   - X_PINGOTHER -> X-Pingother

    [$string] (string) String to convert


*yii/filters/Cors::headerizeToPhp*			protected
>
 headerizeToPhp($string)
<
return (string) The result in "php $_SERVER header" format

 Convert any string (including php headers with HTTP prefix) to header format.

 Example:  
   - X-Pingother -> HTTP_X_PINGOTHER  
   - X PINGOTHER -> HTTP_X_PINGOTHER

    [$string] (string) String to convert



 vim:tw=78:ts=8:ft=help:norl:
