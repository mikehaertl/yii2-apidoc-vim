
*yii/db/mysql/QueryBuilder*   >> |yii/db/QueryBuilder|
===========================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/QueryBuilder::$db|
 |yii/db/QueryBuilder::$separator|
 |yii/db/QueryBuilder::$conditionBuilders|
 |yii/db/QueryBuilder::$conditionClasses|
 |yii/db/QueryBuilder::$expressionBuilders|


$typeMap				*yii/db/mysql/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/db/QueryBuilder::defaultConditionClasses|
 |yii/db/QueryBuilder::setExpressionBuilders|
 |yii/db/QueryBuilder::setConditionClasses|
 |yii/db/QueryBuilder::build|
 |yii/db/QueryBuilder::buildExpression|
 |yii/db/QueryBuilder::getExpressionBuilder|
 |yii/db/QueryBuilder::insert|
 |yii/db/QueryBuilder::prepareInsertSelectSubQuery|
 |yii/db/QueryBuilder::batchInsert|
 |yii/db/QueryBuilder::prepareUpsertColumns|
 |yii/db/QueryBuilder::update|
 |yii/db/QueryBuilder::prepareUpdateSets|
 |yii/db/QueryBuilder::delete|
 |yii/db/QueryBuilder::createTable|
 |yii/db/QueryBuilder::renameTable|
 |yii/db/QueryBuilder::dropTable|
 |yii/db/QueryBuilder::addPrimaryKey|
 |yii/db/QueryBuilder::truncateTable|
 |yii/db/QueryBuilder::addColumn|
 |yii/db/QueryBuilder::dropColumn|
 |yii/db/QueryBuilder::alterColumn|
 |yii/db/QueryBuilder::addForeignKey|
 |yii/db/QueryBuilder::dropIndex|
 |yii/db/QueryBuilder::addUnique|
 |yii/db/QueryBuilder::addDefaultValue|
 |yii/db/QueryBuilder::dropDefaultValue|
 |yii/db/QueryBuilder::createView|
 |yii/db/QueryBuilder::dropView|
 |yii/db/QueryBuilder::getColumnType|
 |yii/db/QueryBuilder::buildSelect|
 |yii/db/QueryBuilder::buildFrom|
 |yii/db/QueryBuilder::buildJoin|
 |yii/db/QueryBuilder::buildWhere|
 |yii/db/QueryBuilder::buildGroupBy|
 |yii/db/QueryBuilder::buildHaving|
 |yii/db/QueryBuilder::buildOrderByAndLimit|
 |yii/db/QueryBuilder::buildOrderBy|
 |yii/db/QueryBuilder::buildUnion|
 |yii/db/QueryBuilder::buildColumns|
 |yii/db/QueryBuilder::buildCondition|
 |yii/db/QueryBuilder::createConditionFromArray|
 |yii/db/QueryBuilder::buildHashCondition|
 |yii/db/QueryBuilder::buildAndCondition|
 |yii/db/QueryBuilder::buildNotCondition|
 |yii/db/QueryBuilder::buildBetweenCondition|
 |yii/db/QueryBuilder::buildInCondition|
 |yii/db/QueryBuilder::buildLikeCondition|
 |yii/db/QueryBuilder::buildExistsCondition|
 |yii/db/QueryBuilder::buildSimpleCondition|
 |yii/db/QueryBuilder::selectExists|
 |yii/db/QueryBuilder::bindParam|


*yii/db/mysql/QueryBuilder::defaultExpressionBuilders*	protected
>
 defaultExpressionBuilders()
<
return (void)

 {@inheritdoc}


*yii/db/mysql/QueryBuilder::prepareInsertValues*		protected
>
 prepareInsertValues($table, $columns, $params='[]')
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$columns] () 
    [$params] () 


*yii/db/mysql/QueryBuilder::upsert*			public
>
 upsert($table, $insertColumns, $updateColumns, $params)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$insertColumns] () 
    [$updateColumns] () 
    [$params] () 


*yii/db/mysql/QueryBuilder::dropPrimaryKey*		public
>
 dropPrimaryKey($name, $table)
<
return (string) The SQL statement for removing a primary key constraint from an
existing table.

 Builds a SQL statement for removing a primary key constraint to an existing
 table.

    [$name] (string) The name of the primary key constraint to be removed.
    [$table] (string) The table that the primary key constraint will be
    removed from.


*yii/db/mysql/QueryBuilder::renameColumn*			public
>
 renameColumn($table, $oldName, $newName)
<
return (string) The SQL statement for renaming a DB column.

 Builds a SQL statement for renaming a column.

    [$table] (string) The table whose column is to be renamed. The name will
    be properly quoted by the method.
    [$oldName] (string) The old name of the column. The name will be properly
    quoted by the method.
    [$newName] (string) The new name of the column. The name will be properly
    quoted by the method.


*yii/db/mysql/QueryBuilder::dropForeignKey*		public
>
 dropForeignKey($name, $table)
<
return (string) The SQL statement for dropping a foreign key constraint.

 Builds a SQL statement for dropping a foreign key constraint.

    [$name] (string) The name of the foreign key constraint to be dropped. The
    name will be properly quoted by the method.
    [$table] (string) The table whose foreign is to be dropped. The name will
    be properly quoted by the method.


*yii/db/mysql/QueryBuilder::createIndex*			public
>
 createIndex($name, $table, $columns, $unique='false')
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 
    [$columns] () 
    [$unique] () 


*yii/db/mysql/QueryBuilder::dropUnique*			public
>
 dropUnique($name, $table)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 


*yii/db/mysql/QueryBuilder::addCheck*			public
>
 addCheck($name, $table, $expression)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 
    [$expression] () 


*yii/db/mysql/QueryBuilder::dropCheck*			public
>
 dropCheck($name, $table)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 


*yii/db/mysql/QueryBuilder::resetSequence*		public
>
 resetSequence($tableName, $value='null')
<
return (string) The SQL statement for resetting sequence

 Creates a SQL statement for resetting the sequence value of a table's primary
 key.

 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.

    [$tableName] (string) The name of the table whose primary key sequence
    will be reset
    [$value] (mixed) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/mysql/QueryBuilder::checkIntegrity*		public
>
 checkIntegrity($check='true', $schema='''', $table='''')
<
return (string) The SQL statement for checking integrity

 Builds a SQL statement for enabling or disabling integrity check.

    [$check] (bool) Whether to turn on or off the integrity check.
    [$schema] (string) The schema of the tables. Meaningless for MySQL.
    [$table] (string) The table name. Meaningless for MySQL.


*yii/db/mysql/QueryBuilder::addCommentOnColumn*		public
>
 addCommentOnColumn($table, $column, $comment)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$column] () 
    [$comment] () 


*yii/db/mysql/QueryBuilder::addCommentOnTable*		public
>
 addCommentOnTable($table, $comment)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$comment] () 


*yii/db/mysql/QueryBuilder::dropCommentFromColumn*	public
>
 dropCommentFromColumn($table, $column)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$column] () 


*yii/db/mysql/QueryBuilder::dropCommentFromTable*		public
>
 dropCommentFromTable($table)
<
return (void)

 {@inheritdoc}

    [$table] () 


*yii/db/mysql/QueryBuilder::buildLimit*			public
>
 buildLimit($limit, $offset)
<
return (void)

 {@inheritdoc}

    [$limit] () 
    [$offset] () 


*yii/db/mysql/QueryBuilder::hasLimit*			protected
>
 hasLimit($limit)
<
return (void)

 {@inheritdoc}

    [$limit] () 


*yii/db/mysql/QueryBuilder::hasOffset*			protected
>
 hasOffset($offset)
<
return (void)

 {@inheritdoc}

    [$offset] () 



 vim:tw=78:ts=8:ft=help:norl:
