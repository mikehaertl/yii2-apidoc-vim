
*yii/db/mysql/QueryBuilder*   >> |yii/db/QueryBuilder|
===========================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/QueryBuilder::$db|
 |yii/db/QueryBuilder::$separator|
 |yii/db/QueryBuilder::$conditionBuilders|
 |yii/db/QueryBuilder::$conditionClasses|
 |yii/db/QueryBuilder::$expressionBuilders|


$typeMap				*yii/db/mysql/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/db/QueryBuilder::__construct|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/db/QueryBuilder::defaultConditionClasses|
 |yii/db/QueryBuilder::setExpressionBuilders|
 |yii/db/QueryBuilder::setConditionClasses|
 |yii/db/QueryBuilder::build|
 |yii/db/QueryBuilder::buildExpression|
 |yii/db/QueryBuilder::getExpressionBuilder|
 |yii/db/QueryBuilder::insert|
 |yii/db/QueryBuilder::prepareInsertSelectSubQuery|
 |yii/db/QueryBuilder::batchInsert|
 |yii/db/QueryBuilder::prepareUpsertColumns|
 |yii/db/QueryBuilder::update|
 |yii/db/QueryBuilder::prepareUpdateSets|
 |yii/db/QueryBuilder::delete|
 |yii/db/QueryBuilder::createTable|
 |yii/db/QueryBuilder::renameTable|
 |yii/db/QueryBuilder::dropTable|
 |yii/db/QueryBuilder::addPrimaryKey|
 |yii/db/QueryBuilder::truncateTable|
 |yii/db/QueryBuilder::addColumn|
 |yii/db/QueryBuilder::dropColumn|
 |yii/db/QueryBuilder::alterColumn|
 |yii/db/QueryBuilder::addForeignKey|
 |yii/db/QueryBuilder::dropIndex|
 |yii/db/QueryBuilder::addUnique|
 |yii/db/QueryBuilder::addDefaultValue|
 |yii/db/QueryBuilder::dropDefaultValue|
 |yii/db/QueryBuilder::executeResetSequence|
 |yii/db/QueryBuilder::createView|
 |yii/db/QueryBuilder::dropView|
 |yii/db/QueryBuilder::getColumnType|
 |yii/db/QueryBuilder::buildSelect|
 |yii/db/QueryBuilder::buildFrom|
 |yii/db/QueryBuilder::buildJoin|
 |yii/db/QueryBuilder::buildWhere|
 |yii/db/QueryBuilder::buildGroupBy|
 |yii/db/QueryBuilder::buildHaving|
 |yii/db/QueryBuilder::buildOrderByAndLimit|
 |yii/db/QueryBuilder::buildOrderBy|
 |yii/db/QueryBuilder::buildUnion|
 |yii/db/QueryBuilder::buildColumns|
 |yii/db/QueryBuilder::buildCondition|
 |yii/db/QueryBuilder::createConditionFromArray|
 |yii/db/QueryBuilder::buildHashCondition|
 |yii/db/QueryBuilder::buildAndCondition|
 |yii/db/QueryBuilder::buildNotCondition|
 |yii/db/QueryBuilder::buildBetweenCondition|
 |yii/db/QueryBuilder::buildInCondition|
 |yii/db/QueryBuilder::buildLikeCondition|
 |yii/db/QueryBuilder::buildExistsCondition|
 |yii/db/QueryBuilder::buildSimpleCondition|
 |yii/db/QueryBuilder::selectExists|
 |yii/db/QueryBuilder::bindParam|
 |yii/db/QueryBuilder::extractAlias|


*yii/db/mysql/QueryBuilder::init*				public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/db/mysql/QueryBuilder::defaultExpressionBuilders*	protected
>
 defaultExpressionBuilders()
<
return (array) 

 Contains array of default expression builders. Extend this method and
 override it, if you want to change default expression builders for this query
 builder. See 'expressionBuilders' docs for details.








*yii/db/mysql/QueryBuilder::prepareInsertValues*		protected
>
 prepareInsertValues($table, $columns, $params='[]')
<
return (array) Array of column names, placeholders, values and params.

 Prepares a 'VALUES' part for an 'INSERT' SQL statement.







    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array|\yii\db\Query) The column data (name => value) to be
    inserted into the table or instance of 'yii\db\Query|Query' to perform
    INSERT INTO ... SELECT SQL statement.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the DB command later.


*yii/db/mysql/QueryBuilder::upsert*			public
>
 upsert($table, $insertColumns, $updateColumns, $params)
<
return (string) The resulting SQL.

 Creates an SQL statement to insert rows into a database table if they do not
 already exist (matching unique constraints), or update them if they do.



 For example,

   $sql = $queryBuilder->upsert('pages', [
       'name' => 'Front page',
       'url' => 'http://example.com/', // url is unique
       'visits' => 0,
   ], [
       'visits' => new \yii\db\Expression('visits + 1'),
   ], $params);

 The method will properly escape the table and column names.



    [$table] (string) The table that new rows will be inserted into/updated
    in.
    [$insertColumns] (array|\yii\db\Query) The column data (name => value) to
    be inserted into the table or instance of 'Query' to perform 'INSERT INTO
    ... SELECT' SQL statement.
    [$updateColumns] (array|bool) The column data (name => value) to be
    updated if they already exist. If 'true' is passed, the column data will
    be updated to match the insert column data. If 'false' is passed, no
    update will be performed if the column data already exists.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the DB command later.


*yii/db/mysql/QueryBuilder::dropPrimaryKey*		public
>
 dropPrimaryKey($name, $table)
<
return (string) The SQL statement for removing a primary key constraint from an
existing table.

 Builds a SQL statement for removing a primary key constraint to an existing
 table.

    [$name] (string) The name of the primary key constraint to be removed.
    [$table] (string) The table that the primary key constraint will be
    removed from.


*yii/db/mysql/QueryBuilder::renameColumn*			public
>
 renameColumn($table, $oldName, $newName)
<
return (string) The SQL statement for renaming a DB column.

 Builds a SQL statement for renaming a column.

    [$table] (string) The table whose column is to be renamed. The name will
    be properly quoted by the method.
    [$oldName] (string) The old name of the column. The name will be properly
    quoted by the method.
    [$newName] (string) The new name of the column. The name will be properly
    quoted by the method.


*yii/db/mysql/QueryBuilder::dropForeignKey*		public
>
 dropForeignKey($name, $table)
<
return (string) The SQL statement for dropping a foreign key constraint.

 Builds a SQL statement for dropping a foreign key constraint.

    [$name] (string) The name of the foreign key constraint to be dropped. The
    name will be properly quoted by the method.
    [$table] (string) The table whose foreign is to be dropped. The name will
    be properly quoted by the method.


*yii/db/mysql/QueryBuilder::createIndex*			public
>
 createIndex($name, $table, $columns, $unique='false')
<
return (string) The SQL statement for creating a new index.

 Builds a SQL statement for creating a new index.







    [$name] (string) The name of the index. The name will be properly quoted
    by the method.
    [$table] (string) The table that the new index will be created for. The
    table name will be properly quoted by the method.
    [$columns] (string|array) The column(s) that should be included in the
    index. If there are multiple columns, separate them with commas or use an
    array to represent them. Each column name will be properly quoted by the
    method, unless a parenthesis is found in the name.
    [$unique] (bool) Whether to add UNIQUE constraint on the created index.


*yii/db/mysql/QueryBuilder::dropUnique*			public
>
 dropUnique($name, $table)
<
return (string) The SQL statement for dropping an unique constraint.

 Creates a SQL command for dropping an unique constraint.







    [$name] (string) The name of the unique constraint to be dropped. The name
    will be properly quoted by the method.
    [$table] (string) The table whose unique constraint is to be dropped. The
    name will be properly quoted by the method.


*yii/db/mysql/QueryBuilder::addCheck*			public
>
 addCheck($name, $table, $expression)
<
return (string) The SQL statement for adding a check constraint to an existing table.

 Creates a SQL command for adding a check constraint to an existing table.







    [$name] (string) The name of the check constraint. The name will be
    properly quoted by the method.
    [$table] (string) The table that the check constraint will be added to.
    The name will be properly quoted by the method.
    [$expression] (string) The SQL of the 'CHECK' constraint.


*yii/db/mysql/QueryBuilder::dropCheck*			public
>
 dropCheck($name, $table)
<
return (string) The SQL statement for dropping a check constraint.

 Creates a SQL command for dropping a check constraint.







    [$name] (string) The name of the check constraint to be dropped. The name
    will be properly quoted by the method.
    [$table] (string) The table whose check constraint is to be dropped. The
    name will be properly quoted by the method.


*yii/db/mysql/QueryBuilder::resetSequence*		public
>
 resetSequence($tableName, $value='null')
<
return (string) The SQL statement for resetting sequence

 Creates a SQL statement for resetting the sequence value of a table's primary
 key.

 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.

    [$tableName] (string) The name of the table whose primary key sequence
    will be reset
    [$value] (mixed) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/mysql/QueryBuilder::checkIntegrity*		public
>
 checkIntegrity($check='true', $schema='''', $table='''')
<
return (string) The SQL statement for checking integrity

 Builds a SQL statement for enabling or disabling integrity check.

    [$check] (bool) Whether to turn on or off the integrity check.
    [$schema] (string) The schema of the tables. Meaningless for MySQL.
    [$table] (string) The table name. Meaningless for MySQL.


*yii/db/mysql/QueryBuilder::addCommentOnColumn*		public
>
 addCommentOnColumn($table, $column, $comment)
<
return (string) The SQL statement for adding comment on column

 Builds a SQL command for adding comment to column.







    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.
    [$column] (string) The name of the column to be commented. The column name
    will be properly quoted by the method.
    [$comment] (string) The text of the comment to be added. The comment will
    be properly quoted by the method.


*yii/db/mysql/QueryBuilder::addCommentOnTable*		public
>
 addCommentOnTable($table, $comment)
<
return (string) The SQL statement for adding comment on table

 Builds a SQL command for adding comment to table.







    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.
    [$comment] (string) The text of the comment to be added. The comment will
    be properly quoted by the method.


*yii/db/mysql/QueryBuilder::dropCommentFromColumn*	public
>
 dropCommentFromColumn($table, $column)
<
return (string) The SQL statement for adding comment on column

 Builds a SQL command for adding comment to column.







    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.
    [$column] (string) The name of the column to be commented. The column name
    will be properly quoted by the method.


*yii/db/mysql/QueryBuilder::dropCommentFromTable*		public
>
 dropCommentFromTable($table)
<
return (string) The SQL statement for adding comment on column

 Builds a SQL command for adding comment to table.







    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.


*yii/db/mysql/QueryBuilder::buildLimit*			public
>
 buildLimit($limit, $offset)
<
return (string) The LIMIT and OFFSET clauses







    [$limit] (int) 
    [$offset] (int) 


*yii/db/mysql/QueryBuilder::hasLimit*			protected
>
 hasLimit($limit)
<
return (bool) Whether the limit is effective

 Checks to see if the given limit is effective.







    [$limit] (mixed) The given limit


*yii/db/mysql/QueryBuilder::hasOffset*			protected
>
 hasOffset($offset)
<
return (bool) Whether the offset is effective

 Checks to see if the given offset is effective.







    [$offset] (mixed) The given offset



 vim:tw=78:ts=8:ft=help:norl:
