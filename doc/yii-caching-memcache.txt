
*yii/caching/MemCache*   >> |yii/caching/Cache|
======================

DESCRIPTION
------------------------------------------------------------------------------

 MemCache supports both [memcache](http://pecl.php.net/package/memcache) and
 [memcached](http://pecl.php.net/package/memcached). By setting 'useMemcached'
 to be true or false, one can let MemCache to use either memcached or
 memcache, respectively.

 MemCache can be configured with a list of memcache servers by settings its
 'servers' property. By default, MemCache assumes there is a memcache server
 running on localhost at port 11211.

 See 'Cache' for common cache operations that MemCache supports.

 Note, there is no security measure to protected data in memcache. All data in
 memcache can be accessed by any process running in the system.

 To use MemCache as the cache application component, configure the application
 as follows,

   [
       'components' => [
           'cache' => [
               'class' => 'yii\caching\MemCache',
               'servers' => [
                   [
                       'host' => 'server1',
                       'port' => 11211,
                       'weight' => 60,
                   ],
                   [
                       'host' => 'server2',
                       'port' => 11211,
                       'weight' => 40,
                   ],
               ],
           ],
       ],
   ]

 In the above, two memcache servers are used: server1 and server2. You can
 configure more properties of each server, such as 'persistent', 'weight',
 'timeout'. Please see 'MemCacheServer' for available options.

 For more details and usage information on Cache, see the [guide article on
 caching](guide:caching-overview).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/caching/Cache::$keyPrefix|
 |yii/caching/Cache::$serializer|
 |yii/caching/Cache::$defaultDuration|


$useMemcached				*yii/caching/MemCache::$useMemcached*

 (bool) Whether to use memcached or memcache as the underlying caching
 extension. If true, [memcached](http://pecl.php.net/package/memcached) will
 be used. If false, [memcache](http://pecl.php.net/package/memcache) will be
 used. Defaults to false.

$persistentId				*yii/caching/MemCache::$persistentId*

 (string) An ID that identifies a Memcached instance. This property is used
 only when 'useMemcached' is true. By default the Memcached instances are
 destroyed at the end of the request. To create an instance that persists
 between requests, you may specify a unique ID for the instance. All instances
 created with the same ID will share the same connection.

$options				*yii/caching/MemCache::$options*

 (array) Options for Memcached. This property is used only when 'useMemcached'
 is true.

$username				*yii/caching/MemCache::$username*

 (string) Memcached sasl username. This property is used only when
 'useMemcached' is true.

$password				*yii/caching/MemCache::$password*

 (string) Memcached sasl password. This property is used only when
 'useMemcached' is true.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/caching/Cache::buildKey|
 |yii/caching/Cache::get|
 |yii/caching/Cache::exists|
 |yii/caching/Cache::mget|
 |yii/caching/Cache::multiGet|
 |yii/caching/Cache::set|
 |yii/caching/Cache::mset|
 |yii/caching/Cache::multiSet|
 |yii/caching/Cache::madd|
 |yii/caching/Cache::multiAdd|
 |yii/caching/Cache::add|
 |yii/caching/Cache::delete|
 |yii/caching/Cache::flush|
 |yii/caching/Cache::addValues|
 |yii/caching/Cache::offsetExists|
 |yii/caching/Cache::offsetGet|
 |yii/caching/Cache::offsetSet|
 |yii/caching/Cache::offsetUnset|
 |yii/caching/Cache::getOrSet|


*yii/caching/MemCache::init*				public
>
 init()
<
return (void)

 Initializes this application component.

 It creates the memcache instance and adds memcache servers.


*yii/caching/MemCache::getValue*				protected
>
 getValue($key)
<
return (mixed|false) The value stored in cache, false if the value is not in the
cache or expired.

 Retrieves a value from cache with a specified key.

 This is the implementation of the method declared in the parent class.

    [$key] (string) A unique key identifying the cached value


*yii/caching/MemCache::setValue*				protected
>
 setValue($key, $value, $duration)
<
return (bool) True if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key in cache.

 This is the implementation of the method declared in the parent class.

    [$key] (string) The key identifying the value to be cached
    [$value] (mixed) The value to be cached.
    [$duration] (int) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/MemCache::addValue*				protected
>
 addValue($key, $value, $duration)
<
return (bool) True if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key.

 This is the implementation of the method declared in the parent class.

    [$key] (string) The key identifying the value to be cached
    [$value] (mixed) The value to be cached
    [$duration] (int) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/MemCache::deleteValue*			protected
>
 deleteValue($key)
<
return (bool) If no error happens during deletion

 Deletes a value with the specified key from cache This is the implementation
 of the method declared in the parent class.

    [$key] (string) The key of the value to be deleted


*yii/caching/MemCache::flushValues*			protected
>
 flushValues()
<
return (bool) Whether the flush operation was successful.

 Deletes all values from cache.

 This is the implementation of the method declared in the parent class.


*yii/caching/MemCache::getValues*				protected
>
 getValues($keys)
<
return (array) A list of cached values indexed by the keys

 Retrieves multiple values from cache with the specified keys.

    [$keys] (array) A list of keys identifying the cached values


*yii/caching/MemCache::setValues*				protected
>
 setValues($data, $duration)
<
return (array) Array of failed keys.

 Stores multiple key-value pairs in cache.

    [$data] (array) Array where key corresponds to cache key while value is
    the value stored
    [$duration] (int) The number of seconds in which the cached values will
    expire. 0 means never expire.


*yii/caching/MemCache::addServers*			protected
>
 addServers($cache, $servers)
<
return (void)

 Add servers to the server pool of the cache specified.

    [$cache] (\Memcache|\Memcached) 
    [$servers] (\yii\caching\MemCacheServer[]) 


*yii/caching/MemCache::addMemcachedServers*		protected
>
 addMemcachedServers($cache, $servers)
<
return (void)

 Add servers to the server pool of the cache specified Used for memcached PECL
 extension.

    [$cache] (\Memcached) 
    [$servers] (\yii\caching\MemCacheServer[]) 


*yii/caching/MemCache::addMemcacheServers*		protected
>
 addMemcacheServers($cache, $servers)
<
return (void)

 Add servers to the server pool of the cache specified Used for memcache PECL
 extension.

    [$cache] (\Memcache) 
    [$servers] (\yii\caching\MemCacheServer[]) 


*yii/caching/MemCache::getMemcache*			public
>
 getMemcache()
<
return (\Memcache|\Memcached) The memcache (or memcached) object used by this cache
component.

 Returns the underlying memcache (or memcached) object.


*yii/caching/MemCache::getServers*			public
>
 getServers()
<
return (\yii\caching\MemCacheServer[]) List of memcache server configurations.

 Returns the memcache or memcached server configurations.


*yii/caching/MemCache::setServers*			public
>
 setServers($config)
<
return (void)

    [$config] (array) List of memcache or memcached server configurations.
    Each element must be an array with the following keys: host, port,
    persistent, weight, timeout, retryInterval, status.



 vim:tw=78:ts=8:ft=help:norl:
