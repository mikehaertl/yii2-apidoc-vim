
*yii/caching/MemCache*   >> |yii/caching/Cache|
======================

DESCRIPTION
------------------------------------------------------------------------------

 MemCache supports both [memcache](http://pecl.php.net/package/memcache) and
 [memcached](http://pecl.php.net/package/memcached). By setting 'useMemcached'
 to be true or false, one can let MemCache to use either memcached or
 memcache, respectively.

 MemCache can be configured with a list of memcache servers by settings its
 'servers' property. By default, MemCache assumes there is a memcache server
 running on localhost at port 11211.

 See 'Cache' for common cache operations that MemCache supports.

 Note, there is no security measure to protected data in memcache. All data in
 memcache can be accessed by any process running in the system.

 To use MemCache as the cache application component, configure the application
 as follows,

   $cache['foo'] = 'some data';
   echo $cache['foo'];

 In the above, two memcache servers are used: server1 and server2. You can
 configure more properties of each server, such as 'persistent', 'weight',
 'timeout'. Please see 'MemCacheServer' for available options.


PROPERTY DETAILS
------------------------------------------------------------------------------

$keyPrefix				*yii/caching/MemCache::$keyPrefix*
 See |yii/caching/Cache::$keyPrefix|

$serializer				*yii/caching/MemCache::$serializer*
 See |yii/caching/Cache::$serializer|

$useMemcached				*yii/caching/MemCache::$useMemcached*
 (boolean) Whether to use memcached or memcache as the underlying caching
 extension. If true, [memcached](http://pecl.php.net/package/memcached) will
 be used. If false, [memcache](http://pecl.php.net/package/memcache) will be
 used. Defaults to false.

$behaviors				*yii/caching/MemCache::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$memcache				*yii/caching/MemCache::$memcache*
 (\Memcache|\Memcached) The memcache (or memcached) object used by this cache
 component.

$servers				*yii/caching/MemCache::$servers*
 (\yii\caching\MemCacheServer[]) List of memcache server configurations.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/caching/MemCache::className*				public
 See |yii/base/Object::className|


*yii/caching/MemCache::__construct*			public
 See |yii/base/Object::__construct|


*yii/caching/MemCache::init*				public
>
 init()
<
(void)

 It creates the memcache instance and adds memcache servers.


*yii/caching/MemCache::__get*				public
 See |yii/base/Component::__get|


*yii/caching/MemCache::__set*				public
 See |yii/base/Component::__set|


*yii/caching/MemCache::__isset*				public
 See |yii/base/Component::__isset|


*yii/caching/MemCache::__unset*				public
 See |yii/base/Component::__unset|


*yii/caching/MemCache::__call*				public
 See |yii/base/Component::__call|


*yii/caching/MemCache::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/caching/MemCache::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/caching/MemCache::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/caching/MemCache::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/caching/MemCache::__clone*				public
 See |yii/base/Component::__clone|


*yii/caching/MemCache::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/caching/MemCache::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/caching/MemCache::on*				public
 See |yii/base/Component::on|


*yii/caching/MemCache::off*				public
 See |yii/base/Component::off|


*yii/caching/MemCache::trigger*				public
 See |yii/base/Component::trigger|


*yii/caching/MemCache::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/caching/MemCache::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/caching/MemCache::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/caching/MemCache::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/caching/MemCache::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/caching/MemCache::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/caching/MemCache::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/caching/MemCache::buildKey*				protected
 See |yii/caching/Cache::buildKey|


*yii/caching/MemCache::get*				public
 See |yii/caching/Cache::get|


*yii/caching/MemCache::exists*				public
 See |yii/caching/Cache::exists|


*yii/caching/MemCache::mget*				public
 See |yii/caching/Cache::mget|


*yii/caching/MemCache::set*				public
 See |yii/caching/Cache::set|


*yii/caching/MemCache::mset*				public
 See |yii/caching/Cache::mset|


*yii/caching/MemCache::madd*				public
 See |yii/caching/Cache::madd|


*yii/caching/MemCache::add*				public
 See |yii/caching/Cache::add|


*yii/caching/MemCache::delete*				public
 See |yii/caching/Cache::delete|


*yii/caching/MemCache::flush*				public
 See |yii/caching/Cache::flush|


*yii/caching/MemCache::getValue*				protected
>
 getValue($key)
<
(string|boolean) The value stored in cache, false if the value is not in the
cache or expired.

 This is the implementation of the method declared in the parent class.
    [$key] (string) A unique key identifying the cached value


*yii/caching/MemCache::setValue*				protected
>
 setValue($key, $value, $duration)
<
(boolean) True if the value is successfully stored into cache, false otherwise

 This is the implementation of the method declared in the parent class.
    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$duration] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/MemCache::addValue*				protected
>
 addValue($key, $value, $duration)
<
(boolean) True if the value is successfully stored into cache, false otherwise

 This is the implementation of the method declared in the parent class.
    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$duration] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/MemCache::deleteValue*			protected
>
 deleteValue($key)
<
(boolean) If no error happens during deletion

    [$key] (string) The key of the value to be deleted


*yii/caching/MemCache::flushValues*			protected
>
 flushValues()
<
(boolean) Whether the flush operation was successful.

 This is the implementation of the method declared in the parent class.


*yii/caching/MemCache::getValues*				protected
>
 getValues($keys)
<
(array) A list of cached values indexed by the keys

    [$keys] (array) A list of keys identifying the cached values


*yii/caching/MemCache::setValues*				protected
>
 setValues($data, $duration)
<
(array) Array of failed keys. Always empty in case of using memcached.

    [$data] (array) Array where key corresponds to cache key while value is
    the value stored
    [$duration] (integer) The number of seconds in which the cached values
    will expire. 0 means never expire.


*yii/caching/MemCache::addValues*				protected
 See |yii/caching/Cache::addValues|


*yii/caching/MemCache::offsetExists*			public
 See |yii/caching/Cache::offsetExists|


*yii/caching/MemCache::offsetGet*				public
 See |yii/caching/Cache::offsetGet|


*yii/caching/MemCache::offsetSet*				public
 See |yii/caching/Cache::offsetSet|


*yii/caching/MemCache::offsetUnset*			public
 See |yii/caching/Cache::offsetUnset|


*yii/caching/MemCache::getMemcache*			public
>
 getMemcache()
<
(\Memcache|\Memcached) The memcache (or memcached) object used by this cache
component.



*yii/caching/MemCache::getServers*			public
>
 getServers()
<
(\yii\caching\MemCacheServer[]) List of memcache server configurations.



*yii/caching/MemCache::setServers*			public
>
 setServers($config)
<
(void)

    [$config] (array) List of memcache server configurations. Each element
    must be an array with the following keys: host, port, persistent, weight,
    timeout, retryInterval, status.



 vim:tw=78:ts=8:ft=help:norl:
