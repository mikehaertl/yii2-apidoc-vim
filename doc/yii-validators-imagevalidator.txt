
*yii/validators/ImageValidator*   >> |yii/validators/FileValidator|
===============================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/validators/Validator::$builtInValidators|
 |yii/validators/Validator::$attributes|
 |yii/validators/Validator::$message|
 |yii/validators/Validator::$on|
 |yii/validators/Validator::$except|
 |yii/validators/Validator::$skipOnError|
 |yii/validators/Validator::$skipOnEmpty|
 |yii/validators/Validator::$enableClientValidation|
 |yii/validators/Validator::$isEmpty|
 |yii/validators/Validator::$when|
 |yii/validators/Validator::$whenClient|
 |yii/validators/FileValidator::$extensions|
 |yii/validators/FileValidator::$checkExtensionByMimeType|
 |yii/validators/FileValidator::$mimeTypes|
 |yii/validators/FileValidator::$minSize|
 |yii/validators/FileValidator::$maxSize|
 |yii/validators/FileValidator::$maxFiles|
 |yii/validators/FileValidator::$minFiles|
 |yii/validators/FileValidator::$uploadRequired|
 |yii/validators/FileValidator::$tooBig|
 |yii/validators/FileValidator::$tooSmall|
 |yii/validators/FileValidator::$tooMany|
 |yii/validators/FileValidator::$tooFew|
 |yii/validators/FileValidator::$wrongExtension|
 |yii/validators/FileValidator::$wrongMimeType|
 |yii/base/Component::$behaviors|
 |yii/validators/Validator::$validationAttributes|
 |yii/validators/Validator::$attributeNames|
 |yii/validators/FileValidator::$sizeLimit|


$notImage				*yii/validators/ImageValidator::$notImage*

 (string) The error message used when the uploaded file is not an image. You
 may use the following tokens in the message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name

$minWidth				*yii/validators/ImageValidator::$minWidth*

 (int) The minimum width in pixels. Defaults to null, meaning no limit.

$maxWidth				*yii/validators/ImageValidator::$maxWidth*

 (int) The maximum width in pixels. Defaults to null, meaning no limit.

$minHeight				*yii/validators/ImageValidator::$minHeight*

 (int) The minimum height in pixels. Defaults to null, meaning no limit.

$maxHeight				*yii/validators/ImageValidator::$maxHeight*

 (int) The maximum width in pixels. Defaults to null, meaning no limit.

$underWidth				*yii/validators/ImageValidator::$underWidth*

 (string) The error message used when the image is under 'minWidth'. You may
 use the following tokens in the message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {limit}: the value of 'minWidth'

$overWidth				*yii/validators/ImageValidator::$overWidth*

 (string) The error message used when the image is over 'maxWidth'. You may
 use the following tokens in the message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {limit}: the value of 'maxWidth'

$underHeight				*yii/validators/ImageValidator::$underHeight*

 (string) The error message used when the image is under 'minHeight'. You may
 use the following tokens in the message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {limit}: the value of 'minHeight'

$overHeight				*yii/validators/ImageValidator::$overHeight*

 (string) The error message used when the image is over 'maxHeight'. You may
 use the following tokens in the message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {limit}: the value of 'maxHeight'



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/validators/Validator::createValidator|
 |yii/validators/Validator::validateAttributes|
 |yii/validators/Validator::getValidationAttributes|
 |yii/validators/Validator::validateAttribute|
 |yii/validators/Validator::validate|
 |yii/validators/Validator::isActive|
 |yii/validators/Validator::addError|
 |yii/validators/Validator::isEmpty|
 |yii/validators/Validator::formatMessage|
 |yii/validators/Validator::getAttributeNames|
 |yii/validators/FileValidator::getSizeLimit|
 |yii/validators/FileValidator::validateExtension|
 |yii/validators/FileValidator::validateMimeType|


*yii/validators/ImageValidator::init*			public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/validators/ImageValidator::validateValue*		protected
>
 validateValue($value)
<
return (array|null) The error message and the array of parameters to be inserted into
the error message.

  if (!$valid) {
      return [$this->message, [
          'param1' => $this->param1,
          'formattedLimit' =>
Yii::$app->formatter->asShortSize($this->getSizeLimit()),
          'mimeTypes' => implode(', ', $this->mimeTypes),
          'param4' => 'etc...',
      ]];
  }

  return null;

for this example 'message' template can contain '{param1}',
'{formattedLimit}', '{mimeTypes}', '{param4}'

Null should be returned if the data is valid.

 Validates a value.



 A validator class can implement this method to support data validation out of
 the context of a data model.



    [$value] (mixed) The data value to be validated.


*yii/validators/ImageValidator::clientValidateAttribute*	public
>
 clientValidateAttribute($model, $attribute, $view)
<
return (string|null) The client-side validation script. Null if the validator does
not support client-side validation.

 Returns the JavaScript needed for performing client-side validation.



 Calls 'getClientOptions()' to generate options array for client-side
 validation.

 You may override this method to return the JavaScript validation code if the
 validator can support client-side validation.

 The following JavaScript variables are predefined and can be used in the
 validation code:


   - 'attribute': an object describing the the attribute being
   validated. 
   - 'value': the value being validated. 
   - 'messages': an array used to hold the validation error messages
   for the attribute. 
   - 'deferred': an array used to hold deferred objects for
   asynchronous validation 
   - '$form': a jQuery object containing the form element

 The 'attribute' object contains the following properties: 
   - 'id': a unique ID identifying the attribute (e.g.
   "loginform-username") in the form 
   - 'name': attribute name or expression (e.g. "[0]content" for
   tabular input) 
   - 'container': the jQuery selector of the container of the input
   field 
   - 'input': the jQuery selector of the input field under the context
   of the form 
   - 'error': the jQuery selector of the error tag under the context of
   the container 
   - 'status': status of the input field, 0: empty, not entered before,
   1: validated, 2: pending validation, 3: validating



    [$model] (\yii\base\Model) The data model being validated
    [$attribute] (string) The name of the attribute to be validated.
    [$view] (\yii\web\View) The view object that is going to be used to render
    views or view files containing a model form with this validator applied.


*yii/validators/ImageValidator::getClientOptions*		public
>
 getClientOptions($model, $attribute)
<
return (array) The client-side validation options

 Returns the client-side validation options.



 This method is usually called from 'clientValidateAttribute()'. You may
 override this method to modify options that will be passed to the client-side
 validation.



    [$model] (\yii\base\Model) The model being validated
    [$attribute] (string) The attribute name being validated


*yii/validators/ImageValidator::validateImage*		protected
>
 validateImage($image)
<
return (array|null) The error message and the parameters to be inserted into the
error message. Null should be returned if the data is valid.

 Validates an image file.

    [$image] (\yii\web\UploadedFile) Uploaded file passed to check against a
    set of rules



 vim:tw=78:ts=8:ft=help:norl:
