
*yii/data/DataFilter*   >> |yii/base/Model|
=====================

SUBCLASSES
------------------------------------------------------------------------------

|yii/data/ActiveDataFilter|

DESCRIPTION
------------------------------------------------------------------------------

 It allows validating and building a filter condition passed via request.

 Filter example:

 '''json {     "or": [         {             "and": [                 {       
              "name": "some name",                 },                 {       
              "price": "25",                 }             ]         },       
  {             "id": {"in": [2, 5, 9]},             "price": {               
  "gt": 10,                 "lt": 50             }         }     ] } '''

 In the request the filter should be specified using a key name equal to
 'filterAttributeName'. Thus actual HTTP request body will look like
 following:

 '''json {     "filter": {"or": {...}},     "page": 2,     ... } '''

 Raw filter value should be assigned to 'filter' property of the model. You
 may populate it from request data via 'load()' method:

   use yii\data\DataFilter;

   $dataFilter = new DataFilter();
   $dataFilter->load(Yii::$app->request->getBodyParams());

 In order to function this class requires a search model specified via
 'searchModel'. This search model should declare all available search
 attributes and their validation rules. For example:

   class SearchModel extends \yii\base\Model
   {
       public $id;
       public $name;

       public function rules()
       {
           return [
               [['id', 'name'], 'trim'],
               ['id', 'integer'],
               ['name', 'string'],
           ];
       }
   }

 In order to reduce amount of classes, you may use '\yii\base\DynamicModel'
 instance as a 'searchModel'. In this case you should specify 'searchModel'
 using a PHP callable:

   function () {
       return (new \yii\base\DynamicModel(['id' => null, 'name' => null]))
           ->addRule(['id', 'name'], 'trim')
           ->addRule('id', 'integer')
           ->addRule('name', 'string');
   }

 You can use 'validate()' method to check if filter value is valid. If
 validation fails you can use 'getErrors()' to get actual error messages.

 In order to acquire filter condition suitable for fetching data use 'build()'
 method.

 > Note: This is a base class. Its implementation of 'build()' simply returns
 normalized 'filter' value. In order to convert filter to particular format
 you should use descendant of this class that implements 'buildInternal()'
 method accordingly.


PROPERTY DETAILS
------------------------------------------------------------------------------


$filterAttributeName			*yii/data/DataFilter::$filterAttributeName*

 (string) Name of the attribute that handles filter value. The name is used to
 load data via 'load()' method.

$filterAttributeLabel			*yii/data/DataFilter::$filterAttributeLabel*

 (string) Label for the filter attribute specified via 'filterAttributeName'.
 It will be used during error messages composition.

$filterControls				*yii/data/DataFilter::$filterControls*

 (array) Keywords or expressions that could be used in a filter. Array keys
 are the expressions used in raw filter value obtained from user request.
 Array values are internal build keys used in this class methods.

 Any unspecified keyword will not be recognized as a filter control and will
 be treated as an attribute name. Thus you should avoid conflicts between
 control keywords and attribute names. For example: in case you have control
 keyword 'like' and an attribute named 'like', specifying condition for such
 attribute will be impossible.

 You may specify several keywords for the same filter build key, creating
 multiple aliases. For example:

   [
       'eq' => '=',
       '=' => '=',
       '==' => '=',
       '===' => '=',
       // ...
   ]

 > Note: while specifying filter controls take actual data exchange format,
 which your API uses, in mind. > Make sure each specified control keyword is
 valid for the format. For example, in XML tag name can start > only with a
 letter character, thus controls like '>', '=' or '$gt' will break the XML
 schema.

$conditionValidators			*yii/data/DataFilter::$conditionValidators*

 (array) Maps filter condition keywords to validation methods. These methods
 are used by 'validateCondition()' to validate raw filter conditions.

$operatorTypes				*yii/data/DataFilter::$operatorTypes*

 (array) Specifies the list of supported search attribute types per each
 operator. This field should be in format: 'operatorKeyword' => ['type1',
 'type2' ...]. Supported types list can be specified as '*', which indicates
 that operator supports all types available. Any unspecified keyword will not
 be considered as a valid operator.

$multiValueOperators			*yii/data/DataFilter::$multiValueOperators*

 (array) List of operators keywords, which should accept multiple values.

$attributeMap				*yii/data/DataFilter::$attributeMap*

 (array) Actual attribute names to be used in searched condition, in format:
 [filterAttribute => actualAttribute]. For example, in case of using table
 joins in the search query, attribute map may look like the following:

   [
       'authorName' => '{{author}}.[[name]]'
   ]

 Attribute map will be applied to filter condition in 'normalize()' method.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/StaticInstanceTrait::instance|
 |yii/base/ArrayableTrait::fields|
 |yii/base/ArrayableTrait::extraFields|
 |yii/base/ArrayableTrait::toArray|
 |yii/base/ArrayableTrait::extractRootFields|
 |yii/base/ArrayableTrait::extractFieldsFor|
 |yii/base/ArrayableTrait::resolveFields|
 |yii/base/Model::scenarios|
 |yii/base/Model::attributeHints|
 |yii/base/Model::validate|
 |yii/base/Model::beforeValidate|
 |yii/base/Model::afterValidate|
 |yii/base/Model::getValidators|
 |yii/base/Model::getActiveValidators|
 |yii/base/Model::createValidators|
 |yii/base/Model::isAttributeRequired|
 |yii/base/Model::isAttributeSafe|
 |yii/base/Model::isAttributeActive|
 |yii/base/Model::getAttributeLabel|
 |yii/base/Model::getAttributeHint|
 |yii/base/Model::hasErrors|
 |yii/base/Model::getErrors|
 |yii/base/Model::getFirstErrors|
 |yii/base/Model::getFirstError|
 |yii/base/Model::getErrorSummary|
 |yii/base/Model::addError|
 |yii/base/Model::addErrors|
 |yii/base/Model::clearErrors|
 |yii/base/Model::generateAttributeLabel|
 |yii/base/Model::getAttributes|
 |yii/base/Model::setAttributes|
 |yii/base/Model::onUnsafeAttribute|
 |yii/base/Model::getScenario|
 |yii/base/Model::setScenario|
 |yii/base/Model::safeAttributes|
 |yii/base/Model::activeAttributes|
 |yii/base/Model::load|
 |yii/base/Model::loadMultiple|
 |yii/base/Model::validateMultiple|
 |yii/base/Model::getIterator|
 |yii/base/Model::offsetExists|
 |yii/base/Model::offsetGet|
 |yii/base/Model::offsetSet|
 |yii/base/Model::offsetUnset|


*yii/data/DataFilter::__get*				public
>
 __get($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/data/DataFilter::__set*				public
>
 __set($name, $value)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$value] () 


*yii/data/DataFilter::__isset*				public
>
 __isset($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/data/DataFilter::__unset*				public
>
 __unset($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/data/DataFilter::canGetProperty*			public
>
 canGetProperty($name, $checkVars='true', $checkBehaviors='true')
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$checkVars] () 
    [$checkBehaviors] () 


*yii/data/DataFilter::canSetProperty*			public
>
 canSetProperty($name, $checkVars='true', $checkBehaviors='true')
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$checkVars] () 
    [$checkBehaviors] () 


*yii/data/DataFilter::rules*				public
>
 rules()
<
return (void)

 {@inheritdoc}


*yii/data/DataFilter::formName*				public
>
 formName()
<
return (void)

 {@inheritdoc}


*yii/data/DataFilter::attributes*				public
>
 attributes()
<
return (void)

 {@inheritdoc}


*yii/data/DataFilter::attributeLabels*			public
>
 attributeLabels()
<
return (void)

 {@inheritdoc}


*yii/data/DataFilter::getFilter*				public
>
 getFilter()
<
return (mixed) Raw filter value.



*yii/data/DataFilter::setFilter*				public
>
 setFilter($filter)
<
return (void)

    [$filter] (mixed) Raw filter value.


*yii/data/DataFilter::getSearchModel*			public
>
 getSearchModel()
<
return (\yii\base\Model) Model instance.



*yii/data/DataFilter::setSearchModel*			public
>
 setSearchModel($model)
<
return (void)

    [$model] (\yii\base\Model|array|string|callable) Model instance or its DI
    compatible configuration.


*yii/data/DataFilter::getSearchAttributeTypes*		public
>
 getSearchAttributeTypes()
<
return (array) Search attribute type map.



*yii/data/DataFilter::setSearchAttributeTypes*		public
>
 setSearchAttributeTypes($searchAttributeTypes)
<
return (void)

    [$searchAttributeTypes] (array|null) Search attribute type map.


*yii/data/DataFilter::detectSearchAttributeTypes*		protected
>
 detectSearchAttributeTypes()
<
return (array) Attribute type map.

 Composes default value for 'searchAttributeTypes' from the 'searchModel'
 validation rules.


*yii/data/DataFilter::detectSearchAttributeType*		protected
>
 detectSearchAttributeType($validator)
<
return (string|null) Detected attribute type.

 Detect attribute type from given validator.

    [$validator] () 


*yii/data/DataFilter::getErrorMessages*			public
>
 getErrorMessages()
<
return (array) Error messages in format '[errorKey => message]'.



*yii/data/DataFilter::setErrorMessages*			public
>
 setErrorMessages($errorMessages)
<
return (void)

 Sets the list of error messages responding to invalid filter structure, in
 format: '[errorKey => message]'.

 Message may contain placeholders that will be populated depending on the
 message context. For each message a '{filter}' placeholder is available
 referring to the label for 'filterAttributeName' attribute.

    [$errorMessages] (array|\Closure) Error messages in '[errorKey =>
    message]' format, or a PHP callback returning them.


*yii/data/DataFilter::defaultErrorMessages*		protected
>
 defaultErrorMessages()
<
return (array) Default error messages in '[errorKey => message]' format.

 Returns default values for 'errorMessages'.


*yii/data/DataFilter::parseErrorMessage*			protected
>
 parseErrorMessage($messageKey, $params='[]')
<
return (string) Composed message string.

 Parses content of the message from 'errorMessages', specified by message key.

    [$messageKey] (string) Message key.
    [$params] (array) Params to be parsed into the message.


*yii/data/DataFilter::validateFilter*			public
>
 validateFilter()
<
return (void)

 Validates filter attribute value to match filer condition specification.


*yii/data/DataFilter::validateCondition*			protected
>
 validateCondition($condition)
<
return (void)

 Validates filter condition.

    [$condition] (mixed) Raw filter condition.


*yii/data/DataFilter::validateConjunctionCondition*	protected
>
 validateConjunctionCondition($operator, $condition)
<
return (void)

 Validates conjunction condition that consists of multiple independent ones.

 This covers such operators as 'and' and 'or'.

    [$operator] (string) Raw operator control keyword.
    [$condition] (mixed) Raw condition.


*yii/data/DataFilter::validateBlockCondition*		protected
>
 validateBlockCondition($operator, $condition)
<
return (void)

 Validates block condition that consists of a single condition.

 This covers such operators as 'not'.

    [$operator] (string) Raw operator control keyword.
    [$condition] (mixed) Raw condition.


*yii/data/DataFilter::validateAttributeCondition*		protected
>
 validateAttributeCondition($attribute, $condition)
<
return (void)

 Validates search condition for a particular attribute.

    [$attribute] (string) Search attribute name.
    [$condition] (mixed) Search condition.


*yii/data/DataFilter::validateOperatorCondition*		protected
>
 validateOperatorCondition($operator, $condition, $attribute='null')
<
return (void)

 Validates operator condition.

    [$operator] (string) Raw operator control keyword.
    [$condition] (mixed) Attribute condition.
    [$attribute] (string) Attribute name.


*yii/data/DataFilter::validateAttributeValue*		protected
>
 validateAttributeValue($attribute, $value)
<
return (void)

 Validates attribute value in the scope of 'model'.

    [$attribute] (string) Attribute name.
    [$value] (mixed) Attribute value.


*yii/data/DataFilter::filterAttributeValue*		protected
>
 filterAttributeValue($attribute, $value)
<
return (mixed) Filtered attribute value.

 Validates attribute value in the scope of 'searchModel', applying attribute
 value filters if any.

    [$attribute] (string) Attribute name.
    [$value] (mixed) Attribute value.


*yii/data/DataFilter::build*				public
>
 build($runValidation='true')
<
return (mixed|false) Built actual filter value, or 'false' if validation fails.

 Builds actual filter specification form 'filter' value.

    [$runValidation] (bool) Whether to perform validation (calling
    'validate()') before building the filter. Defaults to 'true'. If the
    validation fails, no filter will be built and this method will return
    'false'.


*yii/data/DataFilter::buildInternal*			protected
>
 buildInternal()
<
return (mixed) Built actual filter value.

 Performs actual filter build.

 By default this method returns result of 'normalize()'. The child class may
 override this method providing more specific implementation.


*yii/data/DataFilter::normalize*				public
>
 normalize($runValidation='true')
<
return (array|bool) Normalized filter value, or 'false' if validation fails.

 Normalizes filter value, replacing raw keys according to 'filterControls' and
 'attributeMap'.

    [$runValidation] (bool) Whether to perform validation (calling
    'validate()') before normalizing the filter. Defaults to 'true'. If the
    validation fails, no filter will be processed and this method will return
    'false'.



 vim:tw=78:ts=8:ft=help:norl:
