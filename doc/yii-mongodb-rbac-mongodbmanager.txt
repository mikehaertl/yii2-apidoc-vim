
*yii/mongodb/rbac/MongoDbManager*   >> |yii/rbac/BaseManager|
=================================

DESCRIPTION
------------------------------------------------------------------------------

 Manager uses 3 collections for the RBAC data storage:


   - 'itemCollection' - stores item data and item parents list 
   - 'assignmentCollection' - stores assignments info 
   - 'ruleCollection' - stores rule data

 These collection are better to be pre-created with search fields indexed.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/rbac/BaseManager::$defaultRoles|


$db					*yii/mongodb/rbac/MongoDbManager::$db*

 (\yii\mongodb\Connection|array|string) The MongoDB connection object or the
 application component ID of the MongoDB connection. After the MongoDbManager
 object is created, if you want to change this property, you should only
 assign it with a MongoDB connection object.

$cache					*yii/mongodb/rbac/MongoDbManager::$cache*

 (\yii\caching\Cache|array|string) The cache used to improve RBAC performance.
 This can be one of the following:


   - an application component ID (e.g. 'cache') 
   - a configuration array 
   - a '\yii\caching\Cache' object

 When this is not set, it means caching is not enabled.

 Note that by enabling RBAC cache, all auth items, rules and auth item
 parent-child relationships will be cached and loaded into memory. This will
 improve the performance of RBAC permission check. However, it does require
 extra memory and as a result may not be appropriate if your RBAC system
 contains too many auth items. You should seek other RBAC implementations
 (e.g. RBAC based on Redis storage) in this case.

 Also note that if you modify RBAC items, rules or parent-child relationships
 from outside of this component, you have to manually call 'invalidateCache()'
 to ensure data consistency.

$cacheKey				*yii/mongodb/rbac/MongoDbManager::$cacheKey*

 (string) The key used to store RBAC data in cache

$itemCollection				*yii/mongodb/rbac/MongoDbManager::$itemCollection*

 (string|array) The name of the collection storing authorization items.
 Defaults to "auth_item".

$assignmentCollection			*yii/mongodb/rbac/MongoDbManager::$assignmentCollection*

 (string|array) The name of the collection storing authorization item
 assignments. Defaults to "auth_assignment".

$ruleCollection				*yii/mongodb/rbac/MongoDbManager::$ruleCollection*

 (string|array) The name of the collection storing rules. Defaults to
 "auth_rule".

$items					*yii/mongodb/rbac/MongoDbManager::$items*

 (\yii\rbac\Item[]) All auth items (name => Item)

$rules					*yii/mongodb/rbac/MongoDbManager::$rules*

 (\yii\rbac\Rule[]) All auth rules (name => Rule)



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/rbac/BaseManager::createRole|
 |yii/rbac/BaseManager::createPermission|
 |yii/rbac/BaseManager::add|
 |yii/rbac/BaseManager::remove|
 |yii/rbac/BaseManager::update|
 |yii/rbac/BaseManager::getRole|
 |yii/rbac/BaseManager::getPermission|
 |yii/rbac/BaseManager::getRoles|
 |yii/rbac/BaseManager::setDefaultRoles|
 |yii/rbac/BaseManager::getDefaultRoles|
 |yii/rbac/BaseManager::getDefaultRoleInstances|
 |yii/rbac/BaseManager::getPermissions|
 |yii/rbac/BaseManager::executeRule|
 |yii/rbac/BaseManager::hasNoAssignments|


*yii/mongodb/rbac/MongoDbManager::init*			public
>
 init()
<
return (void)

 Initializes the application component.

 This method overrides the parent implementation by establishing the MongoDB
 connection.


*yii/mongodb/rbac/MongoDbManager::getItem*		protected
>
 getItem($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/mongodb/rbac/MongoDbManager::getItems*		protected
>
 getItems($type)
<
return (void)

 {@inheritdoc}

    [$type] () 


*yii/mongodb/rbac/MongoDbManager::addItem*		protected
>
 addItem($item)
<
return (void)

 {@inheritdoc}

    [$item] () 


*yii/mongodb/rbac/MongoDbManager::addRule*		protected
>
 addRule($rule)
<
return (void)

 {@inheritdoc}

    [$rule] () 


*yii/mongodb/rbac/MongoDbManager::removeItem*		protected
>
 removeItem($item)
<
return (void)

 {@inheritdoc}

    [$item] () 


*yii/mongodb/rbac/MongoDbManager::removeRule*		protected
>
 removeRule($rule)
<
return (void)

 {@inheritdoc}

    [$rule] () 


*yii/mongodb/rbac/MongoDbManager::updateItem*		protected
>
 updateItem($name, $item)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$item] () 


*yii/mongodb/rbac/MongoDbManager::updateRule*		protected
>
 updateRule($name, $rule)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$rule] () 


*yii/mongodb/rbac/MongoDbManager::getRolesByUser*		public
>
 getRolesByUser($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/mongodb/rbac/MongoDbManager::getChildRoles*		public
>
 getChildRoles($roleName)
<
return (void)

 {@inheritdoc}

    [$roleName] () 


*yii/mongodb/rbac/MongoDbManager::getPermissionsByRole*	public
>
 getPermissionsByRole($roleName)
<
return (void)

 {@inheritdoc}

    [$roleName] () 


*yii/mongodb/rbac/MongoDbManager::getPermissionsByUser*	public
>
 getPermissionsByUser($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/mongodb/rbac/MongoDbManager::getRule*		public
>
 getRule($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/mongodb/rbac/MongoDbManager::getRules*		public
>
 getRules()
<
return (void)

 {@inheritdoc}


*yii/mongodb/rbac/MongoDbManager::canAddChild*		public
>
 canAddChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/mongodb/rbac/MongoDbManager::addChild*		public
>
 addChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/mongodb/rbac/MongoDbManager::removeChild*		public
>
 removeChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/mongodb/rbac/MongoDbManager::removeChildren*		public
>
 removeChildren($parent)
<
return (void)

 {@inheritdoc}

    [$parent] () 


*yii/mongodb/rbac/MongoDbManager::hasChild*		public
>
 hasChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/mongodb/rbac/MongoDbManager::getChildren*		public
>
 getChildren($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/mongodb/rbac/MongoDbManager::assign*			public
>
 assign($role, $userId)
<
return (void)

 {@inheritdoc}

    [$role] () 
    [$userId] () 


*yii/mongodb/rbac/MongoDbManager::revoke*			public
>
 revoke($role, $userId)
<
return (void)

 {@inheritdoc}

    [$role] () 
    [$userId] () 


*yii/mongodb/rbac/MongoDbManager::revokeAll*		public
>
 revokeAll($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/mongodb/rbac/MongoDbManager::getAssignment*		public
>
 getAssignment($roleName, $userId)
<
return (void)

 {@inheritdoc}

    [$roleName] () 
    [$userId] () 


*yii/mongodb/rbac/MongoDbManager::getAssignments*		public
>
 getAssignments($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/mongodb/rbac/MongoDbManager::getUserIdsByRole*	public
>
 getUserIdsByRole($roleName)
<
return (void)

 {@inheritdoc}

    [$roleName] () 


*yii/mongodb/rbac/MongoDbManager::removeAll*		public
>
 removeAll()
<
return (void)

 {@inheritdoc}


*yii/mongodb/rbac/MongoDbManager::removeAllPermissions*	public
>
 removeAllPermissions()
<
return (void)

 {@inheritdoc}


*yii/mongodb/rbac/MongoDbManager::removeAllRoles*		public
>
 removeAllRoles()
<
return (void)

 {@inheritdoc}


*yii/mongodb/rbac/MongoDbManager::removeAllRules*		public
>
 removeAllRules()
<
return (void)

 {@inheritdoc}


*yii/mongodb/rbac/MongoDbManager::removeAllAssignments*	public
>
 removeAllAssignments()
<
return (void)

 {@inheritdoc}


*yii/mongodb/rbac/MongoDbManager::checkAccess*		public
>
 checkAccess($userId, $permissionName, $params='[]')
<
return (void)

 {@inheritdoc}

    [$userId] () 
    [$permissionName] () 
    [$params] () 


*yii/mongodb/rbac/MongoDbManager::checkAccessFromCache*	protected
>
 checkAccessFromCache($user, $itemName, $params, $assignments)
<
return (bool) Whether the operations can be performed by the user.

 Performs access check for the specified user based on the data loaded from
 cache.

 This method is internally called by 'checkAccess()' when 'cache' is enabled.

    [$user] (string|int) The user ID. This should can be either an integer or
    a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/mongodb/rbac/MongoDbManager::checkAccessRecursive*	protected
>
 checkAccessRecursive($user, $itemName, $params, $assignments)
<
return (bool) Whether the operations can be performed by the user.

 Performs access check for the specified user.

 This method is internally called by 'checkAccess()'.

    [$user] (string|int) The user ID. This should can be either an integer or
    a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/mongodb/rbac/MongoDbManager::invalidateCache*	public
>
 invalidateCache()
<
return (void)

 Invalidates RBAC related cache


*yii/mongodb/rbac/MongoDbManager::populateItem*		protected
>
 populateItem($row)
<
return (\yii\rbac\Item) The populated auth item instance (either Role or Permission)

 Populates an auth item with the data fetched from collection

    [$row] (array) The data from the auth item collection


*yii/mongodb/rbac/MongoDbManager::removeAllItems*		protected
>
 removeAllItems($type)
<
return (void)

 Removes all auth items of the specified type.

    [$type] (int) The auth item type (either Item::TYPE_PERMISSION or
    Item::TYPE_ROLE)


*yii/mongodb/rbac/MongoDbManager::loadFromCache*		public
>
 loadFromCache()
<
return (void)

 Loads data from cache


*yii/mongodb/rbac/MongoDbManager::getChildrenList*	protected
>
 getChildrenList()
<
return (array) The children list. Each array key is a parent item name, and the
corresponding array value is a list of child item names.

 Returns the children for every parent.


*yii/mongodb/rbac/MongoDbManager::getChildrenRecursive*	protected
>
 getChildrenRecursive($name, $childrenList, $result)
<
return (void)

 Recursively finds all children and grand children of the specified item.

    [$name] (string) The name of the item whose children are to be looked for.
    [$childrenList] (array) The child list built via 'getChildrenList()'
    [$result] (array) The children and grand children (in array keys)


*yii/mongodb/rbac/MongoDbManager::detectLoop*		protected
>
 detectLoop($parent, $child)
<
return (bool) Whether a loop exists

 Checks whether there is a loop in the authorization item hierarchy.

    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy



 vim:tw=78:ts=8:ft=help:norl:
