
*yii/mongodb/rbac/MongoDbManager*   >> |yii/rbac/BaseManager|
=================================

DESCRIPTION
------------------------------------------------------------------------------

 Manager uses 3 collections for the RBAC data storage:


   - 'itemCollection' - stores item data and item parents list 
   - 'assignmentCollection' - stores assignments info 
   - 'ruleCollection' - stores rule data

 These collection are better to be pre-created with search fields indexed.


PROPERTY DETAILS
------------------------------------------------------------------------------

$defaultRoles				*yii/mongodb/rbac/MongoDbManager::$defaultRoles*

 See |yii/rbac/BaseManager::$defaultRoles|

$db					*yii/mongodb/rbac/MongoDbManager::$db*

 (\yii\mongodb\Connection|array|string) The MongoDB connection object or the
 application component ID of the MongoDB connection. After the MongoDbManager
 object is created, if you want to change this property, you should only
 assign it with a MongoDB connection object.

$cache					*yii/mongodb/rbac/MongoDbManager::$cache*

 (\yii\caching\Cache|array|string) The cache used to improve RBAC performance.
 This can be one of the following:


   - an application component ID (e.g. 'cache') 
   - a configuration array 
   - a '\yii\caching\Cache' object

 When this is not set, it means caching is not enabled.

 Note that by enabling RBAC cache, all auth items, rules and auth item
 parent-child relationships will be cached and loaded into memory. This will
 improve the performance of RBAC permission check. However, it does require
 extra memory and as a result may not be appropriate if your RBAC system
 contains too many auth items. You should seek other RBAC implementations
 (e.g. RBAC based on Redis storage) in this case.

 Also note that if you modify RBAC items, rules or parent-child relationships
 from outside of this component, you have to manually call 'invalidateCache()'
 to ensure data consistency.

$cacheKey				*yii/mongodb/rbac/MongoDbManager::$cacheKey*

 (string) The key used to store RBAC data in cache

$itemCollection				*yii/mongodb/rbac/MongoDbManager::$itemCollection*

 (string|array) The name of the collection storing authorization items.
 Defaults to "auth_item".

$assignmentCollection			*yii/mongodb/rbac/MongoDbManager::$assignmentCollection*

 (string|array) The name of the collection storing authorization item
 assignments. Defaults to "auth_assignment".

$ruleCollection				*yii/mongodb/rbac/MongoDbManager::$ruleCollection*

 (string|array) The name of the collection storing rules. Defaults to
 "auth_rule".

$items					*yii/mongodb/rbac/MongoDbManager::$items*

 (\yii\rbac\Item[]) All auth items (name => Item)

$rules					*yii/mongodb/rbac/MongoDbManager::$rules*

 (\yii\rbac\Rule[]) All auth rules (name => Rule)

$behaviors				*yii/mongodb/rbac/MongoDbManager::$behaviors*

 See |yii/base/Component::$behaviors|

$roles					*yii/mongodb/rbac/MongoDbManager::$roles*

 See |yii/rbac/BaseManager::$roles|

$permissions				*yii/mongodb/rbac/MongoDbManager::$permissions*

 See |yii/rbac/BaseManager::$permissions|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/mongodb/rbac/MongoDbManager::className*		public

 See |yii/base/Object::className|


*yii/mongodb/rbac/MongoDbManager::__construct*		public

 See |yii/base/Object::__construct|


*yii/mongodb/rbac/MongoDbManager::init*			public
>
 init()
<
return (void)

 This method overrides the parent implementation by establishing the MongoDB
 connection.


*yii/mongodb/rbac/MongoDbManager::__get*			public

 See |yii/base/Component::__get|


*yii/mongodb/rbac/MongoDbManager::__set*			public

 See |yii/base/Component::__set|


*yii/mongodb/rbac/MongoDbManager::__isset*		public

 See |yii/base/Component::__isset|


*yii/mongodb/rbac/MongoDbManager::__unset*		public

 See |yii/base/Component::__unset|


*yii/mongodb/rbac/MongoDbManager::__call*			public

 See |yii/base/Component::__call|


*yii/mongodb/rbac/MongoDbManager::hasProperty*		public

 See |yii/base/Component::hasProperty|


*yii/mongodb/rbac/MongoDbManager::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/mongodb/rbac/MongoDbManager::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/mongodb/rbac/MongoDbManager::hasMethod*		public

 See |yii/base/Component::hasMethod|


*yii/mongodb/rbac/MongoDbManager::__clone*		public

 See |yii/base/Component::__clone|


*yii/mongodb/rbac/MongoDbManager::behaviors*		public

 See |yii/base/Component::behaviors|


*yii/mongodb/rbac/MongoDbManager::hasEventHandlers*	public

 See |yii/base/Component::hasEventHandlers|


*yii/mongodb/rbac/MongoDbManager::on*			public

 See |yii/base/Component::on|


*yii/mongodb/rbac/MongoDbManager::off*			public

 See |yii/base/Component::off|


*yii/mongodb/rbac/MongoDbManager::trigger*		public

 See |yii/base/Component::trigger|


*yii/mongodb/rbac/MongoDbManager::getBehavior*		public

 See |yii/base/Component::getBehavior|


*yii/mongodb/rbac/MongoDbManager::getBehaviors*		public

 See |yii/base/Component::getBehaviors|


*yii/mongodb/rbac/MongoDbManager::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/mongodb/rbac/MongoDbManager::attachBehaviors*	public

 See |yii/base/Component::attachBehaviors|


*yii/mongodb/rbac/MongoDbManager::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/mongodb/rbac/MongoDbManager::detachBehaviors*	public

 See |yii/base/Component::detachBehaviors|


*yii/mongodb/rbac/MongoDbManager::ensureBehaviors*	public

 See |yii/base/Component::ensureBehaviors|


*yii/mongodb/rbac/MongoDbManager::getItem*		protected
>
 getItem($name)
<
return (\yii\rbac\Item) The auth item corresponding to the specified name. Null is
returned if no such item.







    [$name] (string) The auth item name.


*yii/mongodb/rbac/MongoDbManager::getItems*		protected
>
 getItems($type)
<
return (\yii\rbac\Item[]) The auth items of the specified type.







    [$type] (integer) The auth item type (either 'Item::TYPE_ROLE' or
    'Item::TYPE_PERMISSION'


*yii/mongodb/rbac/MongoDbManager::addItem*		protected
>
 addItem($item)
<
return (boolean) Whether the auth item is successfully added to the system







    [$item] (\yii\rbac\Item) The item to add


*yii/mongodb/rbac/MongoDbManager::addRule*		protected
>
 addRule($rule)
<
return (boolean) Whether the rule is successfully added to the system







    [$rule] (\yii\rbac\Rule) The rule to add


*yii/mongodb/rbac/MongoDbManager::removeItem*		protected
>
 removeItem($item)
<
return (boolean) Whether the role or permission is successfully removed







    [$item] (\yii\rbac\Item) The item to remove


*yii/mongodb/rbac/MongoDbManager::removeRule*		protected
>
 removeRule($rule)
<
return (boolean) Whether the rule is successfully removed







    [$rule] (\yii\rbac\Rule) The rule to remove


*yii/mongodb/rbac/MongoDbManager::updateItem*		protected
>
 updateItem($name, $item)
<
return (boolean) Whether the auth item is successfully updated







    [$name] (string) The name of the item being updated
    [$item] (\yii\rbac\Item) The updated item


*yii/mongodb/rbac/MongoDbManager::updateRule*		protected
>
 updateRule($name, $rule)
<
return (boolean) Whether the rule is successfully updated







    [$name] (string) The name of the rule being updated
    [$rule] (\yii\rbac\Rule) The updated rule


*yii/mongodb/rbac/MongoDbManager::createRole*		public

 See |yii/rbac/BaseManager::createRole|


*yii/mongodb/rbac/MongoDbManager::createPermission*	public

 See |yii/rbac/BaseManager::createPermission|


*yii/mongodb/rbac/MongoDbManager::add*			public

 See |yii/rbac/BaseManager::add|


*yii/mongodb/rbac/MongoDbManager::remove*			public

 See |yii/rbac/BaseManager::remove|


*yii/mongodb/rbac/MongoDbManager::update*			public

 See |yii/rbac/BaseManager::update|


*yii/mongodb/rbac/MongoDbManager::getRole*		public

 See |yii/rbac/BaseManager::getRole|


*yii/mongodb/rbac/MongoDbManager::getPermission*		public

 See |yii/rbac/BaseManager::getPermission|


*yii/mongodb/rbac/MongoDbManager::getRoles*		public

 See |yii/rbac/BaseManager::getRoles|


*yii/mongodb/rbac/MongoDbManager::getPermissions*		public

 See |yii/rbac/BaseManager::getPermissions|


*yii/mongodb/rbac/MongoDbManager::executeRule*		protected

 See |yii/rbac/BaseManager::executeRule|


*yii/mongodb/rbac/MongoDbManager::getRolesByUser*		public
>
 getRolesByUser($userId)
<
return (\yii\rbac\Role[]) All roles directly assigned to the user. The array is
indexed by the role names.



 Note that child roles that are not assigned directly to the user will not be
 returned.



    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/mongodb/rbac/MongoDbManager::getChildRoles*		public

 See |yii/rbac/ManagerInterface::getChildRoles|


*yii/mongodb/rbac/MongoDbManager::getPermissionsByRole*	public
>
 getPermissionsByRole($roleName)
<
return (\yii\rbac\Permission[]) All permissions that the role represents. The array
is indexed by the permission names.







    [$roleName] (string) The role name


*yii/mongodb/rbac/MongoDbManager::getPermissionsByUser*	public
>
 getPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All permissions that the user has. The array is
indexed by the permission names.







    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/mongodb/rbac/MongoDbManager::getRule*		public
>
 getRule($name)
<
return (null|\yii\rbac\Rule) The rule object, or null if the specified name does not
correspond to a rule.







    [$name] (string) The rule name


*yii/mongodb/rbac/MongoDbManager::getRules*		public
>
 getRules()
<
return (\yii\rbac\Rule[]) The rules indexed by the rule names








*yii/mongodb/rbac/MongoDbManager::canAddChild*		public
>
 canAddChild($parent, $child)
<
return (boolean) Possibility of adding







    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy


*yii/mongodb/rbac/MongoDbManager::addChild*		public
>
 addChild($parent, $child)
<
return (boolean) Whether the child successfully added







    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/mongodb/rbac/MongoDbManager::removeChild*		public
>
 removeChild($parent, $child)
<
return (boolean) Whether the removal is successful



 Note, the child item is not deleted. Only the parent-child relationship is
 removed.



    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/mongodb/rbac/MongoDbManager::removeChildren*		public
>
 removeChildren($parent)
<
return (boolean) Whether the removal is successful



 Note, the children items are not deleted. Only the parent-child relationships
 are removed.



    [$parent] (\yii\rbac\Item) 


*yii/mongodb/rbac/MongoDbManager::hasChild*		public
>
 hasChild($parent, $child)
<
return (boolean) Whether '$child' is already a child of '$parent'







    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/mongodb/rbac/MongoDbManager::getChildren*		public
>
 getChildren($name)
<
return (\yii\rbac\Item[]) The child permissions and/or roles







    [$name] (string) The parent name


*yii/mongodb/rbac/MongoDbManager::assign*			public
>
 assign($role, $userId)
<
return (\yii\rbac\Assignment) The role assignment information.







    [$role] (\yii\rbac\Role) 
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/mongodb/rbac/MongoDbManager::revoke*			public
>
 revoke($role, $userId)
<
return (boolean) Whether the revoking is successful







    [$role] (\yii\rbac\Role) 
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/mongodb/rbac/MongoDbManager::revokeAll*		public
>
 revokeAll($userId)
<
return (boolean) Whether the revoking is successful







    [$userId] (mixed) The user ID (see '\yii\web\User::id')


*yii/mongodb/rbac/MongoDbManager::getAssignment*		public
>
 getAssignment($roleName, $userId)
<
return (null|\yii\rbac\Assignment) The assignment information. Null is returned if
the role is not assigned to the user.







    [$roleName] (string) The role name
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/mongodb/rbac/MongoDbManager::getAssignments*		public
>
 getAssignments($userId)
<
return (\yii\rbac\Assignment[]) The assignments indexed by role names. An empty array
will be returned if there is no role assigned to the user.







    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/mongodb/rbac/MongoDbManager::getUserIdsByRole*	public
>
 getUserIdsByRole($roleName)
<
return (array) Array of user ID strings







    [$roleName] (string) 


*yii/mongodb/rbac/MongoDbManager::removeAll*		public
>
 removeAll()
<
return (void)








*yii/mongodb/rbac/MongoDbManager::removeAllPermissions*	public
>
 removeAllPermissions()
<
return (void)



 All parent child relations will be adjusted accordingly.




*yii/mongodb/rbac/MongoDbManager::removeAllRoles*		public
>
 removeAllRoles()
<
return (void)



 All parent child relations will be adjusted accordingly.




*yii/mongodb/rbac/MongoDbManager::removeAllRules*		public
>
 removeAllRules()
<
return (void)



 All roles and permissions which have rules will be adjusted accordingly.




*yii/mongodb/rbac/MongoDbManager::removeAllAssignments*	public
>
 removeAllAssignments()
<
return (void)








*yii/mongodb/rbac/MongoDbManager::checkAccess*		public
>
 checkAccess($userId, $permissionName, $params='[]')
<
return (void)

    [$userId] () 
    [$permissionName] () 
    [$params] () 


*yii/mongodb/rbac/MongoDbManager::checkAccessFromCache*	protected
>
 checkAccessFromCache($user, $itemName, $params, $assignments)
<
return (boolean) Whether the operations can be performed by the user.

 This method is internally called by 'checkAccess()' when 'cache' is enabled.

    [$user] (string|integer) The user ID. This should can be either an integer
    or a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/mongodb/rbac/MongoDbManager::checkAccessRecursive*	protected
>
 checkAccessRecursive($user, $itemName, $params, $assignments)
<
return (boolean) Whether the operations can be performed by the user.

 This method is internally called by 'checkAccess()'.

    [$user] (string|integer) The user ID. This should can be either an integer
    or a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/mongodb/rbac/MongoDbManager::invalidateCache*	public
>
 invalidateCache()
<
return (void)



*yii/mongodb/rbac/MongoDbManager::populateItem*		protected
>
 populateItem($row)
<
return (\yii\rbac\Item) The populated auth item instance (either Role or Permission)

    [$row] (array) The data from the auth item collection


*yii/mongodb/rbac/MongoDbManager::removeAllItems*		protected
>
 removeAllItems($type)
<
return (void)

    [$type] (integer) The auth item type (either Item::TYPE_PERMISSION or
    Item::TYPE_ROLE)


*yii/mongodb/rbac/MongoDbManager::loadFromCache*		public
>
 loadFromCache()
<
return (void)



*yii/mongodb/rbac/MongoDbManager::getChildrenList*	protected
>
 getChildrenList()
<
return (array) The children list. Each array key is a parent item name, and the
corresponding array value is a list of child item names.



*yii/mongodb/rbac/MongoDbManager::getChildrenRecursive*	protected
>
 getChildrenRecursive($name, $childrenList, $result)
<
return (void)

    [$name] (string) The name of the item whose children are to be looked for.
    [$childrenList] (array) The child list built via 'getChildrenList()'
    [$result] (array) The children and grand children (in array keys)


*yii/mongodb/rbac/MongoDbManager::detectLoop*		protected
>
 detectLoop($parent, $child)
<
return (boolean) Whether a loop exists

    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy



 vim:tw=78:ts=8:ft=help:norl:
