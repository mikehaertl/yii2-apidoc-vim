
*yii/widgets/ActiveField*   >> |yii/base/Component|
=========================

DESCRIPTION
------------------------------------------------------------------------------




PROPERTY DETAILS
------------------------------------------------------------------------------

$form					*yii/widgets/ActiveField::$form*
 (\yii\widgets\ActiveForm) The form that this field is associated with.

$model					*yii/widgets/ActiveField::$model*
 (\yii\base\Model) The data model that this field is associated with

$attribute				*yii/widgets/ActiveField::$attribute*
 (string) The model attribute that this field is associated with

$options				*yii/widgets/ActiveField::$options*
 (array) The HTML attributes (name-value pairs) for the field container tag.
 The values will be HTML-encoded using 'Html::encode()'. If a value is null,
 the corresponding attribute will not be rendered. The following special
 options are recognized:

 - tag: the tag name of the container element. Defaults to "div".

$template				*yii/widgets/ActiveField::$template*
 (string) The template that is used to arrange the label, the input field, the
 error message and the hint text. The following tokens will be replaced when
 'render()' is called: '{label}', '{input}', '{error}' and '{hint}'.

$inputOptions				*yii/widgets/ActiveField::$inputOptions*
 (array) The default options for the input tags. The parameter passed to
 individual input methods (e.g. 'textInput()') will be merged with this
 property when rendering the input tag.

$errorOptions				*yii/widgets/ActiveField::$errorOptions*
 (array) The default options for the error tags. The parameter passed to
 'error()' will be merged with this property when rendering the error tag. The
 following special options are recognized:

 - tag: the tag name of the container element. Defaults to "div".

$labelOptions				*yii/widgets/ActiveField::$labelOptions*
 (array) The default options for the label tags. The parameter passed to
 'label()' will be merged with this property when rendering the label tag.

$hintOptions				*yii/widgets/ActiveField::$hintOptions*
 (array) The default options for the hint tags. The parameter passed to
 'hint()' will be merged with this property when rendering the hint tag. The
 following special options are recognized:

 - tag: the tag name of the container element. Defaults to "div".

$enableClientValidation 		*yii/widgets/ActiveField::$enableClientValidation*
 (boolean) Whether to enable client-side data validation. If not set, it will
 take the value of 'ActiveForm::enableClientValidation'.

$enableAjaxValidation			*yii/widgets/ActiveField::$enableAjaxValidation*
 (boolean) Whether to enable AJAX-based data validation. If not set, it will
 take the value of 'ActiveForm::enableAjaxValidation'.

$validateOnChange			*yii/widgets/ActiveField::$validateOnChange*
 (boolean) Whether to perform validation when the input field loses focus and
 its value is found changed. If not set, it will take the value of
 'ActiveForm::validateOnChange'.

$validateOnType 			*yii/widgets/ActiveField::$validateOnType*
 (boolean) Whether to perform validation while the user is typing in the input
 field. If not set, it will take the value of 'ActiveForm::validateOnType'.

$validationDelay			*yii/widgets/ActiveField::$validationDelay*
 (integer) Number of milliseconds that the validation should be delayed when
 the input field is changed or the user types in the field. If not set, it
 will take the value of 'ActiveForm::validationDelay'.

$selectors				*yii/widgets/ActiveField::$selectors*
 (array) The jQuery selectors for selecting the container, input and error
 tags. The array keys should be "container", "input", and/or "error", and the
 array values are the corresponding selectors. For example, '['input' =>
 '#my-input']'.

 The container selector is used under the context of the form, while the input
 and the error selectors are used under the context of the container.

 You normally do not need to set this property as the default selectors should
 work well for most cases.

$parts					*yii/widgets/ActiveField::$parts*
 (array) Different parts of the field (e.g. input, label). This will be used
 together with 'template' to generate the final field HTML code. The keys are
 the token names in 'template', while the values are the corresponding HTML
 code. Valid tokens include '{input}', '{label}' and '{error}'. Note that you
 normally don't need to access this property directly as it is maintained by
 various methods of this class.

$behaviors				*yii/widgets/ActiveField::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component



METHOD DETAILS
------------------------------------------------------------------------------

yii/widgets/ActiveField::className			       public
 See |yii/base/Object::className|


yii/widgets/ActiveField::__construct			       public
 See |yii/base/Object::__construct|


yii/widgets/ActiveField::init				       public
 See |yii/base/Object::init|


yii/widgets/ActiveField::__get				       public
 See |yii/base/Component::__get|


yii/widgets/ActiveField::__set				       public
 See |yii/base/Component::__set|


yii/widgets/ActiveField::__isset			       public
 See |yii/base/Component::__isset|


yii/widgets/ActiveField::__unset			       public
 See |yii/base/Component::__unset|


yii/widgets/ActiveField::__call 			       public
 See |yii/base/Component::__call|


yii/widgets/ActiveField::hasProperty			       public
 See |yii/base/Component::hasProperty|


yii/widgets/ActiveField::canGetProperty 		       public
 See |yii/base/Component::canGetProperty|


yii/widgets/ActiveField::canSetProperty 		       public
 See |yii/base/Component::canSetProperty|


yii/widgets/ActiveField::hasMethod			       public
 See |yii/base/Component::hasMethod|


yii/widgets/ActiveField::__clone			       public
 See |yii/base/Component::__clone|


yii/widgets/ActiveField::behaviors			       public
 See |yii/base/Component::behaviors|


yii/widgets/ActiveField::hasEventHandlers		       public
 See |yii/base/Component::hasEventHandlers|


yii/widgets/ActiveField::on				       public
 See |yii/base/Component::on|


yii/widgets/ActiveField::off				       public
 See |yii/base/Component::off|


yii/widgets/ActiveField::trigger			       public
 See |yii/base/Component::trigger|


yii/widgets/ActiveField::getBehavior			       public
 See |yii/base/Component::getBehavior|


yii/widgets/ActiveField::getBehaviors			       public
 See |yii/base/Component::getBehaviors|


yii/widgets/ActiveField::attachBehavior 		       public
 See |yii/base/Component::attachBehavior|


yii/widgets/ActiveField::attachBehaviors		       public
 See |yii/base/Component::attachBehaviors|


yii/widgets/ActiveField::detachBehavior 		       public
 See |yii/base/Component::detachBehavior|


yii/widgets/ActiveField::detachBehaviors		       public
 See |yii/base/Component::detachBehaviors|


yii/widgets/ActiveField::ensureBehaviors		       public
 See |yii/base/Component::ensureBehaviors|


yii/widgets/ActiveField::__toString			       public
>
 __toString()
<
(string) The string representation of this object.




yii/widgets/ActiveField::render 			       public
>
 render($content='null')
<
(string) The rendering result

 This method will generate the label, error tag, input tag and hint tag (if
 any), and assemble them into HTML according to 'template'.
    [$content] (string|callable) The content within the field container. If
    null (not set), the default methods will be called to generate the label,
    error tag and input tag, and use them as the content. If a callable, it
    will be called to generate the content. The signature of the callable
    should be:

      function ($field) {
          return $html;
      }




yii/widgets/ActiveField::begin				       public
>
 begin()
<
(string) The rendering result.




yii/widgets/ActiveField::end				       public
>
 end()
<
(string) The rendering result.




yii/widgets/ActiveField::label				       public
>
 label($label='null', $options='[]')
<
(static) The field object itself


    [$label] (string) The label to use. If null, it will be generated via
    'Model::getAttributeLabel()'. Note that this will NOT be
    'Html::encode()|encoded'.
    [$options] (array) The tag options in terms of name-value pairs. It will
    be merged with 'labelOptions'. The options will be rendered as the
    attributes of the resulting tag. The values will be HTML-encoded using
    'Html::encode()'. If a value is null, the corresponding attribute will not
    be rendered.


yii/widgets/ActiveField::error				       public
>
 error($options='[]')
<
(static) The field object itself

 Note that even if there is no validation error, this method will still return
 an empty error tag.
    [$options] (array) The tag options in terms of name-value pairs. It will
    be merged with 'errorOptions'. The options will be rendered as the
    attributes of the resulting tag. The values will be HTML-encoded using
    'Html::encode()'. If a value is null, the corresponding attribute will not
    be rendered.

    The following options are specially handled:

    - tag: this specifies the tag name. If not set, "div" will be used.


yii/widgets/ActiveField::hint				       public
>
 hint($content, $options='[]')
<
(static) The field object itself


    [$content] (string) The hint content. It will NOT be HTML-encoded.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the hint tag. The values will be
    HTML-encoded using 'Html::encode()'.

    The following options are specially handled:

    - tag: this specifies the tag name. If not set, "div" will be used.


yii/widgets/ActiveField::input				       public
>
 input($type, $options='[]')
<
(static) The field object itself


    [$type] (string) The input type (e.g. 'text', 'password')
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.


yii/widgets/ActiveField::textInput			       public
>
 textInput($options='[]')
<
(static) The field object itself

 This method will generate the "name" and "value" tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.


yii/widgets/ActiveField::hiddenInput			       public
>
 hiddenInput($options='[]')
<
(static) The field object itself

 Note that this method is provided for completeness. In most cases because you
 do not need to validate a hidden input, you should not need to use this
 method. Instead, you should use '\yii\helpers\Html::activeHiddenInput()'.

 This method will generate the "name" and "value" tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.


yii/widgets/ActiveField::passwordInput			       public
>
 passwordInput($options='[]')
<
(static) The field object itself

 This method will generate the "name" and "value" tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.


yii/widgets/ActiveField::fileInput			       public
>
 fileInput($options='[]')
<
(static) The field object itself

 This method will generate the "name" and "value" tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.


yii/widgets/ActiveField::textarea			       public
>
 textarea($options='[]')
<
(static) The field object itself

 The model attribute value will be used as the content in the textarea.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.


yii/widgets/ActiveField::radio				       public
>
 radio($options='[]', $enclosedByLabel='true')
<
(static) The field object itself

 This method will generate the "checked" tag attribute according to the model
 attribute value.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:

    - uncheck: string, the value associated with the uncheck state of the
    radio button. If not set,   it will take the default value '0'. This
    method will render a hidden input so that if the radio button   is not
    checked and is submitted, the value of this attribute will still be
    submitted to the server   via the hidden input. - label: string, a label
    displayed next to the radio button.  It will NOT be HTML-encoded.
    Therefore you can pass   in HTML code such as an image tag. If this is is
    coming from end users, you should 'Html::encode()' it to prevent XSS
    attacks.   When this option is specified, the radio button will be
    enclosed by a label tag. - labelOptions: array, the HTML attributes for
    the label tag. This is only used when the "label" option is specified.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'Html::encode()'. If
    a value is null, the corresponding attribute will not be rendered.
    [$enclosedByLabel] (boolean) Whether to enclose the radio within the
    label. If true, the method will still use 'template' to layout the
    checkbox and the error message except that the radio is enclosed by the
    label tag.


yii/widgets/ActiveField::checkbox			       public
>
 checkbox($options='[]', $enclosedByLabel='true')
<
(static) The field object itself

 This method will generate the "checked" tag attribute according to the model
 attribute value.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:

    - uncheck: string, the value associated with the uncheck state of the
    radio button. If not set,   it will take the default value '0'. This
    method will render a hidden input so that if the radio button   is not
    checked and is submitted, the value of this attribute will still be
    submitted to the server   via the hidden input. - label: string, a label
    displayed next to the checkbox.  It will NOT be HTML-encoded. Therefore
    you can pass   in HTML code such as an image tag. If this is is coming
    from end users, you should 'Html::encode()' it to prevent XSS attacks.  
    When this option is specified, the checkbox will be enclosed by a label
    tag. - labelOptions: array, the HTML attributes for the label tag. This is
    only used when the "label" option is specified.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'Html::encode()'. If
    a value is null, the corresponding attribute will not be rendered.
    [$enclosedByLabel] (boolean) Whether to enclose the checkbox within the
    label. If true, the method will still use 'template' to layout the
    checkbox and the error message except that the checkbox is enclosed by the
    label tag.


yii/widgets/ActiveField::dropDownList			       public
>
 dropDownList($items, $options='[]')
<
(static) The field object itself

 The selection of the drop-down list is taken from the value of the model
 attribute.
    [$items] (array) The option data items. The array keys are option values,
    and the array values are the corresponding option labels. The array can
    also be nested (i.e. some array values are arrays too). For each
    sub-array, an option group will be generated whose label is the key
    associated with the sub-array. If you have a list of data models, you may
    convert them into the format described above using 'ArrayHelper::map()'.

    Note, the values and labels will be automatically HTML-encoded by this
    method, and the blank spaces in the labels will also be HTML-encoded.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:

    - prompt: string, a prompt text to be displayed as the first option; -
    options: array, the attributes for the select option tags. The array keys
    must be valid option values,   and the array values are the extra
    attributes for the corresponding option tags. For example,

      [
          'value1' => ['disabled' => true],
          'value2' => ['label' => 'value 2'],
      ];

    - groups: array, the attributes for the optgroup tags. The structure of
    this is similar to that of 'options',   except that the array keys
    represent the optgroup labels specified in $items.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'Html::encode()'. If
    a value is null, the corresponding attribute will not be rendered.


yii/widgets/ActiveField::listBox			       public
>
 listBox($items, $options='[]')
<
(static) The field object itself

 The selection of the list box is taken from the value of the model attribute.
    [$items] (array) The option data items. The array keys are option values,
    and the array values are the corresponding option labels. The array can
    also be nested (i.e. some array values are arrays too). For each
    sub-array, an option group will be generated whose label is the key
    associated with the sub-array. If you have a list of data models, you may
    convert them into the format described above using
    '\yii\helpers\ArrayHelper::map()'.

    Note, the values and labels will be automatically HTML-encoded by this
    method, and the blank spaces in the labels will also be HTML-encoded.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:

    - prompt: string, a prompt text to be displayed as the first option; -
    options: array, the attributes for the select option tags. The array keys
    must be valid option values,   and the array values are the extra
    attributes for the corresponding option tags. For example,

      [
          'value1' => ['disabled' => true],
          'value2' => ['label' => 'value 2'],
      ];

    - groups: array, the attributes for the optgroup tags. The structure of
    this is similar to that of 'options',   except that the array keys
    represent the optgroup labels specified in $items. - unselect: string, the
    value that will be submitted when no option is selected.   When this
    attribute is set, a hidden field will be generated so that if no option is
    selected in multiple   mode, we can still obtain the posted unselect
    value.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'Html::encode()'. If
    a value is null, the corresponding attribute will not be rendered.


yii/widgets/ActiveField::checkboxList			       public
>
 checkboxList($items, $options='[]')
<
(static) The field object itself

 A checkbox list allows multiple selection, like 'listBox()'. As a result, the
 corresponding submitted value is an array. The selection of the checkbox list
 is taken from the value of the model attribute.
    [$items] (array) The data item used to generate the checkboxes. The array
    values are the labels, while the array keys are the corresponding checkbox
    values. Note that the labels will NOT be HTML-encoded, while the values
    will.
    [$options] (array) Options (name => config) for the checkbox list. The
    following options are specially handled:

    - unselect: string, the value that should be submitted when none of the
    checkboxes is selected.   By setting this option, a hidden input will be
    generated. - separator: string, the HTML code that separates items. -
    item: callable, a callback that can be used to customize the generation of
    the HTML code   corresponding to a single item in $items. The signature of
    this callback must be:

      function ($index, $label, $name, $checked, $value)

    where $index is the zero-based index of the checkbox in the whole list;
    $label is the label for the checkbox; and $name, $value and $checked
    represent the name, value and the checked status of the checkbox input.


yii/widgets/ActiveField::radioList			       public
>
 radioList($items, $options='[]')
<
(static) The field object itself

 A radio button list is like a checkbox list, except that it only allows
 single selection. The selection of the radio buttons is taken from the value
 of the model attribute.
    [$items] (array) The data item used to generate the radio buttons. The
    array keys are the labels, while the array values are the corresponding
    radio button values. Note that the labels will NOT be HTML-encoded, while
    the values will.
    [$options] (array) Options (name => config) for the radio button list. The
    following options are specially handled:

    - unselect: string, the value that should be submitted when none of the
    radio buttons is selected.   By setting this option, a hidden input will
    be generated. - separator: string, the HTML code that separates items. -
    item: callable, a callback that can be used to customize the generation of
    the HTML code   corresponding to a single item in $items. The signature of
    this callback must be:

      function ($index, $label, $name, $checked, $value)

    where $index is the zero-based index of the radio button in the whole
    list; $label is the label for the radio button; and $name, $value and
    $checked represent the name, value and the checked status of the radio
    button input.


yii/widgets/ActiveField::widget 			       public
>
 widget($class, $config='[]')
<
(static) The field object itself

 Note that the widget must have both 'model' and 'attribute' properties. They
 will be initialized with 'model' and 'attribute' of this field, respectively.

 If you want to use a widget that does not have 'model' and 'attribute'
 properties, please use 'render()' instead.
    [$class] (string) The widget class name
    [$config] (array) Name-value pairs that will be used to initialize the
    widget


yii/widgets/ActiveField::adjustLabelFor 		       protected
>
 adjustLabelFor($options)
<
(void)


    [$options] (array) The input options


yii/widgets/ActiveField::getClientOptions		       protected
>
 getClientOptions()
<
(array) The JS options





 vim:tw=78:ts=8:ft=help:norl:
