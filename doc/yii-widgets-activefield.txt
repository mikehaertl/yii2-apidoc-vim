
*yii/widgets/ActiveField*   >> |yii/base/Component|
=========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/bootstrap/ActiveField|
|yii/gii/components/ActiveField|

DESCRIPTION
------------------------------------------------------------------------------

 For more details and usage information on ActiveField, see the [guide article
 on forms](guide:input-forms).


PROPERTY DETAILS
------------------------------------------------------------------------------

$form					*yii/widgets/ActiveField::$form*

 (\yii\widgets\ActiveForm) The form that this field is associated with.

$model					*yii/widgets/ActiveField::$model*

 (\yii\base\Model) The data model that this field is associated with.

$attribute				*yii/widgets/ActiveField::$attribute*

 (string) The model attribute that this field is associated with.

$options				*yii/widgets/ActiveField::$options*

 (array) The HTML attributes (name-value pairs) for the field container tag.
 The values will be HTML-encoded using 'Html::encode()'. If a value is 'null',
 the corresponding attribute will not be rendered. The following special
 options are recognized:


   - 'tag': the tag name of the container element. Defaults to 'div'.
   Setting it to 'false' will not render a container tag.   See also
 '\yii\helpers\Html::tag()'.

 If you set a custom 'id' for the container element, you may need to adjust
 the '$selectors' accordingly.

$template				*yii/widgets/ActiveField::$template*

 (string) The template that is used to arrange the label, the input field, the
 error message and the hint text. The following tokens will be replaced when
 'render()' is called: '{label}', '{input}', '{error}' and '{hint}'.

$inputOptions				*yii/widgets/ActiveField::$inputOptions*

 (array) The default options for the input tags. The parameter passed to
 individual input methods (e.g. 'textInput()') will be merged with this
 property when rendering the input tag.

 If you set a custom 'id' for the input element, you may need to adjust the
 '$selectors' accordingly.

$errorOptions				*yii/widgets/ActiveField::$errorOptions*

 (array) The default options for the error tags. The parameter passed to
 'error()' will be merged with this property when rendering the error tag. The
 following special options are recognized:


   - 'tag': the tag name of the container element. Defaults to 'div'.
   Setting it to 'false' will not render a container tag.   See also
 '\yii\helpers\Html::tag()'. 
   - 'encode': whether to encode the error output. Defaults to 'true'.

 If you set a custom 'id' for the error element, you may need to adjust the
 '$selectors' accordingly.

$labelOptions				*yii/widgets/ActiveField::$labelOptions*

 (array) The default options for the label tags. The parameter passed to
 'label()' will be merged with this property when rendering the label tag.

$hintOptions				*yii/widgets/ActiveField::$hintOptions*

 (array) The default options for the hint tags. The parameter passed to
 'hint()' will be merged with this property when rendering the hint tag. The
 following special options are recognized:


   - 'tag': the tag name of the container element. Defaults to 'div'.
   Setting it to 'false' will not render a container tag.   See also
 '\yii\helpers\Html::tag()'.

$enableClientValidation			*yii/widgets/ActiveField::$enableClientValidation*

 (bool) Whether to enable client-side data validation. If not set, it will
 take the value of 'ActiveForm::enableClientValidation'.

$enableAjaxValidation			*yii/widgets/ActiveField::$enableAjaxValidation*

 (bool) Whether to enable AJAX-based data validation. If not set, it will take
 the value of 'ActiveForm::enableAjaxValidation'.

$validateOnChange			*yii/widgets/ActiveField::$validateOnChange*

 (bool) Whether to perform validation when the value of the input field is
 changed. If not set, it will take the value of
 'ActiveForm::validateOnChange'.

$validateOnBlur				*yii/widgets/ActiveField::$validateOnBlur*

 (bool) Whether to perform validation when the input field loses focus. If not
 set, it will take the value of 'ActiveForm::validateOnBlur'.

$validateOnType				*yii/widgets/ActiveField::$validateOnType*

 (bool) Whether to perform validation while the user is typing in the input
 field. If not set, it will take the value of 'ActiveForm::validateOnType'.

$validationDelay			*yii/widgets/ActiveField::$validationDelay*

 (int) Number of milliseconds that the validation should be delayed when the
 user types in the field and 'validateOnType' is set 'true'. If not set, it
 will take the value of 'ActiveForm::validationDelay'.

$selectors				*yii/widgets/ActiveField::$selectors*

 (array) The jQuery selectors for selecting the container, input and error
 tags. The array keys should be 'container', 'input', and/or 'error', and the
 array values are the corresponding selectors. For example, '['input' =>
 '#my-input']'.

 The container selector is used under the context of the form, while the input
 and the error selectors are used under the context of the container.

 You normally do not need to set this property as the default selectors should
 work well for most cases.

$parts					*yii/widgets/ActiveField::$parts*

 (array) Different parts of the field (e.g. input, label). This will be used
 together with 'template' to generate the final field HTML code. The keys are
 the token names in 'template', while the values are the corresponding HTML
 code. Valid tokens include '{input}', '{label}' and '{error}'. Note that you
 normally don't need to access this property directly as it is maintained by
 various methods of this class.

$addAriaAttributes			*yii/widgets/ActiveField::$addAriaAttributes*

 (bool) Adds aria HTML attributes 'aria-required' and 'aria-invalid' for
 inputs



METHOD DETAILS
------------------------------------------------------------------------------


*yii/widgets/ActiveField::className*			public

 See |yii/base/BaseObject::className|


*yii/widgets/ActiveField::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/widgets/ActiveField::init*				public

 See |yii/base/BaseObject::init|


*yii/widgets/ActiveField::__get*				public

 See |yii/base/Component::__get|


*yii/widgets/ActiveField::__set*				public

 See |yii/base/Component::__set|


*yii/widgets/ActiveField::__isset*			public

 See |yii/base/Component::__isset|


*yii/widgets/ActiveField::__unset*			public

 See |yii/base/Component::__unset|


*yii/widgets/ActiveField::__call*				public

 See |yii/base/Component::__call|


*yii/widgets/ActiveField::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/widgets/ActiveField::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/widgets/ActiveField::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/widgets/ActiveField::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/widgets/ActiveField::__clone*			public

 See |yii/base/Component::__clone|


*yii/widgets/ActiveField::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/widgets/ActiveField::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/widgets/ActiveField::on*				public

 See |yii/base/Component::on|


*yii/widgets/ActiveField::off*				public

 See |yii/base/Component::off|


*yii/widgets/ActiveField::trigger*			public

 See |yii/base/Component::trigger|


*yii/widgets/ActiveField::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/widgets/ActiveField::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/widgets/ActiveField::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/widgets/ActiveField::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/widgets/ActiveField::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/widgets/ActiveField::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/widgets/ActiveField::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/widgets/ActiveField::__toString*			public
>
 __toString()
<
return (string) The string representation of this object.

 PHP magic method that returns the string representation of this object.


*yii/widgets/ActiveField::render*				public
>
 render($content='null')
<
return (string) The rendering result.

 Renders the whole field.

 This method will generate the label, error tag, input tag and hint tag (if
 any), and assemble them into HTML according to 'template'.

    [$content] (string|callable) The content within the field container. If
    'null' (not set), the default methods will be called to generate the
    label, error tag and input tag, and use them as the content. If a
    callable, it will be called to generate the content. The signature of the
    callable should be:

      function ($field) {
          return $html;
      }




*yii/widgets/ActiveField::begin*				public
>
 begin()
<
return (string) The rendering result.

 Renders the opening tag of the field container.


*yii/widgets/ActiveField::end*				public
>
 end()
<
return (string) The rendering result.

 Renders the closing tag of the field container.


*yii/widgets/ActiveField::label*				public
>
 label($label='null', $options='[]')
<
return ($this) The field object itself.

 Generates a label tag for 'attribute'.

    [$label] (null|string|false) The label to use. If 'null', the label will
    be generated via 'Model::getAttributeLabel()'. If 'false', the generated
    field will not contain the label part. Note that this will NOT be
    'Html::encode()|encoded'.
    [$options] (null|array) The tag options in terms of name-value pairs. It
    will be merged with 'labelOptions'. The options will be rendered as the
    attributes of the resulting tag. The values will be HTML-encoded using
    'Html::encode()'. If a value is 'null', the corresponding attribute will
    not be rendered.


*yii/widgets/ActiveField::error*				public
>
 error($options='[]')
<
return ($this) The field object itself.

 Generates a tag that contains the first validation error of 'attribute'.

 Note that even if there is no validation error, this method will still return
 an empty error tag.

    [$options] (array|false) The tag options in terms of name-value pairs. It
    will be merged with 'errorOptions'. The options will be rendered as the
    attributes of the resulting tag. The values will be HTML-encoded using
    'Html::encode()'. If this parameter is 'false', no error tag will be
    rendered.

    The following options are specially handled:


      - 'tag': this specifies the tag name. If not set, 'div' will be
      used.   See also '\yii\helpers\Html::tag()'.

    If you set a custom 'id' for the error element, you may need to adjust the
    '$selectors' accordingly.


*yii/widgets/ActiveField::hint*				public
>
 hint($content, $options='[]')
<
return ($this) The field object itself.

 Renders the hint tag.

    [$content] (string|bool) The hint content. If 'null', the hint will be
    generated via 'Model::getAttributeHint()'. If 'false', the generated field
    will not contain the hint part. Note that this will NOT be
    'Html::encode()|encoded'.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the hint tag. The values will be
    HTML-encoded using 'Html::encode()'.

    The following options are specially handled:


      - 'tag': this specifies the tag name. If not set, 'div' will be
      used.   See also '\yii\helpers\Html::tag()'.


*yii/widgets/ActiveField::input*				public
>
 input($type, $options='[]')
<
return ($this) The field object itself.

 Renders an input tag.

    [$type] (string) The input type (e.g. 'text', 'password')
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.

    If you set a custom 'id' for the input element, you may need to adjust the
    '$selectors' accordingly.


*yii/widgets/ActiveField::textInput*			public
>
 textInput($options='[]')
<
return ($this) The field object itself.

 Renders a text input.

 This method will generate the 'name' and 'value' tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.

    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.

    The following special options are recognized:


      - 'maxlength': int|bool, when 'maxlength' is set 'true' and the
      model attribute is validated   by a string validator, the 'maxlength'
    option will take the value of '\yii\validators\StringValidator::max'.  
    This is available since version 2.0.3.

    Note that if you set a custom 'id' for the input element, you may need to
    adjust the value of 'selectors' accordingly.


*yii/widgets/ActiveField::hiddenInput*			public
>
 hiddenInput($options='[]')
<
return ($this) The field object itself.

 Renders a hidden input.

 Note that this method is provided for completeness. In most cases because you
 do not need to validate a hidden input, you should not need to use this
 method. Instead, you should use '\yii\helpers\Html::activeHiddenInput()'.

 This method will generate the 'name' and 'value' tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.

    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.

    If you set a custom 'id' for the input element, you may need to adjust the
    '$selectors' accordingly.


*yii/widgets/ActiveField::passwordInput*			public
>
 passwordInput($options='[]')
<
return ($this) The field object itself.

 Renders a password input.

 This method will generate the 'name' and 'value' tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.

    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.

    If you set a custom 'id' for the input element, you may need to adjust the
    '$selectors' accordingly.


*yii/widgets/ActiveField::fileInput*			public
>
 fileInput($options='[]')
<
return ($this) The field object itself.

 Renders a file input.

 This method will generate the 'name' and 'value' tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.

    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.

    If you set a custom 'id' for the input element, you may need to adjust the
    '$selectors' accordingly.


*yii/widgets/ActiveField::textarea*			public
>
 textarea($options='[]')
<
return ($this) The field object itself.

 Renders a text area.

 The model attribute value will be used as the content in the textarea.

    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'Html::encode()'.

    If you set a custom 'id' for the textarea element, you may need to adjust
    the '$selectors' accordingly.


*yii/widgets/ActiveField::radio*				public
>
 radio($options='[]', $enclosedByLabel='true')
<
return ($this) The field object itself.

 Renders a radio button.

 This method will generate the 'checked' tag attribute according to the model
 attribute value.

    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - 'uncheck': string, the value associated with the uncheck state of
      the radio button. If not set,   it will take the default value '0'. This
    method will render a hidden input so that if the radio button   is not
    checked and is submitted, the value of this attribute will still be
    submitted to the server   via the hidden input. If you do not want any
    hidden input, you should explicitly set this option as 'null'. 
      - 'label': string, a label displayed next to the radio button. It
      will NOT be HTML-encoded. Therefore you can pass   in HTML code such as
    an image tag. If this is coming from end users, you should
    'Html::encode()|encode' it to prevent XSS attacks.   When this option is
    specified, the radio button will be enclosed by a label tag. If you do not
    want any label, you should   explicitly set this option as 'null'. 
      - 'labelOptions': array, the HTML attributes for the label tag. This
      is only used when the 'label' option is specified.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'Html::encode()'. If
    a value is 'null', the corresponding attribute will not be rendered.

    If you set a custom 'id' for the input element, you may need to adjust the
    '$selectors' accordingly.
    [$enclosedByLabel] (bool) Whether to enclose the radio within the label.
    If 'true', the method will still use 'template' to layout the radio button
    and the error message except that the radio is enclosed by the label tag.


*yii/widgets/ActiveField::checkbox*			public
>
 checkbox($options='[]', $enclosedByLabel='true')
<
return ($this) The field object itself.

 Renders a checkbox.

 This method will generate the 'checked' tag attribute according to the model
 attribute value.

    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - 'uncheck': string, the value associated with the uncheck state of
      the radio button. If not set,   it will take the default value '0'. This
    method will render a hidden input so that if the radio button   is not
    checked and is submitted, the value of this attribute will still be
    submitted to the server   via the hidden input. If you do not want any
    hidden input, you should explicitly set this option as 'null'. 
      - 'label': string, a label displayed next to the checkbox. It will
      NOT be HTML-encoded. Therefore you can pass   in HTML code such as an
    image tag. If this is coming from end users, you should
    'Html::encode()|encode' it to prevent XSS attacks.   When this option is
    specified, the checkbox will be enclosed by a label tag. If you do not
    want any label, you should   explicitly set this option as 'null'. 
      - 'labelOptions': array, the HTML attributes for the label tag. This
      is only used when the 'label' option is specified.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'Html::encode()'. If
    a value is 'null', the corresponding attribute will not be rendered.

    If you set a custom 'id' for the input element, you may need to adjust the
    '$selectors' accordingly.
    [$enclosedByLabel] (bool) Whether to enclose the checkbox within the
    label. If 'true', the method will still use 'template' to layout the
    checkbox and the error message except that the checkbox is enclosed by the
    label tag.


*yii/widgets/ActiveField::dropDownList*			public
>
 dropDownList($items, $options='[]')
<
return ($this) The field object itself.

 Renders a drop-down list.

 The selection of the drop-down list is taken from the value of the model
 attribute.

    [$items] (array) The option data items. The array keys are option values,
    and the array values are the corresponding option labels. The array can
    also be nested (i.e. some array values are arrays too). For each
    sub-array, an option group will be generated whose label is the key
    associated with the sub-array. If you have a list of data models, you may
    convert them into the format described above using 'ArrayHelper::map()'.

    Note, the values and labels will be automatically HTML-encoded by this
    method, and the blank spaces in the labels will also be HTML-encoded.
    [$options] (array) The tag options in terms of name-value pairs.

    For the list of available options please refer to the '$options' parameter
    of '\yii\helpers\Html::activeDropDownList()'.

    If you set a custom 'id' for the input element, you may need to adjust the
    '$selectors' accordingly.


*yii/widgets/ActiveField::listBox*			public
>
 listBox($items, $options='[]')
<
return ($this) The field object itself.

 Renders a list box.

 The selection of the list box is taken from the value of the model attribute.

    [$items] (array) The option data items. The array keys are option values,
    and the array values are the corresponding option labels. The array can
    also be nested (i.e. some array values are arrays too). For each
    sub-array, an option group will be generated whose label is the key
    associated with the sub-array. If you have a list of data models, you may
    convert them into the format described above using
    '\yii\helpers\ArrayHelper::map()'.

    Note, the values and labels will be automatically HTML-encoded by this
    method, and the blank spaces in the labels will also be HTML-encoded.
    [$options] (array) The tag options in terms of name-value pairs.

    For the list of available options please refer to the '$options' parameter
    of '\yii\helpers\Html::activeListBox()'.

    If you set a custom 'id' for the input element, you may need to adjust the
    '$selectors' accordingly.


*yii/widgets/ActiveField::checkboxList*			public
>
 checkboxList($items, $options='[]')
<
return ($this) The field object itself.

 Renders a list of checkboxes.

 A checkbox list allows multiple selection, like 'listBox()'. As a result, the
 corresponding submitted value is an array. The selection of the checkbox list
 is taken from the value of the model attribute.

    [$items] (array) The data item used to generate the checkboxes. The array
    values are the labels, while the array keys are the corresponding checkbox
    values.
    [$options] (array) Options (name => config) for the checkbox list. For the
    list of available options please refer to the '$options' parameter of
    '\yii\helpers\Html::activeCheckboxList()'.


*yii/widgets/ActiveField::radioList*			public
>
 radioList($items, $options='[]')
<
return ($this) The field object itself.

 Renders a list of radio buttons.

 A radio button list is like a checkbox list, except that it only allows
 single selection. The selection of the radio buttons is taken from the value
 of the model attribute.

    [$items] (array) The data item used to generate the radio buttons. The
    array values are the labels, while the array keys are the corresponding
    radio values.
    [$options] (array) Options (name => config) for the radio button list. For
    the list of available options please refer to the '$options' parameter of
    '\yii\helpers\Html::activeRadioList()'.


*yii/widgets/ActiveField::widget*				public
>
 widget($class, $config='[]')
<
return ($this) The field object itself.

 Renders a widget as the input of the field.

 Note that the widget must have both 'model' and 'attribute' properties. They
 will be initialized with 'model' and 'attribute' of this field, respectively.

 If you want to use a widget that does not have 'model' and 'attribute'
 properties, please use 'render()' instead.

 For example to use the 'MaskedInput' widget to get some date input, you can
 use the following code, assuming that '$form' is your 'ActiveForm' instance:

   $form->field($model, 'date')->widget(\yii\widgets\MaskedInput::className(),
 [
       'mask' => '99/99/9999',
   ]);

 If you set a custom 'id' for the input element, you may need to adjust the
 '$selectors' accordingly.

    [$class] (string) The widget class name.
    [$config] (array) Name-value pairs that will be used to initialize the
    widget.


*yii/widgets/ActiveField::adjustLabelFor*			protected
>
 adjustLabelFor($options)
<
return (void)

 Adjusts the 'for' attribute for the label based on the input options.

    [$options] (array) The input options.


*yii/widgets/ActiveField::getClientOptions*		protected
>
 getClientOptions()
<
return (array) The JS options.

 Returns the JS options for the field.


*yii/widgets/ActiveField::isClientValidationEnabled*	protected
>
 isClientValidationEnabled()
<
return (bool) 

 Checks if client validation enabled for the field.


*yii/widgets/ActiveField::isAjaxValidationEnabled*	protected
>
 isAjaxValidationEnabled()
<
return (bool) 

 Checks if ajax validation enabled for the field.


*yii/widgets/ActiveField::getInputId*			protected
>
 getInputId()
<
return (string) The input id.

 Returns the HTML 'id' of the input element of this form field.


*yii/widgets/ActiveField::addAriaAttributes*		protected
>
 addAriaAttributes($options)
<
return (void)

 Adds aria attributes to the input options.

    [$options] () Array input options


*yii/widgets/ActiveField::addErrorClassIfNeeded*		protected
>
 addErrorClassIfNeeded($options)
<
return (void)

 Adds validation class to the input options if needed.

    [$options] () Array input options



 vim:tw=78:ts=8:ft=help:norl:
