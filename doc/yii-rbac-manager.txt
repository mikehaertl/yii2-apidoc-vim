
*yii\rbac\Manager*   >> yii\base\Component
==================

 Manager extends [[Component]] and implements some methods that are common
 among authorization manager classes.

 Manager together with its concrete child classes implement the Role-Based
 Access Control (RBAC).

 The main idea is that permissions are organized as a hierarchy of [[Item]]
 authorization items. Items on higher level inherit the permissions
 represented by items on lower level. And roles are simply top-level
 authorization items that may be assigned to individual users. A user is said
 to have a permission to do something if the corresponding authorization item
 is inherited by one of his roles.

 Using authorization manager consists of two aspects. First, the authorization
 hierarchy and assignments have to be established. Manager and its child
 classes provides APIs to accomplish this task. Developers may need to develop
 some GUI so that it is more intuitive to end-users. Second, developers call
 [[Manager::checkAccess()]] at appropriate places in the application code to
 check if the current user has the needed permission for an operation.


PROPERTY DETAILS
------------------------------------------------------------------------------

<$showErrors>				*yii\rbac\Manager::$showErrors*
 (boolean) Enable error reporting for bizRules.

<$defaultRoles> 			*yii\rbac\Manager::$defaultRoles*
 (array) List of role names that are assigned to all users implicitly. These
 roles do not need to be explicitly assigned to any user. When calling
 [[checkAccess()]], these roles will be checked first. For performance reason,
 you should minimize the number of such roles. A typical usage of such roles
 is to define an 'authenticated' role and associate it with a biz rule which
 checks if the current user is authenticated. And then declare 'authenticated'
 in this property so that it can be applied to every authenticated user.

<$behaviors>				*yii\rbac\Manager::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

<$roles>				*yii\rbac\Manager::$roles*
 (\yii\rbac\Item[]) Roles (name => AuthItem)

<$tasks>				*yii\rbac\Manager::$tasks*
 (\yii\rbac\Item[]) Tasks (name => AuthItem)

<$operations>				*yii\rbac\Manager::$operations*
 (\yii\rbac\Item[]) Operations (name => AuthItem)

<$items>				*yii\rbac\Manager::$items*
 (\yii\rbac\Item[]) The authorization items of the specific type.



METHOD DETAILS
------------------------------------------------------------------------------

*yii\rbac\Manager::className*					 public
 See |yii\base\Object::className|


*yii\rbac\Manager::__construct* 				 public
 See |yii\base\Object::__construct|


*yii\rbac\Manager::init*					 public
 See |yii\base\Object::init|


*yii\rbac\Manager::__get*					 public
 See |yii\base\Component::__get|


*yii\rbac\Manager::__set*					 public
 See |yii\base\Component::__set|


*yii\rbac\Manager::__isset*					 public
 See |yii\base\Component::__isset|


*yii\rbac\Manager::__unset*					 public
 See |yii\base\Component::__unset|


*yii\rbac\Manager::__call*					 public
 See |yii\base\Component::__call|


*yii\rbac\Manager::hasProperty* 				 public
 See |yii\base\Component::hasProperty|


*yii\rbac\Manager::canGetProperty*				 public
 See |yii\base\Component::canGetProperty|


*yii\rbac\Manager::canSetProperty*				 public
 See |yii\base\Component::canSetProperty|


*yii\rbac\Manager::hasMethod*					 public
 See |yii\base\Component::hasMethod|


*yii\rbac\Manager::__clone*					 public
 See |yii\base\Component::__clone|


*yii\rbac\Manager::behaviors*					 public
 See |yii\base\Component::behaviors|


*yii\rbac\Manager::hasEventHandlers*				 public
 See |yii\base\Component::hasEventHandlers|


*yii\rbac\Manager::on*						 public
 See |yii\base\Component::on|


*yii\rbac\Manager::off* 					 public
 See |yii\base\Component::off|


*yii\rbac\Manager::trigger*					 public
 See |yii\base\Component::trigger|


*yii\rbac\Manager::getBehavior* 				 public
 See |yii\base\Component::getBehavior|


*yii\rbac\Manager::getBehaviors*				 public
 See |yii\base\Component::getBehaviors|


*yii\rbac\Manager::attachBehavior*				 public
 See |yii\base\Component::attachBehavior|


*yii\rbac\Manager::attachBehaviors*				 public
 See |yii\base\Component::attachBehaviors|


*yii\rbac\Manager::detachBehavior*				 public
 See |yii\base\Component::detachBehavior|


*yii\rbac\Manager::detachBehaviors*				 public
 See |yii\base\Component::detachBehaviors|


*yii\rbac\Manager::ensureBehaviors*				 public
 See |yii\base\Component::ensureBehaviors|


*yii\rbac\Manager::createRole*					 public
>
 createRole($name, $description='''', $bizRule='null', $data='null')
<
(\yii\rbac\Item) The authorization item

 This is a shortcut method to [[Manager::createItem()]].
    [$name] (string) The item name
    [$description] (string) The item description.
    [$bizRule] (string) The business rule associated with this item
    [$data] (mixed) Additional data to be passed when evaluating the business
    rule


*yii\rbac\Manager::createTask*					 public
>
 createTask($name, $description='''', $bizRule='null', $data='null')
<
(\yii\rbac\Item) The authorization item

 This is a shortcut method to [[Manager::createItem()]].
    [$name] (string) The item name
    [$description] (string) The item description.
    [$bizRule] (string) The business rule associated with this item
    [$data] (mixed) Additional data to be passed when evaluating the business
    rule


*yii\rbac\Manager::createOperation*				 public
>
 createOperation($name, $description='''', $bizRule='null', $data='null')
<
(\yii\rbac\Item) The authorization item

 This is a shortcut method to [[Manager::createItem()]].
    [$name] (string) The item name
    [$description] (string) The item description.
    [$bizRule] (string) The business rule associated with this item
    [$data] (mixed) Additional data to be passed when evaluating the business
    rule


*yii\rbac\Manager::getRoles*					 public
>
 getRoles($userId='null')
<
(\yii\rbac\Item[]) Roles (name => AuthItem)

 This is a shortcut method to [[Manager::getItems()]].
    [$userId] (mixed) The user ID. If not null, only the roles directly
    assigned to the user will be returned. Otherwise, all roles will be
    returned.


*yii\rbac\Manager::getTasks*					 public
>
 getTasks($userId='null')
<
(\yii\rbac\Item[]) Tasks (name => AuthItem)

 This is a shortcut method to [[Manager::getItems()]].
    [$userId] (mixed) The user ID. If not null, only the tasks directly
    assigned to the user will be returned. Otherwise, all tasks will be
    returned.


*yii\rbac\Manager::getOperations*				 public
>
 getOperations($userId='null')
<
(\yii\rbac\Item[]) Operations (name => AuthItem)

 This is a shortcut method to [[Manager::getItems()]].
    [$userId] (mixed) The user ID. If not null, only the operations directly
    assigned to the user will be returned. Otherwise, all operations will be
    returned.


*yii\rbac\Manager::executeBizRule*				 public
>
 executeBizRule($bizRule, $params, $data)
<
(boolean) Whether the business rule returns true. If the business rule is
empty, it will still return true.


    [$bizRule] (string) The business rule to be executed.
    [$params] (array) Parameters passed to [[Manager::checkAccess()]].
    [$data] (mixed) Additional data associated with the authorization item or
    assignment.


*yii\rbac\Manager::checkItemChildType*				 protected
>
 checkItemChildType($parentType, $childType)
<
(void)


    [$parentType] (integer) Parent item type
    [$childType] (integer) Child item type


*yii\rbac\Manager::checkAccess* 				 public
>
 checkAccess($userId, $itemName, $params='[]')
<
(boolean) Whether the operations can be performed by the user.


    [$userId] (mixed) The user ID. This should be either an integer or a
    string representing the unique identifier of a user. See
    [[\yii\web\User::id]].
    [$itemName] (string) The name of the operation that we are checking access
    to
    [$params] (array) Name-value pairs that would be passed to biz rules
    associated with the tasks and roles assigned to the user.


*yii\rbac\Manager::createItem*					 public
>
 createItem($name, $type, $description='''', $bizRule='null', $data='null')
<
(\yii\rbac\Item) The authorization item

 An authorization item represents an action permission (e.g. creating a post).
 It has three types: operation, task and role. Authorization items form a
 hierarchy. Higher level items inheirt permissions representing by lower level
 items.
    [$name] (string) The item name. This must be a unique identifier.
    [$type] (integer) The item type (0: operation, 1: task, 2: role).
    [$description] (string) Description of the item
    [$bizRule] (string) Business rule associated with the item. This is a
    piece of PHP code that will be executed when [[checkAccess()]] is called
    for the item.
    [$data] (mixed) Additional data associated with the item.


*yii\rbac\Manager::removeItem*					 public
>
 removeItem($name)
<
(boolean) Whether the item exists in the storage and has been removed


    [$name] (string) The name of the item to be removed


*yii\rbac\Manager::getItems*					 public
>
 getItems($userId='null', $type=null)
<
(\yii\rbac\Item[]) The authorization items of the specific type.


    [$userId] (mixed) The user ID. Defaults to null, meaning returning all
    items even if they are not assigned to a user.
    [$type] (integer) The item type (0: operation, 1: task, 2: role). Defaults
    to null, meaning returning all items regardless of their type.


*yii\rbac\Manager::getItem*					 public
>
 getItem($name)
<
(\yii\rbac\Item) The authorization item. Null if the item cannot be found.


    [$name] (string) The name of the item


*yii\rbac\Manager::saveItem*					 public
>
 saveItem($item, $oldName='null')
<
(void)


    [$item] (\yii\rbac\Item) The item to be saved.
    [$oldName] (string) The old item name. If null, it means the item name is
    not changed.


*yii\rbac\Manager::addItemChild*				 public
>
 addItemChild($itemName, $childName)
<
(void)


    [$itemName] (string) The parent item name
    [$childName] (string) The child item name


*yii\rbac\Manager::removeItemChild*				 public
>
 removeItemChild($itemName, $childName)
<
(boolean) Whether the removal is successful

 Note, the child item is not deleted. Only the parent-child relationship is
 removed.
    [$itemName] (string) The parent item name
    [$childName] (string) The child item name


*yii\rbac\Manager::hasItemChild*				 public
>
 hasItemChild($itemName, $childName)
<
(boolean) Whether the child exists


    [$itemName] (string) The parent item name
    [$childName] (string) The child item name


*yii\rbac\Manager::getItemChildren*				 public
>
 getItemChildren($itemName)
<
(\yii\rbac\Item[]) All child items of the parent


    [$itemName] (mixed) The parent item name. This can be either a string or
    an array. The latter represents a list of item names.


*yii\rbac\Manager::assign*					 public
>
 assign($userId, $itemName, $bizRule='null', $data='null')
<
(\yii\rbac\Assignment) The authorization assignment information.


    [$userId] (mixed) The user ID (see [[\yii\web\User::id]])
    [$itemName] (string) The item name
    [$bizRule] (string) The business rule to be executed when
    [[checkAccess()]] is called for this particular authorization item.
    [$data] (mixed) Additional data associated with this assignment


*yii\rbac\Manager::revoke*					 public
>
 revoke($userId, $itemName)
<
(boolean) Whether removal is successful


    [$userId] (mixed) The user ID (see [[\yii\web\User::id]])
    [$itemName] (string) The item name


*yii\rbac\Manager::revokeAll*					 public
>
 revokeAll($userId)
<
(boolean) Whether removal is successful


    [$userId] (mixed) The user ID (see [[\yii\web\User::id]])


*yii\rbac\Manager::isAssigned*					 public
>
 isAssigned($userId, $itemName)
<
(boolean) Whether the item has been assigned to the user.


    [$userId] (mixed) The user ID (see [[\yii\web\User::id]])
    [$itemName] (string) The item name


*yii\rbac\Manager::getAssignment*				 public
>
 getAssignment($userId, $itemName)
<
(\yii\rbac\Assignment) The item assignment information. Null is returned if
the item is not assigned to the user.


    [$userId] (mixed) The user ID (see [[\yii\web\User::id]])
    [$itemName] (string) The item name


*yii\rbac\Manager::getAssignments*				 public
>
 getAssignments($userId)
<
(\yii\rbac\Item[]) The item assignment information for the user. An empty
array will be returned if there is no item assigned to the user.


    [$userId] (mixed) The user ID (see [[\yii\web\User::id]])


*yii\rbac\Manager::saveAssignment*				 public
>
 saveAssignment($assignment)
<
(void)


    [$assignment] (\yii\rbac\Assignment) The assignment that has been changed.


*yii\rbac\Manager::clearAll*					 public
>
 clearAll()
<
(void)




*yii\rbac\Manager::clearAssignments*				 public
>
 clearAssignments()
<
(void)




*yii\rbac\Manager::save*					 public
>
 save()
<
(void)

 If any change is made to the authorization data, please make sure you call
 this method to save the changed data into persistent storage.



 vim:tw=78:ts=8:ft=help:norl:
