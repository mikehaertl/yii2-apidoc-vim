
*yii/i18n/Formatter*   >> |yii/base/Component|
====================

DESCRIPTION
------------------------------------------------------------------------------

 The formatting methods provided by Formatter are all named in the form of
 'asXyz()'. The behavior of some of them may be configured via the properties
 of Formatter. For example, by configuring 'dateFormat', one may control how
 'asDate()' formats the value into a date string.

 Formatter is configured as an application component in
 '\yii\base\Application' by default. You can access that instance via
 'Yii::$app->formatter'.

 The Formatter class is designed to format values according to a 'locale'. For
 this feature to work the [PHP intl
 extension](http://php.net/manual/en/book.intl.php) has to be installed. Most
 of the methods however work also if the PHP intl extension is not installed
 by providing a fallback implementation. Without intl month and day names are
 in English only. Note that even if the intl extension is installed,
 formatting date and time values for years >=2038 or <=1901 on 32bit systems
 will fall back to the PHP implementation because intl uses a 32bit UNIX
 timestamp internally. On a 64bit system the intl formatter is used in all
 cases if installed.


PROPERTY DETAILS
------------------------------------------------------------------------------

$nullDisplay				*yii/i18n/Formatter::$nullDisplay*

 (string) The text to be displayed when formatting a 'null' value. Defaults to
 ''<span class="not-set">(not set)</span>'', where '(not set)' will be
 translated according to 'locale'.

$booleanFormat				*yii/i18n/Formatter::$booleanFormat*

 (array) The text to be displayed when formatting a boolean value. The first
 element corresponds to the text displayed for 'false', the second element for
 'true'. Defaults to '['No', 'Yes']', where 'Yes' and 'No' will be translated
 according to 'locale'.

$locale					*yii/i18n/Formatter::$locale*

 (string) The locale ID that is used to localize the date and number
 formatting. For number and date formatting this is only effective when the
 [PHP intl extension](http://php.net/manual/en/book.intl.php) is installed. If
 not set, '\yii\base\Application::language' will be used.

$timeZone				*yii/i18n/Formatter::$timeZone*

 (string) The time zone to use for formatting time and date values.

 This can be any value that may be passed to
 [date_default_timezone_set()](http://www.php.net/manual/en/function.date-default-timezone-set.php)
 e.g. 'UTC', 'Europe/Berlin' or 'America/Chicago'. Refer to the [php
 manual](http://www.php.net/manual/en/timezones.php) for available time zones.
 If this property is not set, '\yii\base\Application::timeZone' will be used.

 Note that the default time zone for input data is assumed to be UTC by
 default if no time zone is included in the input date value. If you store
 your data in a different time zone in the database, you have to adjust
 'defaultTimeZone' accordingly.

$defaultTimeZone			*yii/i18n/Formatter::$defaultTimeZone*

 (string) The time zone that is assumed for input values if they do not
 include a time zone explicitly.

 The value must be a valid time zone identifier, e.g. 'UTC', 'Europe/Berlin'
 or 'America/Chicago'. Please refer to the [php
 manual](http://www.php.net/manual/en/timezones.php) for available time zones.

 It defaults to 'UTC' so you only have to adjust this value if you store
 datetime values in another time zone in your database.

 Note that a UNIX timestamp is always in UTC by its definition. That means
 that specifying a default time zone different from UTC has no effect on date
 values given as UNIX timestamp.

$dateFormat				*yii/i18n/Formatter::$dateFormat*

 (string) The default format string to be used to format a 'asDate()|date'.
 This can be "short", "medium", "long", or "full", which represents a preset
 format of different lengths.

 It can also be a custom format as specified in the [ICU
 manual](http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax).
 Alternatively this can be a string prefixed with 'php:' representing a format
 that can be recognized by the PHP
 [date()](http://php.net/manual/en/function.date.php)-function.

 For example:

   'MM/dd/yyyy' // date in ICU format
   'php:m/d/Y' // the same date in PHP format



$timeFormat				*yii/i18n/Formatter::$timeFormat*

 (string) The default format string to be used to format a 'asTime()|time'.
 This can be "short", "medium", "long", or "full", which represents a preset
 format of different lengths.

 It can also be a custom format as specified in the [ICU
 manual](http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax).
 Alternatively this can be a string prefixed with 'php:' representing a format
 that can be recognized by the PHP
 [date()](http://php.net/manual/en/function.date.php)-function.

 For example:

   'HH:mm:ss' // time in ICU format
   'php:H:i:s' // the same time in PHP format



$datetimeFormat				*yii/i18n/Formatter::$datetimeFormat*

 (string) The default format string to be used to format a 'asDatetime()|date
 and time'. This can be "short", "medium", "long", or "full", which represents
 a preset format of different lengths.

 It can also be a custom format as specified in the [ICU
 manual](http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax).

 Alternatively this can be a string prefixed with 'php:' representing a format
 that can be recognized by the PHP
 [date()](http://php.net/manual/en/function.date.php)-function.

 For example:

   'MM/dd/yyyy HH:mm:ss' // date and time in ICU format
   'php:m/d/Y H:i:s' // the same date and time in PHP format



$calendar				*yii/i18n/Formatter::$calendar*

 (\IntlCalendar|int|null) The calendar to be used for date formatting. The
 value of this property will be directly passed to the [constructor of the
 'IntlDateFormatter'
 class](http://php.net/manual/en/intldateformatter.create.php).

 Defaults to 'null', which means the Gregorian calendar will be used. You may
 also explicitly pass the constant '\IntlDateFormatter::GREGORIAN' for
 Gregorian calendar.

 To use an alternative calendar like for example the [Jalali
 calendar](https://en.wikipedia.org/wiki/Jalali_calendar), set this property
 to '\IntlDateFormatter::TRADITIONAL'. The calendar must then be specified in
 the 'locale', for example for the persian calendar the configuration for the
 formatter would be:

   'formatter' => [
       'locale' => 'fa_IR@calendar=persian',
       'calendar' => \IntlDateFormatter::TRADITIONAL,
   ],

 Available calendar names can be found in the [ICU
 manual](http://userguide.icu-project.org/datetime/calendar).

 Since PHP 5.5 you may also use an instance of the '\IntlCalendar' class.
 Check the [PHP manual](http://php.net/manual/en/intldateformatter.create.php)
 for more details.

 If the [PHP intl extension](http://php.net/manual/en/book.intl.php) is not
 available, setting this property will have no effect.

$decimalSeparator			*yii/i18n/Formatter::$decimalSeparator*

 (string) The character displayed as the decimal point when formatting a
 number. If not set, the decimal separator corresponding to 'locale' will be
 used. If [PHP intl extension](http://php.net/manual/en/book.intl.php) is not
 available, the default value is '.'.

$thousandSeparator			*yii/i18n/Formatter::$thousandSeparator*

 (string) The character displayed as the thousands separator (also called
 grouping separator) character when formatting a number. If not set, the
 thousand separator corresponding to 'locale' will be used. If [PHP intl
 extension](http://php.net/manual/en/book.intl.php) is not available, the
 default value is ','.

$numberFormatterOptions			*yii/i18n/Formatter::$numberFormatterOptions*

 (array) A list of name value pairs that are passed to the intl
 [NumberFormatter::setAttribute()](http://php.net/manual/en/numberformatter.setattribute.php)
 method of all the number formatter objects created by
 'createNumberFormatter()'. This property takes only effect if the [PHP intl
 extension](http://php.net/manual/en/book.intl.php) is installed.

 Please refer to the [PHP
 manual](http://php.net/manual/en/class.numberformatter.php#intl.numberformatter-constants.unumberformatattribute)
 for the possible options.

 For example to adjust the maximum and minimum value of fraction digits you
 can configure this property like the following:

   [
       NumberFormatter::MIN_FRACTION_DIGITS => 0,
       NumberFormatter::MAX_FRACTION_DIGITS => 2,
   ]



$numberFormatterTextOptions		*yii/i18n/Formatter::$numberFormatterTextOptions*

 (array) A list of name value pairs that are passed to the intl
 [NumberFormatter::setTextAttribute()](http://php.net/manual/en/numberformatter.settextattribute.php)
 method of all the number formatter objects created by
 'createNumberFormatter()'. This property takes only effect if the [PHP intl
 extension](http://php.net/manual/en/book.intl.php) is installed.

 Please refer to the [PHP
 manual](http://php.net/manual/en/class.numberformatter.php#intl.numberformatter-constants.unumberformattextattribute)
 for the possible options.

 For example to change the minus sign for negative numbers you can configure
 this property like the following:

   [
       NumberFormatter::NEGATIVE_PREFIX => 'MINUS',
   ]



$numberFormatterSymbols			*yii/i18n/Formatter::$numberFormatterSymbols*

 (array) A list of name value pairs that are passed to the intl
 [NumberFormatter::setSymbol()](http://php.net/manual/en/numberformatter.setsymbol.php)
 method of all the number formatter objects created by
 'createNumberFormatter()'. This property takes only effect if the [PHP intl
 extension](http://php.net/manual/en/book.intl.php) is installed.

 Please refer to the [PHP
 manual](http://php.net/manual/en/class.numberformatter.php#intl.numberformatter-constants.unumberformatsymbol)
 for the possible options.

 For example to choose a custom currency symbol, e.g.
 [U+20BD](http://unicode-table.com/en/20BD/) instead of 'руб.' for Russian
 Ruble:

   [
       NumberFormatter::CURRENCY_SYMBOL => '₽',
   ]



$currencyCode				*yii/i18n/Formatter::$currencyCode*

 (string) The 3-letter ISO 4217 currency code indicating the default currency
 to use for 'asCurrency'. If not set, the currency code corresponding to
 'locale' will be used. Note that in this case the 'locale' has to be
 specified with a country code, e.g. 'en-US' otherwise it is not possible to
 determine the default currency.

$sizeFormatBase				*yii/i18n/Formatter::$sizeFormatBase*

 (int) The base at which a kilobyte is calculated (1000 or 1024 bytes per
 kilobyte), used by 'asSize' and 'asShortSize'. Defaults to 1024.

$systemOfUnits				*yii/i18n/Formatter::$systemOfUnits*

 (string) Default system of measure units. Defaults to 'UNIT_SYSTEM_METRIC'.
 Possible values:  
   - 'UNIT_SYSTEM_METRIC'  
   - 'UNIT_SYSTEM_IMPERIAL'

$measureUnits				*yii/i18n/Formatter::$measureUnits*

 (array) Configuration of weight and length measurement units. This array
 contains the most usable measurement units, but you can change it in case you
 have some special requirements.

 For example, you can add smaller measure unit:

   $this->measureUnits[self::UNIT_LENGTH][self::UNIT_SYSTEM_METRIC] = [
       'nanometer' => 0.000001
   ]



$baseUnits				*yii/i18n/Formatter::$baseUnits*

 (array) The base units that are used as multipliers for smallest possible
 unit from 'measureUnits'.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/i18n/Formatter::className*				public

 See |yii/base/BaseObject::className|


*yii/i18n/Formatter::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/i18n/Formatter::init*				public
>
 init()
<
return (void)



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/i18n/Formatter::__get*				public

 See |yii/base/Component::__get|


*yii/i18n/Formatter::__set*				public

 See |yii/base/Component::__set|


*yii/i18n/Formatter::__isset*				public

 See |yii/base/Component::__isset|


*yii/i18n/Formatter::__unset*				public

 See |yii/base/Component::__unset|


*yii/i18n/Formatter::__call*				public

 See |yii/base/Component::__call|


*yii/i18n/Formatter::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/i18n/Formatter::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/i18n/Formatter::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/i18n/Formatter::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/i18n/Formatter::__clone*				public

 See |yii/base/Component::__clone|


*yii/i18n/Formatter::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/i18n/Formatter::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/i18n/Formatter::on*					public

 See |yii/base/Component::on|


*yii/i18n/Formatter::off*					public

 See |yii/base/Component::off|


*yii/i18n/Formatter::trigger*				public

 See |yii/base/Component::trigger|


*yii/i18n/Formatter::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/i18n/Formatter::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/i18n/Formatter::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/i18n/Formatter::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/i18n/Formatter::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/i18n/Formatter::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/i18n/Formatter::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/i18n/Formatter::format*				public
>
 format($value, $format)
<
return (string) The formatting result.

 This method will call one of the "as" methods available in this class to do
 the formatting. For type "xyz", the method "asXyz" will be used. For example,
 if the format is "html", then 'asHtml()' will be used. Format names are case
 insensitive.

    [$value] (mixed) The value to be formatted.
    [$format] (string|array|\Closure) The format of the value, e.g., "html",
    "text" or an anonymous function returning the formatted value.

    To specify additional parameters of the formatting method, you may use an
    array. The first element of the array specifies the format name, while the
    rest of the elements will be used as the parameters to the formatting
    method. For example, a format of '['date', 'Y-m-d']' will cause the
    invocation of 'asDate($value, 'Y-m-d')'.

    The anonymous function signature should be: 'function($value,
    $formatter)', where '$value' is the value that should be formatted and
    '$formatter' is an instance of the Formatter class, which can be used to
    call other formatting functions. The possibility to use an anonymous
    function is available since version 2.0.13.


*yii/i18n/Formatter::asRaw*				public
>
 asRaw($value)
<
return (string) The formatted result.

 This method simply returns back the parameter without any format. The only
 exception is a 'null' value which will be formatted using 'nullDisplay'.

    [$value] (mixed) The value to be formatted.


*yii/i18n/Formatter::asText*				public
>
 asText($value)
<
return (string) The formatted result.

    [$value] (string) The value to be formatted.


*yii/i18n/Formatter::asNtext*				public
>
 asNtext($value)
<
return (string) The formatted result.

    [$value] (string) The value to be formatted.


*yii/i18n/Formatter::asParagraphs*			public
>
 asParagraphs($value)
<
return (string) The formatted result.

 Each text paragraph is enclosed within a '<p>' tag. One or multiple
 consecutive empty lines divide two paragraphs.

    [$value] (string) The value to be formatted.


*yii/i18n/Formatter::asHtml*				public
>
 asHtml($value, $config='null')
<
return (string) The formatted result.

 The value will be purified using 'HtmlPurifier' to avoid XSS attacks. Use
 'asRaw()' if you do not want any purification of the value.

    [$value] (string) The value to be formatted.
    [$config] (array|null) The configuration for the HTMLPurifier class.


*yii/i18n/Formatter::asEmail*				public
>
 asEmail($value, $options='[]')
<
return (string) The formatted result.

    [$value] (string) The value to be formatted.
    [$options] (array) The tag options in terms of name-value pairs. See
    'Html::mailto()'.


*yii/i18n/Formatter::asImage*				public
>
 asImage($value, $options='[]')
<
return (string) The formatted result.

    [$value] (mixed) The value to be formatted.
    [$options] (array) The tag options in terms of name-value pairs. See
    'Html::img()'.


*yii/i18n/Formatter::asUrl*				public
>
 asUrl($value, $options='[]')
<
return (string) The formatted result.

    [$value] (mixed) The value to be formatted.
    [$options] (array) The tag options in terms of name-value pairs. See
    'Html::a()'.


*yii/i18n/Formatter::asBoolean*				public
>
 asBoolean($value)
<
return (string) The formatted result.

    [$value] (mixed) The value to be formatted.


*yii/i18n/Formatter::asDate*				public
>
 asDate($value, $format='null')
<
return (string) The formatted result.

    [$value] (int|string|\DateTime) The value to be formatted. The following
    types of value are supported:


      - an integer representing a UNIX timestamp. A UNIX timestamp is
      always in UTC by its definition. 
      - a string that can be [parsed to create a DateTime
      object](http://php.net/manual/en/datetime.formats.php).   The timestamp
    is assumed to be in 'defaultTimeZone' unless a time zone is explicitly
    given. 
      - a PHP [DateTime](http://php.net/manual/en/class.datetime.php)
      object. You may set the time zone   for the DateTime object to specify
    the source time zone.

    The formatter will convert date values according to 'timeZone' before
    formatting it. If no timezone conversion should be performed, you need to
    set 'defaultTimeZone' and 'timeZone' to the same value. Also no conversion
    will be performed on values that have no time information, e.g.
    '"2017-06-05"'.
    [$format] (string) The format used to convert the value into a date
    string. If null, 'dateFormat' will be used.

    This can be "short", "medium", "long", or "full", which represents a
    preset format of different lengths. It can also be a custom format as
    specified in the [ICU
    manual](http://userguide.icu-project.org/formatparse/datetime).

    Alternatively this can be a string prefixed with 'php:' representing a
    format that can be recognized by the PHP
    [date()](http://php.net/manual/en/function.date.php)-function.


*yii/i18n/Formatter::asTime*				public
>
 asTime($value, $format='null')
<
return (string) The formatted result.

    [$value] (int|string|\DateTime) The value to be formatted. The following
    types of value are supported:


      - an integer representing a UNIX timestamp. A UNIX timestamp is
      always in UTC by its definition. 
      - a string that can be [parsed to create a DateTime
      object](http://php.net/manual/en/datetime.formats.php).   The timestamp
    is assumed to be in 'defaultTimeZone' unless a time zone is explicitly
    given. 
      - a PHP [DateTime](http://php.net/manual/en/class.datetime.php)
      object. You may set the time zone   for the DateTime object to specify
    the source time zone.

    The formatter will convert date values according to 'timeZone' before
    formatting it. If no timezone conversion should be performed, you need to
    set 'defaultTimeZone' and 'timeZone' to the same value.
    [$format] (string) The format used to convert the value into a date
    string. If null, 'timeFormat' will be used.

    This can be "short", "medium", "long", or "full", which represents a
    preset format of different lengths. It can also be a custom format as
    specified in the [ICU
    manual](http://userguide.icu-project.org/formatparse/datetime).

    Alternatively this can be a string prefixed with 'php:' representing a
    format that can be recognized by the PHP
    [date()](http://php.net/manual/en/function.date.php)-function.


*yii/i18n/Formatter::asDatetime*				public
>
 asDatetime($value, $format='null')
<
return (string) The formatted result.

    [$value] (int|string|\DateTime) The value to be formatted. The following
    types of value are supported:


      - an integer representing a UNIX timestamp. A UNIX timestamp is
      always in UTC by its definition. 
      - a string that can be [parsed to create a DateTime
      object](http://php.net/manual/en/datetime.formats.php).   The timestamp
    is assumed to be in 'defaultTimeZone' unless a time zone is explicitly
    given. 
      - a PHP [DateTime](http://php.net/manual/en/class.datetime.php)
      object. You may set the time zone   for the DateTime object to specify
    the source time zone.

    The formatter will convert date values according to 'timeZone' before
    formatting it. If no timezone conversion should be performed, you need to
    set 'defaultTimeZone' and 'timeZone' to the same value.
    [$format] (string) The format used to convert the value into a date
    string. If null, 'datetimeFormat' will be used.

    This can be "short", "medium", "long", or "full", which represents a
    preset format of different lengths. It can also be a custom format as
    specified in the [ICU
    manual](http://userguide.icu-project.org/formatparse/datetime).

    Alternatively this can be a string prefixed with 'php:' representing a
    format that can be recognized by the PHP
    [date()](http://php.net/manual/en/function.date.php)-function.


*yii/i18n/Formatter::normalizeDatetimeValue*		protected
>
 normalizeDatetimeValue($value, $checkDateTimeInfo='false')
<
return (\DateTime|array) The normalized datetime value. Since version 2.0.1 this may
also return an array if '$checkDateTimeInfo' is true. The first element of the
array is the normalized timestamp and the second is a boolean indicating
whether the timestamp has time information or it is just a date value. Since
version 2.0.12 the array has third boolean element indicating whether the
timestamp has date information or it is just a time value.

    [$value] (int|string|\DateTime) The datetime value to be normalized. The
    following types of value are supported:


      - an integer representing a UNIX timestamp 
      - a string that can be [parsed to create a DateTime
      object](http://php.net/manual/en/datetime.formats.php).   The timestamp
    is assumed to be in 'defaultTimeZone' unless a time zone is explicitly
    given. 
      - a PHP [DateTime](http://php.net/manual/en/class.datetime.php)
      object
    [$checkDateTimeInfo] (bool) Whether to also check if the date/time value
    has some time and date information attached. Defaults to 'false'. If
    'true', the method will then return an array with the first element being
    the normalized timestamp, the second a boolean indicating whether the
    timestamp has time information and third a boolean indicating whether the
    timestamp has date information. This parameter is available since version
    2.0.1.


*yii/i18n/Formatter::asTimestamp*				public
>
 asTimestamp($value)
<
return (string) The formatted result.

    [$value] (int|string|\DateTime) The value to be formatted. The following
    types of value are supported:


      - an integer representing a UNIX timestamp 
      - a string that can be [parsed to create a DateTime
      object](http://php.net/manual/en/datetime.formats.php).   The timestamp
    is assumed to be in 'defaultTimeZone' unless a time zone is explicitly
    given. 
      - a PHP [DateTime](http://php.net/manual/en/class.datetime.php)
      object


*yii/i18n/Formatter::asRelativeTime*			public
>
 asRelativeTime($value, $referenceTime='null')
<
return (string) The formatted result.

 This method can be used in three different ways:

 1. Using a timestamp that is relative to 'now'. 2. Using a timestamp that is
 relative to the '$referenceTime'. 3. Using a 'DateInterval' object.

    [$value] (int|string|\DateTime|\DateInterval) The value to be formatted.
    The following types of value are supported:


      - an integer representing a UNIX timestamp 
      - a string that can be [parsed to create a DateTime
      object](http://php.net/manual/en/datetime.formats.php).   The timestamp
    is assumed to be in 'defaultTimeZone' unless a time zone is explicitly
    given. 
      - a PHP [DateTime](http://php.net/manual/en/class.datetime.php)
      object 
      - a PHP DateInterval object (a positive time interval will refer to
      the past, a negative one to the future)
    [$referenceTime] (int|string|\DateTime) If specified the value is used as
    a reference time instead of 'now' when '$value' is not a 'DateInterval'
    object.


*yii/i18n/Formatter::asDuration*				public
>
 asDuration($value, $implodeString='', '', $negativeSign=''-'')
<
return (string) The formatted duration.

    [$value] (\DateInterval|string|int) The value to be formatted. Acceptable
    formats:  
      - [DateInterval
      object](http://php.net/manual/ru/class.dateinterval.php)  
      - integer - number of seconds. For example: value '131' represents
      '2 minutes, 11 seconds'  
      - ISO8601 duration format. For example, all of these values
      represent '1 day, 2 hours, 30 minutes' duration:   
    '2015-01-01T13:00:00Z/2015-01-02T13:30:00Z' 
      - between two datetime values    '2015-01-01T13:00:00Z/P1D2H30M' 
      - time interval after datetime value    'P1D2H30M/2015-01-02T13:30:00Z' 
      - time interval before datetime value    'P1D2H30M' 
      - simply a date interval    'P-1D2H30M' 
      - a negative date interval ('-1 day, 2 hours, 30 minutes')
    [$implodeString] (string) Will be used to concatenate duration parts.
    Defaults to ', '.
    [$negativeSign] (string) Will be prefixed to the formatted duration, when
    it is negative. Defaults to '-'.


*yii/i18n/Formatter::asInteger*				public
>
 asInteger($value, $options='[]', $textOptions='[]')
<
return (string) The formatted result.

    [$value] (mixed) The value to be formatted.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asDecimal*				public
>
 asDecimal($value, $decimals=null, $options='[]', $textOptions='[]')
<
return (string) The formatted result.

 Property 'decimalSeparator' will be used to represent the decimal point. The
 value is rounded automatically to the defined decimal digits.

    [$value] (mixed) The value to be formatted.
    [$decimals] (int) The number of digits after the decimal point. If not
    given, the number of digits depends in the input value and is determined
    based on 'NumberFormatter::MIN_FRACTION_DIGITS' and
    'NumberFormatter::MAX_FRACTION_DIGITS', which can be configured using
    '$numberFormatterOptions'. If the [PHP intl
    extension](http://php.net/manual/en/book.intl.php) is not available, the
    default value is '2'. If you want consistent behavior between environments
    where intl is available and not, you should explicitly specify a value
    here.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asPercent*				public
>
 asPercent($value, $decimals=null, $options='[]', $textOptions='[]')
<
return (string) The formatted result.

    [$value] (mixed) The value to be formatted. It must be a factor e.g.
    '0.75' will result in '75%'.
    [$decimals] (int) The number of digits after the decimal point. If not
    given, the number of digits depends in the input value and is determined
    based on 'NumberFormatter::MIN_FRACTION_DIGITS' and
    'NumberFormatter::MAX_FRACTION_DIGITS', which can be configured using
    '$numberFormatterOptions'. If the [PHP intl
    extension](http://php.net/manual/en/book.intl.php) is not available, the
    default value is '0'. If you want consistent behavior between environments
    where intl is available and not, you should explicitly specify a value
    here.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asScientific*			public
>
 asScientific($value, $decimals=null, $options='[]', $textOptions='[]')
<
return (string) The formatted result.

    [$value] (mixed) The value to be formatted.
    [$decimals] (int) The number of digits after the decimal point. If not
    given, the number of digits depends in the input value and is determined
    based on 'NumberFormatter::MIN_FRACTION_DIGITS' and
    'NumberFormatter::MAX_FRACTION_DIGITS', which can be configured using
    '$numberFormatterOptions'. If the [PHP intl
    extension](http://php.net/manual/en/book.intl.php) is not available, the
    default value depends on your PHP configuration. If you want consistent
    behavior between environments where intl is available and not, you should
    explicitly specify a value here.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asCurrency*				public
>
 asCurrency($value, $currency='null', $options='[]', $textOptions='[]')
<
return (string) The formatted result.

 This function does not require the [PHP intl
 extension](http://php.net/manual/en/book.intl.php) to be installed to work,
 but it is highly recommended to install it to get good formatting results.

    [$value] (mixed) The value to be formatted.
    [$currency] (string) The 3-letter ISO 4217 currency code indicating the
    currency to use. If null, 'currencyCode' will be used.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asSpellout*				public
>
 asSpellout($value)
<
return (string) The formatted result.

 This function requires the [PHP intl
 extension](http://php.net/manual/en/book.intl.php) to be installed.

    [$value] (mixed) The value to be formatted


*yii/i18n/Formatter::asOrdinal*				public
>
 asOrdinal($value)
<
return (string) The formatted result.

 This function requires the [PHP intl
 extension](http://php.net/manual/en/book.intl.php) to be installed.

    [$value] (mixed) The value to be formatted


*yii/i18n/Formatter::asShortSize*				public
>
 asShortSize($value, $decimals=null, $options='[]', $textOptions='[]')
<
return (string) The formatted result.

 This is the short form of 'asSize'.

 If 'sizeFormatBase' is 1024, [binary
 prefixes](http://en.wikipedia.org/wiki/Binary_prefix) (e.g. kibibyte/KiB,
 mebibyte/MiB, ...) are used in the formatting result.

    [$value] (string|int|float) Value in bytes to be formatted.
    [$decimals] (int) The number of digits after the decimal point.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asSize*				public
>
 asSize($value, $decimals=null, $options='[]', $textOptions='[]')
<
return (string) The formatted result.

 If 'sizeFormatBase' is 1024, [binary
 prefixes](http://en.wikipedia.org/wiki/Binary_prefix) (e.g. kibibyte/KiB,
 mebibyte/MiB, ...) are used in the formatting result.

    [$value] (string|int|float) Value in bytes to be formatted.
    [$decimals] (int) The number of digits after the decimal point.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asLength*				public
>
 asLength($value, $decimals=null, $numberOptions='[]', $textOptions='[]')
<
return (string) The formatted result.

 Check properties 'baseUnits' if you need to change unit of value as the
 multiplier of the smallest unit and 'systemOfUnits' to switch between
 'UNIT_SYSTEM_METRIC' or 'UNIT_SYSTEM_IMPERIAL'.

    [$value] (float|int) Value to be formatted.
    [$decimals] (int) The number of digits after the decimal point.
    [$numberOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asShortLength*			public
>
 asShortLength($value, $decimals=null, $options='[]', $textOptions='[]')
<
return (string) The formatted result.

 This is the short form of 'asLength'.

 Check properties 'baseUnits' if you need to change unit of value as the
 multiplier of the smallest unit and 'systemOfUnits' to switch between
 'UNIT_SYSTEM_METRIC' or 'UNIT_SYSTEM_IMPERIAL'.

    [$value] (float|int) Value to be formatted.
    [$decimals] (int) The number of digits after the decimal point.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asWeight*				public
>
 asWeight($value, $decimals=null, $options='[]', $textOptions='[]')
<
return (string) The formatted result.

 Check properties 'baseUnits' if you need to change unit of value as the
 multiplier of the smallest unit and 'systemOfUnits' to switch between
 'UNIT_SYSTEM_METRIC' or 'UNIT_SYSTEM_IMPERIAL'.

    [$value] (float|int) Value to be formatted.
    [$decimals] (int) The number of digits after the decimal point.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::asShortWeight*			public
>
 asShortWeight($value, $decimals=null, $options='[]', $textOptions='[]')
<
return (string) The formatted result.

 This is the short form of 'asWeight'.

 Check properties 'baseUnits' if you need to change unit of value as the
 multiplier of the smallest unit and 'systemOfUnits' to switch between
 'UNIT_SYSTEM_METRIC' or 'UNIT_SYSTEM_IMPERIAL'.

    [$value] (float|int) Value to be formatted.
    [$decimals] (int) The number of digits after the decimal point.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.


*yii/i18n/Formatter::normalizeNumericValue*		protected
>
 normalizeNumericValue($value)
<
return (float|int) The normalized number value


   - everything [empty](http://php.net/manual/en/function.empty.php)
   will result in '0' 
   - a [numeric](http://php.net/manual/en/function.is-numeric.php)
   string will be casted to float 
   - everything else will be returned if it is
   [numeric](http://php.net/manual/en/function.is-numeric.php),   otherwise an
 exception is thrown.

    [$value] (mixed) The input value


*yii/i18n/Formatter::createNumberFormatter*		protected
>
 createNumberFormatter($style, $decimals=null, $options='[]', $textOptions='[]')
<
return (\NumberFormatter) The created formatter instance

 You may override this method to create a number formatter based on patterns.

    [$style] (int) The type of the number formatter. Values:
    NumberFormatter::DECIMAL, ::CURRENCY, ::PERCENT, ::SCIENTIFIC, ::SPELLOUT,
    ::ORDINAL ::DURATION, ::PATTERN_RULEBASED, ::DEFAULT_STYLE, ::IGNORE
    [$decimals] (int) The number of digits after the decimal point.
    [$options] (array) Optional configuration for the number formatter. This
    parameter will be merged with 'numberFormatterOptions'.
    [$textOptions] (array) Optional configuration for the number formatter.
    This parameter will be merged with 'numberFormatterTextOptions'.



 vim:tw=78:ts=8:ft=help:norl:
