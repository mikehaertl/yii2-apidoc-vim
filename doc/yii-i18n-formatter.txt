
*yii/i18n/Formatter*   >> |yii/base/Formatter|
====================

DESCRIPTION
------------------------------------------------------------------------------

 Formatter requires the PHP "intl" extension to be installed. Formatter
 supports localized formatting of date, time and numbers, based on the current
 'locale'.

 This Formatter can replace the 'formatter' application component that is
 configured by default. To do so, add the following to your application config
 under 'components':

   [
       'core' => 'core.php',
       'ext' => 'extensions.php',
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

$timeZone				*yii/i18n/Formatter::$timeZone*
 See |yii/base/Formatter::$timeZone|

$dateFormat				*yii/i18n/Formatter::$dateFormat*
 (string) The default format string to be used to format a date. This can be
 "short", "medium", "long", or "full", which represents a preset format of
 different lengths. It can also be a custom format as specified in the [ICU
 manual](http://userguide.icu-project.org/formatparse/datetime).

$timeFormat				*yii/i18n/Formatter::$timeFormat*
 (string) The default format string to be used to format a time. This can be
 "short", "medium", "long", or "full", which represents a preset format of
 different lengths. It can also be a custom format as specified in the [ICU
 manual](http://userguide.icu-project.org/formatparse/datetime).

$datetimeFormat				*yii/i18n/Formatter::$datetimeFormat*
 (string) The default format string to be used to format a date and time. This
 can be "short", "medium", "long", or "full", which represents a preset format
 of different lengths. It can also be a custom format as specified in the [ICU
 manual](http://userguide.icu-project.org/formatparse/datetime).

$nullDisplay				*yii/i18n/Formatter::$nullDisplay*
 See |yii/base/Formatter::$nullDisplay|

$booleanFormat				*yii/i18n/Formatter::$booleanFormat*
 See |yii/base/Formatter::$booleanFormat|

$decimalSeparator			*yii/i18n/Formatter::$decimalSeparator*
 (string) The character displayed as the decimal point when formatting a
 number. If not set, the decimal separator corresponding to 'locale' will be
 used.

$thousandSeparator			*yii/i18n/Formatter::$thousandSeparator*
 (string) The character displayed as the thousands separator character when
 formatting a number. If not set, the thousand separator corresponding to
 'locale' will be used.

$sizeFormat				*yii/i18n/Formatter::$sizeFormat*
 See |yii/base/Formatter::$sizeFormat|

$locale					*yii/i18n/Formatter::$locale*
 (string) The locale ID that is used to localize the date and number
 formatting. If not set, '\yii\base\Application::language' will be used.

$numberFormatOptions			*yii/i18n/Formatter::$numberFormatOptions*
 (array) The options to be set for the NumberFormatter objects. Please refer
 to [PHP
 manual](http://php.net/manual/en/class.numberformatter.php#intl.numberformatter-constants.unumberformatattribute)
 for the possible options. This property is used by 'createNumberFormatter'
 when creating a new number formatter to format decimals, currencies, etc.

$currencyCode				*yii/i18n/Formatter::$currencyCode*
 (string) The international currency code displayed when formatting a number.
 If not set, the currency code corresponding to 'locale' will be used.

$behaviors				*yii/i18n/Formatter::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component



METHOD DETAILS
------------------------------------------------------------------------------

*yii/i18n/Formatter::className*				public
 See |yii/base/Object::className|


*yii/i18n/Formatter::__construct*				public
 See |yii/base/Object::__construct|


*yii/i18n/Formatter::init*				public
>
 init()
<
(void)

 This method will check if the "intl" PHP extension is installed and set the
 default value of 'locale'.


*yii/i18n/Formatter::__get*				public
 See |yii/base/Component::__get|


*yii/i18n/Formatter::__set*				public
 See |yii/base/Component::__set|


*yii/i18n/Formatter::__isset*				public
 See |yii/base/Component::__isset|


*yii/i18n/Formatter::__unset*				public
 See |yii/base/Component::__unset|


*yii/i18n/Formatter::__call*				public
 See |yii/base/Component::__call|


*yii/i18n/Formatter::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/i18n/Formatter::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/i18n/Formatter::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/i18n/Formatter::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/i18n/Formatter::__clone*				public
 See |yii/base/Component::__clone|


*yii/i18n/Formatter::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/i18n/Formatter::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/i18n/Formatter::on*					public
 See |yii/base/Component::on|


*yii/i18n/Formatter::off*					public
 See |yii/base/Component::off|


*yii/i18n/Formatter::trigger*				public
 See |yii/base/Component::trigger|


*yii/i18n/Formatter::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/i18n/Formatter::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/i18n/Formatter::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/i18n/Formatter::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/i18n/Formatter::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/i18n/Formatter::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/i18n/Formatter::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/i18n/Formatter::format*				public
 See |yii/base/Formatter::format|


*yii/i18n/Formatter::asRaw*				public
 See |yii/base/Formatter::asRaw|


*yii/i18n/Formatter::asText*				public
 See |yii/base/Formatter::asText|


*yii/i18n/Formatter::asNtext*				public
 See |yii/base/Formatter::asNtext|


*yii/i18n/Formatter::asParagraphs*			public
 See |yii/base/Formatter::asParagraphs|


*yii/i18n/Formatter::asHtml*				public
 See |yii/base/Formatter::asHtml|


*yii/i18n/Formatter::asEmail*				public
 See |yii/base/Formatter::asEmail|


*yii/i18n/Formatter::asImage*				public
 See |yii/base/Formatter::asImage|


*yii/i18n/Formatter::asUrl*				public
 See |yii/base/Formatter::asUrl|


*yii/i18n/Formatter::asBoolean*				public
 See |yii/base/Formatter::asBoolean|


*yii/i18n/Formatter::asDate*				public
>
 asDate($value, $format='null')
<
(string) The formatted result

    [$value] (integer|string|\DateTime) The value to be formatted. The
    following types of value are supported:


      - an integer representing a UNIX timestamp 
      - a string that can be parsed into a UNIX timestamp via
      'strtotime()' 
      - a PHP DateTime object
    [$format] (string) The format used to convert the value into a date
    string. If null, 'dateFormat' will be used.

    This can be "short", "medium", "long", or "full", which represents a
    preset format of different lengths. It can also be a custom format as
    specified in the [ICU
    manual](http://userguide.icu-project.org/formatparse/datetime).


*yii/i18n/Formatter::asTime*				public
>
 asTime($value, $format='null')
<
(string) The formatted result

    [$value] (integer|string|\DateTime) The value to be formatted. The
    following types of value are supported:


      - an integer representing a UNIX timestamp 
      - a string that can be parsed into a UNIX timestamp via
      'strtotime()' 
      - a PHP DateTime object
    [$format] (string) The format used to convert the value into a date
    string. If null, 'dateFormat' will be used.

    This can be "short", "medium", "long", or "full", which represents a
    preset format of different lengths. It can also be a custom format as
    specified in the [ICU
    manual](http://userguide.icu-project.org/formatparse/datetime).


*yii/i18n/Formatter::asDatetime*				public
>
 asDatetime($value, $format='null')
<
(string) The formatted result

    [$value] (integer|string|\DateTime) The value to be formatted. The
    following types of value are supported:


      - an integer representing a UNIX timestamp 
      - a string that can be parsed into a UNIX timestamp via
      'strtotime()' 
      - a PHP DateTime object
    [$format] (string) The format used to convert the value into a date
    string. If null, 'dateFormat' will be used.

    This can be "short", "medium", "long", or "full", which represents a
    preset format of different lengths. It can also be a custom format as
    specified in the [ICU
    manual](http://userguide.icu-project.org/formatparse/datetime).


*yii/i18n/Formatter::normalizeDatetimeValue*		protected
 See |yii/base/Formatter::normalizeDatetimeValue|


*yii/i18n/Formatter::formatTimestamp*			protected
 See |yii/base/Formatter::formatTimestamp|


*yii/i18n/Formatter::asInteger*				public
 See |yii/base/Formatter::asInteger|


*yii/i18n/Formatter::asDouble*				public
 See |yii/base/Formatter::asDouble|


*yii/i18n/Formatter::asNumber*				public
 See |yii/base/Formatter::asNumber|


*yii/i18n/Formatter::asSize*				public
 See |yii/base/Formatter::asSize|


*yii/i18n/Formatter::asRelativeTime*			public
 See |yii/base/Formatter::asRelativeTime|


*yii/i18n/Formatter::asDecimal*				public
>
 asDecimal($value, $format='null')
<
(string) The formatted result.

    [$value] (mixed) The value to be formatted
    [$format] (string) The format to be used. Please refer to [ICU
    manual](http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details)
    for details on how to specify a format.


*yii/i18n/Formatter::asCurrency*				public
>
 asCurrency($value, $currency='null', $format='null')
<
(string) The formatted result.

    [$value] (mixed) The value to be formatted
    [$currency] (string) The 3-letter ISO 4217 currency code indicating the
    currency to use. If null, 'currencyCode' will be used.
    [$format] (string) The format to be used. Please refer to [ICU
    manual](http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details)
    for details on how to specify a format.


*yii/i18n/Formatter::asPercent*				public
>
 asPercent($value, $format='null')
<
(string) The formatted result.

    [$value] (mixed) The value to be formatted
    [$format] (string) The format to be used. Please refer to [ICU
    manual](http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details)
    for details on how to specify a format.


*yii/i18n/Formatter::asScientific*			public
>
 asScientific($value, $format='null')
<
(string) The formatted result.

    [$value] (mixed) The value to be formatted
    [$format] (string) The format to be used. Please refer to [ICU
    manual](http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details)
    for details on how to specify a format.


*yii/i18n/Formatter::createNumberFormatter*		protected
>
 createNumberFormatter($type, $format)
<
(\NumberFormatter) The created formatter instance

    [$type] (integer) The type of the number formatter
    [$format] (string) The format to be used. Please refer to [ICU
    manual](http://www.icu-project.org/apiref/icu4c/classDecimalFormat.html#_details)



 vim:tw=78:ts=8:ft=help:norl:
