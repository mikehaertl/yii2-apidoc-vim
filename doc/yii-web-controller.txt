
*yii/web/Controller*   >> |yii/base/Controller|
====================

SUBCLASSES
------------------------------------------------------------------------------

|yii/rest/Controller|
|yii/rest/ActiveController|
|yii/debug/controllers/DefaultController|
|yii/debug/controllers/UserController|
|yii/gii/controllers/DefaultController|

DESCRIPTION
------------------------------------------------------------------------------

 For more details and usage information on Controller, see the [guide article
 on controllers](guide:structure-controllers).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Controller::$id|
 |yii/base/Controller::$module|
 |yii/base/Controller::$defaultAction|
 |yii/base/Controller::$layout|
 |yii/base/Controller::$action|
 |yii/base/Component::$behaviors|
 |yii/base/Controller::$modules|
 |yii/base/Controller::$uniqueId|
 |yii/base/Controller::$route|
 |yii/base/Controller::$view|
 |yii/base/Controller::$viewPath|


$enableCsrfValidation			*yii/web/Controller::$enableCsrfValidation*

 (bool) Whether to enable CSRF validation for the actions in this controller.
 CSRF validation is enabled only when both this property and
 '\yii\web\Request::enableCsrfValidation' are true.

$actionParams				*yii/web/Controller::$actionParams*

 (array) The parameters bound to the current action.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Controller::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Controller::actions|
 |yii/base/Controller::runAction|
 |yii/base/Controller::run|
 |yii/base/Controller::createAction|
 |yii/base/Controller::afterAction|
 |yii/base/Controller::getModules|
 |yii/base/Controller::getUniqueId|
 |yii/base/Controller::getRoute|
 |yii/base/Controller::render|
 |yii/base/Controller::renderContent|
 |yii/base/Controller::renderPartial|
 |yii/base/Controller::renderFile|
 |yii/base/Controller::getView|
 |yii/base/Controller::setView|
 |yii/base/Controller::getViewPath|
 |yii/base/Controller::setViewPath|
 |yii/base/Controller::findLayoutFile|


*yii/web/Controller::bindActionParams*			public
>
 bindActionParams($action, $params)
<
return (array) The valid parameters that the action can run with.

 Binds the parameters to the action.

 This method is invoked by '\yii\base\Action' when it begins to run with the
 given parameters. This method will check the parameter names that the action
 requires and return the provided parameters according to the requirement. If
 there is any missing parameter, an exception will be thrown.

    [$action] (\yii\base\Action) The action to be bound with parameters
    [$params] (array) The parameters to be bound to the action


*yii/web/Controller::beforeAction*			public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to run.

 This method is invoked right before an action is executed.



 The method will trigger the 'EVENT_BEFORE_ACTION' event. The return value of
 the method will determine whether the action should continue to run.

 In case the action should not run, the request should be handled inside of
 the 'beforeAction' code by either providing the necessary output or
 redirecting the request. Otherwise the response will be empty.

 If you override this method, your code should look like the following:

   public function beforeAction($action)
   {
       // your custom code here, if you want the code to run before action
 filters,
       // which are triggered on the [[EVENT_BEFORE_ACTION]] event, e.g.
 PageCache or AccessControl

       if (!parent::beforeAction($action)) {
           return false;
       }

       // other custom code here

       return true; // or false to not run the action
   }



    [$action] (\yii\base\Action) The action to be executed.


*yii/web/Controller::renderAjax*				public
>
 renderAjax($view, $params='[]')
<
return (string) The rendering result.

 Renders a view in response to an AJAX request.

 This method is similar to 'renderPartial()' except that it will inject into
 the rendering result with JS/CSS scripts and files which are registered with
 the view. For this reason, you should use this method instead of
 'renderPartial()' to render a view to respond to an AJAX request.

    [$view] (string) The view name. Please refer to 'render()' on how to
    specify a view name.
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view.


*yii/web/Controller::asJson*				public
>
 asJson($data)
<
return (\yii\web\Response) A response that is configured to send '$data' formatted as
JSON.

 Send data formatted as JSON.

 This method is a shortcut for sending data formatted as JSON. It will return
 the 'Application::getResponse()|response' application component after
 configuring the 'Response::$format|format' and setting the
 'Response::$data|data' that should be formatted. A common usage will be:

   return $this->asJson($data);



    [$data] (mixed) The data that should be formatted.


*yii/web/Controller::asXml*				public
>
 asXml($data)
<
return (\yii\web\Response) A response that is configured to send '$data' formatted as
XML.

 Send data formatted as XML.

 This method is a shortcut for sending data formatted as XML. It will return
 the 'Application::getResponse()|response' application component after
 configuring the 'Response::$format|format' and setting the
 'Response::$data|data' that should be formatted. A common usage will be:

   return $this->asXml($data);



    [$data] (mixed) The data that should be formatted.


*yii/web/Controller::redirect*				public
>
 redirect($url, $statusCode=302)
<
return (\yii\web\Response) The current response object

 Redirects the browser to the specified URL.

 This method is a shortcut to 'Response::redirect()'.

 You can use it in an action by returning the 'Response' directly:

   // stop executing this action and redirect to login page
   return $this->redirect(['login']);



    [$url] (string|array) The URL to be redirected to. This can be in one of
    the following formats:


      - a string representing a URL (e.g. "http://example.com") 
      - a string representing a URL alias (e.g. "@example.com") 
      - an array in the format of '[$route, ...name-value pairs...]' (e.g.
      '['site/index', 'ref' => 1]')   'Url::to()' will be used to convert the
    array into a URL.

    Any relative URL that starts with a single forward slash "/" will be
    converted into an absolute one by prepending it with the host info of the
    current request.
    [$statusCode] (int) The HTTP status code. Defaults to 302. See
    <https://tools.ietf.org/html/rfc2616#section-10> for details about HTTP
    status code


*yii/web/Controller::goHome*				public
>
 goHome()
<
return (\yii\web\Response) The current response object

 Redirects the browser to the home page.

 You can use this method in an action by returning the 'Response' directly:

   // stop executing this action and redirect to home page
   return $this->goHome();




*yii/web/Controller::goBack*				public
>
 goBack($defaultUrl='null')
<
return (\yii\web\Response) The current response object

 Redirects the browser to the last visited page.

 You can use this method in an action by returning the 'Response' directly:

   // stop executing this action and redirect to last visited page
   return $this->goBack();

 For this function to work you have to 'User::setReturnUrl()|set the return
 URL' in appropriate places before.

    [$defaultUrl] (string|array) The default return URL in case it was not set
    previously. If this is null and the return URL was not set previously,
    'Application::homeUrl' will be redirected to. Please refer to
    'User::setReturnUrl()' on accepted format of the URL.


*yii/web/Controller::refresh*				public
>
 refresh($anchor='''')
<
return (\yii\web\Response) The response object itself

 Refreshes the current page.

 This method is a shortcut to 'Response::refresh()'.

 You can use it in an action by returning the 'Response' directly:

   // stop executing this action and refresh the current page
   return $this->refresh();



    [$anchor] (string) The anchor that should be appended to the redirection
    URL. Defaults to empty. Make sure the anchor starts with '#' if you want
    to specify it.



 vim:tw=78:ts=8:ft=help:norl:
