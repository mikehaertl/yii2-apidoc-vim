
*yii/web/Controller*   >> |yii/base/Controller|
====================

SUBCLASSES
------------------------------------------------------------------------------

|yii/rest/Controller|
|yii/rest/ActiveController|

DESCRIPTION
------------------------------------------------------------------------------




PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/web/Controller::$id*
 See |yii/base/Controller::$id|

$module					*yii/web/Controller::$module*
 See |yii/base/Controller::$module|

$defaultAction				*yii/web/Controller::$defaultAction*
 See |yii/base/Controller::$defaultAction|

$layout					*yii/web/Controller::$layout*
 See |yii/base/Controller::$layout|

$action					*yii/web/Controller::$action*
 See |yii/base/Controller::$action|

$enableCsrfValidation			*yii/web/Controller::$enableCsrfValidation*
 (boolean) Whether to enable CSRF validation for the actions in this
 controller. CSRF validation is enabled only when both this property and
 'Request::enableCsrfValidation' are true.

$actionParams				*yii/web/Controller::$actionParams*
 (array) The parameters bound to the current action.

$behaviors				*yii/web/Controller::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$uniqueId				*yii/web/Controller::$uniqueId*
 (string) The controller ID that is prefixed with the module ID (if any).

$route					*yii/web/Controller::$route*
 (string) The route (module ID, controller ID and action ID) of the current
 request.

$view					*yii/web/Controller::$view*
 (\yii\base\View) The view object that can be used to render views or view
 files.

$viewPath				*yii/web/Controller::$viewPath*
 (string) The directory containing the view files for this controller.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/web/Controller::className*				public
 See |yii/base/Object::className|


*yii/web/Controller::__construct*				public
 See |yii/base/Controller::__construct|


*yii/web/Controller::init*				public
 See |yii/base/Object::init|


*yii/web/Controller::__get*				public
 See |yii/base/Component::__get|


*yii/web/Controller::__set*				public
 See |yii/base/Component::__set|


*yii/web/Controller::__isset*				public
 See |yii/base/Component::__isset|


*yii/web/Controller::__unset*				public
 See |yii/base/Component::__unset|


*yii/web/Controller::__call*				public
 See |yii/base/Component::__call|


*yii/web/Controller::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/web/Controller::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/web/Controller::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/web/Controller::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/web/Controller::__clone*				public
 See |yii/base/Component::__clone|


*yii/web/Controller::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/web/Controller::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/web/Controller::on*					public
 See |yii/base/Component::on|


*yii/web/Controller::off*					public
 See |yii/base/Component::off|


*yii/web/Controller::trigger*				public
 See |yii/base/Component::trigger|


*yii/web/Controller::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/web/Controller::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/web/Controller::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/web/Controller::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/web/Controller::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/web/Controller::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/web/Controller::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/web/Controller::actions*				public
 See |yii/base/Controller::actions|


*yii/web/Controller::runAction*				public
 See |yii/base/Controller::runAction|


*yii/web/Controller::run*					public
 See |yii/base/Controller::run|


*yii/web/Controller::bindActionParams*			public
>
 bindActionParams($action, $params)
<
(array) The valid parameters that the action can run with.

 This method is invoked by 'Action' when it begins to run with the given
 parameters. This method will check the parameter names that the action
 requires and return the provided parameters according to the requirement. If
 there is any missing parameter, an exception will be thrown.
    [$action] (\yii\base\Action) The action to be bound with parameters
    [$params] (array) The parameters to be bound to the action


*yii/web/Controller::createAction*			public
 See |yii/base/Controller::createAction|


*yii/web/Controller::beforeAction*			public
>
 beforeAction($action)
<
(boolean) Whether the action should continue to be executed.


    [$action] () 


*yii/web/Controller::afterAction*				public
 See |yii/base/Controller::afterAction|


*yii/web/Controller::getUniqueId*				public
 See |yii/base/Controller::getUniqueId|


*yii/web/Controller::getRoute*				public
 See |yii/base/Controller::getRoute|


*yii/web/Controller::render*				public
 See |yii/base/Controller::render|


*yii/web/Controller::renderPartial*			public
 See |yii/base/Controller::renderPartial|


*yii/web/Controller::renderFile*				public
 See |yii/base/Controller::renderFile|


*yii/web/Controller::getView*				public
 See |yii/base/Controller::getView|


*yii/web/Controller::setView*				public
 See |yii/base/Controller::setView|


*yii/web/Controller::getViewPath*				public
 See |yii/base/Controller::getViewPath|


*yii/web/Controller::findLayoutFile*			protected
 See |yii/base/Controller::findLayoutFile|


*yii/web/Controller::renderAjax*				public
>
 renderAjax($view, $params='[]')
<
(string) The rendering result.

 This method is similar to 'renderPartial()' except that it will inject into
 the rendering result with JS/CSS scripts and files which are registered with
 the view. For this reason, you should use this method instead of
 'renderPartial()' to render a view to respond to an AJAX request.
    [$view] (string) The view name. Please refer to 'render()' on how to
    specify a view name.
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view.


*yii/web/Controller::redirect*				public
>
 redirect($url, $statusCode=302)
<
(\yii\web\Response) The current response object

 This method is a shortcut to 'Response::redirect()'.

 You can use it in an action by returning the 'Response' directly:

   // stop executing this action and redirect to login page
   return $this->redirect(['login']);


    [$url] (string|array) The URL to be redirected to. This can be in one of
    the following formats:

    - a string representing a URL (e.g. "http://example.com") - a string
    representing a URL alias (e.g. "@example.com") - an array in the format of
    '[$route, ...name-value pairs...]' (e.g. '['site/index', 'ref' => 1]')  
    'Url::to()' will be used to convert the array into a URL.

    Any relative URL will be converted into an absolute one by prepending it
    with the host info of the current request.
    [$statusCode] (integer) The HTTP status code. Defaults to 302. See
    <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html> for details about
    HTTP status code


*yii/web/Controller::goHome*				public
>
 goHome()
<
(\yii\web\Response) The current response object

 You can use this method in an action by returning the 'Response' directly:

   // stop executing this action and redirect to home page
   return $this->goHome();




*yii/web/Controller::goBack*				public
>
 goBack($defaultUrl='null')
<
(\yii\web\Response) The current response object

 You can use this method in an action by returning the 'Response' directly:

   // stop executing this action and redirect to last visited page
   return $this->goBack();


    [$defaultUrl] (string|array) The default return URL in case it was not set
    previously. If this is null and the return URL was not set previously,
    'Application::homeUrl' will be redirected to. Please refer to
    'User::setReturnUrl()' on accepted format of the URL.


*yii/web/Controller::refresh*				public
>
 refresh($anchor='''')
<
(\yii\web\Response) The response object itself

 This method is a shortcut to 'Response::refresh()'.

 You can use it in an action by returning the 'Response' directly:

   // stop executing this action and refresh the current page
   return $this->refresh();


    [$anchor] (string) The anchor that should be appended to the redirection
    URL. Defaults to empty. Make sure the anchor starts with '#' if you want
    to specify it.



 vim:tw=78:ts=8:ft=help:norl:
