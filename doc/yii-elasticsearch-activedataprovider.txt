
*yii/elasticsearch/ActiveDataProvider*   >> |yii/data/ActiveDataProvider|
======================================

DESCRIPTION
------------------------------------------------------------------------------

 It allows to fetch not only rows and total rows count, but full query results
 including aggregations and so on.

 Note: this data provider fetches result models and total count using single
 ElasticSearch query, so results total count will be fetched after pagination
 limit applying, which eliminates ability to verify if requested page number
 actually exist. Data provider disables 'yii\data\Pagination::validatePage'
 automatically because of this.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/elasticsearch/ActiveDataProvider::setQueryResults*	public
>
 setQueryResults($results)
<
return (void)

    [$results] (array) Full query results


*yii/elasticsearch/ActiveDataProvider::getQueryResults*	public
>
 getQueryResults()
<
return (array) Full query results



*yii/elasticsearch/ActiveDataProvider::getAggregations*	public
>
 getAggregations()
<
return (array) All aggregations results



*yii/elasticsearch/ActiveDataProvider::getAggregation*	public
>
 getAggregation($name)
<
return (array) Aggregation results.

 Returns results of the specified aggregation.

    [$name] (string) Aggregation name.


*yii/elasticsearch/ActiveDataProvider::prepareModels*	protected
>
 prepareModels()
<
return (void)



*yii/elasticsearch/ActiveDataProvider::prepareTotalCount*	protected
>
 prepareTotalCount()
<
return (void)



*yii/elasticsearch/ActiveDataProvider::prepareKeys*	protected
>
 prepareKeys($models)
<
return (void)

    [$models] () 


*yii/elasticsearch/ActiveDataProvider::refresh*		public
>
 refresh()
<
return (void)




 vim:tw=78:ts=8:ft=help:norl:
