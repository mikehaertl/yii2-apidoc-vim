
*yii/sphinx/MatchExpression*   >> |yii/base/BaseObject|
============================

DESCRIPTION
------------------------------------------------------------------------------

 In conjunction with 'MatchBuilder' this class provides ability to build
 sophisticated MATCH expressions. Instance of this class can be passed to
 'Query::match()'. For example:

   use yii\sphinx\Query;
   use yii\sphinx\MatchExpression;

   $rows = (new Query())
       ->match(new MatchExpression('@title :title', ['title' => 'Yii']))
       ->all();

 You may use 'match()', 'andMatch()' and 'orMatch()' to combine several
 conditions. For example:

   use yii\sphinx\Query;
   use yii\sphinx\MatchExpression;

   $rows = (new Query())
       ->match(
           // produces '((@title "Yii") (@author "Paul")) | (@content
 "Sphinx")' :
           (new MatchExpression())
               ->match(['title' => 'Yii'])
               ->andMatch(['author' => 'Paul'])
               ->orMatch(['content' => 'Sphinx'])
       )
       ->all();

 You may as well compose expressions with special operators like 'MAYBE',
 'PROXIMITY' etc. For example:

   use yii\sphinx\Query;
   use yii\sphinx\MatchExpression;

   $rows = (new Query())
       ->match(
           // produces '@title "Yii" MAYBE "Sphinx"' :
           (new MatchExpression())->match([
               'maybe',
               'title',
               'Yii',
               'Sphinx',
           ])
       )
       ->all();

   $rows = (new Query())
       ->match(
           // produces '@title "Yii"~10' :
           (new MatchExpression())->match([
               'proximity',
               'title',
               'Yii',
               10,
           ])
       )
       ->all();

 Note: parameters passed via 'params' or generated from array conditions will
 be automatically escaped using 'Connection::escapeMatchValue()'.


PROPERTY DETAILS
------------------------------------------------------------------------------


$match					*yii/sphinx/MatchExpression::$match*

 (string|array|\yii\db\Expression) MATCH expression. For example: '['title' =>
 'Yii', 'content' => 'Sphinx']'. Note: being specified as a plain string this
 value will not be quoted or escaped, do not pass possible unsecured values
 (like the ones obtained from HTTP request) as a direct value.

$params					*yii/sphinx/MatchExpression::$params*

 (array) List of match expression parameter values indexed by parameter
 placeholders. For example, '[':name' => 'Dan', ':age' => 31]'. These
 parameters will be automatically escaped using
 'Connection::escapeMatchValue()' and inserted into MATCH expression as a
 quoted strings.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/sphinx/MatchExpression::__construct*			public
>
 __construct($match='null', $params='[]', $config='[]')
<
return (void)

 Constructor.

    [$match] (string) The MATCH expression
    [$params] (array) Expression parameters.
    [$config] (array) Name-value pairs that will be used to initialize the
    object properties


*yii/sphinx/MatchExpression::match*			public
>
 match($condition, $params='[]')
<
return ($this) The expression object itself

 Sets the MATCH expression.

 The method requires a '$condition' parameter, and optionally a '$params'
 parameter specifying the values to be parsed into the expression.

 The '$condition' parameter should be either a string (e.g. ''@name "John"'')
 or an array.

    [$condition] (string|array|\yii\db\Expression) The conditions that should
    be put in the MATCH expression.
    [$params] (array) The parameters (name => value) to be parsed into the
    query.


*yii/sphinx/MatchExpression::andMatch*			public
>
 andMatch($condition, $params='[]')
<
return ($this) The expression object itself

 Adds an additional MATCH condition to the existing one.

 The new condition and the existing one will be joined using the 'AND' (' ')
 operator.

    [$condition] (string|array|\yii\db\Expression) The new MATCH condition.
    Please refer to 'match()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be parsed into the
    query.


*yii/sphinx/MatchExpression::orMatch*			public
>
 orMatch($condition, $params='[]')
<
return ($this) The expression object itself

 Adds an additional MATCH condition to the existing one.

 The new condition and the existing one will be joined using the 'OR' ('|')
 operator.

    [$condition] (string|array|\yii\db\Expression) The new WHERE condition.
    Please refer to 'match()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be parsed into the
    query.


*yii/sphinx/MatchExpression::params*			public
>
 params($params)
<
return ($this) The expression object itself

 Sets the parameters to be parsed into the query.

    [$params] (array) List of expression parameter values indexed by parameter
    placeholders. For example, '[':name' => 'Dan', ':age' => 31]'.


*yii/sphinx/MatchExpression::addParams*			public
>
 addParams($params)
<
return ($this) The expression object itself

 Adds additional parameters to be parsed into the query.

    [$params] (array) List of expression parameter values indexed by parameter
    placeholders. For example, '[':name' => 'Dan', ':age' => 31]'.


*yii/sphinx/MatchExpression::filterMatch*			public
>
 filterMatch($condition)
<
return ($this) The query object itself

 Sets the MATCH part of the query but ignores 'isEmpty()|empty operands'.

 This method is similar to 'match()'. The main difference is that this method
 will remove 'isEmpty()|empty query operands'. As a result, this method is
 best suited for building query conditions based on filter values entered by
 users.

 The following code shows the difference between this method and 'match()':

   // MATCH (@title :title)
   $query->filterMatch(['name' => null, 'title' => 'foo']);
   // MATCH (@title :title)
   $query->match(['title' => 20]);
   // MATCH (@name :name @title :title)
   $query->match(['name' => null, 'age' => 20]);

 Note that unlike 'match()', you cannot pass binding parameters to this
 method.

    [$condition] (array) The conditions that should be put in the MATCH part.
    See 'match()' on how to specify this parameter.


*yii/sphinx/MatchExpression::andFilterMatch*		public
>
 andFilterMatch($condition)
<
return ($this) The query object itself

 Adds an additional MATCH condition to the existing one but ignores
 'isEmpty()|empty operands'.

 The new condition and the existing one will be joined using the 'AND'
 operator.

 This method is similar to 'andMatch()'. The main difference is that this
 method will remove 'isEmpty()|empty query operands'. As a result, this method
 is best suited for building query conditions based on filter values entered
 by users.

    [$condition] (array) The new MATCH condition. Please refer to 'match()' on
    how to specify this parameter.


*yii/sphinx/MatchExpression::orFilterMatch*		public
>
 orFilterMatch($condition)
<
return ($this) The query object itself

 Adds an additional MATCH condition to the existing one but ignores
 'isEmpty()|empty operands'.

 The new condition and the existing one will be joined using the 'OR'
 operator.

 This method is similar to 'orMatch()'. The main difference is that this
 method will remove 'isEmpty()|empty query operands'. As a result, this method
 is best suited for building query conditions based on filter values entered
 by users.

    [$condition] (array) The new MATCH condition. Please refer to 'match()' on
    how to specify this parameter.


*yii/sphinx/MatchExpression::filterCondition*		protected
>
 filterCondition($condition)
<
return (array) The condition with 'isEmpty()|empty operands' removed.

 Removes 'isEmpty()|empty operands' from the given query condition.

    [$condition] (array) The original condition


*yii/sphinx/MatchExpression::isEmpty*			protected
>
 isEmpty($value)
<
return (bool) If the value is empty

 Returns a value indicating whether the give value is "empty".

 The value is considered "empty", if one of the following conditions is
 satisfied:


   - it is 'null', 
   - an empty string (''''), 
   - a string containing only whitespace characters, 
   - or an empty array.

    [$value] (mixed) 



 vim:tw=78:ts=8:ft=help:norl:
