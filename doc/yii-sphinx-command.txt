
*yii/sphinx/Command*   >> |yii/db/Command|
====================

DESCRIPTION
------------------------------------------------------------------------------

 A command object is usually created by calling 'Connection::createCommand()'.
 The SQL statement it represents can be set via the 'sql' property.

 To execute a non-query SQL (such as INSERT, REPLACE, DELETE, UPDATE), call
 'execute()'. To execute a SQL statement that returns result data set (such as
 SELECT, CALL SNIPPETS, CALL KEYWORDS), use 'queryAll()', 'queryOne()',
 'queryColumn()', 'queryScalar()', or 'query()'. For example,

   $articles = $connection->createCommand("SELECT * FROM `idx_article` WHERE
 MATCH('programming')")->queryAll();

 Command supports SQL statement preparation and parameter binding just as
 '\yii\db\Command' does.

 Command also supports building SQL statements by providing methods such as
 'insert()', 'update()', etc. For example,

   $connection->createCommand()->update('idx_article', [
       'genre_id' => 15,
       'author_id' => 157,
   ])->execute();

 To build SELECT SQL statements, please use 'Query' and 'QueryBuilder'
 instead.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/Command::$pdoStatement|
 |yii/db/Command::$fetchMode|
 |yii/db/Command::$params|
 |yii/db/Command::$queryCacheDuration|
 |yii/db/Command::$queryCacheDependency|
 |yii/base/Component::$behaviors|
 |yii/db/Command::$sql|


$db					*yii/sphinx/Command::$db*

 (\yii\sphinx\Connection) The Sphinx connection that this command is
 associated with.

$rawSql					*yii/sphinx/Command::$rawSql*

 (string) The raw SQL with parameter values inserted into the corresponding
 placeholders in 'sql'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/db/Command::cache|
 |yii/db/Command::noCache|
 |yii/db/Command::getSql|
 |yii/db/Command::setSql|
 |yii/db/Command::setRawSql|
 |yii/db/Command::cancel|
 |yii/db/Command::bindParam|
 |yii/db/Command::bindPendingParams|
 |yii/db/Command::query|
 |yii/db/Command::queryAll|
 |yii/db/Command::queryOne|
 |yii/db/Command::queryScalar|
 |yii/db/Command::queryColumn|
 |yii/db/Command::insert|
 |yii/db/Command::upsert|
 |yii/db/Command::delete|
 |yii/db/Command::addUnique|
 |yii/db/Command::dropUnique|
 |yii/db/Command::addCheck|
 |yii/db/Command::dropCheck|
 |yii/db/Command::addDefaultValue|
 |yii/db/Command::dropDefaultValue|
 |yii/db/Command::executeResetSequence|
 |yii/db/Command::addCommentOnColumn|
 |yii/db/Command::addCommentOnTable|
 |yii/db/Command::dropCommentFromColumn|
 |yii/db/Command::dropCommentFromTable|
 |yii/db/Command::createView|
 |yii/db/Command::dropView|
 |yii/db/Command::execute|
 |yii/db/Command::logQuery|
 |yii/db/Command::queryInternal|
 |yii/db/Command::getCacheKey|
 |yii/db/Command::requireTableSchemaRefresh|
 |yii/db/Command::refreshTableSchema|
 |yii/db/Command::requireTransaction|
 |yii/db/Command::setRetryHandler|
 |yii/db/Command::internalExecute|
 |yii/db/Command::reset|


*yii/sphinx/Command::getRawSql*				public
>
 getRawSql()
<
return (string) The raw SQL with parameter values inserted into the corresponding
placeholders in 'sql'.

 Returns the raw SQL by inserting parameter values into the corresponding
 placeholders in 'sql'.



 Note that the return value of this method should mainly be used for logging
 purpose. It is likely that this method returns an invalid SQL due to improper
 replacement of parameter placeholders.




*yii/sphinx/Command::prepare*				public
>
 prepare($forRead='null')
<
return (void)

 Prepares the SQL statement to be executed.



 For complex SQL statement that is to be executed multiple times, this may
 improve performance. For SQL statement with binding parameters, this method
 is invoked automatically.



    [$forRead] (bool) Whether this method is called for a read query. If null,
    it means the SQL statement should be used to determine whether it is for
    read or write.


*yii/sphinx/Command::bindValue*				public
>
 bindValue($name, $value, $dataType=null)
<
return ($this) The current command being executed

 Binds a value to a parameter.







    [$name] (string|int) Parameter identifier. For a prepared statement using
    named placeholders, this will be a parameter name of the form ':name'. For
    a prepared statement using question mark placeholders, this will be the
    1-indexed position of the parameter.
    [$value] (mixed) The value to bind to the parameter
    [$dataType] (int) SQL data type of the parameter. If null, the type is
    determined by the PHP type of the value.


*yii/sphinx/Command::bindValues*				public
>
 bindValues($values)
<
return ($this) The current command being executed

 Binds a list of values to the corresponding parameters.



 This is similar to 'bindValue()' except that it binds multiple values at a
 time. Note that the SQL data type of each value is determined by its PHP
 type.



    [$values] (array) The values to be bound. This must be given in terms of
    an associative array with array keys being the parameter names, and array
    values the corresponding parameter values, e.g. '[':name' => 'John',
    ':age' => 25]'. By default, the PDO type of each value is determined by
    its PHP type. You may explicitly specify the PDO type by using a
    'yii\db\PdoValue' class: 'new PdoValue(value, type)', e.g. '[':name' =>
    'John', ':profile' => new PdoValue($profile, \PDO::PARAM_LOB)]'.


*yii/sphinx/Command::batchInsert*				public
>
 batchInsert($index, $columns, $rows)
<
return ($this) The command object itself

 Creates a batch INSERT command.

 For example,

   $connection->createCommand()->batchInsert('idx_user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ])->execute();

 Note that the values in each row must match the corresponding column names.

    [$index] (string) The index that new rows will be inserted into.
    [$columns] (array) The column names
    [$rows] (array) The rows to be batch inserted into the index


*yii/sphinx/Command::update*				public
>
 update($index, $columns, $condition='\'\'', $params='[]', $options='[]')
<
return ($this) The command object itself

 Creates an UPDATE command.

 For example,

   $connection->createCommand()->update('user', ['status' => 1], 'age >
 30')->execute();

 The method will properly escape the column names and bind the values to be
 updated.

 Note that the created command is not executed until 'execute()' is called.

    [$index] (string) The index to be updated.
    [$columns] (array) The column data (name => value) to be updated.
    [$condition] (string|array) The condition that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify condition.
    [$params] (array) The parameters to be bound to the command
    [$options] (array) List of options in format: optionName => optionValue


*yii/sphinx/Command::createTable*				public
>
 createTable($table, $columns, $options='null')
<
return ($this) The command object itself

 Creates a SQL command for creating a new DB table.



 The columns in the new table should be specified as name-definition pairs
 (e.g. 'name' => 'string'), where name stands for a column name which will be
 properly quoted by the method, and definition stands for the column type
 which can contain an abstract DB type. The method
 'QueryBuilder::getColumnType()' will be called to convert the abstract column
 types to physical ones. For example, 'string' will be converted as
 'varchar(255)', and 'string not null' becomes 'varchar(255) not null'.

 If a column is specified with definition only (e.g. 'PRIMARY KEY (name,
 type)'), it will be directly inserted into the generated SQL.



    [$table] (string) The name of the table to be created. The name will be
    properly quoted by the method.
    [$columns] (array) The columns (name => definition) in the new table.
    [$options] (string) Additional SQL fragment that will be appended to the
    generated SQL.


*yii/sphinx/Command::renameTable*				public
>
 renameTable($table, $newName)
<
return ($this) The command object itself

 Creates a SQL command for renaming a DB table.







    [$table] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/sphinx/Command::dropTable*				public
>
 dropTable($table)
<
return ($this) The command object itself

 Creates a SQL command for dropping a DB table.







    [$table] (string) The table to be dropped. The name will be properly
    quoted by the method.


*yii/sphinx/Command::truncateTable*			public
>
 truncateTable($table)
<
return ($this) The command object itself

 Creates a SQL command for truncating a DB table.







    [$table] (string) The table to be truncated. The name will be properly
    quoted by the method.


*yii/sphinx/Command::addColumn*				public
>
 addColumn($table, $column, $type)
<
return ($this) The command object itself

 Creates a SQL command for adding a new DB column.







    [$table] (string) The table that the new column will be added to. The
    table name will be properly quoted by the method.
    [$column] (string) The name of the new column. The name will be properly
    quoted by the method.
    [$type] (string) The column type. '\yii\db\QueryBuilder::getColumnType()'
    will be called to convert the give column type to the physical one. For
    example, 'string' will be converted as 'varchar(255)', and 'string not
    null' becomes 'varchar(255) not null'.


*yii/sphinx/Command::dropColumn*				public
>
 dropColumn($table, $column)
<
return ($this) The command object itself

 Creates a SQL command for dropping a DB column.







    [$table] (string) The table whose column is to be dropped. The name will
    be properly quoted by the method.
    [$column] (string) The name of the column to be dropped. The name will be
    properly quoted by the method.


*yii/sphinx/Command::renameColumn*			public
>
 renameColumn($table, $oldName, $newName)
<
return ($this) The command object itself

 Creates a SQL command for renaming a column.







    [$table] (string) The table whose column is to be renamed. The name will
    be properly quoted by the method.
    [$oldName] (string) The old name of the column. The name will be properly
    quoted by the method.
    [$newName] (string) The new name of the column. The name will be properly
    quoted by the method.


*yii/sphinx/Command::alterColumn*				public
>
 alterColumn($table, $column, $type)
<
return ($this) The command object itself

 Creates a SQL command for changing the definition of a column.







    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The column type. '\yii\db\QueryBuilder::getColumnType()'
    will be called to convert the give column type to the physical one. For
    example, 'string' will be converted as 'varchar(255)', and 'string not
    null' becomes 'varchar(255) not null'.


*yii/sphinx/Command::addPrimaryKey*			public
>
 addPrimaryKey($name, $table, $columns)
<
return ($this) The command object itself.

 Creates a SQL command for adding a primary key constraint to an existing
 table.



 The method will properly quote the table and column names.



    [$name] (string) The name of the primary key constraint.
    [$table] (string) The table that the primary key constraint will be added
    to.
    [$columns] (string|array) Comma separated string or array of columns that
    the primary key will consist of.


*yii/sphinx/Command::dropPrimaryKey*			public
>
 dropPrimaryKey($name, $table)
<
return ($this) The command object itself

 Creates a SQL command for removing a primary key constraint to an existing
 table.







    [$name] (string) The name of the primary key constraint to be removed.
    [$table] (string) The table that the primary key constraint will be
    removed from.


*yii/sphinx/Command::addForeignKey*			public
>
 addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete='null', $update='null')
<
return ($this) The command object itself

 Creates a SQL command for adding a foreign key constraint to an existing
 table.



 The method will properly quote the table and column names.



    [$name] (string) The name of the foreign key constraint.
    [$table] (string) The table that the foreign key constraint will be added
    to.
    [$columns] (string|array) The name of the column to that the constraint
    will be added on. If there are multiple columns, separate them with
    commas.
    [$refTable] (string) The table that the foreign key references to.
    [$refColumns] (string|array) The name of the column that the foreign key
    references to. If there are multiple columns, separate them with commas.
    [$delete] (string) The ON DELETE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
    [$update] (string) The ON UPDATE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL


*yii/sphinx/Command::dropForeignKey*			public
>
 dropForeignKey($name, $table)
<
return ($this) The command object itself

 Creates a SQL command for dropping a foreign key constraint.







    [$name] (string) The name of the foreign key constraint to be dropped. The
    name will be properly quoted by the method.
    [$table] (string) The table whose foreign is to be dropped. The name will
    be properly quoted by the method.


*yii/sphinx/Command::createIndex*				public
>
 createIndex($name, $table, $columns, $unique='false')
<
return ($this) The command object itself

 Creates a SQL command for creating a new index.







    [$name] (string) The name of the index. The name will be properly quoted
    by the method.
    [$table] (string) The table that the new index will be created for. The
    table name will be properly quoted by the method.
    [$columns] (string|array) The column(s) that should be included in the
    index. If there are multiple columns, please separate them by commas. The
    column names will be properly quoted by the method.
    [$unique] (bool) Whether to add UNIQUE constraint on the created index.


*yii/sphinx/Command::dropIndex*				public
>
 dropIndex($name, $table)
<
return ($this) The command object itself

 Creates a SQL command for dropping an index.







    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/sphinx/Command::resetSequence*			public
>
 resetSequence($table, $value='null')
<
return ($this) The command object itself

 Creates a SQL command for resetting the sequence value of a table's primary
 key.



 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or the maximum existing value +1.



    [$table] (string) The name of the table whose primary key sequence will be
    reset
    [$value] (mixed) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have the
    maximum existing value +1.


*yii/sphinx/Command::checkIntegrity*			public
>
 checkIntegrity($check='true', $schema='''', $table='''')
<
return ($this) The command object itself

 Builds a SQL command for enabling or disabling integrity check.







    [$check] (bool) Whether to turn on or off the integrity check.
    [$schema] (string) The schema name of the tables. Defaults to empty
    string, meaning the current or default schema.
    [$table] (string) The table name.


*yii/sphinx/Command::replace*				public
>
 replace($index, $columns)
<
return ($this) The command object itself

 Creates an REPLACE command.

 For example,

   $connection->createCommand()->replace('idx_user', [
       'name' => 'Sam',
       'age' => 30,
   ])->execute();

 The method will properly escape the column names, and bind the values to be
 replaced.

 Note that the created command is not executed until 'execute()' is called.

    [$index] (string) The index that new rows will be replaced into.
    [$columns] (array) The column data (name => value) to be replaced into the
    index.


*yii/sphinx/Command::batchReplace*			public
>
 batchReplace($index, $columns, $rows)
<
return ($this) The command object itself

 Creates a batch REPLACE command.

 For example,

   $connection->createCommand()->batchReplace('idx_user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ])->execute();

 Note that the values in each row must match the corresponding column names.

    [$index] (string) The index that new rows will be replaced.
    [$columns] (array) The column names
    [$rows] (array) The rows to be batch replaced in the index


*yii/sphinx/Command::truncateIndex*			public
>
 truncateIndex($index)
<
return ($this) The command object itself

 Creates a SQL command for truncating a runtime index.

    [$index] (string) The index to be truncated. The name will be properly
    quoted by the method.


*yii/sphinx/Command::callSnippets*			public
>
 callSnippets($index, $source, $match, $options='[]')
<
return ($this) The command object itself

 Builds a snippet from provided data and query, using specified index
 settings.

    [$index] (string) Name of the index, from which to take the text
    processing settings.
    [$source] (string|array) Is the source data to extract a snippet from. It
    could be either a single string or array of strings.
    [$match] (string) The full-text query to build snippets for.
    [$options] (array) List of options in format: optionName => optionValue


*yii/sphinx/Command::callKeywords*			public
>
 callKeywords($index, $text, $fetchStatistic='false')
<
return ($this) The command object itself

 Returns tokenized and normalized forms of the keywords, and, optionally,
 keyword statistics.

    [$index] (string) The name of the index from which to take the text
    processing settings
    [$text] (string) The text to break down to keywords.
    [$fetchStatistic] (bool) Whether to return document and hit occurrence
    statistics



 vim:tw=78:ts=8:ft=help:norl:
