
*yii/sphinx/Command*   >> |yii/db/Command|
====================

DESCRIPTION
------------------------------------------------------------------------------

 A command object is usually created by calling 'Connection::createCommand()'.
 The SQL statement it represents can be set via the 'sql' property.

 To execute a non-query SQL (such as INSERT, REPLACE, DELETE, UPDATE), call
 'execute()'. To execute a SQL statement that returns result data set (such as
 SELECT, CALL SNIPPETS, CALL KEYWORDS), use 'queryAll()', 'queryOne()',
 'queryColumn()', 'queryScalar()', or 'query()'. For example,

   $articles = $connection->createCommand("SELECT * FROM `idx_article` WHERE
 MATCH('programming')")->queryAll();

 Command supports SQL statement preparation and parameter binding just as
 '\yii\db\Command' does.

 Command also supports building SQL statements by providing methods such as
 'insert()', 'update()', etc. For example,

   $connection->createCommand()->update('idx_article', [
       'genre_id' => 15,
       'author_id' => 157,
   ])->execute();

 To build SELECT SQL statements, please use 'Query' and 'QueryBuilder'
 instead.


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/sphinx/Command::$db*
 (\yii\sphinx\Connection) The Sphinx connection that this command is
 associated with.

$pdoStatement				*yii/sphinx/Command::$pdoStatement*
 See |yii/db/Command::$pdoStatement|

$fetchMode				*yii/sphinx/Command::$fetchMode*
 See |yii/db/Command::$fetchMode|

$params					*yii/sphinx/Command::$params*
 See |yii/db/Command::$params|

$behaviors				*yii/sphinx/Command::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$sql					*yii/sphinx/Command::$sql*
 (string) The SQL statement to be executed

$rawSql					*yii/sphinx/Command::$rawSql*
 (string) The raw SQL with parameter values inserted into the corresponding
 placeholders in 'sql'.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/sphinx/Command::className*				public
 See |yii/base/Object::className|


*yii/sphinx/Command::__construct*				public
 See |yii/base/Object::__construct|


*yii/sphinx/Command::init*				public
 See |yii/base/Object::init|


*yii/sphinx/Command::__get*				public
 See |yii/base/Component::__get|


*yii/sphinx/Command::__set*				public
 See |yii/base/Component::__set|


*yii/sphinx/Command::__isset*				public
 See |yii/base/Component::__isset|


*yii/sphinx/Command::__unset*				public
 See |yii/base/Component::__unset|


*yii/sphinx/Command::__call*				public
 See |yii/base/Component::__call|


*yii/sphinx/Command::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/sphinx/Command::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/sphinx/Command::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/sphinx/Command::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/sphinx/Command::__clone*				public
 See |yii/base/Component::__clone|


*yii/sphinx/Command::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/sphinx/Command::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/sphinx/Command::on*					public
 See |yii/base/Component::on|


*yii/sphinx/Command::off*					public
 See |yii/base/Component::off|


*yii/sphinx/Command::trigger*				public
 See |yii/base/Component::trigger|


*yii/sphinx/Command::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/sphinx/Command::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/sphinx/Command::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/sphinx/Command::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/sphinx/Command::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/sphinx/Command::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/sphinx/Command::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/sphinx/Command::getSql*				public
 See |yii/db/Command::getSql|


*yii/sphinx/Command::setSql*				public
 See |yii/db/Command::setSql|


*yii/sphinx/Command::getRawSql*				public
 See |yii/db/Command::getRawSql|


*yii/sphinx/Command::prepare*				public
 See |yii/db/Command::prepare|


*yii/sphinx/Command::cancel*				public
 See |yii/db/Command::cancel|


*yii/sphinx/Command::bindParam*				public
 See |yii/db/Command::bindParam|


*yii/sphinx/Command::bindValue*				public
 See |yii/db/Command::bindValue|


*yii/sphinx/Command::bindValues*				public
 See |yii/db/Command::bindValues|


*yii/sphinx/Command::execute*				public
 See |yii/db/Command::execute|


*yii/sphinx/Command::query*				public
 See |yii/db/Command::query|


*yii/sphinx/Command::queryAll*				public
 See |yii/db/Command::queryAll|


*yii/sphinx/Command::queryOne*				public
 See |yii/db/Command::queryOne|


*yii/sphinx/Command::queryScalar*				public
 See |yii/db/Command::queryScalar|


*yii/sphinx/Command::queryColumn*				public
 See |yii/db/Command::queryColumn|


*yii/sphinx/Command::insert*				public
 See |yii/db/Command::insert|


*yii/sphinx/Command::batchInsert*				public
>
 batchInsert($index, $columns, $rows)
<
(static) The command object itself

 For example,

   $connection->createCommand()->batchInsert('idx_user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ])->execute();

 Note that the values in each row must match the corresponding column names.
    [$index] (string) The index that new rows will be inserted into.
    [$columns] (array) The column names
    [$rows] (array) The rows to be batch inserted into the index


*yii/sphinx/Command::update*				public
>
 update($index, $columns, $condition='\'\'', $params='[]', $options='[]')
<
(static) The command object itself

 For example,

   $connection->createCommand()->update('user', ['status' => 1], 'age >
 30')->execute();

 The method will properly escape the column names and bind the values to be
 updated.

 Note that the created command is not executed until 'execute()' is called.
    [$index] (string) The index to be updated.
    [$columns] (array) The column data (name => value) to be updated.
    [$condition] (string|array) The condition that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify condition.
    [$params] (array) The parameters to be bound to the command
    [$options] (array) List of options in format: optionName => optionValue


*yii/sphinx/Command::delete*				public
 See |yii/db/Command::delete|


*yii/sphinx/Command::createTable*				public
>
 createTable($table, $columns, $options='null')
<
(\yii\db\Command) The command object itself


    [$table] () 
    [$columns] () 
    [$options] () 


*yii/sphinx/Command::renameTable*				public
>
 renameTable($table, $newName)
<
(\yii\db\Command) The command object itself


    [$table] () 
    [$newName] () 


*yii/sphinx/Command::dropTable*				public
>
 dropTable($table)
<
(\yii\db\Command) The command object itself


    [$table] () 


*yii/sphinx/Command::truncateTable*			public
>
 truncateTable($table)
<
(\yii\db\Command) The command object itself


    [$table] () 


*yii/sphinx/Command::addColumn*				public
>
 addColumn($table, $column, $type)
<
(\yii\db\Command) The command object itself


    [$table] () 
    [$column] () 
    [$type] () 


*yii/sphinx/Command::dropColumn*				public
>
 dropColumn($table, $column)
<
(\yii\db\Command) The command object itself


    [$table] () 
    [$column] () 


*yii/sphinx/Command::renameColumn*			public
>
 renameColumn($table, $oldName, $newName)
<
(\yii\db\Command) The command object itself


    [$table] () 
    [$oldName] () 
    [$newName] () 


*yii/sphinx/Command::alterColumn*				public
>
 alterColumn($table, $column, $type)
<
(\yii\db\Command) The command object itself


    [$table] () 
    [$column] () 
    [$type] () 


*yii/sphinx/Command::addPrimaryKey*			public
>
 addPrimaryKey($name, $table, $columns)
<
(\yii\db\Command) The command object itself.


    [$name] () 
    [$table] () 
    [$columns] () 


*yii/sphinx/Command::dropPrimaryKey*			public
>
 dropPrimaryKey($name, $table)
<
(\yii\db\Command) The command object itself


    [$name] () 
    [$table] () 


*yii/sphinx/Command::addForeignKey*			public
>
 addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete='null', $update='null')
<
(\yii\db\Command) The command object itself


    [$name] () 
    [$table] () 
    [$columns] () 
    [$refTable] () 
    [$refColumns] () 
    [$delete] () 
    [$update] () 


*yii/sphinx/Command::dropForeignKey*			public
>
 dropForeignKey($name, $table)
<
(\yii\db\Command) The command object itself


    [$name] () 
    [$table] () 


*yii/sphinx/Command::createIndex*				public
>
 createIndex($name, $table, $columns, $unique='false')
<
(\yii\db\Command) The command object itself


    [$name] () 
    [$table] () 
    [$columns] () 
    [$unique] () 


*yii/sphinx/Command::dropIndex*				public
>
 dropIndex($name, $table)
<
(\yii\db\Command) The command object itself


    [$name] () 
    [$table] () 


*yii/sphinx/Command::resetSequence*			public
>
 resetSequence($table, $value='null')
<
(\yii\db\Command) The command object itself


    [$table] () 
    [$value] () 


*yii/sphinx/Command::checkIntegrity*			public
>
 checkIntegrity($check='true', $schema='\'\'', $table='\'\'')
<
(\yii\db\Command) The command object itself


    [$check] () 
    [$schema] () 
    [$table] () 


*yii/sphinx/Command::replace*				public
>
 replace($index, $columns)
<
(static) The command object itself

 For example,

   $connection->createCommand()->insert('idx_user', [
       'name' => 'Sam',
       'age' => 30,
   ])->execute();

 The method will properly escape the column names, and bind the values to be
 replaced.

 Note that the created command is not executed until 'execute()' is called.
    [$index] (string) The index that new rows will be replaced into.
    [$columns] (array) The column data (name => value) to be replaced into the
    index.


*yii/sphinx/Command::batchReplace*			public
>
 batchReplace($index, $columns, $rows)
<
(static) The command object itself

 For example,

   $connection->createCommand()->batchInsert('idx_user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ])->execute();

 Note that the values in each row must match the corresponding column names.
    [$index] (string) The index that new rows will be replaced.
    [$columns] (array) The column names
    [$rows] (array) The rows to be batch replaced in the index


*yii/sphinx/Command::truncateIndex*			public
>
 truncateIndex($index)
<
(static) The command object itself


    [$index] (string) The index to be truncated. The name will be properly
    quoted by the method.


*yii/sphinx/Command::callSnippets*			public
>
 callSnippets($index, $source, $match, $options='[]')
<
(static) The command object itself


    [$index] (string) Name of the index, from which to take the text
    processing settings.
    [$source] (string|array) Is the source data to extract a snippet from. It
    could be either a single string or array of strings.
    [$match] (string) The full-text query to build snippets for.
    [$options] (array) List of options in format: optionName => optionValue


*yii/sphinx/Command::callKeywords*			public
>
 callKeywords($index, $text, $fetchStatistic='false')
<
(string) The SQL statement for call keywords.


    [$index] (string) The name of the index from which to take the text
    processing settings
    [$text] (string) The text to break down to keywords.
    [$fetchStatistic] (boolean) Whether to return document and hit occurrence
    statistics



 vim:tw=78:ts=8:ft=help:norl:
