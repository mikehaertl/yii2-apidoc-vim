
*yii/rbac/DbManager*   >> |yii/rbac/BaseManager|
====================

DESCRIPTION
------------------------------------------------------------------------------

 The database connection is specified by 'db'. The database schema could be
 initialized by applying migration:

 ''' yii migrate --migrationPath=@yii/rbac/migrations/ '''

 If you don't want to use migration and need SQL instead, files for all
 databases are in migrations directory.

 You may change the names of the tables used to store the authorization and
 rule data by setting 'itemTable', 'itemChildTable', 'assignmentTable' and
 'ruleTable'.

 For more details and usage information on DbManager, see the [guide article
 on security authorization](guide:security-authorization).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/rbac/BaseManager::$defaultRoles|
 |yii/base/Component::$behaviors|
 |yii/rbac/BaseManager::$roles|
 |yii/rbac/BaseManager::$defaultRoleInstances|
 |yii/rbac/BaseManager::$permissions|


$db					*yii/rbac/DbManager::$db*

 (\yii\db\Connection|array|string) The DB connection object or the application
 component ID of the DB connection. After the DbManager object is created, if
 you want to change this property, you should only assign it with a DB
 connection object. Starting from version 2.0.2, this can also be a
 configuration array for creating the object.

$itemTable				*yii/rbac/DbManager::$itemTable*

 (string) The name of the table storing authorization items. Defaults to
 "auth_item".

$itemChildTable				*yii/rbac/DbManager::$itemChildTable*

 (string) The name of the table storing authorization item hierarchy. Defaults
 to "auth_item_child".

$assignmentTable			*yii/rbac/DbManager::$assignmentTable*

 (string) The name of the table storing authorization item assignments.
 Defaults to "auth_assignment".

$ruleTable				*yii/rbac/DbManager::$ruleTable*

 (string) The name of the table storing rules. Defaults to "auth_rule".

$cache					*yii/rbac/DbManager::$cache*

 (\yii\caching\CacheInterface|array|string) The cache used to improve RBAC
 performance. This can be one of the following:


   - an application component ID (e.g. 'cache') 
   - a configuration array 
   - a '\yii\caching\Cache' object

 When this is not set, it means caching is not enabled.

 Note that by enabling RBAC cache, all auth items, rules and auth item
 parent-child relationships will be cached and loaded into memory. This will
 improve the performance of RBAC permission check. However, it does require
 extra memory and as a result may not be appropriate if your RBAC system
 contains too many auth items. You should seek other RBAC implementations
 (e.g. RBAC based on Redis storage) in this case.

 Also note that if you modify RBAC items, rules or parent-child relationships
 from outside of this component, you have to manually call 'invalidateCache()'
 to ensure data consistency.

$cacheKey				*yii/rbac/DbManager::$cacheKey*

 (string) The key used to store RBAC data in cache

$items					*yii/rbac/DbManager::$items*

 (\yii\rbac\Item[]) All auth items (name => Item)

$rules					*yii/rbac/DbManager::$rules*

 (\yii\rbac\Rule[]) All auth rules (name => Rule)

$parents				*yii/rbac/DbManager::$parents*

 (array) Auth item parent-child relationships (childName => list of parents)



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/rbac/BaseManager::createRole|
 |yii/rbac/BaseManager::createPermission|
 |yii/rbac/BaseManager::add|
 |yii/rbac/BaseManager::remove|
 |yii/rbac/BaseManager::update|
 |yii/rbac/BaseManager::getRole|
 |yii/rbac/BaseManager::getPermission|
 |yii/rbac/BaseManager::getRoles|
 |yii/rbac/BaseManager::setDefaultRoles|
 |yii/rbac/BaseManager::getDefaultRoles|
 |yii/rbac/BaseManager::getDefaultRoleInstances|
 |yii/rbac/BaseManager::getPermissions|
 |yii/rbac/BaseManager::executeRule|
 |yii/rbac/BaseManager::hasNoAssignments|


*yii/rbac/DbManager::init*				public
>
 init()
<
return (void)

 Initializes the application component.

 This method overrides the parent implementation by establishing the database
 connection.


*yii/rbac/DbManager::getItem*				protected
>
 getItem($name)
<
return (\yii\rbac\Item) The auth item corresponding to the specified name. Null is
returned if no such item.

 Returns the named auth item.







    [$name] (string) The auth item name.


*yii/rbac/DbManager::getItems*				protected
>
 getItems($type)
<
return (\yii\rbac\Item[]) The auth items of the specified type.

 Returns the items of the specified type.







    [$type] (int) The auth item type (either 'Item::TYPE_ROLE' or
    'Item::TYPE_PERMISSION'


*yii/rbac/DbManager::addItem*				protected
>
 addItem($item)
<
return (bool) Whether the auth item is successfully added to the system

 Adds an auth item to the RBAC system.







    [$item] (\yii\rbac\Item) The item to add


*yii/rbac/DbManager::addRule*				protected
>
 addRule($rule)
<
return (bool) Whether the rule is successfully added to the system

 Adds a rule to the RBAC system.







    [$rule] (\yii\rbac\Rule) The rule to add


*yii/rbac/DbManager::removeItem*				protected
>
 removeItem($item)
<
return (bool) Whether the role or permission is successfully removed

 Removes an auth item from the RBAC system.







    [$item] (\yii\rbac\Item) The item to remove


*yii/rbac/DbManager::removeRule*				protected
>
 removeRule($rule)
<
return (bool) Whether the rule is successfully removed

 Removes a rule from the RBAC system.







    [$rule] (\yii\rbac\Rule) The rule to remove


*yii/rbac/DbManager::updateItem*				protected
>
 updateItem($name, $item)
<
return (bool) Whether the auth item is successfully updated

 Updates an auth item in the RBAC system.







    [$name] (string) The name of the item being updated
    [$item] (\yii\rbac\Item) The updated item


*yii/rbac/DbManager::updateRule*				protected
>
 updateRule($name, $rule)
<
return (bool) Whether the rule is successfully updated

 Updates a rule to the RBAC system.







    [$name] (string) The name of the rule being updated
    [$rule] (\yii\rbac\Rule) The updated rule


*yii/rbac/DbManager::getRolesByUser*			public
>
 getRolesByUser($userId)
<
return (void)

 {@inheritdoc} The roles returned by this method include the roles assigned
 via '$defaultRoles'.

    [$userId] () 


*yii/rbac/DbManager::getChildRoles*			public
>
 getChildRoles($roleName)
<
return (\yii\rbac\Role[]) Child roles. The array is indexed by the role names. First
element is an instance of the parent Role itself.

 Returns child roles of the role specified. Depth isn't limited.







    [$roleName] (string) Name of the role to file child roles for


*yii/rbac/DbManager::getPermissionsByRole*		public
>
 getPermissionsByRole($roleName)
<
return (\yii\rbac\Permission[]) All permissions that the role represents. The array
is indexed by the permission names.

 Returns all permissions that the specified role represents.







    [$roleName] (string) The role name


*yii/rbac/DbManager::getPermissionsByUser*		public
>
 getPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All permissions that the user has. The array is
indexed by the permission names.

 Returns all permissions that the user has.







    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getRule*				public
>
 getRule($name)
<
return (null|\yii\rbac\Rule) The rule object, or null if the specified name does not
correspond to a rule.

 Returns the rule of the specified name.







    [$name] (string) The rule name


*yii/rbac/DbManager::getRules*				public
>
 getRules()
<
return (\yii\rbac\Rule[]) The rules indexed by the rule names

 Returns all rules available in the system.








*yii/rbac/DbManager::canAddChild*				public
>
 canAddChild($parent, $child)
<
return (bool) Possibility of adding

 Checks the possibility of adding a child to parent.







    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy


*yii/rbac/DbManager::addChild*				public
>
 addChild($parent, $child)
<
return (bool) Whether the child successfully added

 Adds an item as a child of another item.







    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/DbManager::removeChild*				public
>
 removeChild($parent, $child)
<
return (bool) Whether the removal is successful

 Removes a child from its parent.



 Note, the child item is not deleted. Only the parent-child relationship is
 removed.



    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/DbManager::removeChildren*			public
>
 removeChildren($parent)
<
return (bool) Whether the removal is successful

 Removed all children form their parent.



 Note, the children items are not deleted. Only the parent-child relationships
 are removed.



    [$parent] (\yii\rbac\Item) 


*yii/rbac/DbManager::hasChild*				public
>
 hasChild($parent, $child)
<
return (bool) Whether '$child' is already a child of '$parent'

 Returns a value indicating whether the child already exists for the parent.







    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/DbManager::getChildren*				public
>
 getChildren($name)
<
return (\yii\rbac\Item[]) The child permissions and/or roles

 Returns the child permissions and/or roles.







    [$name] (string) The parent name


*yii/rbac/DbManager::assign*				public
>
 assign($role, $userId)
<
return (\yii\rbac\Assignment) The role assignment information.

 Assigns a role to a user.







    [$role] (\yii\rbac\Role|\yii\rbac\Permission) 
    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::revoke*				public
>
 revoke($role, $userId)
<
return (bool) Whether the revoking is successful

 Revokes a role from a user.







    [$role] (\yii\rbac\Role|\yii\rbac\Permission) 
    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::revokeAll*				public
>
 revokeAll($userId)
<
return (bool) Whether the revoking is successful

 Revokes all roles from a user.







    [$userId] (mixed) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getAssignment*			public
>
 getAssignment($roleName, $userId)
<
return (null|\yii\rbac\Assignment) The assignment information. Null is returned if
the role is not assigned to the user.

 Returns the assignment information regarding a role and a user.







    [$roleName] (string) The role name
    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getAssignments*			public
>
 getAssignments($userId)
<
return (\yii\rbac\Assignment[]) The assignments indexed by role names. An empty array
will be returned if there is no role assigned to the user.

 Returns all role assignment information for the specified user.







    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getUserIdsByRole*			public
>
 getUserIdsByRole($roleName)
<
return (string[]) The ids. An empty array will be returned if role is not assigned to
any user.

 Returns all role assignment information for the specified role.

    [$roleName] (string) 


*yii/rbac/DbManager::removeAll*				public
>
 removeAll()
<
return (void)

 Removes all authorization data, including roles, permissions, rules, and
 assignments.








*yii/rbac/DbManager::removeAllPermissions*		public
>
 removeAllPermissions()
<
return (void)

 Removes all permissions.



 All parent child relations will be adjusted accordingly.




*yii/rbac/DbManager::removeAllRoles*			public
>
 removeAllRoles()
<
return (void)

 Removes all roles.



 All parent child relations will be adjusted accordingly.




*yii/rbac/DbManager::removeAllRules*			public
>
 removeAllRules()
<
return (void)

 Removes all rules.



 All roles and permissions which have rules will be adjusted accordingly.




*yii/rbac/DbManager::removeAllAssignments*		public
>
 removeAllAssignments()
<
return (void)

 Removes all role assignments.








*yii/rbac/DbManager::checkAccess*				public
>
 checkAccess($userId, $permissionName, $params='[]')
<
return (void)

    [$userId] () 
    [$permissionName] () 
    [$params] () 


*yii/rbac/DbManager::checkAccessFromCache*		protected
>
 checkAccessFromCache($user, $itemName, $params, $assignments)
<
return (bool) Whether the operations can be performed by the user.

 Performs access check for the specified user based on the data loaded from
 cache.

 This method is internally called by 'checkAccess()' when 'cache' is enabled.

    [$user] (string|int) The user ID. This should can be either an integer or
    a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/rbac/DbManager::checkAccessRecursive*		protected
>
 checkAccessRecursive($user, $itemName, $params, $assignments)
<
return (bool) Whether the operations can be performed by the user.

 Performs access check for the specified user.

 This method is internally called by 'checkAccess()'.

    [$user] (string|int) The user ID. This should can be either an integer or
    a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/rbac/DbManager::supportsCascadeUpdate*		protected
>
 supportsCascadeUpdate()
<
return (bool) Whether the database supports cascading update and delete.

 Returns a value indicating whether the database supports cascading update and
 delete.

 The default implementation will return false for SQLite database and true for
 all other databases.


*yii/rbac/DbManager::populateItem*			protected
>
 populateItem($row)
<
return (\yii\rbac\Item) The populated auth item instance (either Role or Permission)

 Populates an auth item with the data fetched from database.

    [$row] (array) The data from the auth item table


*yii/rbac/DbManager::getDirectPermissionsByUser*		protected
>
 getDirectPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All direct permissions that the user has. The array
is indexed by the permission names.

 Returns all permissions that are directly assigned to user.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getInheritedPermissionsByUser*	protected
>
 getInheritedPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All inherited permissions that the user has. The
array is indexed by the permission names.

 Returns all permissions that the user inherits from the roles assigned to
 him.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getChildrenList*			protected
>
 getChildrenList()
<
return (array) The children list. Each array key is a parent item name, and the
corresponding array value is a list of child item names.

 Returns the children for every parent.


*yii/rbac/DbManager::getChildrenRecursive*		protected
>
 getChildrenRecursive($name, $childrenList, $result)
<
return (void)

 Recursively finds all children and grand children of the specified item.

    [$name] (string) The name of the item whose children are to be looked for.
    [$childrenList] (array) The child list built via 'getChildrenList()'
    [$result] (array) The children and grand children (in array keys)


*yii/rbac/DbManager::detectLoop*				protected
>
 detectLoop($parent, $child)
<
return (bool) Whether a loop exists

 Checks whether there is a loop in the authorization item hierarchy.

    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy


*yii/rbac/DbManager::removeAllItems*			protected
>
 removeAllItems($type)
<
return (void)

 Removes all auth items of the specified type.

    [$type] (int) The auth item type (either Item::TYPE_PERMISSION or
    Item::TYPE_ROLE)


*yii/rbac/DbManager::invalidateCache*			public
>
 invalidateCache()
<
return (void)



*yii/rbac/DbManager::loadFromCache*			public
>
 loadFromCache()
<
return (void)



*yii/rbac/DbManager::isEmptyUserId*			protected
>
 isEmptyUserId($userId)
<
return (bool) 

 Check whether $userId is empty.

    [$userId] (mixed) 



 vim:tw=78:ts=8:ft=help:norl:
