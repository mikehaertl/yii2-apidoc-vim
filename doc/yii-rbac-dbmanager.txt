
*yii/rbac/DbManager*   >> |yii/rbac/BaseManager|
====================

DESCRIPTION
------------------------------------------------------------------------------

 The database connection is specified by 'db'. The database schema could be
 initialized by applying migration:

 ''' yii migrate --migrationPath=@yii/rbac/migrations/ '''

 If you don't want to use migration and need SQL instead, files for all
 databases are in migrations directory.

 You may change the names of the three tables used to store the authorization
 data by setting 'itemTable', 'itemChildTable' and 'assignmentTable'.


PROPERTY DETAILS
------------------------------------------------------------------------------

$defaultRoles				*yii/rbac/DbManager::$defaultRoles*
 See |yii/rbac/BaseManager::$defaultRoles|

$db					*yii/rbac/DbManager::$db*
 (\yii\db\Connection|string) The DB connection object or the application
 component ID of the DB connection. After the DbManager object is created, if
 you want to change this property, you should only assign it with a DB
 connection object.

$itemTable				*yii/rbac/DbManager::$itemTable*
 (string) The name of the table storing authorization items. Defaults to
 "auth_item".

$itemChildTable				*yii/rbac/DbManager::$itemChildTable*
 (string) The name of the table storing authorization item hierarchy. Defaults
 to "auth_item_child".

$assignmentTable			*yii/rbac/DbManager::$assignmentTable*
 (string) The name of the table storing authorization item assignments.
 Defaults to "auth_assignment".

$ruleTable				*yii/rbac/DbManager::$ruleTable*
 (string) The name of the table storing rules. Defaults to "auth_rule".

$behaviors				*yii/rbac/DbManager::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$roles					*yii/rbac/DbManager::$roles*
 (\yii\rbac\Role[]) All roles in the system. The array is indexed by the role
 names.

$permissions				*yii/rbac/DbManager::$permissions*
 (\yii\rbac\Permission[]) All permissions in the system. The array is indexed
 by the permission names.

$rules					*yii/rbac/DbManager::$rules*
 (\yii\rbac\Rule[]) The rules indexed by the rule names



METHOD DETAILS
------------------------------------------------------------------------------

*yii/rbac/DbManager::className*				public
 See |yii/base/Object::className|


*yii/rbac/DbManager::__construct*				public
 See |yii/base/Object::__construct|


*yii/rbac/DbManager::init*				public
>
 init()
<
(void)

 This method overrides the parent implementation by establishing the database
 connection.


*yii/rbac/DbManager::__get*				public
 See |yii/base/Component::__get|


*yii/rbac/DbManager::__set*				public
 See |yii/base/Component::__set|


*yii/rbac/DbManager::__isset*				public
 See |yii/base/Component::__isset|


*yii/rbac/DbManager::__unset*				public
 See |yii/base/Component::__unset|


*yii/rbac/DbManager::__call*				public
 See |yii/base/Component::__call|


*yii/rbac/DbManager::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/rbac/DbManager::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/rbac/DbManager::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/rbac/DbManager::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/rbac/DbManager::__clone*				public
 See |yii/base/Component::__clone|


*yii/rbac/DbManager::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/rbac/DbManager::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/rbac/DbManager::on*					public
 See |yii/base/Component::on|


*yii/rbac/DbManager::off*					public
 See |yii/base/Component::off|


*yii/rbac/DbManager::trigger*				public
 See |yii/base/Component::trigger|


*yii/rbac/DbManager::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/rbac/DbManager::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/rbac/DbManager::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/rbac/DbManager::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/rbac/DbManager::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/rbac/DbManager::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/rbac/DbManager::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/rbac/DbManager::getItem*				protected
>
 getItem($name)
<
(\yii\rbac\Item) The auth item corresponding to the specified name. Null is
returned if no such item.

    [$name] (string) The auth item name.


*yii/rbac/DbManager::getItems*				protected
>
 getItems($type)
<
(\yii\rbac\Item[]) The auth items of the specified type.

    [$type] (integer) The auth item type (either 'Item::TYPE_ROLE' or
    'Item::TYPE_PERMISSION'


*yii/rbac/DbManager::addItem*				protected
>
 addItem($item)
<
(boolean) Whether the auth item is successfully added to the system

    [$item] (\yii\rbac\Item) 


*yii/rbac/DbManager::addRule*				protected
>
 addRule($rule)
<
(boolean) Whether the rule is successfully added to the system

    [$rule] (\yii\rbac\Rule) 


*yii/rbac/DbManager::removeItem*				protected
>
 removeItem($item)
<
(boolean) Whether the role or permission is successfully removed

    [$item] (\yii\rbac\Item) 


*yii/rbac/DbManager::removeRule*				protected
>
 removeRule($rule)
<
(boolean) Whether the rule is successfully removed

    [$rule] (\yii\rbac\Rule) 


*yii/rbac/DbManager::updateItem*				protected
>
 updateItem($name, $item)
<
(boolean) Whether the auth item is successfully updated

    [$name] (string) The old name of the auth item
    [$item] (\yii\rbac\Item) 


*yii/rbac/DbManager::updateRule*				protected
>
 updateRule($name, $rule)
<
(boolean) Whether the rule is successfully updated

    [$name] (string) The old name of the rule
    [$rule] (\yii\rbac\Rule) 


*yii/rbac/DbManager::createRole*				public
 See |yii/rbac/BaseManager::createRole|


*yii/rbac/DbManager::createPermission*			public
 See |yii/rbac/BaseManager::createPermission|


*yii/rbac/DbManager::add*					public
 See |yii/rbac/BaseManager::add|


*yii/rbac/DbManager::remove*				public
 See |yii/rbac/BaseManager::remove|


*yii/rbac/DbManager::update*				public
 See |yii/rbac/BaseManager::update|


*yii/rbac/DbManager::getRole*				public
 See |yii/rbac/BaseManager::getRole|


*yii/rbac/DbManager::getPermission*			public
 See |yii/rbac/BaseManager::getPermission|


*yii/rbac/DbManager::getRoles*				public
 See |yii/rbac/BaseManager::getRoles|


*yii/rbac/DbManager::getPermissions*			public
 See |yii/rbac/BaseManager::getPermissions|


*yii/rbac/DbManager::executeRule*				protected
 See |yii/rbac/BaseManager::executeRule|


*yii/rbac/DbManager::checkAccess*				public
>
 checkAccess($userId, $permissionName, $params='[]')
<
(boolean) Whether the user has the specified permission.

    [$userId] (string|integer) The user ID. This should be either an integer
    or a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$permissionName] (string) The name of the permission to be checked
    against
    [$params] (array) Name-value pairs that will be passed to the rules
    associated with the roles and permissions assigned to the user.


*yii/rbac/DbManager::getRolesByUser*			public
>
 getRolesByUser($userId)
<
(\yii\rbac\Role[]) All roles directly or indirectly assigned to the user. The
array is indexed by the role names.

 Note that child roles that are not assigned directly to the user will not be
 returned.
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getPermissionsByRole*		public
>
 getPermissionsByRole($roleName)
<
(\yii\rbac\Permission[]) All permissions that the role represents. The array
is indexed by the permission names.

    [$roleName] (string) The role name


*yii/rbac/DbManager::getPermissionsByUser*		public
>
 getPermissionsByUser($userId)
<
(\yii\rbac\Permission[]) All permissions that the user has. The array is
indexed by the permission names.

    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getRule*				public
>
 getRule($name)
<
(\yii\rbac\Rule) The rule object, or null if the specified name does not
correspond to a rule.

    [$name] (string) The rule name


*yii/rbac/DbManager::getRules*				public
>
 getRules()
<
(\yii\rbac\Rule[]) The rules indexed by the rule names



*yii/rbac/DbManager::addChild*				public
>
 addChild($parent, $child)
<
(void)

    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/DbManager::removeChild*				public
>
 removeChild($parent, $child)
<
(boolean) Whether the removal is successful

 Note, the child item is not deleted. Only the parent-child relationship is
 removed.
    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/DbManager::hasChild*				public
>
 hasChild($parent, $child)
<
(boolean) Whether '$child' is already a child of '$parent'

    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/DbManager::getChildren*				public
>
 getChildren($name)
<
(\yii\rbac\Item[]) The child permissions and/or roles

    [$name] (string) The parent name


*yii/rbac/DbManager::assign*				public
>
 assign($role, $userId)
<
(\yii\rbac\Assignment) The role assignment information.

    [$role] (\yii\rbac\Role) 
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::revoke*				public
>
 revoke($role, $userId)
<
(boolean) Whether the revoking is successful

    [$role] (\yii\rbac\Role) 
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::revokeAll*				public
>
 revokeAll($userId)
<
(boolean) Whether the revoking is successful

    [$userId] (mixed) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getAssignment*			public
>
 getAssignment($roleName, $userId)
<
(\yii\rbac\Assignment) The assignment information. Null is returned if the
role is not assigned to the user.

    [$roleName] (string) The role name
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getAssignments*			public
>
 getAssignments($userId)
<
(\yii\rbac\Assignment[]) The assignments indexed by role names. An empty array
will be returned if there is no role assigned to the user.

    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::removeAll*				public
>
 removeAll()
<
(void)



*yii/rbac/DbManager::removeAllPermissions*		public
>
 removeAllPermissions()
<
(void)

 All parent child relations will be adjusted accordingly.


*yii/rbac/DbManager::removeAllRoles*			public
>
 removeAllRoles()
<
(void)

 All parent child relations will be adjusted accordingly.


*yii/rbac/DbManager::removeAllRules*			public
>
 removeAllRules()
<
(void)

 All roles and permissions which have rules will be adjusted accordingly.


*yii/rbac/DbManager::removeAllAssignments*		public
>
 removeAllAssignments()
<
(void)



*yii/rbac/DbManager::checkAccessRecursive*		protected
>
 checkAccessRecursive($user, $itemName, $params, $assignments)
<
(boolean) Whether the operations can be performed by the user.

 This method is internally called by 'checkAccess()'.
    [$user] (string|integer) The user ID. This should can be either an integer
    or a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/rbac/DbManager::supportsCascadeUpdate*		protected
>
 supportsCascadeUpdate()
<
(boolean) Whether the database supports cascading update and delete.

 The default implementation will return false for SQLite database and true for
 all other databases.


*yii/rbac/DbManager::populateItem*			protected
>
 populateItem($row)
<
(\yii\rbac\Item) The populated auth item instance (either Role or Permission)

    [$row] (array) The data from the auth item table


*yii/rbac/DbManager::getChildrenList*			protected
>
 getChildrenList()
<
(array) The children list. Each array key is a parent item name, and the
corresponding array value is a list of child item names.



*yii/rbac/DbManager::getChildrenRecursive*		protected
>
 getChildrenRecursive($name, $childrenList, $result)
<
(void)

    [$name] (string) The name of the item whose children are to be looked for.
    [$childrenList] (array) The child list built via 'getChildrenList()'
    [$result] (array) The children and grand children (in array keys)


*yii/rbac/DbManager::detectLoop*				protected
>
 detectLoop($parent, $child)
<
(boolean) Whether a loop exists

    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy


*yii/rbac/DbManager::removeAllItems*			protected
>
 removeAllItems($type)
<
(void)

    [$type] (integer) The auth item type (either Item::TYPE_PERMISSION or
    Item::TYPE_ROLE)



 vim:tw=78:ts=8:ft=help:norl:
