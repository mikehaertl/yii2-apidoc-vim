
*yii/rbac/DbManager*   >> |yii/rbac/BaseManager|
====================

DESCRIPTION
------------------------------------------------------------------------------

 The database connection is specified by 'db'. The database schema could be
 initialized by applying migration:

 ''' yii migrate --migrationPath=@yii/rbac/migrations/ '''

 If you don't want to use migration and need SQL instead, files for all
 databases are in migrations directory.

 You may change the names of the tables used to store the authorization and
 rule data by setting 'itemTable', 'itemChildTable', 'assignmentTable' and
 'ruleTable'.

 For more details and usage information on DbManager, see the [guide article
 on security authorization](guide:security-authorization).


PROPERTY DETAILS
------------------------------------------------------------------------------

$defaultRoles				*yii/rbac/DbManager::$defaultRoles*

 See |yii/rbac/BaseManager::$defaultRoles|

$db					*yii/rbac/DbManager::$db*

 (\yii\db\Connection|array|string) The DB connection object or the application
 component ID of the DB connection. After the DbManager object is created, if
 you want to change this property, you should only assign it with a DB
 connection object. Starting from version 2.0.2, this can also be a
 configuration array for creating the object.

$itemTable				*yii/rbac/DbManager::$itemTable*

 (string) The name of the table storing authorization items. Defaults to
 "auth_item".

$itemChildTable				*yii/rbac/DbManager::$itemChildTable*

 (string) The name of the table storing authorization item hierarchy. Defaults
 to "auth_item_child".

$assignmentTable			*yii/rbac/DbManager::$assignmentTable*

 (string) The name of the table storing authorization item assignments.
 Defaults to "auth_assignment".

$ruleTable				*yii/rbac/DbManager::$ruleTable*

 (string) The name of the table storing rules. Defaults to "auth_rule".

$cache					*yii/rbac/DbManager::$cache*

 (\yii\caching\CacheInterface|array|string) The cache used to improve RBAC
 performance. This can be one of the following:


   - an application component ID (e.g. 'cache') 
   - a configuration array 
   - a '\yii\caching\Cache' object

 When this is not set, it means caching is not enabled.

 Note that by enabling RBAC cache, all auth items, rules and auth item
 parent-child relationships will be cached and loaded into memory. This will
 improve the performance of RBAC permission check. However, it does require
 extra memory and as a result may not be appropriate if your RBAC system
 contains too many auth items. You should seek other RBAC implementations
 (e.g. RBAC based on Redis storage) in this case.

 Also note that if you modify RBAC items, rules or parent-child relationships
 from outside of this component, you have to manually call 'invalidateCache()'
 to ensure data consistency.

$cacheKey				*yii/rbac/DbManager::$cacheKey*

 (string) The key used to store RBAC data in cache

$items					*yii/rbac/DbManager::$items*

 (\yii\rbac\Item[]) All auth items (name => Item)

$rules					*yii/rbac/DbManager::$rules*

 (\yii\rbac\Rule[]) All auth rules (name => Rule)

$parents				*yii/rbac/DbManager::$parents*

 (array) Auth item parent-child relationships (childName => list of parents)



METHOD DETAILS
------------------------------------------------------------------------------


*yii/rbac/DbManager::className*				public

 See |yii/base/BaseObject::className|


*yii/rbac/DbManager::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/rbac/DbManager::init*				public
>
 init()
<
return (void)

 Initializes the application component.

 This method overrides the parent implementation by establishing the database
 connection.


*yii/rbac/DbManager::__get*				public

 See |yii/base/Component::__get|


*yii/rbac/DbManager::__set*				public

 See |yii/base/Component::__set|


*yii/rbac/DbManager::__isset*				public

 See |yii/base/Component::__isset|


*yii/rbac/DbManager::__unset*				public

 See |yii/base/Component::__unset|


*yii/rbac/DbManager::__call*				public

 See |yii/base/Component::__call|


*yii/rbac/DbManager::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/rbac/DbManager::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/rbac/DbManager::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/rbac/DbManager::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/rbac/DbManager::__clone*				public

 See |yii/base/Component::__clone|


*yii/rbac/DbManager::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/rbac/DbManager::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/rbac/DbManager::on*					public

 See |yii/base/Component::on|


*yii/rbac/DbManager::off*					public

 See |yii/base/Component::off|


*yii/rbac/DbManager::trigger*				public

 See |yii/base/Component::trigger|


*yii/rbac/DbManager::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/rbac/DbManager::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/rbac/DbManager::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/rbac/DbManager::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/rbac/DbManager::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/rbac/DbManager::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/rbac/DbManager::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/rbac/DbManager::getItem*				protected
>
 getItem($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/DbManager::getItems*				protected
>
 getItems($type)
<
return (void)

 {@inheritdoc}

    [$type] () 


*yii/rbac/DbManager::addItem*				protected
>
 addItem($item)
<
return (void)

 {@inheritdoc}

    [$item] () 


*yii/rbac/DbManager::addRule*				protected
>
 addRule($rule)
<
return (void)

 {@inheritdoc}

    [$rule] () 


*yii/rbac/DbManager::removeItem*				protected
>
 removeItem($item)
<
return (void)

 {@inheritdoc}

    [$item] () 


*yii/rbac/DbManager::removeRule*				protected
>
 removeRule($rule)
<
return (void)

 {@inheritdoc}

    [$rule] () 


*yii/rbac/DbManager::updateItem*				protected
>
 updateItem($name, $item)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$item] () 


*yii/rbac/DbManager::updateRule*				protected
>
 updateRule($name, $rule)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$rule] () 


*yii/rbac/DbManager::createRole*				public

 See |yii/rbac/BaseManager::createRole|


*yii/rbac/DbManager::createPermission*			public

 See |yii/rbac/BaseManager::createPermission|


*yii/rbac/DbManager::add*					public

 See |yii/rbac/BaseManager::add|


*yii/rbac/DbManager::remove*				public

 See |yii/rbac/BaseManager::remove|


*yii/rbac/DbManager::update*				public

 See |yii/rbac/BaseManager::update|


*yii/rbac/DbManager::getRole*				public

 See |yii/rbac/BaseManager::getRole|


*yii/rbac/DbManager::getPermission*			public

 See |yii/rbac/BaseManager::getPermission|


*yii/rbac/DbManager::getRoles*				public

 See |yii/rbac/BaseManager::getRoles|


*yii/rbac/DbManager::setDefaultRoles*			public

 See |yii/rbac/BaseManager::setDefaultRoles|


*yii/rbac/DbManager::getDefaultRoles*			public

 See |yii/rbac/BaseManager::getDefaultRoles|


*yii/rbac/DbManager::getDefaultRoleInstances*		public

 See |yii/rbac/BaseManager::getDefaultRoleInstances|


*yii/rbac/DbManager::getPermissions*			public

 See |yii/rbac/BaseManager::getPermissions|


*yii/rbac/DbManager::executeRule*				protected

 See |yii/rbac/BaseManager::executeRule|


*yii/rbac/DbManager::hasNoAssignments*			protected

 See |yii/rbac/BaseManager::hasNoAssignments|


*yii/rbac/DbManager::getRolesByUser*			public
>
 getRolesByUser($userId)
<
return (void)

 {@inheritdoc} The roles returned by this method include the roles assigned
 via '$defaultRoles'.

    [$userId] () 


*yii/rbac/DbManager::getChildRoles*			public
>
 getChildRoles($roleName)
<
return (void)

 {@inheritdoc}

    [$roleName] () 


*yii/rbac/DbManager::getPermissionsByRole*		public
>
 getPermissionsByRole($roleName)
<
return (void)

 {@inheritdoc}

    [$roleName] () 


*yii/rbac/DbManager::getPermissionsByUser*		public
>
 getPermissionsByUser($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/rbac/DbManager::getRule*				public
>
 getRule($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/DbManager::getRules*				public
>
 getRules()
<
return (void)

 {@inheritdoc}


*yii/rbac/DbManager::canAddChild*				public
>
 canAddChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/rbac/DbManager::addChild*				public
>
 addChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/rbac/DbManager::removeChild*				public
>
 removeChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/rbac/DbManager::removeChildren*			public
>
 removeChildren($parent)
<
return (void)

 {@inheritdoc}

    [$parent] () 


*yii/rbac/DbManager::hasChild*				public
>
 hasChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/rbac/DbManager::getChildren*				public
>
 getChildren($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/DbManager::assign*				public
>
 assign($role, $userId)
<
return (void)

 {@inheritdoc}

    [$role] () 
    [$userId] () 


*yii/rbac/DbManager::revoke*				public
>
 revoke($role, $userId)
<
return (void)

 {@inheritdoc}

    [$role] () 
    [$userId] () 


*yii/rbac/DbManager::revokeAll*				public
>
 revokeAll($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/rbac/DbManager::getAssignment*			public
>
 getAssignment($roleName, $userId)
<
return (void)

 {@inheritdoc}

    [$roleName] () 
    [$userId] () 


*yii/rbac/DbManager::getAssignments*			public
>
 getAssignments($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/rbac/DbManager::getUserIdsByRole*			public
>
 getUserIdsByRole($roleName)
<
return (string[]) The ids. An empty array will be returned if role is not assigned to
any user.

 Returns all role assignment information for the specified role.

    [$roleName] (string) 


*yii/rbac/DbManager::removeAll*				public
>
 removeAll()
<
return (void)

 {@inheritdoc}


*yii/rbac/DbManager::removeAllPermissions*		public
>
 removeAllPermissions()
<
return (void)

 {@inheritdoc}


*yii/rbac/DbManager::removeAllRoles*			public
>
 removeAllRoles()
<
return (void)

 {@inheritdoc}


*yii/rbac/DbManager::removeAllRules*			public
>
 removeAllRules()
<
return (void)

 {@inheritdoc}


*yii/rbac/DbManager::removeAllAssignments*		public
>
 removeAllAssignments()
<
return (void)

 {@inheritdoc}


*yii/rbac/DbManager::checkAccess*				public
>
 checkAccess($userId, $permissionName, $params='[]')
<
return (void)

 {@inheritdoc}

    [$userId] () 
    [$permissionName] () 
    [$params] () 


*yii/rbac/DbManager::checkAccessFromCache*		protected
>
 checkAccessFromCache($user, $itemName, $params, $assignments)
<
return (bool) Whether the operations can be performed by the user.

 Performs access check for the specified user based on the data loaded from
 cache.

 This method is internally called by 'checkAccess()' when 'cache' is enabled.

    [$user] (string|int) The user ID. This should can be either an integer or
    a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/rbac/DbManager::checkAccessRecursive*		protected
>
 checkAccessRecursive($user, $itemName, $params, $assignments)
<
return (bool) Whether the operations can be performed by the user.

 Performs access check for the specified user.

 This method is internally called by 'checkAccess()'.

    [$user] (string|int) The user ID. This should can be either an integer or
    a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/rbac/DbManager::supportsCascadeUpdate*		protected
>
 supportsCascadeUpdate()
<
return (bool) Whether the database supports cascading update and delete.

 Returns a value indicating whether the database supports cascading update and
 delete.

 The default implementation will return false for SQLite database and true for
 all other databases.


*yii/rbac/DbManager::populateItem*			protected
>
 populateItem($row)
<
return (\yii\rbac\Item) The populated auth item instance (either Role or Permission)

 Populates an auth item with the data fetched from database.

    [$row] (array) The data from the auth item table


*yii/rbac/DbManager::getDirectPermissionsByUser*		protected
>
 getDirectPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All direct permissions that the user has. The array
is indexed by the permission names.

 Returns all permissions that are directly assigned to user.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getInheritedPermissionsByUser*	protected
>
 getInheritedPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All inherited permissions that the user has. The
array is indexed by the permission names.

 Returns all permissions that the user inherits from the roles assigned to
 him.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/DbManager::getChildrenList*			protected
>
 getChildrenList()
<
return (array) The children list. Each array key is a parent item name, and the
corresponding array value is a list of child item names.

 Returns the children for every parent.


*yii/rbac/DbManager::getChildrenRecursive*		protected
>
 getChildrenRecursive($name, $childrenList, $result)
<
return (void)

 Recursively finds all children and grand children of the specified item.

    [$name] (string) The name of the item whose children are to be looked for.
    [$childrenList] (array) The child list built via 'getChildrenList()'
    [$result] (array) The children and grand children (in array keys)


*yii/rbac/DbManager::detectLoop*				protected
>
 detectLoop($parent, $child)
<
return (bool) Whether a loop exists

 Checks whether there is a loop in the authorization item hierarchy.

    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy


*yii/rbac/DbManager::removeAllItems*			protected
>
 removeAllItems($type)
<
return (void)

 Removes all auth items of the specified type.

    [$type] (int) The auth item type (either Item::TYPE_PERMISSION or
    Item::TYPE_ROLE)


*yii/rbac/DbManager::invalidateCache*			public
>
 invalidateCache()
<
return (void)



*yii/rbac/DbManager::loadFromCache*			public
>
 loadFromCache()
<
return (void)




 vim:tw=78:ts=8:ft=help:norl:
