
*yii/console/controllers/BaseMigrateController*   >> |yii/console/Controller|
===============================================

SUBCLASSES
------------------------------------------------------------------------------

|yii/console/controllers/MigrateController|
|yii/mongodb/console/controllers/MigrateController|


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/console/controllers/BaseMigrateController::$id*

 See |yii/base/Controller::$id|

$module					*yii/console/controllers/BaseMigrateController::$module*

 See |yii/base/Controller::$module|

$defaultAction				*yii/console/controllers/BaseMigrateController::$defaultAction*

 (string) The default command action.

$layout					*yii/console/controllers/BaseMigrateController::$layout*

 See |yii/base/Controller::$layout|

$action					*yii/console/controllers/BaseMigrateController::$action*

 See |yii/base/Controller::$action|

$interactive				*yii/console/controllers/BaseMigrateController::$interactive*

 See |yii/console/Controller::$interactive|

$color					*yii/console/controllers/BaseMigrateController::$color*

 See |yii/console/Controller::$color|

$help					*yii/console/controllers/BaseMigrateController::$help*

 See |yii/console/Controller::$help|

$migrationPath				*yii/console/controllers/BaseMigrateController::$migrationPath*

 (string|array) The directory containing the migration classes. This can be
 either a [path alias](guide:concept-aliases) or a directory path.

 Migration classes located at this path should be declared without a
 namespace. Use 'migrationNamespaces' property in case you are using
 namespaced migrations.

 If you have set up 'migrationNamespaces', you may set this field to 'null' in
 order to disable usage of migrations that are not namespaced.

 Since version 2.0.12 you may also specify an array of migration paths that
 should be searched for migrations to load. This is mainly useful to support
 old extensions that provide migrations without namespace and to adopt the new
 feature of namespaced migrations while keeping existing migrations.

 In general, to load migrations from different locations,
 'migrationNamespaces' is the preferable solution as the migration name
 contains the origin of the migration in the history, which is not the case
 when using multiple migration paths.

$migrationNamespaces			*yii/console/controllers/BaseMigrateController::$migrationNamespaces*

 (array) List of namespaces containing the migration classes.

 Migration namespaces should be resolvable as a [path
 alias](guide:concept-aliases) if prefixed with '@', e.g. if you specify the
 namespace 'app\migrations', the code 'Yii::getAlias('@app/migrations')'
 should be able to return the file path to the directory this namespace refers
 to. This corresponds with the [autoloading
 conventions](guide:concept-autoloading) of Yii.

 For example:

   [
       'app\migrations',
       'some\extension\migrations',
   ]



$templateFile				*yii/console/controllers/BaseMigrateController::$templateFile*

 (string) The template file for generating new migrations. This can be either
 a [path alias](guide:concept-aliases) (e.g. "@app/migrations/template.php")
 or a file path.

$compact				*yii/console/controllers/BaseMigrateController::$compact*

 (bool) Indicates whether the console output should be compacted. If this is
 set to true, the individual commands ran within the migration will not be
 output to the console. Default is false, in other words the output is fully
 verbose by default.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/console/controllers/BaseMigrateController::className*public

 See |yii/base/BaseObject::className|


*yii/console/controllers/BaseMigrateController::__construct*public

 See |yii/base/Controller::__construct|


*yii/console/controllers/BaseMigrateController::init*	public

 See |yii/base/BaseObject::init|


*yii/console/controllers/BaseMigrateController::__get*	public

 See |yii/base/BaseObject::__get|


*yii/console/controllers/BaseMigrateController::__set*	public

 See |yii/base/BaseObject::__set|


*yii/console/controllers/BaseMigrateController::__isset*	public

 See |yii/base/BaseObject::__isset|


*yii/console/controllers/BaseMigrateController::__unset*	public

 See |yii/base/BaseObject::__unset|


*yii/console/controllers/BaseMigrateController::__call*	public

 See |yii/base/BaseObject::__call|


*yii/console/controllers/BaseMigrateController::hasProperty*public

 See |yii/base/BaseObject::hasProperty|


*yii/console/controllers/BaseMigrateController::canGetProperty*public

 See |yii/base/BaseObject::canGetProperty|


*yii/console/controllers/BaseMigrateController::canSetProperty*public

 See |yii/base/BaseObject::canSetProperty|


*yii/console/controllers/BaseMigrateController::hasMethod*public

 See |yii/base/BaseObject::hasMethod|


*yii/console/controllers/BaseMigrateController::__clone*	public

 See |yii/base/Component::__clone|


*yii/console/controllers/BaseMigrateController::behaviors*public

 See |yii/base/Component::behaviors|


*yii/console/controllers/BaseMigrateController::hasEventHandlers*public

 See |yii/base/Component::hasEventHandlers|


*yii/console/controllers/BaseMigrateController::on*	public

 See |yii/base/Component::on|


*yii/console/controllers/BaseMigrateController::off*	public

 See |yii/base/Component::off|


*yii/console/controllers/BaseMigrateController::trigger*	public

 See |yii/base/Component::trigger|


*yii/console/controllers/BaseMigrateController::getBehavior*public

 See |yii/base/Component::getBehavior|


*yii/console/controllers/BaseMigrateController::getBehaviors*public

 See |yii/base/Component::getBehaviors|


*yii/console/controllers/BaseMigrateController::attachBehavior*public

 See |yii/base/Component::attachBehavior|


*yii/console/controllers/BaseMigrateController::attachBehaviors*public

 See |yii/base/Component::attachBehaviors|


*yii/console/controllers/BaseMigrateController::detachBehavior*public

 See |yii/base/Component::detachBehavior|


*yii/console/controllers/BaseMigrateController::detachBehaviors*public

 See |yii/base/Component::detachBehaviors|


*yii/console/controllers/BaseMigrateController::ensureBehaviors*public

 See |yii/base/Component::ensureBehaviors|


*yii/console/controllers/BaseMigrateController::actions*	public

 See |yii/base/Controller::actions|


*yii/console/controllers/BaseMigrateController::runAction*public

 See |yii/console/Controller::runAction|


*yii/console/controllers/BaseMigrateController::run*	public

 See |yii/base/Controller::run|


*yii/console/controllers/BaseMigrateController::bindActionParams*public

 See |yii/console/Controller::bindActionParams|


*yii/console/controllers/BaseMigrateController::createAction*public

 See |yii/base/Controller::createAction|


*yii/console/controllers/BaseMigrateController::beforeAction*public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to be executed.

 This method is invoked right before an action is to be executed (after all
 possible filters.) It checks the existence of the 'migrationPath'.

    [$action] (\yii\base\Action) The action to be executed.


*yii/console/controllers/BaseMigrateController::afterAction*public

 See |yii/base/Controller::afterAction|


*yii/console/controllers/BaseMigrateController::getModules*public

 See |yii/base/Controller::getModules|


*yii/console/controllers/BaseMigrateController::getUniqueId*public

 See |yii/base/Controller::getUniqueId|


*yii/console/controllers/BaseMigrateController::getRoute*	public

 See |yii/base/Controller::getRoute|


*yii/console/controllers/BaseMigrateController::render*	public

 See |yii/base/Controller::render|


*yii/console/controllers/BaseMigrateController::renderContent*public

 See |yii/base/Controller::renderContent|


*yii/console/controllers/BaseMigrateController::renderPartial*public

 See |yii/base/Controller::renderPartial|


*yii/console/controllers/BaseMigrateController::renderFile*public

 See |yii/base/Controller::renderFile|


*yii/console/controllers/BaseMigrateController::getView*	public

 See |yii/base/Controller::getView|


*yii/console/controllers/BaseMigrateController::setView*	public

 See |yii/base/Controller::setView|


*yii/console/controllers/BaseMigrateController::getViewPath*public

 See |yii/base/ViewContextInterface::getViewPath|


*yii/console/controllers/BaseMigrateController::setViewPath*public

 See |yii/base/Controller::setViewPath|


*yii/console/controllers/BaseMigrateController::findLayoutFile*public

 See |yii/base/Controller::findLayoutFile|


*yii/console/controllers/BaseMigrateController::isColorEnabled*public

 See |yii/console/Controller::isColorEnabled|


*yii/console/controllers/BaseMigrateController::ansiFormat*public

 See |yii/console/Controller::ansiFormat|


*yii/console/controllers/BaseMigrateController::stdout*	public

 See |yii/console/Controller::stdout|


*yii/console/controllers/BaseMigrateController::stderr*	public

 See |yii/console/Controller::stderr|


*yii/console/controllers/BaseMigrateController::prompt*	public

 See |yii/console/Controller::prompt|


*yii/console/controllers/BaseMigrateController::confirm*	public

 See |yii/console/Controller::confirm|


*yii/console/controllers/BaseMigrateController::select*	public

 See |yii/console/Controller::select|


*yii/console/controllers/BaseMigrateController::options*	public
>
 options($actionID)
<
return (void)

 {@inheritdoc}

    [$actionID] () 


*yii/console/controllers/BaseMigrateController::optionAliases*public

 See |yii/console/Controller::optionAliases|


*yii/console/controllers/BaseMigrateController::getOptionValues*public

 See |yii/console/Controller::getOptionValues|


*yii/console/controllers/BaseMigrateController::getPassedOptions*public

 See |yii/console/Controller::getPassedOptions|


*yii/console/controllers/BaseMigrateController::getPassedOptionValues*public

 See |yii/console/Controller::getPassedOptionValues|


*yii/console/controllers/BaseMigrateController::getHelpSummary*public

 See |yii/console/Controller::getHelpSummary|


*yii/console/controllers/BaseMigrateController::getHelp*	public

 See |yii/console/Controller::getHelp|


*yii/console/controllers/BaseMigrateController::getActionHelpSummary*public

 See |yii/console/Controller::getActionHelpSummary|


*yii/console/controllers/BaseMigrateController::getActionHelp*public

 See |yii/console/Controller::getActionHelp|


*yii/console/controllers/BaseMigrateController::getActionArgsHelp*public

 See |yii/console/Controller::getActionArgsHelp|


*yii/console/controllers/BaseMigrateController::getActionOptionsHelp*public

 See |yii/console/Controller::getActionOptionsHelp|


*yii/console/controllers/BaseMigrateController::getActionMethodReflection*protected

 See |yii/console/Controller::getActionMethodReflection|


*yii/console/controllers/BaseMigrateController::parseDocCommentTags*protected

 See |yii/console/Controller::parseDocCommentTags|


*yii/console/controllers/BaseMigrateController::parseDocCommentSummary*protected

 See |yii/console/Controller::parseDocCommentSummary|


*yii/console/controllers/BaseMigrateController::parseDocCommentDetail*protected

 See |yii/console/Controller::parseDocCommentDetail|


*yii/console/controllers/BaseMigrateController::actionUp*	public
>
 actionUp($limit=0)
<
return (int) The status of the action execution. 0 means normal, other values mean
abnormal.

 Upgrades the application by applying new migrations.

 For example,

 ''' yii migrate     # apply all new migrations yii migrate 3   # apply the
 first 3 new migrations '''

    [$limit] (int) The number of new migrations to be applied. If 0, it means
    applying all available new migrations.


*yii/console/controllers/BaseMigrateController::actionDown*public
>
 actionDown($limit='1')
<
return (int) The status of the action execution. 0 means normal, other values mean
abnormal.

 Downgrades the application by reverting old migrations.

 For example,

 ''' yii migrate/down     # revert the last migration yii migrate/down 3   #
 revert the last 3 migrations yii migrate/down all # revert all migrations '''

    [$limit] (int|string) The number of migrations to be reverted. Defaults to
    1, meaning the last applied migration will be reverted. When value is
    "all", all migrations will be reverted.


*yii/console/controllers/BaseMigrateController::actionRedo*public
>
 actionRedo($limit='1')
<
return (int) The status of the action execution. 0 means normal, other values mean
abnormal.

 Redoes the last few migrations.

 This command will first revert the specified migrations, and then apply them
 again. For example,

 ''' yii migrate/redo     # redo the last applied migration yii migrate/redo 3
   # redo the last 3 applied migrations yii migrate/redo all # redo all
 migrations '''

    [$limit] (int|string) The number of migrations to be redone. Defaults to
    1, meaning the last applied migration will be redone. When equals "all",
    all migrations will be redone.


*yii/console/controllers/BaseMigrateController::actionTo*	public
>
 actionTo($version)
<
return (void)

 Upgrades or downgrades till the specified version.

 Can also downgrade versions to the certain apply time in the past by
 providing a UNIX timestamp or a string parseable by the strtotime() function.
 This means that all the versions applied after the specified certain time
 would be reverted.

 This command will first revert the specified migrations, and then apply them
 again. For example,

 ''' yii migrate/to 101129_185401                          # using timestamp
 yii migrate/to m101129_185401_create_user_table       # using full name yii
 migrate/to 1392853618                             # using UNIX timestamp yii
 migrate/to "2014-02-15 13:00:50"                  # using strtotime()
 parseable string yii migrate/to app\migrations\M101129185401CreateUser #
 using full namespace name '''

    [$version] (string) Either the version name or the certain time value in
    the past that the application should be migrated to. This can be either
    the timestamp, the full name of the migration, the UNIX timestamp, or the
    parseable datetime string.


*yii/console/controllers/BaseMigrateController::actionMark*public
>
 actionMark($version)
<
return (int) CLI exit code

 Modifies the migration history to the specified version.

 No actual migration will be performed.

 ''' yii migrate/mark 101129_185401                        # using timestamp
 yii migrate/mark m101129_185401_create_user_table     # using full name yii
 migrate/mark app\migrations\M101129185401CreateUser # using full namespace
 name yii migrate/mark m000000_000000_base # reset the complete migration
 history '''

    [$version] (string) The version at which the migration history should be
    marked. This can be either the timestamp or the full name of the
    migration. You may specify the name 'm000000_000000_base' to set the
    migration history to a state where no migration has been applied.


*yii/console/controllers/BaseMigrateController::actionFresh*public
>
 actionFresh()
<
return (void)

 Truncates the whole database and starts the migration from the beginning.

 ''' yii migrate/fresh '''


*yii/console/controllers/BaseMigrateController::actionHistory*public
>
 actionHistory($limit='10')
<
return (void)

 Displays the migration history.

 This command will show the list of migrations that have been applied so far.
 For example,

 ''' yii migrate/history     # showing the last 10 migrations yii
 migrate/history 5   # showing the last 5 migrations yii migrate/history all #
 showing the whole history '''

    [$limit] (int|string) The maximum number of migrations to be displayed. If
    it is "all", the whole migration history will be displayed.


*yii/console/controllers/BaseMigrateController::actionNew*public
>
 actionNew($limit='10')
<
return (void)

 Displays the un-applied new migrations.

 This command will show the new migrations that have not been applied. For
 example,

 ''' yii migrate/new     # showing the first 10 new migrations yii migrate/new
 5   # showing the first 5 new migrations yii migrate/new all # showing all
 new migrations '''

    [$limit] (int|string) The maximum number of new migrations to be
    displayed. If it is 'all', all available new migrations will be displayed.


*yii/console/controllers/BaseMigrateController::actionCreate*public
>
 actionCreate($name)
<
return (void)

 Creates a new migration.

 This command creates a new migration using the available migration template.
 After using this command, developers should modify the created migration
 skeleton by filling up the actual migration logic.

 ''' yii migrate/create create_user_table '''

 In order to generate a namespaced migration, you should specify a namespace
 before the migration's name. Note that backslash ('\') is usually considered
 a special character in the shell, so you need to escape it properly to avoid
 shell errors or incorrect behavior. For example:

 ''' yii migrate/create 'app\\migrations\\createUserTable' '''

 In case 'migrationPath' is not set and no namespace is provided, the first
 entry of 'migrationNamespaces' will be used.

    [$name] (string) The name of the new migration. This should only contain
    letters, digits, underscores and/or backslashes.

    Note: If the migration name is of a special form, for example create_xxx
    or drop_xxx, then the generated migration file will contain extra code, in
    this case for creating/dropping tables.


*yii/console/controllers/BaseMigrateController::migrateUp*protected
>
 migrateUp($class)
<
return (bool) Whether the migration is successful

 Upgrades with the specified migration class.

    [$class] (string) The migration class name


*yii/console/controllers/BaseMigrateController::migrateDown*protected
>
 migrateDown($class)
<
return (bool) Whether the migration is successful

 Downgrades with the specified migration class.

    [$class] (string) The migration class name


*yii/console/controllers/BaseMigrateController::createMigration*protected
>
 createMigration($class)
<
return (\yii\db\MigrationInterface) The migration instance

 Creates a new migration instance.

    [$class] (string) The migration class name


*yii/console/controllers/BaseMigrateController::includeMigrationFile*protected
>
 includeMigrationFile($class)
<
return (void)

 Includes the migration file for a given migration class name.

 This function will do nothing on namespaced migrations, which are loaded by
 autoloading automatically. It will include the migration file, by searching
 'migrationPath' for classes without namespace.

    [$class] (string) The migration class name.


*yii/console/controllers/BaseMigrateController::migrateToTime*protected
>
 migrateToTime($time)
<
return (void)

 Migrates to the specified apply time in the past.

    [$time] (int) UNIX timestamp value.


*yii/console/controllers/BaseMigrateController::migrateToVersion*protected
>
 migrateToVersion($version)
<
return (int) CLI exit code

 Migrates to the certain version.

    [$version] (string) Name in the full format.


*yii/console/controllers/BaseMigrateController::getNewMigrations*protected
>
 getNewMigrations()
<
return (array) List of new migrations

 Returns the migrations that are not applied.


*yii/console/controllers/BaseMigrateController::generateMigrationSourceCode*protected
>
 generateMigrationSourceCode($params)
<
return (string) Generated PHP code.

 Generates new migration source PHP code.

 Child class may override this method, adding extra logic or variation to the
 process.

    [$params] (array) Generation parameters, usually following parameters are
    present:

     
      - name: string migration base name  
      - className: string migration class name


*yii/console/controllers/BaseMigrateController::truncateDatabase*protected
>
 truncateDatabase()
<
return (void)

 Truncates the database.

 This method should be overwritten in subclasses to implement the task of
 clearing the database.


*yii/console/controllers/BaseMigrateController::getMigrationNameLimit*protected
>
 getMigrationNameLimit()
<
return (int|null) The maximum name length for a migration or 'null' if no limit
applies.

 Return the maximum name length for a migration.

 Subclasses may override this method to define a limit.


*yii/console/controllers/BaseMigrateController::getMigrationHistory*protected
>
 getMigrationHistory($limit)
<
return (array) The migration history

 Returns the migration history.

    [$limit] (int) The maximum number of records in the history to be
    returned. 'null' for "no limit".


*yii/console/controllers/BaseMigrateController::addMigrationHistory*protected
>
 addMigrationHistory($version)
<
return (void)

 Adds new migration entry to the history.

    [$version] (string) Migration version name.


*yii/console/controllers/BaseMigrateController::removeMigrationHistory*protected
>
 removeMigrationHistory($version)
<
return (void)

 Removes existing migration from the history.

    [$version] (string) Migration version name.



 vim:tw=78:ts=8:ft=help:norl:
