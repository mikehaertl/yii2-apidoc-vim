
*yii/base/ErrorHandler*   >> |yii/base/Component|
=======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/web/ErrorHandler|
|yii/console/ErrorHandler|

DESCRIPTION
------------------------------------------------------------------------------

 ErrorHandler is configured as an application component in
 '\yii\base\Application' by default. You can access that instance via
 'Yii::$app->errorHandler'.

 For more details and usage information on ErrorHandler, see the [guide
 article on handling errors](guide:runtime-handling-errors).


PROPERTY DETAILS
------------------------------------------------------------------------------

$discardExistingOutput			*yii/base/ErrorHandler::$discardExistingOutput*

 (bool) Whether to discard any existing page output before error display.
 Defaults to true.

$memoryReserveSize			*yii/base/ErrorHandler::$memoryReserveSize*

 (int) The size of the reserved memory. A portion of memory is pre-allocated
 so that when an out-of-memory issue occurs, the error handler is able to
 handle the error with the help of this reserved memory. If you set this value
 to be 0, no memory will be reserved. Defaults to 256KB.

$exception				*yii/base/ErrorHandler::$exception*

 (\Exception) The exception that is being handled currently.

$behaviors				*yii/base/ErrorHandler::$behaviors*

 See |yii/base/Component::$behaviors|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/base/ErrorHandler::className*			public

 See |yii/base/Object::className|


*yii/base/ErrorHandler::__construct*			public

 See |yii/base/Object::__construct|


*yii/base/ErrorHandler::init*				public

 See |yii/base/Object::init|


*yii/base/ErrorHandler::__get*				public

 See |yii/base/Object::__get|


*yii/base/ErrorHandler::__set*				public

 See |yii/base/Object::__set|


*yii/base/ErrorHandler::__isset*				public

 See |yii/base/Object::__isset|


*yii/base/ErrorHandler::__unset*				public

 See |yii/base/Object::__unset|


*yii/base/ErrorHandler::__call*				public

 See |yii/base/Object::__call|


*yii/base/ErrorHandler::hasProperty*			public

 See |yii/base/Object::hasProperty|


*yii/base/ErrorHandler::canGetProperty*			public

 See |yii/base/Object::canGetProperty|


*yii/base/ErrorHandler::canSetProperty*			public

 See |yii/base/Object::canSetProperty|


*yii/base/ErrorHandler::hasMethod*			public

 See |yii/base/Object::hasMethod|


*yii/base/ErrorHandler::__clone*				public

 See |yii/base/Component::__clone|


*yii/base/ErrorHandler::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/base/ErrorHandler::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/base/ErrorHandler::on*				public

 See |yii/base/Component::on|


*yii/base/ErrorHandler::off*				public

 See |yii/base/Component::off|


*yii/base/ErrorHandler::trigger*				public

 See |yii/base/Component::trigger|


*yii/base/ErrorHandler::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/base/ErrorHandler::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/base/ErrorHandler::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/base/ErrorHandler::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/base/ErrorHandler::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/base/ErrorHandler::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/base/ErrorHandler::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/base/ErrorHandler::register*				public
>
 register()
<
return (void)



*yii/base/ErrorHandler::unregister*			public
>
 unregister()
<
return (void)



*yii/base/ErrorHandler::handleException*			public
>
 handleException($exception)
<
return (void)

 This method is implemented as a PHP exception handler.

    [$exception] (\Exception) The exception that is not caught


*yii/base/ErrorHandler::handleFallbackExceptionMessage*	protected
>
 handleFallbackExceptionMessage($exception, $previousException)
<
return (void)

    [$exception] (\Exception|\Throwable) Exception that was thrown during main
    exception processing.
    [$previousException] (\Exception) Main exception processed in
    'handleException()'.


*yii/base/ErrorHandler::handleHhvmError*			public
>
 handleHhvmError($code, $message, $file, $line, $context, $backtrace)
<
return (bool) Whether the normal error handler continues.

 This method is used as a HHVM error handler. It will store exception that
 will be used in fatal error handler

    [$code] (int) The level of the error raised.
    [$message] (string) The error message.
    [$file] (string) The filename that the error was raised in.
    [$line] (int) The line number the error was raised at.
    [$context] (mixed) 
    [$backtrace] (mixed) Trace of error


*yii/base/ErrorHandler::handleError*			public
>
 handleError($code, $message, $file, $line)
<
return (bool) Whether the normal error handler continues.

 This method is used as a PHP error handler. It will simply raise an
 'ErrorException'.

    [$code] (int) The level of the error raised.
    [$message] (string) The error message.
    [$file] (string) The filename that the error was raised in.
    [$line] (int) The line number the error was raised at.


*yii/base/ErrorHandler::handleFatalError*			public
>
 handleFatalError()
<
return (void)



*yii/base/ErrorHandler::renderException*			protected
>
 renderException($exception)
<
return (void)

    [$exception] (\Exception) The exception to be rendered.


*yii/base/ErrorHandler::logException*			public
>
 logException($exception)
<
return (void)

    [$exception] (\Exception) The exception to be logged


*yii/base/ErrorHandler::clearOutput*			public
>
 clearOutput()
<
return (void)



*yii/base/ErrorHandler::convertExceptionToError*		public
>
 convertExceptionToError($exception)
<
return (void)

 This method can be used to convert exceptions inside of methods like
 '__toString()' to PHP errors because exceptions cannot be thrown inside of
 them.

    [$exception] (\Exception) The exception to convert to a PHP error.


*yii/base/ErrorHandler::convertExceptionToString*		public
>
 convertExceptionToString($exception)
<
return (string) The string representation of the exception.

    [$exception] (\Exception) The exception being converted



 vim:tw=78:ts=8:ft=help:norl:
