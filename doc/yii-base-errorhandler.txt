
*yii/base/ErrorHandler*   >> |yii/base/Component|
=======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/web/ErrorHandler|
|yii/console/ErrorHandler|

DESCRIPTION
------------------------------------------------------------------------------

 ErrorHandler is configured as an application component in
 '\yii\base\Application' by default. You can access that instance via
 'Yii::$app->errorHandler'.

 For more details and usage information on ErrorHandler, see the [guide
 article on handling errors](guide:runtime-handling-errors).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|


$discardExistingOutput			*yii/base/ErrorHandler::$discardExistingOutput*

 (bool) Whether to discard any existing page output before error display.
 Defaults to true.

$memoryReserveSize			*yii/base/ErrorHandler::$memoryReserveSize*

 (int) The size of the reserved memory. A portion of memory is pre-allocated
 so that when an out-of-memory issue occurs, the error handler is able to
 handle the error with the help of this reserved memory. If you set this value
 to be 0, no memory will be reserved. Defaults to 256KB.

$exception				*yii/base/ErrorHandler::$exception*

 (\Exception|null) The exception that is being handled currently.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/base/ErrorHandler::register*				public
>
 register()
<
return (void)

 Register this error handler.


*yii/base/ErrorHandler::unregister*			public
>
 unregister()
<
return (void)

 Unregisters this error handler by restoring the PHP error and exception
 handlers.


*yii/base/ErrorHandler::handleException*			public
>
 handleException($exception)
<
return (void)

 Handles uncaught PHP exceptions.

 This method is implemented as a PHP exception handler.

    [$exception] (\Exception) The exception that is not caught


*yii/base/ErrorHandler::handleFallbackExceptionMessage*	protected
>
 handleFallbackExceptionMessage($exception, $previousException)
<
return (void)

 Handles exception thrown during exception processing in 'handleException()'.

    [$exception] (\Exception|\Throwable) Exception that was thrown during main
    exception processing.
    [$previousException] (\Exception) Main exception processed in
    'handleException()'.


*yii/base/ErrorHandler::handleHhvmError*			public
>
 handleHhvmError($code, $message, $file, $line, $context, $backtrace)
<
return (bool) Whether the normal error handler continues.

 Handles HHVM execution errors such as warnings and notices.

 This method is used as a HHVM error handler. It will store exception that
 will be used in fatal error handler

    [$code] (int) The level of the error raised.
    [$message] (string) The error message.
    [$file] (string) The filename that the error was raised in.
    [$line] (int) The line number the error was raised at.
    [$context] (mixed) 
    [$backtrace] (mixed) Trace of error


*yii/base/ErrorHandler::handleError*			public
>
 handleError($code, $message, $file, $line)
<
return (bool) Whether the normal error handler continues.

 Handles PHP execution errors such as warnings and notices.

 This method is used as a PHP error handler. It will simply raise an
 'ErrorException'.

    [$code] (int) The level of the error raised.
    [$message] (string) The error message.
    [$file] (string) The filename that the error was raised in.
    [$line] (int) The line number the error was raised at.


*yii/base/ErrorHandler::handleFatalError*			public
>
 handleFatalError()
<
return (void)

 Handles fatal PHP errors.


*yii/base/ErrorHandler::renderException*			protected
>
 renderException($exception)
<
return (void)

 Renders the exception.

    [$exception] (\Exception) The exception to be rendered.


*yii/base/ErrorHandler::logException*			public
>
 logException($exception)
<
return (void)

 Logs the given exception.

    [$exception] (\Exception) The exception to be logged


*yii/base/ErrorHandler::clearOutput*			public
>
 clearOutput()
<
return (void)

 Removes all output echoed before calling this method.


*yii/base/ErrorHandler::convertExceptionToError*		public
>
 convertExceptionToError($exception)
<
return (void)

 Converts an exception into a PHP error.

 This method can be used to convert exceptions inside of methods like
 '__toString()' to PHP errors because exceptions cannot be thrown inside of
 them.

    [$exception] (\Exception) The exception to convert to a PHP error.


*yii/base/ErrorHandler::convertExceptionToString*		public
>
 convertExceptionToString($exception)
<
return (string) The string representation of the exception.

 Converts an exception into a simple string.

    [$exception] (\Exception|\Error) The exception being converted


*yii/base/ErrorHandler::convertExceptionToVerboseString*	public
>
 convertExceptionToVerboseString($exception)
<
return (string) The string representation of the exception.

 Converts an exception into a string that has verbose information about the
 exception and its trace.

    [$exception] (\Exception|\Error) The exception being converted



 vim:tw=78:ts=8:ft=help:norl:
