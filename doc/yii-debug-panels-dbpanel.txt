
*yii/debug/panels/DbPanel*   >> |yii/debug/Panel|
==========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/mongodb/debug/MongoDbPanel|


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/debug/panels/DbPanel::$id*

 See |yii/debug/Panel::$id|

$tag					*yii/debug/panels/DbPanel::$tag*

 See |yii/debug/Panel::$tag|

$module					*yii/debug/panels/DbPanel::$module*

 See |yii/debug/Panel::$module|

$data					*yii/debug/panels/DbPanel::$data*

 See |yii/debug/Panel::$data|

$actions				*yii/debug/panels/DbPanel::$actions*

 See |yii/debug/Panel::$actions|

$error					*yii/debug/panels/DbPanel::$error*

 See |yii/debug/Panel::$error|

$criticalQueryThreshold			*yii/debug/panels/DbPanel::$criticalQueryThreshold*

 (integer) The threshold for determining whether the request has involved
 critical number of DB queries. If the number of queries exceeds this number,
 the execution is considered taking critical number of DB queries.

$db					*yii/debug/panels/DbPanel::$db*

 (string) The name of the database component to use for executing (explain)
 queries

$defaultOrder				*yii/debug/panels/DbPanel::$defaultOrder*

 (array) The default ordering of the database queries. In the format of [
 property => sort direction ], for example: [ 'duration' => SORT_DESC ]

$defaultFilter				*yii/debug/panels/DbPanel::$defaultFilter*

 (array) The default filter to apply to the database queries. In the format of
 [ property => value ], for example: [ 'type' => 'SELECT' ]



METHOD DETAILS
------------------------------------------------------------------------------


*yii/debug/panels/DbPanel::className*			public

 See |yii/base/BaseObject::className|


*yii/debug/panels/DbPanel::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/debug/panels/DbPanel::init*				public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/debug/panels/DbPanel::__get*				public

 See |yii/base/Component::__get|


*yii/debug/panels/DbPanel::__set*				public

 See |yii/base/Component::__set|


*yii/debug/panels/DbPanel::__isset*			public

 See |yii/base/Component::__isset|


*yii/debug/panels/DbPanel::__unset*			public

 See |yii/base/Component::__unset|


*yii/debug/panels/DbPanel::__call*			public

 See |yii/base/Component::__call|


*yii/debug/panels/DbPanel::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/debug/panels/DbPanel::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/debug/panels/DbPanel::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/debug/panels/DbPanel::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/debug/panels/DbPanel::__clone*			public

 See |yii/base/Component::__clone|


*yii/debug/panels/DbPanel::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/debug/panels/DbPanel::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/debug/panels/DbPanel::on*				public

 See |yii/base/Component::on|


*yii/debug/panels/DbPanel::off*				public

 See |yii/base/Component::off|


*yii/debug/panels/DbPanel::trigger*			public

 See |yii/base/Component::trigger|


*yii/debug/panels/DbPanel::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/debug/panels/DbPanel::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/debug/panels/DbPanel::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/debug/panels/DbPanel::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/debug/panels/DbPanel::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/debug/panels/DbPanel::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/debug/panels/DbPanel::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/debug/panels/DbPanel::getName*			public
>
 getName()
<
return (string) Name of the panel








*yii/debug/panels/DbPanel::getSummary*			public
>
 getSummary()
<
return (string) Content that is displayed at debug toolbar








*yii/debug/panels/DbPanel::getDetail*			public
>
 getDetail()
<
return (string) Content that is displayed in debugger detail view








*yii/debug/panels/DbPanel::save*				public
>
 save()
<
return (mixed) Data to be saved

 Saves data to be later used in debugger detail view.



 This method is called on every page where debugger is enabled.




*yii/debug/panels/DbPanel::load*				public

 See |yii/debug/Panel::load|


*yii/debug/panels/DbPanel::getUrl*			public

 See |yii/debug/Panel::getUrl|


*yii/debug/panels/DbPanel::getTraceLine*			public

 See |yii/debug/Panel::getTraceLine|


*yii/debug/panels/DbPanel::setError*			public

 See |yii/debug/Panel::setError|


*yii/debug/panels/DbPanel::getError*			public

 See |yii/debug/Panel::getError|


*yii/debug/panels/DbPanel::hasError*			public

 See |yii/debug/Panel::hasError|


*yii/debug/panels/DbPanel::isEnabled*			public
>
 isEnabled()
<
return (bool) 

 Is the panel enabled?








*yii/debug/panels/DbPanel::getSummaryName*		public
>
 getSummaryName()
<
return (string) Short name of the panel, which will be use in summary.



*yii/debug/panels/DbPanel::calculateTimings*		public
>
 calculateTimings()
<
return (array) Timings [token, category, timestamp, traces, nesting level, elapsed
time]

 Calculates given request profile timings.


*yii/debug/panels/DbPanel::getProfileLogs*		public
>
 getProfileLogs()
<
return (array) 

 Returns all profile logs of the current request for this panel. It includes
 categories such as: 'yii\db\Command::query', 'yii\db\Command::execute'.


*yii/debug/panels/DbPanel::getTotalQueryTime*		protected
>
 getTotalQueryTime($timings)
<
return (int) Total time

 Returns total query time.

    [$timings] (array) 


*yii/debug/panels/DbPanel::getModels*			protected
>
 getModels()
<
return (array) Models

 Returns an  array of models that represents logs of the current request.

 Can be used with data providers such as \yii\data\ArrayDataProvider.


*yii/debug/panels/DbPanel::getQueryType*			protected
>
 getQueryType($timing)
<
return (string) Query type such as select, insert, delete, etc.

 Returns database query type.

    [$timing] (string) Timing procedure string


*yii/debug/panels/DbPanel::isQueryCountCritical*		public
>
 isQueryCountCritical($count)
<
return (bool) 

 Check if given queries count is critical according settings.

    [$count] (int) Queries count


*yii/debug/panels/DbPanel::getTypes*			public
>
 getTypes()
<
return (array) 

 Returns array query types


*yii/debug/panels/DbPanel::hasExplain*			protected
>
 hasExplain()
<
return (bool) Whether the DB component has support for EXPLAIN queries



*yii/debug/panels/DbPanel::canBeExplained*		public
>
 canBeExplained($type)
<
return (bool) 

 Check if given query type can be explained.

    [$type] (string) Query type


*yii/debug/panels/DbPanel::getDb*				public
>
 getDb()
<
return (\yii\db\Connection) 

 Returns a reference to the DB component associated with the panel



 vim:tw=78:ts=8:ft=help:norl:
