
*yii/web/User*   >> |yii/base/Component|
==============

DESCRIPTION
------------------------------------------------------------------------------

 You may use 'isGuest' to determine whether the current user is a guest or
 not. If the user is a guest, the 'identity' property would return 'null'.
 Otherwise, it would be an instance of 'IdentityInterface'.

 You may call various methods to change the user authentication status:


   - 'login()': sets the specified identity and remembers the
   authentication status in session and cookie; 
   - 'logout()': marks the user as a guest and clears the relevant
   information from session and cookie; 
   - 'setIdentity()': changes the user identity without touching
   session or cookie   (this is best used in stateless RESTful API
 implementation).

 Note that User only maintains the user authentication status. It does NOT
 handle how to authenticate a user. The logic of how to authenticate a user
 should be done in the class implementing 'IdentityInterface'. You are also
 required to set 'identityClass' with the name of this class.

 User is configured as an application component in '\yii\web\Application' by
 default. You can access that instance via 'Yii::$app->user'.

 You can modify its configuration by adding an array to your application
 config under 'components' as it is shown in the following example:

   'user' => [
       'identityClass' => 'app\models\User', // User must implement the
 IdentityInterface
       'enableAutoLogin' => true,
       // 'loginUrl' => ['user/login'],
       // ...
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

$identityClass				*yii/web/User::$identityClass*

 (string) The class name of the 'identity' object.

$enableAutoLogin			*yii/web/User::$enableAutoLogin*

 (bool) Whether to enable cookie-based login. Defaults to 'false'. Note that
 this property will be ignored if 'enableSession' is 'false'.

$enableSession				*yii/web/User::$enableSession*

 (bool) Whether to use session to persist authentication status across
 multiple requests. You set this property to be 'false' if your application is
 stateless, which is often the case for RESTful APIs.

$loginUrl				*yii/web/User::$loginUrl*

 (string|array) The URL for login when 'loginRequired()' is called. If an
 array is given, 'UrlManager::createUrl()' will be called to create the
 corresponding URL. The first element of the array should be the route to the
 login action, and the rest of the name-value pairs are GET parameters used to
 construct the login URL. For example,

   ['site/login', 'ref' => 1]

 If this property is 'null', a 403 HTTP exception will be raised when
 'loginRequired()' is called.

$identityCookie				*yii/web/User::$identityCookie*

 (array) The configuration of the identity cookie. This property is used only
 when 'enableAutoLogin' is 'true'.

$authTimeout				*yii/web/User::$authTimeout*

 (int) The number of seconds in which the user will be logged out
 automatically if he remains inactive. If this property is not set, the user
 will be logged out after the current session expires (c.f.
 'Session::timeout'). Note that this will not work if 'enableAutoLogin' is
 'true'.

$accessChecker				*yii/web/User::$accessChecker*

 (\yii\rbac\CheckAccessInterface) The access checker to use for checking
 access. If not set the application auth manager will be used.

$absoluteAuthTimeout			*yii/web/User::$absoluteAuthTimeout*

 (int) The number of seconds in which the user will be logged out
 automatically regardless of activity. Note that this will not work if
 'enableAutoLogin' is 'true'.

$autoRenewCookie			*yii/web/User::$autoRenewCookie*

 (bool) Whether to automatically renew the identity cookie each time a page is
 requested. This property is effective only when 'enableAutoLogin' is 'true'.
 When this is 'false', the identity cookie will expire after the specified
 duration since the user is initially logged in. When this is 'true', the
 identity cookie will expire after the specified duration since the user
 visits the site the last time.

$idParam				*yii/web/User::$idParam*

 (string) The session variable name used to store the value of 'id'.

$authTimeoutParam			*yii/web/User::$authTimeoutParam*

 (string) The session variable name used to store the value of expiration
 timestamp of the authenticated state. This is used when 'authTimeout' is set.

$absoluteAuthTimeoutParam		*yii/web/User::$absoluteAuthTimeoutParam*

 (string) The session variable name used to store the value of absolute
 expiration timestamp of the authenticated state. This is used when
 'absoluteAuthTimeout' is set.

$returnUrlParam				*yii/web/User::$returnUrlParam*

 (string) The session variable name used to store the value of 'returnUrl'.

$acceptableRedirectTypes		*yii/web/User::$acceptableRedirectTypes*

 (array) MIME types for which this component should redirect to the
 'loginUrl'.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/web/User::className*					public

 See |yii/base/BaseObject::className|


*yii/web/User::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/web/User::init*					public
>
 init()
<
return (void)

 Initializes the application component.


*yii/web/User::__get*					public

 See |yii/base/Component::__get|


*yii/web/User::__set*					public

 See |yii/base/Component::__set|


*yii/web/User::__isset*					public

 See |yii/base/Component::__isset|


*yii/web/User::__unset*					public

 See |yii/base/Component::__unset|


*yii/web/User::__call*					public

 See |yii/base/Component::__call|


*yii/web/User::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/web/User::canGetProperty*				public

 See |yii/base/Component::canGetProperty|


*yii/web/User::canSetProperty*				public

 See |yii/base/Component::canSetProperty|


*yii/web/User::hasMethod*					public

 See |yii/base/Component::hasMethod|


*yii/web/User::__clone*					public

 See |yii/base/Component::__clone|


*yii/web/User::behaviors*					public

 See |yii/base/Component::behaviors|


*yii/web/User::hasEventHandlers*				public

 See |yii/base/Component::hasEventHandlers|


*yii/web/User::on*					public

 See |yii/base/Component::on|


*yii/web/User::off*					public

 See |yii/base/Component::off|


*yii/web/User::trigger*					public

 See |yii/base/Component::trigger|


*yii/web/User::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/web/User::getBehaviors*				public

 See |yii/base/Component::getBehaviors|


*yii/web/User::attachBehavior*				public

 See |yii/base/Component::attachBehavior|


*yii/web/User::attachBehaviors*				public

 See |yii/base/Component::attachBehaviors|


*yii/web/User::detachBehavior*				public

 See |yii/base/Component::detachBehavior|


*yii/web/User::detachBehaviors*				public

 See |yii/base/Component::detachBehaviors|


*yii/web/User::ensureBehaviors*				public

 See |yii/base/Component::ensureBehaviors|


*yii/web/User::getIdentity*				public
>
 getIdentity($autoRenew='true')
<
return (\yii\web\IdentityInterface|null) The identity object associated with the
currently logged-in user. 'null' is returned if the user is not logged in (not
authenticated).

 Returns the identity object associated with the currently logged-in user.

 When 'enableSession' is true, this method may attempt to read the user's
 authentication data stored in session and reconstruct the corresponding
 identity object, if it has not done so before.

    [$autoRenew] (bool) Whether to automatically renew authentication status
    if it has not been done so before. This is only useful when
    'enableSession' is true.


*yii/web/User::setIdentity*				public
>
 setIdentity($identity)
<
return (void)

 Sets the user identity object.

 Note that this method does not deal with session or cookie. You should
 usually use 'switchIdentity()' to change the identity of the current user.

    [$identity] (\yii\web\IdentityInterface|null) The identity object
    associated with the currently logged user. If null, it means the current
    user will be a guest without any associated identity.


*yii/web/User::login*					public
>
 login($identity, $duration=0)
<
return (bool) Whether the user is logged in

 Logs in a user.

 After logging in a user: 
   - the user's identity information is obtainable from the 'identity'
   property

 If 'enableSession' is 'true': 
   - the identity information will be stored in session and be
   available in the next requests 
   - in case of '$duration == 0': as long as the session remains active
   or till the user closes the browser 
   - in case of '$duration > 0': as long as the session remains active
   or as long as the cookie   remains valid by it's '$duration' in seconds
 when 'enableAutoLogin' is set 'true'.

 If 'enableSession' is 'false': 
   - the '$duration' parameter will be ignored

    [$identity] (\yii\web\IdentityInterface) The user identity (which should
    already be authenticated)
    [$duration] (int) Number of seconds that the user can remain in logged-in
    status, defaults to '0'


*yii/web/User::loginByAccessToken*			public
>
 loginByAccessToken($token, $type='null')
<
return (\yii\web\IdentityInterface|null) The identity associated with the given
access token. Null is returned if the access token is invalid or 'login()' is
unsuccessful.

 Logs in a user by the given access token.

 This method will first authenticate the user by calling
 'IdentityInterface::findIdentityByAccessToken()' with the provided access
 token. If successful, it will call 'login()' to log in the authenticated
 user. If authentication fails or 'login()' is unsuccessful, it will return
 null.

    [$token] (string) The access token
    [$type] (mixed) The type of the token. The value of this parameter depends
    on the implementation. For example, '\yii\filters\auth\HttpBearerAuth'
    will set this parameter to be 'yii\filters\auth\HttpBearerAuth'.


*yii/web/User::loginByCookie*				protected
>
 loginByCookie()
<
return (void)

 Logs in a user by cookie.

 This method attempts to log in a user using the ID and authKey information
 provided by the 'identityCookie|identity cookie'.


*yii/web/User::logout*					public
>
 logout($destroySession='true')
<
return (bool) Whether the user is logged out

 Logs out the current user.

 This will remove authentication-related session data. If '$destroySession' is
 true, all session data will be removed.

    [$destroySession] (bool) Whether to destroy the whole session. Defaults to
    true. This parameter is ignored if 'enableSession' is false.


*yii/web/User::getIsGuest*				public
>
 getIsGuest()
<
return (bool) Whether the current user is a guest.

 Returns a value indicating whether the user is a guest (not authenticated).


*yii/web/User::getId*					public
>
 getId()
<
return (string|int) The unique identifier for the user. If 'null', it means the user
is a guest.

 Returns a value that uniquely represents the user.


*yii/web/User::getReturnUrl*				public
>
 getReturnUrl($defaultUrl='null')
<
return (string) The URL that the user should be redirected to after login.

 Returns the URL that the browser should be redirected to after successful
 login.

 This method reads the return URL from the session. It is usually used by the
 login action which may call this method to redirect the browser to where it
 goes after successful authentication.

    [$defaultUrl] (string|array) The default return URL in case it was not set
    previously. If this is null and the return URL was not set previously,
    'Application::homeUrl' will be redirected to. Please refer to
    'setReturnUrl()' on accepted format of the URL.


*yii/web/User::setReturnUrl*				public
>
 setReturnUrl($url)
<
return (void)

 Remembers the URL in the session so that it can be retrieved back later by
 'getReturnUrl()'.

    [$url] (string|array) The URL that the user should be redirected to after
    login. If an array is given, 'UrlManager::createUrl()' will be called to
    create the corresponding URL. The first element of the array should be the
    route, and the rest of the name-value pairs are GET parameters used to
    construct the URL. For example,

      ['admin/index', 'ref' => 1]




*yii/web/User::loginRequired*				public
>
 loginRequired($checkAjax='true', $checkAcceptHeader='true')
<
return (\yii\web\Response) The redirection response if 'loginUrl' is set

 Redirects the user browser to the login page.

 Before the redirection, the current URL (if it's not an AJAX url) will be
 kept as 'returnUrl' so that the user browser may be redirected back to the
 current page after successful login.

 Make sure you set 'loginUrl' so that the user browser can be redirected to
 the specified login URL after calling this method.

 Note that when 'loginUrl' is set, calling this method will NOT terminate the
 application execution.

    [$checkAjax] (bool) Whether to check if the request is an AJAX request.
    When this is true and the request is an AJAX request, the current URL (for
    AJAX request) will NOT be set as the return URL.
    [$checkAcceptHeader] (bool) Whether to check if the request accepts HTML
    responses. Defaults to 'true'. When this is true and the request does not
    accept HTML responses the current URL will not be SET as the return URL.
    Also instead of redirecting the user an ForbiddenHttpException is thrown.
    This parameter is available since version 2.0.8.


*yii/web/User::beforeLogin*				protected
>
 beforeLogin($identity, $cookieBased, $duration)
<
return (bool) Whether the user should continue to be logged in

 This method is called before logging in a user.

 The default implementation will trigger the 'EVENT_BEFORE_LOGIN' event. If
 you override this method, make sure you call the parent implementation so
 that the event is triggered.

    [$identity] (\yii\web\IdentityInterface) The user identity information
    [$cookieBased] (bool) Whether the login is cookie-based
    [$duration] (int) Number of seconds that the user can remain in logged-in
    status. If 0, it means login till the user closes the browser or the
    session is manually destroyed.


*yii/web/User::afterLogin*				protected
>
 afterLogin($identity, $cookieBased, $duration)
<
return (void)

 This method is called after the user is successfully logged in.

 The default implementation will trigger the 'EVENT_AFTER_LOGIN' event. If you
 override this method, make sure you call the parent implementation so that
 the event is triggered.

    [$identity] (\yii\web\IdentityInterface) The user identity information
    [$cookieBased] (bool) Whether the login is cookie-based
    [$duration] (int) Number of seconds that the user can remain in logged-in
    status. If 0, it means login till the user closes the browser or the
    session is manually destroyed.


*yii/web/User::beforeLogout*				protected
>
 beforeLogout($identity)
<
return (bool) Whether the user should continue to be logged out

 This method is invoked when calling 'logout()' to log out a user.

 The default implementation will trigger the 'EVENT_BEFORE_LOGOUT' event. If
 you override this method, make sure you call the parent implementation so
 that the event is triggered.

    [$identity] (\yii\web\IdentityInterface) The user identity information


*yii/web/User::afterLogout*				protected
>
 afterLogout($identity)
<
return (void)

 This method is invoked right after a user is logged out via 'logout()'.

 The default implementation will trigger the 'EVENT_AFTER_LOGOUT' event. If
 you override this method, make sure you call the parent implementation so
 that the event is triggered.

    [$identity] (\yii\web\IdentityInterface) The user identity information


*yii/web/User::renewIdentityCookie*			protected
>
 renewIdentityCookie()
<
return (void)

 Renews the identity cookie.

 This method will set the expiration time of the identity cookie to be the
 current time plus the originally specified cookie duration.


*yii/web/User::sendIdentityCookie*			protected
>
 sendIdentityCookie($identity, $duration)
<
return (void)

 Sends an identity cookie.

 This method is used when 'enableAutoLogin' is true. It saves 'id',
 'IdentityInterface::getAuthKey()|auth key', and the duration of cookie-based
 login information in the cookie.

    [$identity] (\yii\web\IdentityInterface) 
    [$duration] (int) Number of seconds that the user can remain in logged-in
    status.


*yii/web/User::getIdentityAndDurationFromCookie*		protected
>
 getIdentityAndDurationFromCookie()
<
return (array|null) Returns an array of 'identity' and 'duration' if valid, otherwise
null.

 Determines if an identity cookie has a valid format and contains a valid auth
 key.

 This method is used when 'enableAutoLogin' is true. This method attempts to
 authenticate a user using the information in the identity cookie.


*yii/web/User::removeIdentityCookie*			protected
>
 removeIdentityCookie()
<
return (void)

 Removes the identity cookie.

 This method is used when 'enableAutoLogin' is true.


*yii/web/User::switchIdentity*				public
>
 switchIdentity($identity, $duration=0)
<
return (void)

 Switches to a new identity for the current user.

 When 'enableSession' is true, this method may use session and/or cookie to
 store the user identity information, according to the value of '$duration'.
 Please refer to 'login()' for more details.

 This method is mainly called by 'login()', 'logout()' and 'loginByCookie()'
 when the current user needs to be associated with the corresponding identity
 information.

    [$identity] (\yii\web\IdentityInterface|null) The identity information to
    be associated with the current user. If null, it means switching the
    current user to be a guest.
    [$duration] (int) Number of seconds that the user can remain in logged-in
    status. This parameter is used only when '$identity' is not null.


*yii/web/User::renewAuthStatus*				protected
>
 renewAuthStatus()
<
return (void)

 Updates the authentication status using the information from session and
 cookie.

 This method will try to determine the user identity using the 'idParam'
 session variable.

 If 'authTimeout' is set, this method will refresh the timer.

 If the user identity cannot be determined by session, this method will try to
 'loginByCookie()|login by cookie' if 'enableAutoLogin' is true.


*yii/web/User::can*					public
>
 can($permissionName, $params='[]', $allowCaching='true')
<
return (bool) Whether the user can perform the operation as specified by the given
permission.

 Checks if the user can perform the operation as specified by the given
 permission.

 Note that you must configure "authManager" application component in order to
 use this method. Otherwise it will always return false.

    [$permissionName] (string) The name of the permission (e.g. "edit post")
    that needs access check.
    [$params] (array) Name-value pairs that would be passed to the rules
    associated with the roles and permissions assigned to the user.
    [$allowCaching] (bool) Whether to allow caching the result of access
    check. When this parameter is true (default), if the access check of an
    operation was performed before, its result will be directly returned when
    calling this method to check the same operation. If this parameter is
    false, this method will always call
    '\yii\rbac\CheckAccessInterface::checkAccess()' to obtain the up-to-date
    access result. Note that this caching is effective only within the same
    request and only works when '$params = []'.


*yii/web/User::checkRedirectAcceptable*			protected
>
 checkRedirectAcceptable()
<
return (bool) Whether this request may be redirected to the login page.

 Checks if the 'Accept' header contains a content type that allows redirection
 to the login page.

 The login page is assumed to serve 'text/html' or 'application/xhtml+xml' by
 default. You can change acceptable content types by modifying
 'acceptableRedirectTypes' property.


*yii/web/User::getAuthManager*				protected
>
 getAuthManager()
<
return (\yii\rbac\ManagerInterface) 

 Returns auth manager associated with the user component.

 By default this is the 'authManager' application component. You may override
 this method to return a different auth manager instance if needed.


*yii/web/User::getAccessChecker*				protected
>
 getAccessChecker()
<
return (\yii\rbac\CheckAccessInterface) 

 Returns the access checker used for checking access.



 vim:tw=78:ts=8:ft=help:norl:
