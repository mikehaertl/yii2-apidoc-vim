
*yii/behaviors/AttributesBehavior*   >> |yii/base/Behavior|
==================================

DESCRIPTION
------------------------------------------------------------------------------

 To use AttributesBehavior, configure the 'attributes' property which should
 specify the list of attributes that need to be updated and the corresponding
 events that should trigger the update. Then configure the value of enclosed
 arrays with a PHP callable whose return value will be used to assign to the
 current attribute. For example,

   use yii\behaviors\AttributesBehavior;

   public function behaviors()
   {
       return [
           [
               'class' => AttributesBehavior::className(),
               'attributes' => [
                   'attribute1' => [
                       ActiveRecord::EVENT_BEFORE_INSERT => new
 Expression('NOW()'),
                       ActiveRecord::EVENT_BEFORE_UPDATE =>
 \Yii::$app->formatter->asDatetime('2017-07-13'),
                   ],
                   'attribute2' => [
                       ActiveRecord::EVENT_BEFORE_VALIDATE => [$this,
 'storeAttributes'],
                       ActiveRecord::EVENT_AFTER_VALIDATE => [$this,
 'restoreAttributes'],
                   ],
                   'attribute3' => [
                       ActiveRecord::EVENT_BEFORE_VALIDATE => $fn2 = [$this,
 'getAttribute2'],
                       ActiveRecord::EVENT_AFTER_VALIDATE => $fn2,
                   ],
                   'attribute4' => [
                       ActiveRecord::EVENT_BEFORE_DELETE => function ($event,
 $attribute) {
                           static::disabled() || $event->isValid = false;
                       },
                   ],
               ],
           ],
       ];
   }

 Because attribute values will be set automatically by this behavior, they are
 usually not user input and should therefore not be validated, i.e. they
 should not appear in the '\yii\base\Model::rules()|rules()' method of the
 model.


PROPERTY DETAILS
------------------------------------------------------------------------------

$owner					*yii/behaviors/AttributesBehavior::$owner*

 See |yii/base/Behavior::$owner|

$attributes				*yii/behaviors/AttributesBehavior::$attributes*

 (array) List of attributes that are to be automatically filled with the
 values specified via enclosed arrays. The array keys are the ActiveRecord
 attributes upon which the events are to be updated, and the array values are
 the array of corresponding events(s). For this enclosed array: the array keys
 are the ActiveRecord events upon which the attributes are to be updated, and
 the array values are the value that will be assigned to the current
 attributes. This can be an anonymous function, callable in array format (e.g.
 '[$this, 'methodName']'), an '\yii\db\Expression|Expression' object
 representing a DB expression (e.g. 'new Expression('NOW()')'), scalar, string
 or an arbitrary value. If the former, the return value of the function will
 be assigned to the attributes.

   [
     'attribute1' => [
         ActiveRecord::EVENT_BEFORE_INSERT => new Expression('NOW()'),
         ActiveRecord::EVENT_BEFORE_UPDATE =>
 \Yii::$app->formatter->asDatetime('2017-07-13'),
     ],
     'attribute2' => [
         ActiveRecord::EVENT_BEFORE_VALIDATE => [$this, 'storeAttributes'],
         ActiveRecord::EVENT_AFTER_VALIDATE => [$this, 'restoreAttributes'],
     ],
     'attribute3' => [
         ActiveRecord::EVENT_BEFORE_VALIDATE => $fn2 = [$this,
 'getAttribute2'],
         ActiveRecord::EVENT_AFTER_VALIDATE => $fn2,
     ],
     'attribute4' => [
         ActiveRecord::EVENT_BEFORE_DELETE => function ($event, $attribute) {
             static::disabled() || $event->isValid = false;
         },
     ],
   ]



$order					*yii/behaviors/AttributesBehavior::$order*

 (array) List of order of attributes that are to be automatically filled with
 the event. The array keys are the ActiveRecord events upon which the
 attributes are to be updated, and the array values are represent the order
 corresponding attributes. The rest of the attributes are processed at the
 end. If the 'attributes' for this attribute do not specify this event, it is
 ignored

   [
       ActiveRecord::EVENT_BEFORE_VALIDATE => ['attribute1', 'attribute2'],
       ActiveRecord::EVENT_AFTER_VALIDATE => ['attribute2', 'attribute1'],
   ]



$skipUpdateOnClean			*yii/behaviors/AttributesBehavior::$skipUpdateOnClean*

 (bool) Whether to skip this behavior when the '$owner' has not been modified

$preserveNonEmptyValues			*yii/behaviors/AttributesBehavior::$preserveNonEmptyValues*

 (bool) Whether to preserve non-empty attribute values.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/behaviors/AttributesBehavior::className*		public

 See |yii/base/BaseObject::className|


*yii/behaviors/AttributesBehavior::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/behaviors/AttributesBehavior::init*			public

 See |yii/base/BaseObject::init|


*yii/behaviors/AttributesBehavior::__get*			public

 See |yii/base/BaseObject::__get|


*yii/behaviors/AttributesBehavior::__set*			public

 See |yii/base/BaseObject::__set|


*yii/behaviors/AttributesBehavior::__isset*		public

 See |yii/base/BaseObject::__isset|


*yii/behaviors/AttributesBehavior::__unset*		public

 See |yii/base/BaseObject::__unset|


*yii/behaviors/AttributesBehavior::__call*		public

 See |yii/base/BaseObject::__call|


*yii/behaviors/AttributesBehavior::hasProperty*		public

 See |yii/base/BaseObject::hasProperty|


*yii/behaviors/AttributesBehavior::canGetProperty*	public

 See |yii/base/BaseObject::canGetProperty|


*yii/behaviors/AttributesBehavior::canSetProperty*	public

 See |yii/base/BaseObject::canSetProperty|


*yii/behaviors/AttributesBehavior::hasMethod*		public

 See |yii/base/BaseObject::hasMethod|


*yii/behaviors/AttributesBehavior::events*		public
>
 events()
<
return (array) Events (array keys) and the corresponding event handler methods (array
values).

 Declares event handlers for the 'owner''s events.



 Child classes may override this method to declare what PHP callbacks should
 be attached to the events of the 'owner' component.

 The callbacks will be attached to the 'owner''s events when the behavior is
 attached to the owner; and they will be detached from the events when the
 behavior is detached from the component.

 The callbacks can be any of the following:


   - method in this behavior: ''handleClick'', equivalent to '[$this,
   'handleClick']' 
   - object method: '[$object, 'handleClick']' 
   - static method: '['Page', 'handleClick']' 
   - anonymous function: 'function ($event) { ... }'

 The following is an example:

   [
       Model::EVENT_BEFORE_VALIDATE => 'myBeforeValidate',
       Model::EVENT_AFTER_VALIDATE => 'myAfterValidate',
   ]




*yii/behaviors/AttributesBehavior::attach*		public

 See |yii/base/Behavior::attach|


*yii/behaviors/AttributesBehavior::detach*		public

 See |yii/base/Behavior::detach|


*yii/behaviors/AttributesBehavior::evaluateAttributes*	public
>
 evaluateAttributes($event)
<
return (void)

 Evaluates the attributes values and assigns it to the current attributes.

    [$event] (\yii\base\Event) 


*yii/behaviors/AttributesBehavior::getValue*		protected
>
 getValue($attribute, $event)
<
return (mixed) The attribute value

 Returns the value for the current attributes.

 This method is called by 'evaluateAttributes()'. Its return value will be
 assigned to the target attribute corresponding to the triggering event.

    [$attribute] (string) Target attribute name
    [$event] (\yii\base\Event) The event that triggers the current attribute
    updating.



 vim:tw=78:ts=8:ft=help:norl:
