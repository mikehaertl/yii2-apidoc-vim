
*yii/web/CookieCollection*   >> |yii/base/BaseObject|
==========================

DESCRIPTION
------------------------------------------------------------------------------

 For more details and usage information on CookieCollection, see the [guide
 article on handling cookies](guide:runtime-sessions-cookies).


PROPERTY DETAILS
------------------------------------------------------------------------------

$readOnly				*yii/web/CookieCollection::$readOnly*

 (bool) Whether this collection is read only.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/web/CookieCollection::className*			public

 See |yii/base/BaseObject::className|


*yii/web/CookieCollection::__construct*			public
>
 __construct($cookies='[]', $config='[]')
<
return (void)

    [$cookies] (array) The cookies that this collection initially contains.
    This should be an array of name-value pairs.
    [$config] (array) Name-value pairs that will be used to initialize the
    object properties


*yii/web/CookieCollection::init*				public

 See |yii/base/BaseObject::init|


*yii/web/CookieCollection::__get*				public

 See |yii/base/BaseObject::__get|


*yii/web/CookieCollection::__set*				public

 See |yii/base/BaseObject::__set|


*yii/web/CookieCollection::__isset*			public

 See |yii/base/BaseObject::__isset|


*yii/web/CookieCollection::__unset*			public

 See |yii/base/BaseObject::__unset|


*yii/web/CookieCollection::__call*			public

 See |yii/base/BaseObject::__call|


*yii/web/CookieCollection::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/web/CookieCollection::canGetProperty*		public

 See |yii/base/BaseObject::canGetProperty|


*yii/web/CookieCollection::canSetProperty*		public

 See |yii/base/BaseObject::canSetProperty|


*yii/web/CookieCollection::hasMethod*			public

 See |yii/base/BaseObject::hasMethod|


*yii/web/CookieCollection::getIterator*			public
>
 getIterator()
<
return (\ArrayIterator) An iterator for traversing the cookies in the collection.

 This method is required by the SPL interface '\IteratorAggregate'. It will be
 implicitly called when you use 'foreach' to traverse the collection.


*yii/web/CookieCollection::count*				public
>
 count()
<
return (int) The number of cookies in the collection.

 This method is required by the SPL 'Countable' interface. It will be
 implicitly called when you use 'count($collection)'.


*yii/web/CookieCollection::getCount*			public
>
 getCount()
<
return (int) The number of cookies in the collection.



*yii/web/CookieCollection::get*				public
>
 get($name)
<
return (\yii\web\Cookie) The cookie with the specified name. Null if the named cookie
does not exist.

    [$name] (string) The cookie name


*yii/web/CookieCollection::getValue*			public
>
 getValue($name, $defaultValue='null')
<
return (mixed) The value of the named cookie.

    [$name] (string) The cookie name
    [$defaultValue] (mixed) The value that should be returned when the named
    cookie does not exist.


*yii/web/CookieCollection::has*				public
>
 has($name)
<
return (bool) Whether the named cookie exists

 Note that if a cookie is marked for deletion from browser, this method will
 return false.

    [$name] (string) The cookie name


*yii/web/CookieCollection::add*				public
>
 add($cookie)
<
return (void)

 If there is already a cookie with the same name in the collection, it will be
 removed first.

    [$cookie] (\yii\web\Cookie) The cookie to be added


*yii/web/CookieCollection::remove*			public
>
 remove($cookie, $removeFromBrowser='true')
<
return (void)

 If '$removeFromBrowser' is true, the cookie will be removed from the browser.
 In this case, a cookie with outdated expiry will be added to the collection.

    [$cookie] (\yii\web\Cookie|string) The cookie object or the name of the
    cookie to be removed.
    [$removeFromBrowser] (bool) Whether to remove the cookie from browser


*yii/web/CookieCollection::removeAll*			public
>
 removeAll()
<
return (void)



*yii/web/CookieCollection::toArray*			public
>
 toArray()
<
return (array) The array representation of the collection. The array keys are cookie
names, and the array values are the corresponding cookie objects.



*yii/web/CookieCollection::fromArray*			public
>
 fromArray($array)
<
return (void)

    [$array] (array) The cookies to populate from


*yii/web/CookieCollection::offsetExists*			public
>
 offsetExists($name)
<
return (bool) Whether the named cookie exists

 This method is required by the SPL interface '\ArrayAccess'. It is implicitly
 called when you use something like 'isset($collection[$name])'.

    [$name] (string) The cookie name


*yii/web/CookieCollection::offsetGet*			public
>
 offsetGet($name)
<
return (\yii\web\Cookie) The cookie with the specified name, null if the named cookie
does not exist.

 This method is required by the SPL interface '\ArrayAccess'. It is implicitly
 called when you use something like '$cookie = $collection[$name];'. This is
 equivalent to 'get()'.

    [$name] (string) The cookie name


*yii/web/CookieCollection::offsetSet*			public
>
 offsetSet($name, $cookie)
<
return (void)

 This method is required by the SPL interface '\ArrayAccess'. It is implicitly
 called when you use something like '$collection[$name] = $cookie;'. This is
 equivalent to 'add()'.

    [$name] (string) The cookie name
    [$cookie] (\yii\web\Cookie) The cookie to be added


*yii/web/CookieCollection::offsetUnset*			public
>
 offsetUnset($name)
<
return (void)

 This method is required by the SPL interface '\ArrayAccess'. It is implicitly
 called when you use something like 'unset($collection[$name])'. This is
 equivalent to 'remove()'.

    [$name] (string) The cookie name



 vim:tw=78:ts=8:ft=help:norl:
