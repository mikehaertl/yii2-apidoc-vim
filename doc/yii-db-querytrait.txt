
*yii/db/QueryTrait*  
===================

DESCRIPTION
------------------------------------------------------------------------------

 It is supposed to be used in a class that implements the 'QueryInterface'.


PROPERTY DETAILS
------------------------------------------------------------------------------

$where					*yii/db/QueryTrait::$where*

 (string|array) Query condition. This refers to the WHERE clause in a SQL
 statement. For example, '['age' => 31, 'team' => 1]'.

$limit					*yii/db/QueryTrait::$limit*

 (int|\yii\db\Expression) Maximum number of records to be returned. May be an
 instance of 'Expression'. If not set or less than 0, it means no limit.

$offset					*yii/db/QueryTrait::$offset*

 (int|\yii\db\Expression) Zero-based offset from where the records are to be
 returned. May be an instance of 'Expression'. If not set or less than 0, it
 means starting from the beginning.

$orderBy				*yii/db/QueryTrait::$orderBy*

 (array) How to sort the query results. This is used to construct the ORDER BY
 clause in a SQL statement. The array keys are the columns to be sorted by,
 and the array values are the corresponding sort directions which can be
 either
 [SORT_ASC](http://php.net/manual/en/array.constants.php#constant.sort-asc) or
 [SORT_DESC](http://php.net/manual/en/array.constants.php#constant.sort-desc).
 The array may also contain 'Expression' objects. If that is the case, the
 expressions will be converted into strings without any change.

$indexBy				*yii/db/QueryTrait::$indexBy*

 (string|callable) The name of the column by which the query results should be
 indexed by. This can also be a callable (e.g. anonymous function) that
 returns the index value based on the given row data. For more details, see
 'indexBy()'. This property is only used by 'QueryInterface::all()|all()'.

$emulateExecution			*yii/db/QueryTrait::$emulateExecution*

 (bool) Whether to emulate the actual query execution, returning empty or
 false results.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/QueryTrait::indexBy*				public
>
 indexBy($column)
<
return ($this) The query object itself

    [$column] (string|callable) The name of the column by which the query
    results should be indexed by. This can also be a callable (e.g. anonymous
    function) that returns the index value based on the given row data. The
    signature of the callable should be:

      function ($row)
      {
          // return the index value corresponding to $row
      }




*yii/db/QueryTrait::where*				public
>
 where($condition)
<
return ($this) The query object itself

 See 'QueryInterface::where()' for detailed documentation.

    [$condition] (array) The conditions that should be put in the WHERE part.


*yii/db/QueryTrait::andWhere*				public
>
 andWhere($condition)
<
return ($this) The query object itself

 The new condition and the existing one will be joined using the 'AND'
 operator.

    [$condition] (array) The new WHERE condition. Please refer to 'where()' on
    how to specify this parameter.


*yii/db/QueryTrait::orWhere*				public
>
 orWhere($condition)
<
return ($this) The query object itself

 The new condition and the existing one will be joined using the 'OR'
 operator.

    [$condition] (array) The new WHERE condition. Please refer to 'where()' on
    how to specify this parameter.


*yii/db/QueryTrait::filterWhere*				public
>
 filterWhere($condition)
<
return ($this) The query object itself

 This method is similar to 'where()'. The main difference is that this method
 will remove 'isEmpty()|empty query operands'. As a result, this method is
 best suited for building query conditions based on filter values entered by
 users.

 The following code shows the difference between this method and 'where()':

   // WHERE `age`=:age
   $query->filterWhere(['name' => null, 'age' => 20]);
   // WHERE `age`=:age
   $query->where(['age' => 20]);
   // WHERE `name` IS NULL AND `age`=:age
   $query->where(['name' => null, 'age' => 20]);

 Note that unlike 'where()', you cannot pass binding parameters to this
 method.

    [$condition] (array) The conditions that should be put in the WHERE part.
    See 'where()' on how to specify this parameter.


*yii/db/QueryTrait::andFilterWhere*			public
>
 andFilterWhere($condition)
<
return ($this) The query object itself

 The new condition and the existing one will be joined using the 'AND'
 operator.

 This method is similar to 'andWhere()'. The main difference is that this
 method will remove 'isEmpty()|empty query operands'. As a result, this method
 is best suited for building query conditions based on filter values entered
 by users.

    [$condition] (array) The new WHERE condition. Please refer to 'where()' on
    how to specify this parameter.


*yii/db/QueryTrait::orFilterWhere*			public
>
 orFilterWhere($condition)
<
return ($this) The query object itself

 The new condition and the existing one will be joined using the 'OR'
 operator.

 This method is similar to 'orWhere()'. The main difference is that this
 method will remove 'isEmpty()|empty query operands'. As a result, this method
 is best suited for building query conditions based on filter values entered
 by users.

    [$condition] (array) The new WHERE condition. Please refer to 'where()' on
    how to specify this parameter.


*yii/db/QueryTrait::filterCondition*			protected
>
 filterCondition($condition)
<
return (array) The condition with 'isEmpty()|empty operands' removed.

    [$condition] (array) The original condition


*yii/db/QueryTrait::isEmpty*				protected
>
 isEmpty($value)
<
return (bool) If the value is empty

 The value is considered "empty", if one of the following conditions is
 satisfied:


   - it is 'null', 
   - an empty string (''''), 
   - a string containing only whitespace characters, 
   - or an empty array.

    [$value] (mixed) 


*yii/db/QueryTrait::orderBy*				public
>
 orderBy($columns)
<
return ($this) The query object itself

    [$columns] (string|array|\yii\db\Expression) The columns (and the
    directions) to be ordered by. Columns can be specified in either a string
    (e.g. '"id ASC, name DESC"') or an array (e.g. '['id' => SORT_ASC, 'name'
    => SORT_DESC]').

    The method will automatically quote the column names unless a column
    contains some parenthesis (which means the column contains a DB
    expression).

    Note that if your order-by is an expression containing commas, you should
    always use an array to represent the order-by information. Otherwise, the
    method will not be able to correctly determine the order-by columns.

    Since version 2.0.7, an 'Expression' object can be passed to specify the
    ORDER BY part explicitly in plain SQL.


*yii/db/QueryTrait::addOrderBy*				public
>
 addOrderBy($columns)
<
return ($this) The query object itself

    [$columns] (string|array|\yii\db\Expression) The columns (and the
    directions) to be ordered by. Columns can be specified in either a string
    (e.g. "id ASC, name DESC") or an array (e.g. '['id' => SORT_ASC, 'name' =>
    SORT_DESC]').

    The method will automatically quote the column names unless a column
    contains some parenthesis (which means the column contains a DB
    expression).

    Note that if your order-by is an expression containing commas, you should
    always use an array to represent the order-by information. Otherwise, the
    method will not be able to correctly determine the order-by columns.

    Since version 2.0.7, an 'Expression' object can be passed to specify the
    ORDER BY part explicitly in plain SQL.


*yii/db/QueryTrait::normalizeOrderBy*			protected
>
 normalizeOrderBy($columns)
<
return (array) 

    [$columns] (array|string|\yii\db\Expression) The columns value to
    normalize. See 'orderBy' and 'addOrderBy'.


*yii/db/QueryTrait::limit*				public
>
 limit($limit)
<
return ($this) The query object itself

    [$limit] (int|\yii\db\Expression|null) The limit. Use null or negative
    value to disable limit.


*yii/db/QueryTrait::offset*				public
>
 offset($offset)
<
return ($this) The query object itself

    [$offset] (int|\yii\db\Expression|null) The offset. Use null or negative
    value to disable offset.


*yii/db/QueryTrait::emulateExecution*			public
>
 emulateExecution($value='true')
<
return ($this) The query object itself.

 After this mode is enabled, methods, returning query results like
 'QueryInterface::one()', 'QueryInterface::all()', 'QueryInterface::exists()'
 and so on, will return empty or false values. You should use this method in
 case your program logic indicates query should not return any results, like
 in case you set false where condition like '0=1'.

    [$value] (bool) Whether to prevent query execution.



 vim:tw=78:ts=8:ft=help:norl:
