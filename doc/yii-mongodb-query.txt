
*yii/mongodb/Query*   >> |yii/base/Component|
===================

SUBCLASSES
------------------------------------------------------------------------------

|yii/mongodb/ActiveQuery|
|yii/mongodb/file/ActiveQuery|
|yii/mongodb/file/Query|

DESCRIPTION
------------------------------------------------------------------------------

 Query provides a set of methods to facilitate the specification of "find"
 command. These methods can be chained together.

 For example,

   $query = new Query();
   // compose the query
   $query->select(['name', 'status'])
       ->from('customer')
       ->limit(10);
   // execute the query
   $rows = $query->all();




PROPERTY DETAILS
------------------------------------------------------------------------------


$select					*yii/mongodb/Query::$select*

 (array) The fields of the results to return. For example: '['name',
 'group_id']', '['name' => true, '_id' => false]'. Unless directly excluded,
 the "_id" field is always returned. If not set, it means selecting all
 columns.

$from					*yii/mongodb/Query::$from*

 (string|array) The collection to be selected from. If string considered as
 the name of the collection inside the default database. If array 
   - first element considered as the name of the database, second 
   - as name of collection inside that database

$options				*yii/mongodb/Query::$options*

 (array) Cursor options in format: optionKey => optionValue



METHOD DETAILS
------------------------------------------------------------------------------


*yii/mongodb/Query::getCollection*			public
>
 getCollection($db='null')
<
return (\yii\mongodb\Collection) Collection instance.

 Returns the Mongo collection for this query.

    [$db] (\yii\mongodb\Connection) Mongo connection.


*yii/mongodb/Query::select*				public
>
 select($fields)
<
return ($this) The query object itself.

 Sets the list of fields of the results to return.

    [$fields] (array) Fields of the results to return.


*yii/mongodb/Query::from*					public
>
 from($collection)
<
return ($this) The query object itself.

 Sets the collection to be selected from.

    [$collection] () 


*yii/mongodb/Query::options*				public
>
 options($options)
<
return ($this) The query object itself

 Sets the cursor options.

    [$options] (array) Cursor options in format: optionName => optionValue


*yii/mongodb/Query::addOptions*				public
>
 addOptions($options)
<
return ($this) The query object itself

 Adds additional cursor options.

    [$options] (array) Cursor options in format: optionName => optionValue


*yii/mongodb/Query::andFilterCompare*			public
>
 andFilterCompare($name, $value, $defaultOperator=''='')
<
return ($this) The query object itself.

 Helper method for easy querying on values containing some common operators.

 The comparison operator is intelligently determined based on the first few
 characters in the given value and internally translated to a MongoDB
 operator. In particular, it recognizes the following operators if they appear
 as the leading characters in the given value: <: the column must be less than
 the given value ($lt). >: the column must be greater than the given value
 ($gt). <=: the column must be less than or equal to the given value ($lte).
 >=: the column must be greater than or equal to the given value ($gte). <>:
 the column must not be the same as the given value ($ne). Note that when
 $partialMatch is true, this would mean the value must not be a substring of
 the column. =: the column must be equal to the given value ($eq). none of the
 above: use the $defaultOperator

 Note that when the value is empty, no comparison expression will be added to
 the search condition.

    [$name] (string) Column name
    [$value] (string) Column value
    [$defaultOperator] (string) Defaults to =, performing an exact match. For
    example: use 'LIKE' or 'REGEX' for partial cq regex matching


*yii/mongodb/Query::prepare*				public
>
 prepare()
<
return ($this) A prepared query instance.

 Prepares for query building.

 This method is called before actual query composition, e.g. building cursor,
 count etc. You may override this method to do some final preparation work
 before query execution.


*yii/mongodb/Query::buildCursor*				public
>
 buildCursor($db='null')
<
return (\MongoDB\Driver\Cursor) Mongo cursor instance.

 Builds the MongoDB cursor for this query.

    [$db] (\yii\mongodb\Connection) The MongoDB connection used to execute the
    query.


*yii/mongodb/Query::fetchRows*				protected
>
 fetchRows($cursor, $all='true', $indexBy='null')
<
return (array|bool) Result.

 Fetches rows from the given Mongo cursor.

    [$cursor] (\MongoDB\Driver\Cursor) Mongo cursor instance to fetch data
    from.
    [$all] (bool) Whether to fetch all rows or only first one.
    [$indexBy] (string|callable) The column name or PHP callback, by which the
    query results should be indexed by.


*yii/mongodb/Query::fetchRowsInternal*			protected
>
 fetchRowsInternal($cursor, $all)
<
return (array|bool) Result.

    [$cursor] (\MongoDB\Driver\Cursor) Mongo cursor instance to fetch data
    from.
    [$all] (bool) Whether to fetch all rows or only first one.


*yii/mongodb/Query::batch*				public
>
 batch($batchSize=100, $db='null')
<
return (\yii\mongodb\BatchQueryResult) The batch query result. It implements the
'Iterator' interface and can be traversed to retrieve the data in batches.

 Starts a batch query.

 A batch query supports fetching data in batches, which can keep the memory
 usage under a limit. This method will return a 'BatchQueryResult' object
 which implements the 'Iterator' interface and can be traversed to retrieve
 the data in batches.

 For example,

   $query = (new Query)->from('user');
   foreach ($query->batch() as $rows) {
       // $rows is an array of 10 or fewer rows from user collection
   }



    [$batchSize] (int) The number of records to be fetched in each batch.
    [$db] (\yii\mongodb\Connection) The MongoDB connection. If not set, the
    "mongodb" application component will be used.


*yii/mongodb/Query::each*					public
>
 each($batchSize=100, $db='null')
<
return (\yii\mongodb\BatchQueryResult) The batch query result. It implements the
'Iterator' interface and can be traversed to retrieve the data in batches.

 Starts a batch query and retrieves data row by row.

 This method is similar to 'batch()' except that in each iteration of the
 result, only one row of data is returned. For example,

   $query = (new Query)->from('user');
   foreach ($query->each() as $row) {
   }



    [$batchSize] (int) The number of records to be fetched in each batch.
    [$db] (\yii\mongodb\Connection) The MongoDB connection. If not set, the
    "mongodb" application component will be used.


*yii/mongodb/Query::all*					public
>
 all($db='null')
<
return (array) The query results. If the query results in nothing, an empty array
will be returned.

 Executes the query and returns all results as an array.

    [$db] (\yii\mongodb\Connection) The Mongo connection used to execute the
    query. If this parameter is not given, the 'mongodb' application component
    will be used.


*yii/mongodb/Query::populate*				public
>
 populate($rows)
<
return (array) The converted query result

 Converts the raw query results into the format as specified by this query.

 This method is internally used to convert the data fetched from database into
 the format as required by this query.

    [$rows] (array) The raw query result from database


*yii/mongodb/Query::one*					public
>
 one($db='null')
<
return (array|false) The first row (in terms of an array) of the query result.
'false' is returned if the query results in nothing.

 Executes the query and returns a single row of result.

    [$db] (\yii\mongodb\Connection) The Mongo connection used to execute the
    query. If this parameter is not given, the 'mongodb' application component
    will be used.


*yii/mongodb/Query::scalar*				public
>
 scalar($db='null')
<
return (string|null|false) The value of the first column in the first row of the
query result. 'false' is returned if the query result is empty.

 Returns the query result as a scalar value.

 The value returned will be the first column in the first row of the query
 results. Column '_id' will be automatically excluded from select fields, if
 'select' is not empty and '_id' is not selected explicitly.

    [$db] (\yii\mongodb\Connection) The MongoDB connection used to generate
    the query. If this parameter is not given, the 'mongodb' application
    component will be used.


*yii/mongodb/Query::column*				public
>
 column($db='null')
<
return (array) The first column of the query result. An empty array is returned if
the query results in nothing.

 Executes the query and returns the first column of the result.

 Column '_id' will be automatically excluded from select fields, if 'select'
 is not empty and '_id' is not selected explicitly.

    [$db] (\yii\mongodb\Connection) The MongoDB connection used to generate
    the query. If this parameter is not given, the 'mongodb' application
    component will be used.


*yii/mongodb/Query::modify*				public
>
 modify($update, $options='[]', $db='null')
<
return (array|null) The original document, or the modified document when
$options['new'] is set.

 Performs 'findAndModify' query and returns a single row of result.

    [$update] (array) Update criteria
    [$options] (array) List of options in format: optionName => optionValue.
    [$db] (\yii\mongodb\Connection) The Mongo connection used to execute the
    query.


*yii/mongodb/Query::count*				public
>
 count($q=''*'', $db='null')
<
return (int) Number of records

 Returns the number of records.

    [$q] (string) Kept to match 'QueryInterface', its value is ignored.
    [$db] (\yii\mongodb\Connection) The Mongo connection used to execute the
    query. If this parameter is not given, the 'mongodb' application component
    will be used.


*yii/mongodb/Query::exists*				public
>
 exists($db='null')
<
return (bool) Whether the query result contains any row of data.

 Returns a value indicating whether the query result contains any row of data.

    [$db] (\yii\mongodb\Connection) The Mongo connection used to execute the
    query. If this parameter is not given, the 'mongodb' application component
    will be used.


*yii/mongodb/Query::sum*					public
>
 sum($q, $db='null')
<
return (int) The sum of the specified column values

 Returns the sum of the specified column values.

    [$q] (string) The column name. Make sure you properly quote column names
    in the expression.
    [$db] (\yii\mongodb\Connection) The Mongo connection used to execute the
    query. If this parameter is not given, the 'mongodb' application component
    will be used.


*yii/mongodb/Query::average*				public
>
 average($q, $db='null')
<
return (int) The average of the specified column values.

 Returns the average of the specified column values.

    [$q] (string) The column name. Make sure you properly quote column names
    in the expression.
    [$db] (\yii\mongodb\Connection) The Mongo connection used to execute the
    query. If this parameter is not given, the 'mongodb' application component
    will be used.


*yii/mongodb/Query::min*					public
>
 min($q, $db='null')
<
return (int) The minimum of the specified column values.

 Returns the minimum of the specified column values.

    [$q] (string) The column name. Make sure you properly quote column names
    in the expression.
    [$db] (\yii\mongodb\Connection) The MongoDB connection used to execute the
    query. If this parameter is not given, the 'db' application component will
    be used.


*yii/mongodb/Query::max*					public
>
 max($q, $db='null')
<
return (int) The maximum of the specified column values.

 Returns the maximum of the specified column values.

    [$q] (string) The column name. Make sure you properly quote column names
    in the expression.
    [$db] (\yii\mongodb\Connection) The MongoDB connection used to execute the
    query. If this parameter is not given, the 'mongodb' application component
    will be used.


*yii/mongodb/Query::aggregate*				protected
>
 aggregate($column, $operator, $db)
<
return (int) Aggregation result.

 Performs the aggregation for the given column.

    [$column] (string) Column name.
    [$operator] (string) Aggregation operator.
    [$db] (\yii\mongodb\Connection) The database connection used to execute
    the query.


*yii/mongodb/Query::distinct*				public
>
 distinct($q, $db='null')
<
return (array) Array of distinct values

 Returns a list of distinct values for the given column across a collection.

    [$q] (string) Column to use.
    [$db] (\yii\mongodb\Connection) The MongoDB connection used to execute the
    query. If this parameter is not given, the 'mongodb' application component
    will be used.



 vim:tw=78:ts=8:ft=help:norl:
