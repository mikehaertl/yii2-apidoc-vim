
*yii/elasticsearch/ActiveQuery*   >> |yii/elasticsearch/Query|
===============================

DESCRIPTION
------------------------------------------------------------------------------

 An ActiveQuery can be a normal query or be used in a relational context.

 ActiveQuery instances are usually created by 'ActiveRecord::find()'.
 Relational queries are created by 'ActiveRecord::hasOne()' and
 'ActiveRecord::hasMany()'.

 Normal Query ------------

 ActiveQuery mainly provides the following methods to retrieve the query
 results:


   - 'one()': returns a single record populated with the first row of
   data. 
   - 'all()': returns all records based on the query results. 
   - 'count()': returns the number of records. 
   - 'scalar()': returns the value of the first column in the first row
   of the query result. 
   - 'column()': returns the value of the first column in the query
   result. 
   - 'exists()': returns a value indicating whether the query result
   has data or not.

 Because ActiveQuery extends from 'Query', one can use query methods, such as
 'where()', 'orderBy()' to customize the query options.

 ActiveQuery also provides the following additional query options:


   - 'with()': list of relations that this query should be performed
   with. 
   - 'indexBy()': the name of the column by which the query result
   should be indexed. 
   - 'asArray()': whether to return each record as an array.

 These options can be configured using methods of the same name. For example:

   $customers = Customer::find()->with('orders')->asArray()->all();

 > NOTE: elasticsearch limits the number of records returned to 10 records by
 default. > If you expect to get more records you should specify limit
 explicitly.

 Relational query ----------------

 In relational context ActiveQuery represents a relation between two Active
 Record classes.

 Relational ActiveQuery instances are usually created by calling
 'ActiveRecord::hasOne()' and 'ActiveRecord::hasMany()'. An Active Record
 class declares a relation by defining a getter method which calls one of the
 above methods and returns the created ActiveQuery object.

 A relation is specified by 'link' which represents the association between
 columns of different tables; and the multiplicity of the relation is
 indicated by 'multiple'.

 If a relation involves a junction table, it may be specified by 'via()'. This
 methods may only be called in a relational context. Same is true for
 'inverseOf()', which marks a relation as inverse of another relation.

 > Note: elasticsearch limits the number of records returned by any query to
 10 records by default. > If you expect to get more records you should specify
 limit explicitly in relation definition. > This is also important for
 relations that use 'via()' so that if via records are limited to 10 > the
 relations records can also not be more than 10.

 > Note: Currently 'with' is not supported in combination with 'asArray'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/db/ActiveRelationTrait::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/db/QueryTrait::indexBy|
 |yii/db/QueryTrait::where|
 |yii/db/QueryTrait::andWhere|
 |yii/db/QueryTrait::orWhere|
 |yii/db/QueryTrait::filterWhere|
 |yii/db/QueryTrait::andFilterWhere|
 |yii/db/QueryTrait::orFilterWhere|
 |yii/db/QueryTrait::filterCondition|
 |yii/db/QueryTrait::isEmpty|
 |yii/db/QueryTrait::orderBy|
 |yii/db/QueryTrait::addOrderBy|
 |yii/db/QueryTrait::normalizeOrderBy|
 |yii/db/QueryTrait::limit|
 |yii/db/QueryTrait::offset|
 |yii/db/QueryTrait::emulateExecution|
 |yii/elasticsearch/Query::delete|
 |yii/elasticsearch/Query::scalar|
 |yii/elasticsearch/Query::count|
 |yii/elasticsearch/Query::exists|
 |yii/elasticsearch/Query::stats|
 |yii/elasticsearch/Query::highlight|
 |yii/elasticsearch/Query::addAggregation|
 |yii/elasticsearch/Query::addAgg|
 |yii/elasticsearch/Query::addAggregate|
 |yii/elasticsearch/Query::addSuggester|
 |yii/elasticsearch/Query::query|
 |yii/elasticsearch/Query::batch|
 |yii/elasticsearch/Query::each|
 |yii/elasticsearch/Query::filter|
 |yii/elasticsearch/Query::from|
 |yii/elasticsearch/Query::fields|
 |yii/elasticsearch/Query::source|
 |yii/elasticsearch/Query::timeout|
 |yii/elasticsearch/Query::minScore|
 |yii/elasticsearch/Query::options|
 |yii/elasticsearch/Query::addOptions|
 |yii/elasticsearch/Query::postFilter|
 |yii/elasticsearch/Query::explain|
 |yii/db/ActiveRelationTrait::via|
 |yii/db/ActiveRelationTrait::inverseOf|
 |yii/db/ActiveRelationTrait::findFor|
 |yii/db/ActiveRelationTrait::populateRelation|
 |yii/db/ActiveQueryTrait::asArray|
 |yii/db/ActiveQueryTrait::with|
 |yii/db/ActiveQueryTrait::createModels|
 |yii/db/ActiveQueryTrait::findWith|


*yii/elasticsearch/ActiveQuery::__construct*		public
>
 __construct($modelClass, $config='[]')
<
return (void)

 Constructor.

    [$modelClass] (array) The model class associated with this query
    [$config] (array) Configurations to be applied to the newly created query
    object


*yii/elasticsearch/ActiveQuery::init*			public
>
 init()
<
return (void)

 Initializes the object.

 This method is called at the end of the constructor. The default
 implementation will trigger an 'EVENT_INIT' event. If you override this
 method, make sure you call the parent implementation at the end to ensure
 triggering of the event.


*yii/elasticsearch/ActiveQuery::createCommand*		public
>
 createCommand($db='null')
<
return (\yii\elasticsearch\Command) The created DB command instance.

 Creates a DB command that can be used to execute this query.

    [$db] (\yii\elasticsearch\Connection) The DB connection used to create the
    DB command. If null, the DB connection returned by 'modelClass' will be
    used.


*yii/elasticsearch/ActiveQuery::all*			public
>
 all($db='null')
<
return (array) The query results. If the query results in nothing, an empty array
will be returned.

 Executes query and returns all results as an array.

    [$db] (\yii\elasticsearch\Connection) The DB connection used to create the
    DB command. If null, the DB connection returned by 'modelClass' will be
    used.


*yii/elasticsearch/ActiveQuery::populate*			public
>
 populate($rows)
<
return (array) The converted query result

 Converts the raw query results into the format as specified by this query.



 This method is internally used to convert the data fetched from database into
 the format as required by this query.



    [$rows] (array) The raw query result from database


*yii/elasticsearch/ActiveQuery::one*			public
>
 one($db='null')
<
return (\yii\elasticsearch\ActiveRecord|array|null) A single row of query result.
Depending on the setting of 'asArray', the query result may be either an array
or an ActiveRecord object. Null will be returned if the query results in
nothing.

 Executes query and returns a single row of result.

    [$db] (\yii\elasticsearch\Connection) The DB connection used to create the
    DB command. If null, the DB connection returned by 'modelClass' will be
    used.


*yii/elasticsearch/ActiveQuery::search*			public
>
 search($db='null', $options='[]')
<
return (array) The query results.

 Executes the query and returns the complete search result including e.g.
 hits, facets, totalCount.







    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.
    [$options] (array) The options given with this query. Possible options
    are:

     
      -
     
    [routing](http://www.elastic.co/guide/en/elasticsearch/reference/current/search.html#search-routing)
     
      -
     
    [search_type](http://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-search-type.html)


*yii/elasticsearch/ActiveQuery::column*			public
>
 column($field, $db='null')
<
return (array) The first column of the query result. An empty array is returned if
the query results in nothing.

 Executes the query and returns the first column of the result.







    [$field] (string) The field to query over
    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.



 vim:tw=78:ts=8:ft=help:norl:
