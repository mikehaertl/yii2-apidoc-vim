
*yii/sphinx/ActiveRecord*   >> |yii/db/BaseActiveRecord|
=========================

DESCRIPTION
------------------------------------------------------------------------------

 Warning: optimistic lock will NOT work in case of updating fields (not
 attributes) for the runtime indexes!


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|
 |yii/base/Model::$validators|
 |yii/base/Model::$activeValidators|
 |yii/base/Model::$errors|
 |yii/base/Model::$firstErrors|
 |yii/base/Model::$attributes|
 |yii/base/Model::$scenario|
 |yii/base/Model::$iterator|
 |yii/db/BaseActiveRecord::$relatedRecords|
 |yii/db/BaseActiveRecord::$oldAttributes|
 |yii/db/BaseActiveRecord::$dirtyAttributes|
 |yii/db/ActiveRecordInterface::$isNewRecord|
 |yii/db/ActiveRecordInterface::$primaryKey|
 |yii/db/ActiveRecordInterface::$oldPrimaryKey|


$snippet				*yii/sphinx/ActiveRecord::$snippet*

 (string)

$snippetSource				*yii/sphinx/ActiveRecord::$snippetSource*

 (string) Snippet source string.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/db/BaseActiveRecord::init|
 |yii/db/BaseActiveRecord::__get|
 |yii/db/BaseActiveRecord::__set|
 |yii/db/BaseActiveRecord::__isset|
 |yii/db/BaseActiveRecord::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/db/BaseActiveRecord::canGetProperty|
 |yii/db/BaseActiveRecord::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/StaticInstanceTrait::instance|
 |yii/base/ArrayableTrait::fields|
 |yii/base/ArrayableTrait::extraFields|
 |yii/base/ArrayableTrait::toArray|
 |yii/base/ArrayableTrait::extractRootFields|
 |yii/base/ArrayableTrait::extractFieldsFor|
 |yii/base/ArrayableTrait::resolveFields|
 |yii/base/Model::rules|
 |yii/base/Model::scenarios|
 |yii/base/Model::formName|
 |yii/base/Model::attributeLabels|
 |yii/base/Model::attributeHints|
 |yii/base/Model::validate|
 |yii/base/Model::beforeValidate|
 |yii/base/Model::afterValidate|
 |yii/base/Model::getValidators|
 |yii/base/Model::getActiveValidators|
 |yii/base/Model::createValidators|
 |yii/base/Model::isAttributeRequired|
 |yii/base/Model::isAttributeSafe|
 |yii/base/Model::isAttributeActive|
 |yii/db/BaseActiveRecord::getAttributeLabel|
 |yii/db/BaseActiveRecord::getAttributeHint|
 |yii/base/Model::hasErrors|
 |yii/base/Model::getErrors|
 |yii/base/Model::getFirstErrors|
 |yii/base/Model::getFirstError|
 |yii/base/Model::getErrorSummary|
 |yii/base/Model::addError|
 |yii/base/Model::addErrors|
 |yii/base/Model::clearErrors|
 |yii/base/Model::generateAttributeLabel|
 |yii/base/Model::getAttributes|
 |yii/base/Model::setAttributes|
 |yii/base/Model::onUnsafeAttribute|
 |yii/base/Model::getScenario|
 |yii/base/Model::setScenario|
 |yii/base/Model::safeAttributes|
 |yii/base/Model::activeAttributes|
 |yii/base/Model::load|
 |yii/base/Model::loadMultiple|
 |yii/base/Model::validateMultiple|
 |yii/base/Model::getIterator|
 |yii/db/BaseActiveRecord::offsetExists|
 |yii/base/Model::offsetGet|
 |yii/base/Model::offsetSet|
 |yii/db/BaseActiveRecord::offsetUnset|
 |yii/db/ActiveRecordInterface::findOne|
 |yii/db/ActiveRecordInterface::findAll|
 |yii/db/BaseActiveRecord::findByCondition|
 |yii/db/BaseActiveRecord::updateAllCounters|
 |yii/db/BaseActiveRecord::optimisticLock|
 |yii/db/BaseActiveRecord::hasOne|
 |yii/db/BaseActiveRecord::hasMany|
 |yii/db/BaseActiveRecord::createRelationQuery|
 |yii/db/ActiveRecordInterface::populateRelation|
 |yii/db/BaseActiveRecord::isRelationPopulated|
 |yii/db/BaseActiveRecord::getRelatedRecords|
 |yii/db/ActiveRecordInterface::hasAttribute|
 |yii/db/ActiveRecordInterface::getAttribute|
 |yii/db/ActiveRecordInterface::setAttribute|
 |yii/db/BaseActiveRecord::getOldAttributes|
 |yii/db/BaseActiveRecord::setOldAttributes|
 |yii/db/BaseActiveRecord::getOldAttribute|
 |yii/db/BaseActiveRecord::setOldAttribute|
 |yii/db/BaseActiveRecord::markAttributeDirty|
 |yii/db/BaseActiveRecord::isAttributeChanged|
 |yii/db/BaseActiveRecord::getDirtyAttributes|
 |yii/db/ActiveRecordInterface::save|
 |yii/db/BaseActiveRecord::updateAttributes|
 |yii/db/BaseActiveRecord::updateCounters|
 |yii/db/ActiveRecordInterface::getIsNewRecord|
 |yii/db/BaseActiveRecord::setIsNewRecord|
 |yii/db/BaseActiveRecord::afterFind|
 |yii/db/BaseActiveRecord::beforeSave|
 |yii/db/BaseActiveRecord::afterSave|
 |yii/db/BaseActiveRecord::beforeDelete|
 |yii/db/BaseActiveRecord::afterDelete|
 |yii/db/BaseActiveRecord::refresh|
 |yii/db/BaseActiveRecord::refreshInternal|
 |yii/db/BaseActiveRecord::afterRefresh|
 |yii/db/ActiveRecordInterface::getPrimaryKey|
 |yii/db/ActiveRecordInterface::getOldPrimaryKey|
 |yii/db/BaseActiveRecord::instantiate|
 |yii/db/ActiveRecordInterface::getRelation|
 |yii/db/ActiveRecordInterface::link|
 |yii/db/ActiveRecordInterface::unlink|
 |yii/db/BaseActiveRecord::unlinkAll|
 |yii/db/ActiveRecordInterface::isPrimaryKey|


*yii/sphinx/ActiveRecord::attributes*			public
>
 attributes()
<
return (array) List of attribute names.

 Returns the list of all attribute names of the model.

 The default implementation will return all column names of the table
 associated with this AR class.


*yii/sphinx/ActiveRecord::updateAll*			public
>
 updateAll($attributes, $condition='\'\'', $params='[]')
<
return (int) The number of rows updated

 Updates the whole table using the provided attribute values and conditions.

 For example, to change the status to be 1 for all articles which status is 2:

   Article::updateAll(['status' => 1], 'status = 2');



    [$attributes] (array) Attribute values (name-value pairs) to be saved into
    the table
    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the UPDATE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/sphinx/ActiveRecord::deleteAll*			public
>
 deleteAll($condition='\'\'', $params='[]')
<
return (int) The number of rows deleted

 Deletes rows in the index using the provided conditions.

 For example, to delete all articles whose status is 3:

   Article::deleteAll('status = 3');



    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the DELETE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/sphinx/ActiveRecord::update*				public
>
 update($runValidation='true', $attributeNames='null')
<
return (int|false) The number of rows affected, or 'false' if validation fails or
'beforeSave()' stops the updating process.

 Saves the changes to this active record into the associated Sphinx index.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is true. If validation   
 fails, it will skip the rest of the steps; 2. call 'afterValidate()' when
 '$runValidation' is true. 3. call 'beforeSave()'. If the method returns
 false, it will skip the    rest of the steps; 4. save the record into index.
 If this fails, it will skip the rest of the steps; 5. call 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_BEFORE_UPDATE', 'EVENT_AFTER_UPDATE' and 'EVENT_AFTER_VALIDATE' will
 be raised by the corresponding methods.

 Only the 'changedAttributes|changed attribute values' will be saved into
 database.

 For example, to update an article record:

   $article = Article::findOne($id);
   $article->genre_id = $genreId;
   $article->group_id = $groupId;
   $article->update();

 Note that it is possible the update does not affect any row in the table. In
 this case, this method will return 0. For this reason, you should use the
 following code to check if update() is successful or not:

   if ($this->update() !== false) {
       // update successful
   } else {
       // update failed
   }



    [$runValidation] (bool) Whether to perform validation before saving the
    record. If the validation fails, the record will not be inserted into the
    database.
    [$attributeNames] (array) List of attributes that need to be saved.
    Defaults to null, meaning all attributes that are loaded from DB will be
    saved.


*yii/sphinx/ActiveRecord::updateInternal*			protected
>
 updateInternal($attributes='null')
<
return (void)

    [$attributes] () 


*yii/sphinx/ActiveRecord::delete*				public
>
 delete()
<
return (int|false) The number of rows deleted, or 'false' if the deletion is
unsuccessful for some reason. Note that it is possible the number of rows
deleted is 0, even though the deletion execution is successful.

 Deletes the index entry corresponding to this active record.

 This method performs the following steps in order:

 1. call 'beforeDelete()'. If the method returns false, it will skip the   
 rest of the steps; 2. delete the record from the index; 3. call
 'afterDelete()'.

 In the above step 1 and 3, events named 'EVENT_BEFORE_DELETE' and
 'EVENT_AFTER_DELETE' will be raised by the corresponding methods.


*yii/sphinx/ActiveRecord::equals*				public
>
 equals($record)
<
return (bool) Whether the two active records refer to the same row in the same index.

 Returns a value indicating whether the given active record is the same as the
 current one.

 The comparison is made by comparing the index names and the primary key
 values of the two active records. If one of the records 'isNewRecord|is new'
 they are also considered not equal.

    [$record] (\yii\sphinx\ActiveRecord) Record to compare to


*yii/sphinx/ActiveRecord::populateRecord*			public
>
 populateRecord($record, $row)
<
return (void)

 Populates an active record object using a row of data from the
 database/storage.



 This is an internal method meant to be called to create active record objects
 after fetching data from the database. It is mainly used by 'ActiveQuery' to
 populate the query results into active records.

 When calling this method manually you should call 'afterFind()' on the
 created record to trigger the 'EVENT_AFTER_FIND|afterFind Event'.



    [$record] (\yii\db\BaseActiveRecord) The record to be populated. In most
    cases this will be an instance created by 'instantiate()' beforehand.
    [$row] (array) Attribute values (name => value)


*yii/sphinx/ActiveRecord::primaryKey*			public
>
 primaryKey()
<
return (string[]) The primary keys of the associated Sphinx index.

 Returns the primary key name for this AR class.

 The default implementation will return the primary key as declared in the
 Sphinx index, which is associated with this AR class.

 Note that an array should be returned even for a table with single primary
 key.


*yii/sphinx/ActiveRecord::find*				public
>
 find()
<
return (\yii\sphinx\ActiveQuery) The newly created 'ActiveQuery' instance.

 Creates an 'ActiveQueryInterface' instance for query purpose.



 The returned 'ActiveQueryInterface' instance can be further customized by
 calling methods defined in 'ActiveQueryInterface' before 'one()' or 'all()'
 is called to return populated ActiveRecord instances. For example,

   // find the customer whose ID is 1
   $customer = Customer::find()->where(['id' => 1])->one();

   // find all active customers and order them by their age:
   $customers = Customer::find()
       ->where(['status' => 1])
       ->orderBy('age')
       ->all();

 This method is also called by 'BaseActiveRecord::hasOne()' and
 'BaseActiveRecord::hasMany()' to create a relational query.

 You may override this method to return a customized query. For example,

   class Customer extends ActiveRecord
   {
       public static function find()
       {
           // use CustomerQuery instead of the default ActiveQuery
           return new CustomerQuery(get_called_class());
       }
   }

 The following code shows how to apply a default condition for all queries:

 '''php class Customer extends ActiveRecord {     public static function
 find()     {         return parent::find()->where(['deleted' => false]);    
 } }

 // Use andWhere()/orWhere() to apply the default condition // SELECT FROM
 customer WHERE 'deleted'=:deleted AND age>30 $customers =
 Customer::find()->andWhere('age>30')->all();

 // Use where() to ignore the default condition // SELECT FROM customer WHERE
 age>30 $customers = Customer::find()->where('age>30')->all();




*yii/sphinx/ActiveRecord::insert*				public
>
 insert($runValidation='true', $attributes='null')
<
return (bool) Whether the attributes are valid and the record is inserted
successfully.

 Inserts a row into the associated Sphinx index using the attribute values of
 this record.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is true. If validation   
 fails, it will skip the rest of the steps; 2. call 'afterValidate()' when
 '$runValidation' is true. 3. call 'beforeSave()'. If the method returns
 false, it will skip the    rest of the steps; 4. insert the record into
 index. If this fails, it will skip the rest of the steps; 5. call
 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_BEFORE_INSERT', 'EVENT_AFTER_INSERT' and 'EVENT_AFTER_VALIDATE' will
 be raised by the corresponding methods.

 Only the 'changedAttributes|changed attribute values' will be inserted.

 For example, to insert an article record:

   $article = new Article();
   $article->id = $id;
   $article->genre_id = $genreId;
   $article->content = $content;
   $article->insert();



    [$runValidation] (bool) Whether to perform validation before saving the
    record. If the validation fails, the record will not be inserted.
    [$attributes] (array) List of attributes that need to be saved. Defaults
    to null, meaning all attributes that are loaded from index will be saved.


*yii/sphinx/ActiveRecord::getDb*				public
>
 getDb()
<
return (\yii\sphinx\Connection) The Sphinx connection used by this AR class.

 Returns the Sphinx connection used by this AR class.

 By default, the "sphinx" application component is used as the Sphinx
 connection. You may override this method if you want to use a different
 Sphinx connection.


*yii/sphinx/ActiveRecord::findBySql*			public
>
 findBySql($sql, $params='[]')
<
return (\yii\sphinx\ActiveQuery) The newly created 'ActiveQuery' instance

 Creates an 'ActiveQuery' instance with a given SQL statement.

 Note that because the SQL statement is already specified, calling additional
 query modification methods (such as 'where()', 'order()') on the created
 'ActiveQuery' instance will have no effect. However, calling 'with()',
 'asArray()' or 'indexBy()' is still fine.

 Below is an example:

   $customers = Article::findBySql("SELECT * FROM `idx_article` WHERE
 MATCH('development')")->all();



    [$sql] (string) The SQL statement to be executed
    [$params] (array) Parameters to be bound to the SQL statement during
    execution.


*yii/sphinx/ActiveRecord::indexName*			public
>
 indexName()
<
return (string) The index name

 Declares the name of the Sphinx index associated with this AR class.

 By default this method returns the class name as the index name by calling
 'Inflector::camel2id()'. For example, 'Article' becomes 'article', and
 'StockItem' becomes 'stock_item'. You may override this method if the index
 is not named after this convention.


*yii/sphinx/ActiveRecord::getIndexSchema*			public
>
 getIndexSchema()
<
return (\yii\sphinx\IndexSchema) The schema information of the Sphinx index
associated with this AR class.

 Returns the schema information of the Sphinx index associated with this AR
 class.


*yii/sphinx/ActiveRecord::callSnippets*			public
>
 callSnippets($source, $match, $options='[]')
<
return (string|array) Built snippet in case "source" is a string, list of built
snippets in case "source" is an array.

 Builds a snippet from provided data and query, using specified index
 settings.

    [$source] (string|array) Is the source data to extract a snippet from. It
    could be either a single string or array of strings.
    [$match] (string) The full-text query to build snippets for.
    [$options] (array) List of options in format: optionName => optionValue


*yii/sphinx/ActiveRecord::callKeywords*			public
>
 callKeywords($text, $fetchStatistic='false')
<
return (array) Keywords and statistics

 Returns tokenized and normalized forms of the keywords, and, optionally,
 keyword statistics.

    [$text] (string) The text to break down to keywords.
    [$fetchStatistic] (bool) Whether to return document and hit occurrence
    statistics


*yii/sphinx/ActiveRecord::setSnippet*			public
>
 setSnippet($snippet)
<
return (void)

    [$snippet] (string) 


*yii/sphinx/ActiveRecord::getSnippet*			public
>
 getSnippet($match='null', $options='[]')
<
return (string) Snippet value

 Returns current snippet value or generates new one from given match.

    [$match] (string) Snippet source query
    [$options] (array) List of options in format: optionName => optionValue


*yii/sphinx/ActiveRecord::fetchSnippet*			protected
>
 fetchSnippet($match, $options='[]')
<
return (string) Snippet value.

 Builds up the snippet value from the given query.

    [$match] (string) The full-text query to build snippets for.
    [$options] (array) List of options in format: optionName => optionValue


*yii/sphinx/ActiveRecord::getSnippetSource*		public
>
 getSnippetSource()
<
return (string) Snippet source string.

 Returns the string, which should be used as a source to create snippet for
 this Active Record instance.

 Child classes must implement this method to return the actual snippet source
 text. For example:

   public function getSnippetSource()
   {
       return $this->snippetSourceRelation->content;
   }




*yii/sphinx/ActiveRecord::transactions*			public
>
 transactions()
<
return (array) The declarations of transactional operations. The array keys are
scenarios names, and the array values are the corresponding transaction
operations.

 Declares which operations should be performed within a transaction in
 different scenarios.

 The supported DB operations are: 'OP_INSERT', 'OP_UPDATE' and 'OP_DELETE',
 which correspond to the 'insert()', 'update()' and 'delete()' methods,
 respectively. By default, these methods are NOT enclosed in a transaction.

 In some scenarios, to ensure data consistency, you may want to enclose some
 or all of them in transactions. You can do so by overriding this method and
 returning the operations that need to be transactional. For example,

   return [
       'admin' => self::OP_INSERT,
       'api' => self::OP_INSERT | self::OP_UPDATE | self::OP_DELETE,
       // the above is equivalent to the following:
       // 'api' => self::OP_ALL,

   ];

 The above declaration specifies that in the "admin" scenario, the insert
 operation ('insert()') should be done in a transaction; and in the "api"
 scenario, all the operations should be done in a transaction.


*yii/sphinx/ActiveRecord::isTransactional*		public
>
 isTransactional($operation)
<
return (bool) Whether the specified operation is transactional in the current
'scenario'.

 Returns a value indicating whether the specified operation is transactional
 in the current 'scenario'.

    [$operation] (int) The operation to check. Possible values are
    'OP_INSERT', 'OP_UPDATE' and 'OP_DELETE'.



 vim:tw=78:ts=8:ft=help:norl:
