
*yii/gii/Generator*   >> |yii/base/Model|
===================

SUBCLASSES
------------------------------------------------------------------------------

|yii/gii/generators/form/Generator|
|yii/gii/generators/module/Generator|
|yii/gii/generators/extension/Generator|
|yii/gii/generators/crud/Generator|
|yii/gii/generators/model/Generator|
|yii/gii/generators/controller/Generator|
|yii/mongodb/gii/model/Generator|
|yii/queue/gii/Generator|
|yii/sphinx/gii/model/Generator|

DESCRIPTION
------------------------------------------------------------------------------

 A generator instance is responsible for taking user inputs, validating them,
 and using them to generate the corresponding code based on a set of code
 template files.

 A generator class typically needs to implement the following methods:


   - 'getName()': returns the name of the generator 
   - 'getDescription()': returns the detailed description of the
   generator 
   - 'generate()': generates the code based on the current user input
   and the specified code template files.   This is the place where main code
 generation code resides.


PROPERTY DETAILS
------------------------------------------------------------------------------


$templates				*yii/gii/Generator::$templates*

 (array) A list of available code templates. The array keys are the template
 names, and the array values are the corresponding template paths or path
 aliases.

$template				*yii/gii/Generator::$template*

 (string) The name of the code template that the user has selected. The value
 of this property is internally managed by this class.

$enableI18N				*yii/gii/Generator::$enableI18N*

 (bool) Whether the strings will be generated using 'Yii::t()' or normal
 strings.

$messageCategory			*yii/gii/Generator::$messageCategory*

 (string) The message category used by 'Yii::t()' when '$enableI18N' is
 'true'. Defaults to 'app'.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/gii/Generator::getName*				public
>
 getName()
<
return (string) Name of the code generator



*yii/gii/Generator::generate*				public
>
 generate()
<
return (\yii\gii\CodeFile[]) A list of code files to be created.

 Generates the code based on the current user input and the specified code
 template files.

 This is the main method that child classes should implement. Please refer to
 '\yii\gii\generators\controller\Generator::generate()' as an example on how
 to implement this method.


*yii/gii/Generator::init*					public
>
 init()
<
return (void)



*yii/gii/Generator::attributeLabels*			public
>
 attributeLabels()
<
return (void)



*yii/gii/Generator::requiredTemplates*			public
>
 requiredTemplates()
<
return (array) List of code template files that are required. They should be file
paths relative to 'templatePath'.

 Returns a list of code template files that are required.

 Derived classes usually should override this method if they require the
 existence of certain template files.


*yii/gii/Generator::stickyAttributes*			public
>
 stickyAttributes()
<
return (array) List of sticky attributes

 Returns the list of sticky attributes.

 A sticky attribute will remember its value and will initialize the attribute
 with this value when the generator is restarted.


*yii/gii/Generator::hints*				public
>
 hints()
<
return (array) The list of hint messages

 Returns the list of hint messages.

 The array keys are the attribute names, and the array values are the
 corresponding hint messages. Hint messages will be displayed to end users
 when they are filling the form for the generator.


*yii/gii/Generator::autoCompleteData*			public
>
 autoCompleteData()
<
return (array) The list of auto complete values

 Returns the list of auto complete values.

 The array keys are the attribute names, and the array values are the
 corresponding auto complete values. Auto complete values can also be callable
 typed in order one want to make postponed data generation.


*yii/gii/Generator::successMessage*			public
>
 successMessage()
<
return (string) The message to be displayed when the newly generated code is saved
successfully.

 Returns the message to be displayed when the newly generated code is saved
 successfully.

 Child classes may override this method to customize the message.


*yii/gii/Generator::formView*				public
>
 formView()
<
return (string) The view file for the input form of the generator.

 Returns the view file for the input form of the generator.

 The default implementation will return the "form.php" file under the
 directory that contains the generator class file.


*yii/gii/Generator::defaultTemplate*			public
>
 defaultTemplate()
<
return (string) The root path to the default code template files.

 Returns the root path to the default code template files.

 The default implementation will return the "templates" subdirectory of the
 directory containing the generator class file.


*yii/gii/Generator::getDescription*			public
>
 getDescription()
<
return (string) The detailed description of the generator.



*yii/gii/Generator::rules*				public
>
 rules()
<
return (void)

 Child classes should override this method like the following so that the
 parent rules are included:

   return array_merge(parent::rules(), [
       ...rules for the child class...
   ]);




*yii/gii/Generator::loadStickyAttributes*			public
>
 loadStickyAttributes()
<
return (void)

 Loads sticky attributes from an internal file and populates them into the
 generator.


*yii/gii/Generator::saveStickyAttributes*			public
>
 saveStickyAttributes()
<
return (void)

 Saves sticky attributes into an internal file.


*yii/gii/Generator::getStickyDataFile*			public
>
 getStickyDataFile()
<
return (string) The file path that stores the sticky attribute values.



*yii/gii/Generator::save*					public
>
 save($files, $answers, $results)
<
return (bool) Whether files are successfully saved without any error.

 Saves the generated code into files.

    [$files] (\yii\gii\CodeFile[]) The code files to be saved
    [$answers] (array) 
    [$results] (string) This parameter receives a value from this method
    indicating the log messages generated while saving the code files.


*yii/gii/Generator::getTemplatePath*			public
>
 getTemplatePath()
<
return (string) The root path of the template files that are currently being used.



*yii/gii/Generator::render*				public
>
 render($template, $params='[]')
<
return (string) The generated code

 Generates code using the specified code template and parameters.

 Note that the code template will be used as a PHP file.

    [$template] (string) The code template file. This must be specified as a
    file path relative to 'templatePath'.
    [$params] (array) List of parameters to be passed to the template file.


*yii/gii/Generator::validateTemplate*			public
>
 validateTemplate()
<
return (void)

 Validates the template selection.

 This method validates whether the user selects an existing template and the
 template contains all required template files as specified in
 'requiredTemplates()'.


*yii/gii/Generator::validateClass*			public
>
 validateClass($attribute, $params)
<
return (void)

 An inline validator that checks if the attribute value refers to an existing
 class name.

 If the 'extends' option is specified, it will also check if the class is a
 child class of the class represented by the 'extends' option.

    [$attribute] (string) The attribute being validated
    [$params] (array) The validation options


*yii/gii/Generator::validateNewClass*			public
>
 validateNewClass($attribute, $params)
<
return (void)

 An inline validator that checks if the attribute value refers to a valid
 namespaced class name.

 The validator will check if the directory containing the new class file exist
 or not.

    [$attribute] (string) The attribute being validated
    [$params] (array) The validation options


*yii/gii/Generator::validateMessageCategory*		public
>
 validateMessageCategory()
<
return (void)

 Checks if message category is not empty when I18N is enabled.


*yii/gii/Generator::isReservedKeyword*			public
>
 isReservedKeyword($value)
<
return (bool) Whether the value is a reserved PHP keyword.

    [$value] (string) The attribute to be validated


*yii/gii/Generator::generateString*			public
>
 generateString($string='''', $placeholders='[]')
<
return (string) 

 Generates a string depending on enableI18N property

    [$string] (string) The text be generated
    [$placeholders] (array) The placeholders to use by 'Yii::t()'



 vim:tw=78:ts=8:ft=help:norl:
