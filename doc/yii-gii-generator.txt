
*yii/gii/Generator*   >> |yii/base/Model|
===================

SUBCLASSES
------------------------------------------------------------------------------

|yii/gii/generators/module/Generator|
|yii/gii/generators/controller/Generator|
|yii/gii/generators/extension/Generator|
|yii/gii/generators/form/Generator|
|yii/gii/generators/model/Generator|
|yii/gii/generators/crud/Generator|
|yii/mongodb/gii/model/Generator|
|yii/queue/gii/Generator|
|yii/sphinx/gii/model/Generator|

DESCRIPTION
------------------------------------------------------------------------------

 A generator instance is responsible for taking user inputs, validating them,
 and using them to generate the corresponding code based on a set of code
 template files.

 A generator class typically needs to implement the following methods:


   - 'getName()': returns the name of the generator 
   - 'getDescription()': returns the detailed description of the
   generator 
   - 'generate()': generates the code based on the current user input
   and the specified code template files.   This is the place where main code
 generation code resides.


PROPERTY DETAILS
------------------------------------------------------------------------------


$templates				*yii/gii/Generator::$templates*

 (array) A list of available code templates. The array keys are the template
 names, and the array values are the corresponding template paths or path
 aliases.

$template				*yii/gii/Generator::$template*

 (string) The name of the code template that the user has selected. The value
 of this property is internally managed by this class.

$enableI18N				*yii/gii/Generator::$enableI18N*

 (bool) Whether the strings will be generated using 'Yii::t()' or normal
 strings.

$messageCategory			*yii/gii/Generator::$messageCategory*

 (string) The message category used by 'Yii::t()' when '$enableI18N' is
 'true'. Defaults to 'app'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/StaticInstanceTrait::instance|
 |yii/base/ArrayableTrait::fields|
 |yii/base/ArrayableTrait::extraFields|
 |yii/base/ArrayableTrait::toArray|
 |yii/base/ArrayableTrait::extractRootFields|
 |yii/base/ArrayableTrait::extractFieldsFor|
 |yii/base/ArrayableTrait::resolveFields|
 |yii/base/Model::scenarios|
 |yii/base/Model::formName|
 |yii/base/Model::attributes|
 |yii/base/Model::attributeHints|
 |yii/base/Model::validate|
 |yii/base/Model::beforeValidate|
 |yii/base/Model::afterValidate|
 |yii/base/Model::getValidators|
 |yii/base/Model::getActiveValidators|
 |yii/base/Model::createValidators|
 |yii/base/Model::isAttributeRequired|
 |yii/base/Model::isAttributeSafe|
 |yii/base/Model::isAttributeActive|
 |yii/base/Model::getAttributeLabel|
 |yii/base/Model::getAttributeHint|
 |yii/base/Model::hasErrors|
 |yii/base/Model::getErrors|
 |yii/base/Model::getFirstErrors|
 |yii/base/Model::getFirstError|
 |yii/base/Model::getErrorSummary|
 |yii/base/Model::addError|
 |yii/base/Model::addErrors|
 |yii/base/Model::clearErrors|
 |yii/base/Model::generateAttributeLabel|
 |yii/base/Model::getAttributes|
 |yii/base/Model::setAttributes|
 |yii/base/Model::onUnsafeAttribute|
 |yii/base/Model::getScenario|
 |yii/base/Model::setScenario|
 |yii/base/Model::safeAttributes|
 |yii/base/Model::activeAttributes|
 |yii/base/Model::load|
 |yii/base/Model::loadMultiple|
 |yii/base/Model::validateMultiple|
 |yii/base/Model::getIterator|
 |yii/base/Model::offsetExists|
 |yii/base/Model::offsetGet|
 |yii/base/Model::offsetSet|
 |yii/base/Model::offsetUnset|


*yii/gii/Generator::init*					public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/gii/Generator::rules*				public
>
 rules()
<
return (array) Validation rules

 Returns the validation rules for attributes.



 Validation rules are used by 'validate()' to check if attribute values are
 valid. Child classes may override this method to declare different validation
 rules.

 Each rule is an array with the following structure:

   [
       ['attribute1', 'attribute2'],
       'validator type',
       'on' => ['scenario1', 'scenario2'],
       //...other parameters...
   ]

 where

  
   - attribute list: required, specifies the attributes array to be
   validated, for single attribute you can pass a string;  
   - validator type: required, specifies the validator to be used. It
   can be a built-in validator name,    a method name of the model class, an
 anonymous function, or a validator class name.  
   - on: optional, specifies the 'scenario|scenarios' array in which
   the validation    rule can be applied. If this option is not set, the rule
 will apply to all scenarios.  
   - additional name-value pairs can be specified to initialize the
   corresponding validator properties.    Please refer to individual validator
 class API for possible properties.

 A validator can be either an object of a class extending 'Validator', or a
 model class method (called *inline validator*) that has the following
 signature:

   // $params refers to validation parameters given in the rule
   function validatorName($attribute, $params)

 In the above '$attribute' refers to the attribute currently being validated
 while '$params' contains an array of validator configuration options such as
 'max' in case of 'string' validator. The value of the attribute currently
 being validated can be accessed as '$this->$attribute'. Note the '$' before
 'attribute'; this is taking the value of the variable '$attribute' and using
 it as the name of the property to access.

 Yii also provides a set of 'Validator::builtInValidators|built-in
 validators'. Each one has an alias name which can be used when specifying a
 validation rule.

 Below are some examples:

   [
       // built-in "required" validator
       [['username', 'password'], 'required'],
       // built-in "string" validator customized with "min" and "max"
 properties
       ['username', 'string', 'min' => 3, 'max' => 12],
       // built-in "compare" validator that is used in "register" scenario
 only
       ['password', 'compare', 'compareAttribute' => 'password2', 'on' =>
 'register'],
       // an inline validator defined via the "authenticate()" method in the
 model class
       ['password', 'authenticate', 'on' => 'login'],
       // a validator of class "DateRangeValidator"
       ['dateRange', 'DateRangeValidator'],
   ];

 Note, in order to inherit rules defined in the parent class, a child class
 needs to merge the parent rules with child rules using functions such as
 'array_merge()'.

 Child classes should override this method like the following so that the
 parent rules are included:

   return array_merge(parent::rules(), [
       ...rules for the child class...
   ]);




*yii/gii/Generator::attributeLabels*			public
>
 attributeLabels()
<
return (array) Attribute labels (name => label)

 Returns the attribute labels.



 Attribute labels are mainly used for display purpose. For example, given an
 attribute 'firstName', we can declare a label 'First Name' which is more
 user-friendly and can be displayed to end users.

 By default an attribute label is generated using 'generateAttributeLabel()'.
 This method allows you to explicitly specify attribute labels.

 Note, in order to inherit labels defined in the parent class, a child class
 needs to merge the parent labels with child labels using functions such as
 'array_merge()'.




*yii/gii/Generator::getName*				public
>
 getName()
<
return (string) Name of the code generator



*yii/gii/Generator::generate*				public
>
 generate()
<
return (\yii\gii\CodeFile[]) A list of code files to be created.

 Generates the code based on the current user input and the specified code
 template files.

 This is the main method that child classes should implement. Please refer to
 '\yii\gii\generators\controller\Generator::generate()' as an example on how
 to implement this method.


*yii/gii/Generator::requiredTemplates*			public
>
 requiredTemplates()
<
return (array) List of code template files that are required. They should be file
paths relative to 'templatePath'.

 Returns a list of code template files that are required.

 Derived classes usually should override this method if they require the
 existence of certain template files.


*yii/gii/Generator::stickyAttributes*			public
>
 stickyAttributes()
<
return (array) List of sticky attributes

 Returns the list of sticky attributes.

 A sticky attribute will remember its value and will initialize the attribute
 with this value when the generator is restarted.


*yii/gii/Generator::hints*				public
>
 hints()
<
return (array) The list of hint messages

 Returns the list of hint messages.

 The array keys are the attribute names, and the array values are the
 corresponding hint messages. Hint messages will be displayed to end users
 when they are filling the form for the generator.


*yii/gii/Generator::autoCompleteData*			public
>
 autoCompleteData()
<
return (array) The list of auto complete values

 Returns the list of auto complete values.

 The array keys are the attribute names, and the array values are the
 corresponding auto complete values. Auto complete values can also be callable
 typed in order one want to make postponed data generation.


*yii/gii/Generator::successMessage*			public
>
 successMessage()
<
return (string) The message to be displayed when the newly generated code is saved
successfully.

 Returns the message to be displayed when the newly generated code is saved
 successfully.

 Child classes may override this method to customize the message.


*yii/gii/Generator::formView*				public
>
 formView()
<
return (string) The view file for the input form of the generator.

 Returns the view file for the input form of the generator.

 The default implementation will return the "form.php" file under the
 directory that contains the generator class file.


*yii/gii/Generator::defaultTemplate*			public
>
 defaultTemplate()
<
return (string) The root path to the default code template files.

 Returns the root path to the default code template files.

 The default implementation will return the "templates" subdirectory of the
 directory containing the generator class file.


*yii/gii/Generator::getDescription*			public
>
 getDescription()
<
return (string) The detailed description of the generator.



*yii/gii/Generator::loadStickyAttributes*			public
>
 loadStickyAttributes()
<
return (void)

 Loads sticky attributes from an internal file and populates them into the
 generator.


*yii/gii/Generator::saveStickyAttributes*			public
>
 saveStickyAttributes()
<
return (void)

 Saves sticky attributes into an internal file.


*yii/gii/Generator::getStickyDataFile*			public
>
 getStickyDataFile()
<
return (string) The file path that stores the sticky attribute values.



*yii/gii/Generator::save*					public
>
 save($files, $answers, $results)
<
return (bool) Whether files are successfully saved without any error.

 Saves the generated code into files.

    [$files] (\yii\gii\CodeFile[]) The code files to be saved
    [$answers] (array) 
    [$results] (string) This parameter receives a value from this method
    indicating the log messages generated while saving the code files.


*yii/gii/Generator::getTemplatePath*			public
>
 getTemplatePath()
<
return (string) The root path of the template files that are currently being used.



*yii/gii/Generator::render*				public
>
 render($template, $params='[]')
<
return (string) The generated code

 Generates code using the specified code template and parameters.

 Note that the code template will be used as a PHP file.

    [$template] (string) The code template file. This must be specified as a
    file path relative to 'templatePath'.
    [$params] (array) List of parameters to be passed to the template file.


*yii/gii/Generator::validateTemplate*			public
>
 validateTemplate()
<
return (void)

 Validates the template selection.

 This method validates whether the user selects an existing template and the
 template contains all required template files as specified in
 'requiredTemplates()'.


*yii/gii/Generator::validateClass*			public
>
 validateClass($attribute, $params)
<
return (void)

 An inline validator that checks if the attribute value refers to an existing
 class name.

 If the 'extends' option is specified, it will also check if the class is a
 child class of the class represented by the 'extends' option.

    [$attribute] (string) The attribute being validated
    [$params] (array) The validation options


*yii/gii/Generator::validateNewClass*			public
>
 validateNewClass($attribute, $params)
<
return (void)

 An inline validator that checks if the attribute value refers to a valid
 namespaced class name.

 The validator will check if the directory containing the new class file exist
 or not.

    [$attribute] (string) The attribute being validated
    [$params] (array) The validation options


*yii/gii/Generator::validateMessageCategory*		public
>
 validateMessageCategory()
<
return (void)

 Checks if message category is not empty when I18N is enabled.


*yii/gii/Generator::isReservedKeyword*			public
>
 isReservedKeyword($value)
<
return (bool) Whether the value is a reserved PHP keyword.

    [$value] (string) The attribute to be validated


*yii/gii/Generator::generateString*			public
>
 generateString($string='''', $placeholders='[]')
<
return (string) 

 Generates a string depending on enableI18N property

    [$string] (string) The text be generated
    [$placeholders] (array) The placeholders to use by 'Yii::t()'



 vim:tw=78:ts=8:ft=help:norl:
