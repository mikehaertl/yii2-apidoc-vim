
*yii/swiftmailer/Mailer*   >> |yii/mail/BaseMailer|
========================

DESCRIPTION
------------------------------------------------------------------------------

 To use Mailer, you should configure it in the application configuration like
 the following:

   [
       'components' => [
           'mailer' => [
               'class' => 'yii\swiftmailer\Mailer',
               'transport' => [
                   'class' => 'Swift_SmtpTransport',
                   'host' => 'localhost',
                   'username' => 'username',
                   'password' => 'password',
                   'port' => '587',
                   'encryption' => 'tls',
               ],
           ],
           // ...
       ],
       // ...
   ],

 You may also skip the configuration of the 'transport' property. In that
 case, the default '\Swift_SendmailTransport' transport will be used to send
 emails.

 You specify the transport constructor arguments using 'constructArgs' key in
 the config. You can also specify the list of plugins, which should be
 registered to the transport using 'plugins' key. For example:

   'transport' => [
       'class' => 'Swift_SmtpTransport',
       'constructArgs' => ['localhost', 25]
       'plugins' => [
           [
               'class' => 'Swift_Plugins_ThrottlerPlugin',
               'constructArgs' => [20],
           ],
       ],
   ],

 To send an email, you may use the following code:

   Yii::$app->mailer->compose('contact/html', ['contactForm' => $form])
       ->setFrom('from@domain.com')
       ->setTo($form->email)
       ->setSubject($form->subject)
       ->send();




PROPERTY DETAILS
------------------------------------------------------------------------------


$messageClass				*yii/swiftmailer/Mailer::$messageClass*

 (string) Message default class name.

$enableSwiftMailerLogging		*yii/swiftmailer/Mailer::$enableSwiftMailerLogging*

 (bool) Whether to enable writing of the SwiftMailer internal logs using Yii
 log mechanism. If enabled 'Logger' plugin will be attached to the 'transport'
 for this purpose.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/swiftmailer/Mailer::getSwiftMailer*			public
>
 getSwiftMailer()
<
return (array|\Swift_Mailer) Swift mailer instance or array configuration.



*yii/swiftmailer/Mailer::setTransport*			public
>
 setTransport($transport)
<
return (void)

    [$transport] (array|\Swift_Transport) 


*yii/swiftmailer/Mailer::getTransport*			public
>
 getTransport()
<
return (array|\Swift_Transport) 



*yii/swiftmailer/Mailer::sendMessage*			protected
>
 sendMessage($message)
<
return (void)

    [$message] () 


*yii/swiftmailer/Mailer::createSwiftMailer*		protected
>
 createSwiftMailer()
<
return (\Swift_Mailer) Mailer instance.

 Creates Swift mailer instance.


*yii/swiftmailer/Mailer::createTransport*			protected
>
 createTransport($config)
<
return (\Swift_Transport) Transport instance.

 Creates email transport instance by its array configuration.

    [$config] (array) Transport configuration.


*yii/swiftmailer/Mailer::createSwiftObject*		protected
>
 createSwiftObject($config)
<
return (Object) Created object

 Creates Swift library object, from given array configuration.

    [$config] (array) Object configuration



 vim:tw=78:ts=8:ft=help:norl:
