
*yii/mongodb/Collection*   >> |yii/base/Object|
========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/mongodb/file/Collection|

DESCRIPTION
------------------------------------------------------------------------------

 A collection object is usually created by calling 'Database::getCollection()'
 or 'Connection::getCollection()'.

 Collection provides the basic interface for the Mongo queries, mostly:
 insert, update, delete operations. For example:

   $collection = Yii::$app->mongodb->getCollection('customer');
   $collection->insert(['name' => 'John Smith', 'status' => 1]);

 Collection also provides shortcut for 'Command' methods, such as 'group()',
 'mapReduce()' and so on.

 To perform "find" queries, please use 'Query' instead.


PROPERTY DETAILS
------------------------------------------------------------------------------

$database				*yii/mongodb/Collection::$database*

 (\yii\mongodb\Database) MongoDB database instance.

$name					*yii/mongodb/Collection::$name*

 (string) Name of this collection.

$fullName				*yii/mongodb/Collection::$fullName*

 (string) Full name of this collection, including database name.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/mongodb/Collection::className*			public

 See |yii/base/BaseObject::className|


*yii/mongodb/Collection::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/mongodb/Collection::init*				public

 See |yii/base/BaseObject::init|


*yii/mongodb/Collection::__get*				public

 See |yii/base/BaseObject::__get|


*yii/mongodb/Collection::__set*				public

 See |yii/base/BaseObject::__set|


*yii/mongodb/Collection::__isset*				public

 See |yii/base/BaseObject::__isset|


*yii/mongodb/Collection::__unset*				public

 See |yii/base/BaseObject::__unset|


*yii/mongodb/Collection::__call*				public

 See |yii/base/BaseObject::__call|


*yii/mongodb/Collection::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/mongodb/Collection::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/mongodb/Collection::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/mongodb/Collection::hasMethod*			public

 See |yii/base/BaseObject::hasMethod|


*yii/mongodb/Collection::getFullName*			public
>
 getFullName()
<
return (string) Full name of this collection, including database name.



*yii/mongodb/Collection::drop*				public
>
 drop()
<
return (bool) Whether the operation successful.



*yii/mongodb/Collection::listIndexes*			public
>
 listIndexes($options='[]')
<
return (array) List of indexes info.

    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::createIndexes*			public
>
 createIndexes($indexes)
<
return (bool) Whether operation was successful.

 Example:

   $collection = Yii::$app->mongo->getCollection('customer');
   $collection->createIndexes([
       [
           'key' => ['name'],
       ],
       [
           'key' => [
               'email' => 1,
               'address' => -1,
           ],
           'name' => 'my_index'
       ],
   ]);



    [$indexes] (array[]) Indexes specification. Each specification should be
    an array in format: optionName => value The main options are:


      - keys: array, column names with sort order, to be indexed. This
      option is mandatory. 
      - unique: bool, whether to create unique index. 
      - name: string, the name of the index, if not set it will be
      generated automatically. 
      - background: bool, whether to bind index in the background. 
      - sparse: bool, whether index should reference only documents with
      the specified field.

    See
    'https://docs.mongodb.com/manual/reference/method/db.collection.createIndex/#options-for-all-index-types'
    for the full list of options.


*yii/mongodb/Collection::dropIndexes*			public
>
 dropIndexes($indexes)
<
return (int) Count of dropped indexes.

    [$indexes] (string) Wildcard for name of the indexes to be dropped. You
    can use '*' to drop all indexes.


*yii/mongodb/Collection::createIndex*			public
>
 createIndex($columns, $options='[]')
<
return (bool) Whether the operation successful.

    [$columns] (array|string) Column name or list of column names. If array is
    given, each element in the array has as key the field name, and as value
    either 1 for ascending sort, or -1 for descending sort. You can specify
    field using native numeric key with the field name as a value, in this
    case ascending sort will be used. For example:

      [
          'name',
          'status' => -1,
      ]


    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::dropIndex*			public
>
 dropIndex($columns)
<
return (bool) Whether the operation successful.

    [$columns] (string|array) Column name or list of column names. If array is
    given, each element in the array has as key the field name, and as value
    either 1 for ascending sort, or -1 for descending sort. Use value 'text'
    to specify text index. You can specify field using native numeric key with
    the field name as a value, in this case ascending sort will be used. For
    example:

      [
          'name',
          'status' => -1,
          'description' => 'text',
      ]




*yii/mongodb/Collection::dropAllIndexes*			public
>
 dropAllIndexes()
<
return (int) Count of dropped indexes.



*yii/mongodb/Collection::find*				public
>
 find($condition='[]', $fields='[]', $options='[]')
<
return (\MongoDB\Driver\Cursor) Cursor for the search results

 In order to perform "find" queries use 'Query' class.

    [$condition] (array) Query condition
    [$fields] (array) Fields to be selected
    [$options] (array) Query options (available since 2.1).


*yii/mongodb/Collection::findOne*				public
>
 findOne($condition='[]', $fields='[]', $options='[]')
<
return (array|null) The single document. Null is returned if the query results in
nothing.

    [$condition] (array) Query condition
    [$fields] (array) Fields to be selected
    [$options] (array) Query options (available since 2.1).


*yii/mongodb/Collection::findAndModify*			public
>
 findAndModify($condition, $update, $options='[]')
<
return (array|null) The original document, or the modified document when
$options['new'] is set.

    [$condition] (array) Query condition
    [$update] (array) Update criteria
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::insert*				public
>
 insert($data, $options='[]')
<
return (\MongoDB\BSON\ObjectID) New record ID instance.

    [$data] (array|object) Data to be inserted.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::batchInsert*			public
>
 batchInsert($rows, $options='[]')
<
return (array) Inserted data, each row will have "_id" key assigned to it.

    [$rows] (array) Array of arrays or objects to be inserted.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::update*				public
>
 update($condition, $newData, $options='[]')
<
return (int|bool) Number of updated documents or whether operation was successful.

 Note: for "multi" mode Mongo requires explicit strategy "$set" or "$inc" to
 be specified for the "newData". If no strategy is passed "$set" will be used.

    [$condition] (array) Description of the objects to update.
    [$newData] (array) The object with which to update the matching records.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::save*				public
>
 save($data, $options='[]')
<
return (\MongoId) Updated/new record id instance.

    [$data] (array|object) Data to be updated/inserted.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::remove*				public
>
 remove($condition='[]', $options='[]')
<
return (int|bool) Number of updated documents or whether operation was successful.

    [$condition] (array) Description of records to remove.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::count*				public
>
 count($condition='[]', $options='[]')
<
return (int) Records count.

    [$condition] (array) Query condition
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::distinct*			public
>
 distinct($column, $condition='[]', $options='[]')
<
return (array|bool) Array of distinct values, or "false" on failure.

    [$column] (string) Column to use.
    [$condition] (array) Query parameters.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Collection::aggregate*			public
>
 aggregate($pipelines, $options='[]')
<
return (array) The result of the aggregation.

    [$pipelines] (array) List of pipeline operators.
    [$options] (array) Optional parameters.


*yii/mongodb/Collection::group*				public
>
 group($keys, $initial, $reduce, $options='[]')
<
return (array) The result of the aggregation.

    [$keys] (mixed) Fields to group by. If an array or non-code object is
    passed, it will be the key used to group results. If instance of
    '\MongoDB\BSON\Javascript' passed, it will be treated as a function that
    returns the key to group by.
    [$initial] (array) Initial value of the aggregation counter object.
    [$reduce] (\MongoDB\BSON\Javascript|string) Function that takes two
    arguments (the current document and the aggregation to this point) and
    does the aggregation. Argument will be automatically cast to
    '\MongoDB\BSON\Javascript'.
    [$options] (array) Optional parameters to the group command. Valid options
    include:  
      - condition - criteria for including a document in the aggregation.  
      - finalize - function called once per unique key that takes the
      final output of the reduce function.


*yii/mongodb/Collection::mapReduce*			public
>
 mapReduce($map, $reduce, $out, $condition='[]', $options='[]')
<
return (string|array) The map reduce output collection name or output results.

 Note: this function will not return the aggregation result, instead it will
 write it inside the another Mongo collection specified by "out" parameter.
 For example:

   $customerCollection = Yii::$app->mongo->getCollection('customer');
   $resultCollectionName = $customerCollection->mapReduce(
       'function () {emit(this.status, this.amount)}',
       'function (key, values) {return Array.sum(values)}',
       'mapReduceOut',
       ['status' => 3]
   );
   $query = new Query();
   $results = $query->from($resultCollectionName)->all();



    [$map] (\MongoDB\BSON\Javascript|string) Function, which emits map data
    from collection. Argument will be automatically cast to
    '\MongoDB\BSON\Javascript'.
    [$reduce] (\MongoDB\BSON\Javascript|string) Function that takes two
    arguments (the map key and the map values) and does the aggregation.
    Argument will be automatically cast to '\MongoDB\BSON\Javascript'.
    [$out] (string|array) Output collection name. It could be a string for
    simple output ('outputCollection'), or an array for parametrized output
    (['merge' => 'outputCollection']). You can pass ['inline' => true] to
    fetch the result at once without temporary collection usage.
    [$condition] (array) Criteria for including a document in the aggregation.
    [$options] (array) Additional optional parameters to the mapReduce
    command. Valid options include:


      - sort: array, key to sort the input documents. The sort key must be
      in an existing index for this collection. 
      - limit: int, the maximum number of documents to return in the
      collection. 
      - finalize: \MongoDB\BSON\Javascript|string, function, which follows
      the reduce method and modifies the output. 
      - scope: array, specifies global variables that are accessible in
      the map, reduce and finalize functions. 
      - jsMode: bool, specifies whether to convert intermediate data into
      BSON format between the execution of the map and reduce functions. 
      - verbose: bool, specifies whether to include the timing information
      in the result information.



 vim:tw=78:ts=8:ft=help:norl:
