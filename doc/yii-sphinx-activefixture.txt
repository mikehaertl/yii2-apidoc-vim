
*yii/sphinx/ActiveFixture*   >> |yii/test/BaseActiveFixture|
==========================

DESCRIPTION
------------------------------------------------------------------------------

 Either 'modelClass' or 'indexName' must be set. You should also provide
 fixture data in the file specified by 'dataFile' or overriding 'getData()' if
 you want to use code to generate the fixture data.

 When the fixture is being loaded, it will first call 'resetIndex()' to remove
 any existing data in the index. It will then populate the index with the data
 returned by 'getData()'.

 After the fixture is loaded, you can access the loaded data via the 'data'
 property. If you set 'modelClass', you will also be able to retrieve an
 instance of 'modelClass' with the populated data via 'getModel()'.

 Note: only runtime indexes are supported.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/test/Fixture::$depends|
 |yii/test/FileFixtureTrait::$dataDirectory|
 |yii/test/BaseActiveFixture::$modelClass|
 |yii/test/BaseActiveFixture::$data|
 |yii/base/Component::$behaviors|
 |yii/base/ArrayAccessTrait::$iterator|


$db					*yii/sphinx/ActiveFixture::$db*

 (\yii\sphinx\Connection|array|string) The Sphinx connection object or the
 application component ID of the Sphinx connection or a configuration array
 for creating the object.

$dataFile				*yii/sphinx/ActiveFixture::$dataFile*

 (string|bool) The file path or path alias of the data file that contains the
 fixture data to be returned by 'getData()'. If this is not set, it will
 default to 'FixturePath/data/IndexName.php', where 'FixturePath' stands for
 the directory containing this fixture class, and 'IndexName' stands for the
 name of the index associated with this fixture. You can set this property to
 be false to prevent loading any data.

$indexName				*yii/sphinx/ActiveFixture::$indexName*

 (string) The name of the Sphinx index that this fixture is about. If this
 property is not set, the index name will be determined via 'modelClass'.

$indexSchema				*yii/sphinx/ActiveFixture::$indexSchema*

 (\yii\sphinx\IndexSchema) The schema information of the database table
 associated with this fixture.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/test/Fixture::beforeLoad|
 |yii/test/Fixture::afterLoad|
 |yii/test/Fixture::unload|
 |yii/test/Fixture::beforeUnload|
 |yii/test/Fixture::afterUnload|
 |yii/test/FileFixtureTrait::loadData|
 |yii/base/ArrayAccessTrait::getIterator|
 |yii/base/ArrayAccessTrait::count|
 |yii/base/ArrayAccessTrait::offsetExists|
 |yii/base/ArrayAccessTrait::offsetGet|
 |yii/base/ArrayAccessTrait::offsetSet|
 |yii/base/ArrayAccessTrait::offsetUnset|
 |yii/test/BaseActiveFixture::getModel|


*yii/sphinx/ActiveFixture::init*				public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/sphinx/ActiveFixture::load*				public
>
 load()
<
return (void)

 Loads the fixture.

 The default implementation will first clean up the table by calling
 'resetIndex()'. It will then populate the index with the data returned by
 'getData()'.

 If you override this method, you should consider calling the parent
 implementation so that the data returned by 'getData()' can be populated into
 the index.


*yii/sphinx/ActiveFixture::getData*			protected
>
 getData()
<
return (array) The data rows to be inserted into the index.

 Returns the fixture data.

 The default implementation will try to return the fixture data by including
 the external file specified by 'dataFile'. The file should return an array of
 data rows (column name => column value), each corresponding to a row in the
 index.

 If the data file does not exist, an empty array will be returned.


*yii/sphinx/ActiveFixture::resetIndex*			protected
>
 resetIndex()
<
return (void)

 Truncates the specified index removing all existing data from it.

 This method is called before populating fixture data into the index
 associated with this fixture.


*yii/sphinx/ActiveFixture::getIndexSchema*		public
>
 getIndexSchema()
<
return (\yii\sphinx\IndexSchema) The schema information of the database table
associated with this fixture.




 vim:tw=78:ts=8:ft=help:norl:
