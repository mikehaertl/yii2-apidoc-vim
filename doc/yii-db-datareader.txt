
*yii/db/DataReader*   >> |yii/base/BaseObject|
===================

DESCRIPTION
------------------------------------------------------------------------------

 To read the current row of data, call 'read()'. The method 'readAll()'
 returns all the rows in a single array. Rows of data can also be read by
 iterating through the reader. For example,

   $command = $connection->createCommand('SELECT * FROM post');
   $reader = $command->query();

   while ($row = $reader->read()) {
       $rows[] = $row;
   }

   // equivalent to:
   foreach ($reader as $row) {
       $rows[] = $row;
   }

   // equivalent to:
   $rows = $reader->readAll();

 Note that since DataReader is a forward-only stream, you can only traverse it
 once. Doing it the second time will throw an exception.

 It is possible to use a specific mode of data fetching by setting
 'fetchMode'. See the [PHP
 manual](http://www.php.net/manual/en/function.PDOStatement-setFetchMode.php)
 for more details about possible fetch mode.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/DataReader::className*				public

 See |yii/base/BaseObject::className|


*yii/db/DataReader::__construct*				public
>
 __construct($command, $config='[]')
<
return (void)

    [$command] (\yii\db\Command) The command generating the query result
    [$config] (array) Name-value pairs that will be used to initialize the
    object properties


*yii/db/DataReader::init*					public

 See |yii/base/BaseObject::init|


*yii/db/DataReader::__get*				public

 See |yii/base/BaseObject::__get|


*yii/db/DataReader::__set*				public

 See |yii/base/BaseObject::__set|


*yii/db/DataReader::__isset*				public

 See |yii/base/BaseObject::__isset|


*yii/db/DataReader::__unset*				public

 See |yii/base/BaseObject::__unset|


*yii/db/DataReader::__call*				public

 See |yii/base/BaseObject::__call|


*yii/db/DataReader::hasProperty*				public

 See |yii/base/BaseObject::hasProperty|


*yii/db/DataReader::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/db/DataReader::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/db/DataReader::hasMethod*				public

 See |yii/base/BaseObject::hasMethod|


*yii/db/DataReader::bindColumn*				public
>
 bindColumn($column, $value, $dataType=null)
<
return (void)

 When rows of data are being fetched, the corresponding column value will be
 set in the variable. Note, the fetch mode must include PDO::FETCH_BOUND.

    [$column] (int|string) Number of the column (1-indexed) or name of the
    column in the result set. If using the column name, be aware that the name
    should match the case of the column, as returned by the driver.
    [$value] (mixed) Name of the PHP variable to which the column will be
    bound.
    [$dataType] (int) Data type of the parameter


*yii/db/DataReader::setFetchMode*				public
>
 setFetchMode($mode)
<
return (void)

    [$mode] (int) Fetch mode


*yii/db/DataReader::read*					public
>
 read()
<
return (array) The current row, false if no more row available



*yii/db/DataReader::readColumn*				public
>
 readColumn($columnIndex)
<
return (mixed) The column of the current row, false if no more rows available

    [$columnIndex] (int) Zero-based column index


*yii/db/DataReader::readObject*				public
>
 readObject($className, $fields)
<
return (mixed) The populated object, false if no more row of data available

    [$className] (string) Class name of the object to be created and populated
    [$fields] (array) Elements of this array are passed to the constructor


*yii/db/DataReader::readAll*				public
>
 readAll()
<
return (array) The result set (each array element represents a row of data). An empty
array will be returned if the result contains no row.



*yii/db/DataReader::nextResult*				public
>
 nextResult()
<
return (bool) Returns true on success or false on failure.

 This method is only useful when there are multiple result sets returned by
 the query. Not all DBMS support this feature.


*yii/db/DataReader::close*				public
>
 close()
<
return (void)

 This frees up the resources allocated for executing this SQL statement. Read
 attempts after this method call are unpredictable.


*yii/db/DataReader::getIsClosed*				public
>
 getIsClosed()
<
return (bool) Whether the reader is closed or not.



*yii/db/DataReader::getRowCount*				public
>
 getRowCount()
<
return (int) Number of rows contained in the result.

 Note, most DBMS may not give a meaningful count. In this case, use "SELECT
 COUNT(*) FROM tableName" to obtain the number of rows.


*yii/db/DataReader::count*				public
>
 count()
<
return (int) Number of rows contained in the result.

 This method is required by the Countable interface. Note, most DBMS may not
 give a meaningful count. In this case, use "SELECT COUNT(*) FROM tableName"
 to obtain the number of rows.


*yii/db/DataReader::getColumnCount*			public
>
 getColumnCount()
<
return (int) The number of columns in the result set.

 Note, even there's no row in the reader, this still gives correct column
 number.


*yii/db/DataReader::rewind*				public
>
 rewind()
<
return (void)

 This method is required by the interface '\Iterator'.


*yii/db/DataReader::key*					public
>
 key()
<
return (int) The index of the current row.

 This method is required by the interface '\Iterator'.


*yii/db/DataReader::current*				public
>
 current()
<
return (mixed) The current row.

 This method is required by the interface '\Iterator'.


*yii/db/DataReader::next*					public
>
 next()
<
return (void)

 This method is required by the interface '\Iterator'.


*yii/db/DataReader::valid*				public
>
 valid()
<
return (bool) Whether there is a row of data at current position.

 This method is required by the interface '\Iterator'.



 vim:tw=78:ts=8:ft=help:norl:
