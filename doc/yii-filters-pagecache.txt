
*yii/filters/PageCache*   >> |yii/base/ActionFilter|
=======================

DESCRIPTION
------------------------------------------------------------------------------

 It is an action filter that can be added to a controller and handles the
 'beforeAction' event.

 To use PageCache, declare it in the 'behaviors()' method of your controller
 class. In the following example the filter will be applied to the 'index'
 action and cache the whole page for maximum 60 seconds or until the count of
 entries in the post table changes. It also stores different versions of the
 page depending on the application language.

   public function behaviors()
   {
       return [
           'pageCache' => [
               'class' => 'yii\filters\PageCache',
               'only' => ['index'],
               'duration' => 60,
               'dependency' => [
                   'class' => 'yii\caching\DbDependency',
                   'sql' => 'SELECT COUNT(*) FROM post',
               ],
               'variations' => [
                   \Yii::$app->language,
               ]
           ],
       ];
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

$owner					*yii/filters/PageCache::$owner*

 See |yii/base/Behavior::$owner|

$only					*yii/filters/PageCache::$only*

 See |yii/base/ActionFilter::$only|

$except					*yii/filters/PageCache::$except*

 See |yii/base/ActionFilter::$except|

$varyByRoute				*yii/filters/PageCache::$varyByRoute*

 (bool) Whether the content being cached should be differentiated according to
 the route. A route consists of the requested controller ID and action ID.
 Defaults to 'true'.

$cache					*yii/filters/PageCache::$cache*

 (\yii\caching\Cache|array|string) The cache object or the application
 component ID of the cache object. After the PageCache object is created, if
 you want to change this property, you should only assign it with a cache
 object. Starting from version 2.0.2, this can also be a configuration array
 for creating the object.

$duration				*yii/filters/PageCache::$duration*

 (int) Number of seconds that the data can remain valid in cache. Use '0' to
 indicate that the cached data will never expire.

$dependency				*yii/filters/PageCache::$dependency*

 (array|\yii\caching\Dependency) The dependency that the cached content
 depends on. This can be either a 'Dependency' object or a configuration array
 for creating the dependency object. For example,

   [
       'class' => 'yii\caching\DbDependency',
       'sql' => 'SELECT MAX(updated_at) FROM post',
   ]

 would make the output cache depend on the last modified time of all posts. If
 any post has its modification time changed, the cached content would be
 invalidated.

 If 'cacheCookies' or 'cacheHeaders' is enabled, then
 '\yii\caching\Dependency::reusable' should be enabled as well to save
 performance. This is because the cookies and headers are currently stored
 separately from the actual page content, causing the dependency to be
 evaluated twice.

$variations				*yii/filters/PageCache::$variations*

 (array) List of factors that would cause the variation of the content being
 cached. Each factor is a string representing a variation (e.g. the language,
 a GET parameter). The following variation setting will cause the content to
 be cached in different versions according to the current application
 language:

   [
       Yii::$app->language,
   ]



$enabled				*yii/filters/PageCache::$enabled*

 (bool) Whether to enable the page cache. You may use this property to turn on
 and off the page cache according to specific setting (e.g. enable page cache
 only for GET requests).

$view					*yii/filters/PageCache::$view*

 (\yii\base\View) The view component to use for caching. If not set, the
 default application view component '\yii\web\Application::view' will be used.

$cacheCookies				*yii/filters/PageCache::$cacheCookies*

 (bool|array) A boolean value indicating whether to cache all cookies, or an
 array of cookie names indicating which cookies can be cached. Be very careful
 with caching cookies, because it may leak sensitive or private data stored in
 cookies to unwanted users.

$cacheHeaders				*yii/filters/PageCache::$cacheHeaders*

 (bool|array) A boolean value indicating whether to cache all HTTP headers, or
 an array of HTTP header names (case-insensitive) indicating which HTTP
 headers can be cached. Note if your HTTP headers contain sensitive
 information, you should white-list which headers can be cached.

$dynamicPlaceholders			*yii/filters/PageCache::$dynamicPlaceholders*

 (array) A list of placeholders for embedding dynamic contents. This property
 is used internally to implement the content caching feature. Do not modify
 it.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/filters/PageCache::className*			public

 See |yii/base/Object::className|


*yii/filters/PageCache::__construct*			public

 See |yii/base/Object::__construct|


*yii/filters/PageCache::init*				public
>
 init()
<
return (void)



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/filters/PageCache::__get*				public

 See |yii/base/Object::__get|


*yii/filters/PageCache::__set*				public

 See |yii/base/Object::__set|


*yii/filters/PageCache::__isset*				public

 See |yii/base/Object::__isset|


*yii/filters/PageCache::__unset*				public

 See |yii/base/Object::__unset|


*yii/filters/PageCache::__call*				public

 See |yii/base/Object::__call|


*yii/filters/PageCache::hasProperty*			public

 See |yii/base/Object::hasProperty|


*yii/filters/PageCache::canGetProperty*			public

 See |yii/base/Object::canGetProperty|


*yii/filters/PageCache::canSetProperty*			public

 See |yii/base/Object::canSetProperty|


*yii/filters/PageCache::hasMethod*			public

 See |yii/base/Object::hasMethod|


*yii/filters/PageCache::events*				public

 See |yii/base/Behavior::events|


*yii/filters/PageCache::attach*				public

 See |yii/base/ActionFilter::attach|


*yii/filters/PageCache::detach*				public

 See |yii/base/ActionFilter::detach|


*yii/filters/PageCache::beforeFilter*			public

 See |yii/base/ActionFilter::beforeFilter|


*yii/filters/PageCache::afterFilter*			public

 See |yii/base/ActionFilter::afterFilter|


*yii/filters/PageCache::beforeAction*			public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to be executed.

    [$action] (\yii\base\Action) The action to be executed.


*yii/filters/PageCache::afterAction*			public

 See |yii/base/ActionFilter::afterAction|


*yii/filters/PageCache::getActionId*			protected

 See |yii/base/ActionFilter::getActionId|


*yii/filters/PageCache::isActive*				protected

 See |yii/base/ActionFilter::isActive|


*yii/filters/PageCache::beforeCacheResponse*		public
>
 beforeCacheResponse()
<
return (bool|array) Whether to cache or not, return an array instead of 'true' to
store an additional data.

 You may override this method to cancel caching by returning 'false' or store
 an additional data in a cache entry by returning an array instead of 'true'.


*yii/filters/PageCache::afterRestoreResponse*		public
>
 afterRestoreResponse($data)
<
return (void)

 You may override this method to do last-minute preparation before the
 response is sent.

    [$data] (array|null) An array of an additional data stored in a cache
    entry or 'null'.


*yii/filters/PageCache::restoreResponse*			protected
>
 restoreResponse($response, $data)
<
return (void)

    [$response] (\yii\web\Response) The response to be restored.
    [$data] (array) The response property data.


*yii/filters/PageCache::cacheResponse*			public
>
 cacheResponse()
<
return (void)



*yii/filters/PageCache::updateDynamicContent*		protected
>
 updateDynamicContent($content, $placeholders)
<
return (string) Final content.

    [$content] (string) Content to be parsed.
    [$placeholders] (array) Placeholders and their values.


*yii/filters/PageCache::calculateCacheKey*		protected
>
 calculateCacheKey()
<
return (array) The key used to cache response properties.




 vim:tw=78:ts=8:ft=help:norl:
