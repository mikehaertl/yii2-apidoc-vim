
*yii/twig/Extension*   >> |Twig_Extension|
====================


PROPERTY DETAILS
------------------------------------------------------------------------------


$namespaces				*yii/twig/Extension::$namespaces*

 (array) Used namespaces

$aliases				*yii/twig/Extension::$aliases*

 (array) Used class aliases

$widgets				*yii/twig/Extension::$widgets*

 (array) Used widgets



METHOD DETAILS
------------------------------------------------------------------------------


*yii/twig/Extension::__construct*				public
>
 __construct($uses='[]')
<
return (void)

 Creates new instance

    [$uses] (array) Namespaces and classes to use in the template


*yii/twig/Extension::getNodeVisitors*			public
>
 getNodeVisitors()
<
return (void)



*yii/twig/Extension::getFunctions*			public
>
 getFunctions()
<
return (void)



*yii/twig/Extension::registerAsset*			public
>
 registerAsset($context, $asset)
<
return (mixed) 

 Function for registering an asset

 ''' {{ use('yii/web/JqueryAsset') }} {{ register_jquery_asset() }} '''

    [$context] (array) Context information
    [$asset] (string) Asset name


*yii/twig/Extension::registerAssetBundle*			public
>
 registerAssetBundle($context, $bundle, $return='false')
<
return (void|\yii\web\AssetBundle) 

 Function for additional syntax of registering asset bundles

 ''' {{ register_asset_bundle('yii/web/JqueryAsset') }} '''

    [$context] (array) Context information
    [$bundle] (string) Asset bundle class fully qualified name
    [$return] (bool) Indicates if AssetBundle should be returned


*yii/twig/Extension::beginWidget*				public
>
 beginWidget($widget, $config='[]')
<
return (mixed) 

 Function for *_begin syntax support

    [$widget] (string) Widget name
    [$config] (array) Widget config


*yii/twig/Extension::endWidget*				public
>
 endWidget($widget='null')
<
return (void)

 Function for *_end syntax support

    [$widget] (string) Widget name


*yii/twig/Extension::widget*				public
>
 widget($widget, $config='[]')
<
return (mixed) 

 Function for *_widget syntax support

    [$widget] (string) Widget name
    [$config] (array) Widget config


*yii/twig/Extension::viewHelper*				public
>
 viewHelper($context, $name='null')
<
return (void)

 Used for 'begin_page', 'end_page', 'begin_body', 'end_body', 'head'

    [$context] (array) Context information
    [$name] (string) 


*yii/twig/Extension::resolveAndCall*			public
>
 resolveAndCall($className, $method, $arguments='null')
<
return (mixed) 

 Resolves a method from widget and asset syntax and calls it

    [$className] (string) Class name
    [$method] (string) Method name
    [$arguments] (array) 


*yii/twig/Extension::call*				public
>
 call($className, $method, $arguments='null')
<
return (mixed) 

 Calls a method

    [$className] (string) Class name
    [$method] (string) Method name
    [$arguments] (array) 


*yii/twig/Extension::resolveClassName*			public
>
 resolveClassName($className)
<
return (string) 

 Resolves class name from widget and asset syntax

    [$className] (string) Class name


*yii/twig/Extension::addUses*				public
>
 addUses($args)
<
return (void)

 Adds namespaces and aliases from constructor

    [$args] (array) Namespaces and classes to use in the template


*yii/twig/Extension::path*				public
>
 path($path, $args='[]')
<
return (string) The generated relative URL

 Generates relative URL

    [$path] (string) The parameter to be used to generate a valid URL
    [$args] (array) Arguments


*yii/twig/Extension::url*					public
>
 url($path, $args='[]')
<
return (string) The generated absolute URL

 Generates absolute URL

    [$path] (string) The parameter to be used to generate a valid URL
    [$args] (array) Arguments


*yii/twig/Extension::setProperty*				public
>
 setProperty($object, $property, $value)
<
return (void)

 Sets object property

    [$object] (\stdClass) 
    [$property] (string) 
    [$value] (mixed) 


*yii/twig/Extension::getName*				public
>
 getName()
<
return (void)




 vim:tw=78:ts=8:ft=help:norl:
