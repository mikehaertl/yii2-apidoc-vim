
*yii/filters/ContentNegotiator*   >> |yii/base/ActionFilter|
===============================

DESCRIPTION
------------------------------------------------------------------------------

 When the 'formats|supported formats' property is specified, ContentNegotiator
 will support response format negotiation based on the value of the GET
 parameter 'formatParam' and the 'Accept' HTTP header. If a match is found,
 the 'Response::format' property will be set as the chosen format. The
 'Response::acceptMimeType' as well as 'Response::acceptParams' will also be
 updated accordingly.

 When the 'languages|supported languages' is specified, ContentNegotiator will
 support application language negotiation based on the value of the GET
 parameter 'languageParam' and the 'Accept-Language' HTTP header. If a match
 is found, the '\yii\base\Application::language' property will be set as the
 chosen language.

 You may use ContentNegotiator as a bootstrap component as well as an action
 filter.

 The following code shows how you can use ContentNegotiator as a bootstrap
 component. Note that in this case, the content negotiation applies to the
 whole application.

   // in application configuration
   use yii\web\Response;

   return [
       'bootstrap' => [
           [
               'class' => 'yii\filters\ContentNegotiator',
               'formats' => [
                   'application/json' => Response::FORMAT_JSON,
                   'application/xml' => Response::FORMAT_XML,
               ],
               'languages' => [
                   'en',
                   'de',
               ],
           ],
       ],
   ];

 The following code shows how you can use ContentNegotiator as an action
 filter in either a controller or a module. In this case, the content
 negotiation result only applies to the corresponding controller or module, or
 even specific actions if you configure the 'only' or 'except' property of the
 filter.

   use yii\web\Response;

   public function behaviors()
   {
       return [
           [
               'class' => 'yii\filters\ContentNegotiator',
               'only' => ['view', 'index'],  // in a controller
               // if in a module, use the following IDs for user actions
               // 'only' => ['user/view', 'user/index']
               'formats' => [
                   'application/json' => Response::FORMAT_JSON,
               ],
               'languages' => [
                   'en',
                   'de',
               ],
           ],
       ];
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

$owner					*yii/filters/ContentNegotiator::$owner*
 See |yii/base/Behavior::$owner|

$only					*yii/filters/ContentNegotiator::$only*
 See |yii/base/ActionFilter::$only|

$except					*yii/filters/ContentNegotiator::$except*
 See |yii/base/ActionFilter::$except|

$formatParam				*yii/filters/ContentNegotiator::$formatParam*
 (string) The name of the GET parameter that specifies the response format.
 Note that if the specified format does not exist in 'formats', a
 'UnsupportedMediaTypeHttpException' exception will be thrown.  If the
 parameter value is empty or if this property is null, the response format
 will be determined based on the 'Accept' HTTP header.

$languageParam				*yii/filters/ContentNegotiator::$languageParam*
 (string) The name of the GET parameter that specifies the
 '\yii\base\Application::language|application language'. Note that if the
 specified language does not match any of 'languages', the first language in
 'languages' will be used. If the parameter value is empty or if this property
 is null, the application language will be determined based on the
 'Accept-Language' HTTP header.

$formats				*yii/filters/ContentNegotiator::$formats*
 (array) List of supported response formats. The keys are MIME types (e.g.
 'application/json') while the values are the corresponding formats (e.g.
 'html', 'json') which must be supported as declared in
 '\yii\web\Response::formatters'.

 If this property is empty or not set, response format negotiation will be
 skipped.

$languages				*yii/filters/ContentNegotiator::$languages*
 (array) A list of supported languages. The array keys are the supported
 language variants (e.g. 'en-GB', 'en-US'), while the array values are the
 corresponding language codes (e.g. 'en', 'de') recognized by the application.

 Array keys are not always required. When an array value does not have a key,
 the matching of the requested language will be based on a language fallback
 mechanism. For example, a value of 'en' will match 'en', 'en_US', 'en-US',
 'en-GB', etc.

 If this property is empty or not set, language negotiation will be skipped.

$request				*yii/filters/ContentNegotiator::$request*
 (\yii\web\Request) The current request. If not set, the 'request' application
 component will be used.

$response				*yii/filters/ContentNegotiator::$response*
 (\yii\web\Response) The response to be sent. If not set, the 'response'
 application component will be used.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/filters/ContentNegotiator::className*		public
 See |yii/base/Object::className|


*yii/filters/ContentNegotiator::__construct*		public
 See |yii/base/Object::__construct|


*yii/filters/ContentNegotiator::init*			public
 See |yii/base/Object::init|


*yii/filters/ContentNegotiator::__get*			public
 See |yii/base/Object::__get|


*yii/filters/ContentNegotiator::__set*			public
 See |yii/base/Object::__set|


*yii/filters/ContentNegotiator::__isset*			public
 See |yii/base/Object::__isset|


*yii/filters/ContentNegotiator::__unset*			public
 See |yii/base/Object::__unset|


*yii/filters/ContentNegotiator::__call*			public
 See |yii/base/Object::__call|


*yii/filters/ContentNegotiator::hasProperty*		public
 See |yii/base/Object::hasProperty|


*yii/filters/ContentNegotiator::canGetProperty*		public
 See |yii/base/Object::canGetProperty|


*yii/filters/ContentNegotiator::canSetProperty*		public
 See |yii/base/Object::canSetProperty|


*yii/filters/ContentNegotiator::hasMethod*		public
 See |yii/base/Object::hasMethod|


*yii/filters/ContentNegotiator::events*			public
 See |yii/base/Behavior::events|


*yii/filters/ContentNegotiator::attach*			public
 See |yii/base/ActionFilter::attach|


*yii/filters/ContentNegotiator::detach*			public
 See |yii/base/ActionFilter::detach|


*yii/filters/ContentNegotiator::beforeFilter*		public
 See |yii/base/ActionFilter::beforeFilter|


*yii/filters/ContentNegotiator::afterFilter*		public
 See |yii/base/ActionFilter::afterFilter|


*yii/filters/ContentNegotiator::beforeAction*		public
>
 beforeAction($action)
<
(boolean) Whether the action should continue to be executed.


    [$action] () 


*yii/filters/ContentNegotiator::afterAction*		public
 See |yii/base/ActionFilter::afterAction|


*yii/filters/ContentNegotiator::isActive*			protected
 See |yii/base/ActionFilter::isActive|


*yii/filters/ContentNegotiator::bootstrap*		public
>
 bootstrap($app)
<
(void)


    [$app] () 


*yii/filters/ContentNegotiator::negotiate*		public
>
 negotiate()
<
(void)




*yii/filters/ContentNegotiator::negotiateContentType*	protected
>
 negotiateContentType($request, $response)
<
(void)


    [$request] (\yii\web\Request) 
    [$response] (\yii\web\Response) 


*yii/filters/ContentNegotiator::negotiateLanguage*	protected
>
 negotiateLanguage($request)
<
(string) The chosen language


    [$request] (\yii\web\Request) 


*yii/filters/ContentNegotiator::isLanguageSupported*	protected
>
 isLanguageSupported($requested, $supported)
<
(boolean) Whether the requested language is supported


    [$requested] (string) The requested language code
    [$supported] (string) The supported language code



 vim:tw=78:ts=8:ft=help:norl:
