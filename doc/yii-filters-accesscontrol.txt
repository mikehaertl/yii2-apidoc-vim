
*yii/filters/AccessControl*   >> |yii/base/ActionFilter|
===========================

DESCRIPTION
------------------------------------------------------------------------------

 AccessControl is an action filter. It will check its 'rules' to find the
 first rule that matches the current context variables (such as user IP
 address, user role). The matching rule will dictate whether to allow or deny
 the access to the requested controller action. If no rule matches, the access
 will be denied.

 To use AccessControl, declare it in the 'behaviors()' method of your
 controller class. For example, the following declarations will allow
 authenticated users to access the "create" and "update" actions and deny all
 other users from accessing these two actions.

   public function behaviors()
   {
       return [
           'access' => [
               'class' => \yii\filters\AccessControl::className(),
               'only' => ['create', 'update'],
               'rules' => [
                   // deny all POST requests
                   [
                       'allow' => false,
                       'verbs' => ['POST']
                   ],
                   // allow authenticated users
                   [
                       'allow' => true,
                       'roles' => ['@'],
                   ],
                   // everything else is denied
               ],
           ],
       ];
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Behavior::$owner|
 |yii/base/ActionFilter::$only|
 |yii/base/ActionFilter::$except|


$user					*yii/filters/AccessControl::$user*

 (\yii\web\User|array|string|false) The user object representing the
 authentication status or the ID of the user application component. Starting
 from version 2.0.2, this can also be a configuration array for creating the
 object. Starting from version 2.0.12, you can set it to 'false' to explicitly
 switch this component support off for the filter.

$denyCallback				*yii/filters/AccessControl::$denyCallback*

 (callable) A callback that will be called if the access should be denied to
 the current user. This is the case when either no rule matches, or a rule
 with 'AccessRule::$allow|$allow' set to 'false' matches. If not set,
 'denyAccess()' will be called.

 The signature of the callback should be as follows:

   function ($rule, $action)

 where '$rule' is the rule that denies the user, and '$action' is the current
 'Action|action' object. '$rule' can be 'null' if access is denied because
 none of the rules matched.

$ruleConfig				*yii/filters/AccessControl::$ruleConfig*

 (array) The default configuration of access rules. Individual rule
 configurations specified via 'rules' will take precedence when the same
 property of the rule is configured.

$rules					*yii/filters/AccessControl::$rules*

 (array) A list of access rule objects or configuration arrays for creating
 the rule objects. If a rule is specified via a configuration array, it will
 be merged with 'ruleConfig' first before it is used for creating the rule
 object.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Behavior::events|
 |yii/base/Behavior::attach|
 |yii/base/Behavior::detach|
 |yii/base/ActionFilter::beforeFilter|
 |yii/base/ActionFilter::afterFilter|
 |yii/base/ActionFilter::afterAction|
 |yii/base/ActionFilter::getActionId|
 |yii/base/ActionFilter::isActive|


*yii/filters/AccessControl::init*				public
>
 init()
<
return (void)

 Initializes the 'rules' array by instantiating rule objects from
 configurations.


*yii/filters/AccessControl::beforeAction*			public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to be executed.

 This method is invoked right before an action is to be executed (after all
 possible filters.) You may override this method to do last-minute preparation
 for the action.

    [$action] (\yii\base\Action) The action to be executed.


*yii/filters/AccessControl::denyAccess*			protected
>
 denyAccess($user)
<
return (void)

 Denies the access of the user.

 The default implementation will redirect the user to the login page if he is
 a guest; if the user is already logged, a 403 HTTP exception will be thrown.

    [$user] (\yii\web\User|false) The current user or boolean 'false' in case
    of detached User component



 vim:tw=78:ts=8:ft=help:norl:
