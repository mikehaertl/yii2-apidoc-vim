
*yii/i18n/DbMessageSource*   >> |yii/i18n/MessageSource|
==========================

DESCRIPTION
------------------------------------------------------------------------------

 The database must contain the following two tables: source_message and
 message.

 The 'source_message' table stores the messages to be translated, and the
 'message' table stores the translated messages. The name of these two tables
 can be customized by setting 'sourceMessageTable' and 'messageTable',
 respectively.

 The database connection is specified by 'db'. Database schema could be
 initialized by applying migration:

 ''' yii migrate --migrationPath=@yii/i18n/migrations/ '''

 If you don't want to use migration and need SQL instead, files for all
 databases are in migrations directory.


PROPERTY DETAILS
------------------------------------------------------------------------------

$forceTranslation			*yii/i18n/DbMessageSource::$forceTranslation*

 See |yii/i18n/MessageSource::$forceTranslation|

$sourceLanguage				*yii/i18n/DbMessageSource::$sourceLanguage*

 See |yii/i18n/MessageSource::$sourceLanguage|

$db					*yii/i18n/DbMessageSource::$db*

 (\yii\db\Connection|array|string) The DB connection object or the application
 component ID of the DB connection.

 After the DbMessageSource object is created, if you want to change this
 property, you should only assign it with a DB connection object.

 Starting from version 2.0.2, this can also be a configuration array for
 creating the object.

$cache					*yii/i18n/DbMessageSource::$cache*

 (\yii\caching\CacheInterface|array|string) The cache object or the
 application component ID of the cache object. The messages data will be
 cached using this cache object. Note, that to enable caching you have to set
 'enableCaching' to 'true', otherwise setting this property has no effect.

 After the DbMessageSource object is created, if you want to change this
 property, you should only assign it with a cache object.

 Starting from version 2.0.2, this can also be a configuration array for
 creating the object.

$sourceMessageTable			*yii/i18n/DbMessageSource::$sourceMessageTable*

 (string) The name of the source message table.

$messageTable				*yii/i18n/DbMessageSource::$messageTable*

 (string) The name of the translated message table.

$cachingDuration			*yii/i18n/DbMessageSource::$cachingDuration*

 (int) The time in seconds that the messages can remain valid in cache. Use 0
 to indicate that the cached data will never expire.

$enableCaching				*yii/i18n/DbMessageSource::$enableCaching*

 (bool) Whether to enable caching translated messages



METHOD DETAILS
------------------------------------------------------------------------------


*yii/i18n/DbMessageSource::className*			public

 See |yii/base/BaseObject::className|


*yii/i18n/DbMessageSource::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/i18n/DbMessageSource::init*				public
>
 init()
<
return (void)

 Initializes the DbMessageSource component.

 This method will initialize the 'db' property to make sure it refers to a
 valid DB connection. Configured 'cache' component would also be initialized.


*yii/i18n/DbMessageSource::__get*				public

 See |yii/base/Component::__get|


*yii/i18n/DbMessageSource::__set*				public

 See |yii/base/Component::__set|


*yii/i18n/DbMessageSource::__isset*			public

 See |yii/base/Component::__isset|


*yii/i18n/DbMessageSource::__unset*			public

 See |yii/base/Component::__unset|


*yii/i18n/DbMessageSource::__call*			public

 See |yii/base/Component::__call|


*yii/i18n/DbMessageSource::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/i18n/DbMessageSource::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/i18n/DbMessageSource::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/i18n/DbMessageSource::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/i18n/DbMessageSource::__clone*			public

 See |yii/base/Component::__clone|


*yii/i18n/DbMessageSource::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/i18n/DbMessageSource::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/i18n/DbMessageSource::on*				public

 See |yii/base/Component::on|


*yii/i18n/DbMessageSource::off*				public

 See |yii/base/Component::off|


*yii/i18n/DbMessageSource::trigger*			public

 See |yii/base/Component::trigger|


*yii/i18n/DbMessageSource::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/i18n/DbMessageSource::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/i18n/DbMessageSource::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/i18n/DbMessageSource::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/i18n/DbMessageSource::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/i18n/DbMessageSource::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/i18n/DbMessageSource::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/i18n/DbMessageSource::loadMessages*			protected
>
 loadMessages($category, $language)
<
return (array) The loaded messages. The keys are original messages, and the values
are translated messages.

 Loads the message translation for the specified language and category.

 If translation for specific locale code such as 'en-US' isn't found it tries
 more generic 'en'.

    [$category] (string) The message category
    [$language] (string) The target language


*yii/i18n/DbMessageSource::translate*			public

 See |yii/i18n/MessageSource::translate|


*yii/i18n/DbMessageSource::translateMessage*		protected

 See |yii/i18n/MessageSource::translateMessage|


*yii/i18n/DbMessageSource::loadMessagesFromDb*		protected
>
 loadMessagesFromDb($category, $language)
<
return (array) The messages loaded from database.

 Loads the messages from database.

 You may override this method to customize the message storage in the
 database.

    [$category] (string) The message category.
    [$language] (string) The target language.


*yii/i18n/DbMessageSource::createFallbackQuery*		protected
>
 createFallbackQuery($category, $language, $fallbackLanguage)
<
return (\yii\db\Query) 

 The method builds the 'Query' object for the fallback language messages
 search.

 Normally is called from 'loadMessagesFromDb'.

    [$category] (string) The message category
    [$language] (string) The originally requested language
    [$fallbackLanguage] (string) The target fallback language



 vim:tw=78:ts=8:ft=help:norl:
