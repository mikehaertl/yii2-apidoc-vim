
*yii/base/Formatter*   >> |yii/base/Component|
====================

SUBCLASSES
------------------------------------------------------------------------------

|yii/i18n/Formatter|

DESCRIPTION
------------------------------------------------------------------------------

 The formatting methods provided by Formatter are all named in the form of
 'asXyz()'. The behavior of some of them may be configured via the properties
 of Formatter. For example, by configuring 'dateFormat', one may control how
 'asDate()' formats the value into a date string.

 Formatter is configured as an application component in
 '\yii\base\Application' by default. You can access that instance via
 'Yii::$app->formatter'.


PROPERTY DETAILS
------------------------------------------------------------------------------

$timeZone				*yii/base/Formatter::$timeZone*
 (string) The timezone to use for formatting time and date values. This can be
 any value that may be passed to
 [date_default_timezone_set()](http://www.php.net/manual/en/function.date-default-timezone-set.php)
 e.g. 'UTC', 'Europe/Berlin' or 'America/Chicago'. Refer to the [php
 manual](http://www.php.net/manual/en/timezones.php) for available timezones.
 If this property is not set, '\yii\base\Application::timeZone' will be used.

$dateFormat				*yii/base/Formatter::$dateFormat*
 (string) The default format string to be used to format a date using PHP
 date() function.

$timeFormat				*yii/base/Formatter::$timeFormat*
 (string) The default format string to be used to format a time using PHP
 date() function.

$datetimeFormat				*yii/base/Formatter::$datetimeFormat*
 (string) The default format string to be used to format a date and time using
 PHP date() function.

$nullDisplay				*yii/base/Formatter::$nullDisplay*
 (string) The text to be displayed when formatting a null. Defaults to '<span
 class="not-set">(not set)</span>'.

$booleanFormat				*yii/base/Formatter::$booleanFormat*
 (array) The text to be displayed when formatting a boolean value. The first
 element corresponds to the text display for false, the second element for
 true. Defaults to '['No', 'Yes']'.

$decimalSeparator			*yii/base/Formatter::$decimalSeparator*
 (string) The character displayed as the decimal point when formatting a
 number. If not set, "." will be used.

$thousandSeparator			*yii/base/Formatter::$thousandSeparator*
 (string) The character displayed as the thousands separator character when
 formatting a number. If not set, "," will be used.

$sizeFormat				*yii/base/Formatter::$sizeFormat*
 (array) The format used to format size (bytes). Three elements may be
 specified: "base", "decimals" and "decimalSeparator". They correspond to the
 base at which a kilobyte is calculated (1000 or 1024 bytes per kilobyte,
 defaults to 1024), the number of digits after the decimal point (defaults to
 2) and the character displayed as the decimal point.

$behaviors				*yii/base/Formatter::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component



METHOD DETAILS
------------------------------------------------------------------------------

*yii/base/Formatter::className*				public
 See |yii/base/Object::className|


*yii/base/Formatter::__construct*				public
 See |yii/base/Object::__construct|


*yii/base/Formatter::init*				public
>
 init()
<
(void)




*yii/base/Formatter::__get*				public
 See |yii/base/Component::__get|


*yii/base/Formatter::__set*				public
 See |yii/base/Component::__set|


*yii/base/Formatter::__isset*				public
 See |yii/base/Component::__isset|


*yii/base/Formatter::__unset*				public
 See |yii/base/Component::__unset|


*yii/base/Formatter::__call*				public
 See |yii/base/Component::__call|


*yii/base/Formatter::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/base/Formatter::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/base/Formatter::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/base/Formatter::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/base/Formatter::__clone*				public
 See |yii/base/Component::__clone|


*yii/base/Formatter::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/base/Formatter::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/base/Formatter::on*					public
 See |yii/base/Component::on|


*yii/base/Formatter::off*					public
 See |yii/base/Component::off|


*yii/base/Formatter::trigger*				public
 See |yii/base/Component::trigger|


*yii/base/Formatter::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/base/Formatter::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/base/Formatter::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/base/Formatter::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/base/Formatter::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/base/Formatter::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/base/Formatter::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/base/Formatter::format*				public
>
 format($value, $format)
<
(string) The formatting result

 This method will call one of the "as" methods available in this class to do
 the formatting. For type "xyz", the method "asXyz" will be used. For example,
 if the format is "html", then 'asHtml()' will be used. Format names are case
 insensitive.
    [$value] (mixed) The value to be formatted
    [$format] (string|array) The format of the value, e.g., "html", "text". To
    specify additional parameters of the formatting method, you may use an
    array. The first element of the array specifies the format name, while the
    rest of the elements will be used as the parameters to the formatting
    method. For example, a format of '['date', 'Y-m-d']' will cause the
    invocation of 'asDate($value, 'Y-m-d')'.


*yii/base/Formatter::asRaw*				public
>
 asRaw($value)
<
(string) The formatted result

 This method simply returns back the parameter without any format.
    [$value] (mixed) The value to be formatted


*yii/base/Formatter::asText*				public
>
 asText($value)
<
(string) The formatted result


    [$value] (mixed) The value to be formatted


*yii/base/Formatter::asNtext*				public
>
 asNtext($value)
<
(string) The formatted result


    [$value] (mixed) The value to be formatted


*yii/base/Formatter::asParagraphs*			public
>
 asParagraphs($value)
<
(string) The formatted result

 Each text paragraph is enclosed within a '<p>' tag. One or multiple
 consecutive empty lines divide two paragraphs.
    [$value] (mixed) The value to be formatted


*yii/base/Formatter::asHtml*				public
>
 asHtml($value, $config='null')
<
(string) The formatted result

 The value will be purified using 'HtmlPurifier' to avoid XSS attacks. Use
 'asRaw()' if you do not want any purification of the value.
    [$value] (mixed) The value to be formatted
    [$config] (array|null) The configuration for the HTMLPurifier class.


*yii/base/Formatter::asEmail*				public
>
 asEmail($value)
<
(string) The formatted result


    [$value] (mixed) The value to be formatted


*yii/base/Formatter::asImage*				public
>
 asImage($value)
<
(string) The formatted result


    [$value] (mixed) The value to be formatted


*yii/base/Formatter::asUrl*				public
>
 asUrl($value)
<
(string) The formatted result


    [$value] (mixed) The value to be formatted


*yii/base/Formatter::asBoolean*				public
>
 asBoolean($value)
<
(string) The formatted result


    [$value] (mixed) The value to be formatted


*yii/base/Formatter::asDate*				public
>
 asDate($value, $format='null')
<
(string) The formatted result


    [$value] (integer|string|\DateTime) The value to be formatted. The
    following types of value are supported:

    - an integer representing a UNIX timestamp - a string that can be parsed
    into a UNIX timestamp via 'strtotime()' - a PHP DateTime object
    [$format] (string) The format used to convert the value into a date
    string. If null, 'dateFormat' will be used. The format string should be
    one that can be recognized by the PHP 'date()' function.


*yii/base/Formatter::asTime*				public
>
 asTime($value, $format='null')
<
(string) The formatted result


    [$value] (integer|string|\DateTime) The value to be formatted. The
    following types of value are supported:

    - an integer representing a UNIX timestamp - a string that can be parsed
    into a UNIX timestamp via 'strtotime()' - a PHP DateTime object
    [$format] (string) The format used to convert the value into a date
    string. If null, 'timeFormat' will be used. The format string should be
    one that can be recognized by the PHP 'date()' function.


*yii/base/Formatter::asDatetime*				public
>
 asDatetime($value, $format='null')
<
(string) The formatted result


    [$value] (integer|string|\DateTime) The value to be formatted. The
    following types of value are supported:

    - an integer representing a UNIX timestamp - a string that can be parsed
    into a UNIX timestamp via 'strtotime()' - a PHP DateTime object
    [$format] (string) The format used to convert the value into a date
    string. If null, 'datetimeFormat' will be used. The format string should
    be one that can be recognized by the PHP 'date()' function.


*yii/base/Formatter::normalizeDatetimeValue*		protected
>
 normalizeDatetimeValue($value)
<
(integer) The normalized datetime value


    [$value] (mixed) The datetime value to be normalized.


*yii/base/Formatter::formatTimestamp*			protected
>
 formatTimestamp($value, $format)
<
(string) The formatted result


    [$value] (integer) Normalized datetime value
    [$format] (string) The format used to convert the value into a date
    string.


*yii/base/Formatter::asInteger*				public
>
 asInteger($value)
<
(string) The formatting result.


    [$value] (mixed) The value to be formatted


*yii/base/Formatter::asDouble*				public
>
 asDouble($value, $decimals=2)
<
(string) The formatting result.

 Property 'decimalSeparator' will be used to represent the decimal point.
    [$value] (mixed) The value to be formatted
    [$decimals] (integer) The number of digits after the decimal point


*yii/base/Formatter::asNumber*				public
>
 asNumber($value, $decimals=0)
<
(string) The formatted result

 This method calls the PHP number_format() function to do the formatting.
    [$value] (mixed) The value to be formatted
    [$decimals] (integer) The number of digits after the decimal point


*yii/base/Formatter::asSize*				public
>
 asSize($value, $verbose='false')
<
(string) The formatted result


    [$value] (integer) Value in bytes to be formatted
    [$verbose] (boolean) If full names should be used (e.g. bytes, kilobytes,
    ...). Defaults to false meaning that short names will be used (e.g. B, KB,
    ...).


*yii/base/Formatter::asRelativeTime*			public
>
 asRelativeTime($value, $referenceTime='null')
<
(string) The formatted result


    [$value] (integer|string|\DateTime|\DateInterval) The value to be
    formatted. The following types of value are supported:

    - an integer representing a UNIX timestamp - a string that can be parsed
    into a UNIX timestamp via 'strtotime()' or that can be passed to a
    DateInterval constructor. - a PHP DateTime object - a PHP DateInterval
    object (a positive time interval will refer to the past, a negative one to
    the future)
    [$referenceTime] (integer|string|\DateTime|\DateInterval) If specified the
    value is used instead of now



 vim:tw=78:ts=8:ft=help:norl:
