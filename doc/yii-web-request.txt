
*yii/web/Request*   >> |yii/base/Request|
=================

DESCRIPTION
------------------------------------------------------------------------------

 It encapsulates the $_SERVER variable and resolves its inconsistency among
 different Web servers. Also it provides an interface to retrieve request
 parameters from $_POST, $_GET, $_COOKIES and REST parameters sent via other
 HTTP methods like PUT or DELETE.

 Request is configured as an application component in '\yii\web\Application'
 by default. You can access that instance via 'Yii::$app->request'.


PROPERTY DETAILS
------------------------------------------------------------------------------

$enableCsrfValidation			*yii/web/Request::$enableCsrfValidation*
 (boolean) Whether to enable CSRF (Cross-Site Request Forgery) validation.
 Defaults to true. When CSRF validation is enabled, forms submitted to an Yii
 Web application must be originated from the same application. If not, a 400
 HTTP exception will be raised.

 Note, this feature requires that the user client accepts cookie. Also, to use
 this feature, forms submitted via POST method must contain a hidden input
 whose name is specified by 'csrfParam'. You may use
 '\yii\helpers\Html::beginForm()' to generate his hidden input.

 In JavaScript, you may get the values of 'csrfParam' and 'csrfToken' via
 'yii.getCsrfParam()' and 'yii.getCsrfToken()', respectively. The
 '\yii\web\YiiAsset' asset must be registered. You also need to include CSRF
 meta tags in your pages by using '\yii\helpers\Html::csrfMetaTags()'.

$csrfParam				*yii/web/Request::$csrfParam*
 (string) The name of the token used to prevent CSRF. Defaults to '_csrf'.
 This property is used only when 'enableCsrfValidation' is true.

$csrfCookie				*yii/web/Request::$csrfCookie*
 (array) The configuration for creating the CSRF 'Cookie|cookie'. This
 property is used only when both 'enableCsrfValidation' and 'enableCsrfCookie'
 are true.

$enableCsrfCookie			*yii/web/Request::$enableCsrfCookie*
 (boolean) Whether to use cookie to persist CSRF token. If false, CSRF token
 will be stored in session under the name of 'csrfParam'. Note that while
 storing CSRF tokens in session increases security, it requires starting a
 session for every page, which will degrade your site performance.

$enableCookieValidation			*yii/web/Request::$enableCookieValidation*
 (boolean) Whether cookies should be validated to ensure they are not
 tampered. Defaults to true.

$cookieValidationKey			*yii/web/Request::$cookieValidationKey*
 (string) A secret key used for cookie validation. This property must be set
 if 'enableCookieValidation' is true.

$methodParam				*yii/web/Request::$methodParam*
 (string) The name of the POST parameter that is used to indicate if a request
 is a PUT, PATCH or DELETE request tunneled through POST. Defaults to
 '_method'.

$parsers				*yii/web/Request::$parsers*
 (array) The parsers for converting the raw HTTP request body into
 'bodyParams'. The array keys are the request 'Content-Types', and the array
 values are the corresponding configurations for 'Yii::createObject|creating
 the parser objects'. A parser must implement the 'RequestParserInterface'.

 To enable parsing for JSON requests you can use the 'JsonParser' class like
 in the following example:

 ''' [     'application/json' => 'yii\web\JsonParser', ] '''

 To register a parser for parsing all request types you can use ''*'' as the
 array key. This one will be used as a fallback in case no other types match.

$behaviors				*yii/web/Request::$behaviors*
 See |yii/base/Component::$behaviors|

$isConsoleRequest			*yii/web/Request::$isConsoleRequest*
 See |yii/base/Request::$isConsoleRequest|

$scriptFile				*yii/web/Request::$scriptFile*
 (string) The entry script file path

$headers				*yii/web/Request::$headers*
 (\yii\web\HeaderCollection) The header collection

$method					*yii/web/Request::$method*
 (string) Request method, such as GET, POST, HEAD, PUT, PATCH, DELETE. The
 value returned is turned into upper case.

$isGet					*yii/web/Request::$isGet*
 (boolean) Whether this is a GET request.

$isOptions				*yii/web/Request::$isOptions*
 (boolean) Whether this is a OPTIONS request.

$isHead					*yii/web/Request::$isHead*
 (boolean) Whether this is a HEAD request.

$isPost					*yii/web/Request::$isPost*
 (boolean) Whether this is a POST request.

$isDelete				*yii/web/Request::$isDelete*
 (boolean) Whether this is a DELETE request.

$isPut					*yii/web/Request::$isPut*
 (boolean) Whether this is a PUT request.

$isPatch				*yii/web/Request::$isPatch*
 (boolean) Whether this is a PATCH request.

$isAjax					*yii/web/Request::$isAjax*
 (boolean) Whether this is an AJAX (XMLHttpRequest) request.

$isPjax					*yii/web/Request::$isPjax*
 (boolean) Whether this is a PJAX request

$isFlash				*yii/web/Request::$isFlash*
 (boolean) Whether this is an Adobe Flash or Adobe Flex request.

$rawBody				*yii/web/Request::$rawBody*
 (string) The request body

$bodyParams				*yii/web/Request::$bodyParams*
 (array) The request parameters given in the request body.

$queryParams				*yii/web/Request::$queryParams*
 (array) The request GET parameter values.

$hostInfo				*yii/web/Request::$hostInfo*
 (string) Schema and hostname part (with port number if needed) of the request
 URL (e.g. 'http://www.yiiframework.com')

$baseUrl				*yii/web/Request::$baseUrl*
 (string) The relative URL for the application

$scriptUrl				*yii/web/Request::$scriptUrl*
 (string) The relative URL of the entry script.

$pathInfo				*yii/web/Request::$pathInfo*
 (string) Part of the request URL that is after the entry script and before
 the question mark. Note, the returned path info is already URL-decoded.

$absoluteUrl				*yii/web/Request::$absoluteUrl*
 (string) The currently requested absolute URL.

$url					*yii/web/Request::$url*
 (string) The currently requested relative URL. Note that the URI returned is
 URL-encoded.

$queryString				*yii/web/Request::$queryString*
 (string) Part of the request URL that is after the question mark

$isSecureConnection			*yii/web/Request::$isSecureConnection*
 (boolean) If the request is sent via secure channel (https)

$serverName				*yii/web/Request::$serverName*
 (string) Server name

$serverPort				*yii/web/Request::$serverPort*
 (integer) Server port number

$referrer				*yii/web/Request::$referrer*
 (string) URL referrer, null if not present

$userAgent				*yii/web/Request::$userAgent*
 (string) User agent, null if not present

$userIP					*yii/web/Request::$userIP*
 (string) User IP address. Null is returned if the user IP address cannot be
 detected.

$userHost				*yii/web/Request::$userHost*
 (string) User host name, null if cannot be determined

$authUser				*yii/web/Request::$authUser*
 (string) The username sent via HTTP authentication, null if the username is
 not given

$authPassword				*yii/web/Request::$authPassword*
 (string) The password sent via HTTP authentication, null if the password is
 not given

$port					*yii/web/Request::$port*
 (integer) Port number for insecure requests.

$securePort				*yii/web/Request::$securePort*
 (integer) Port number for secure requests.

$acceptableContentTypes			*yii/web/Request::$acceptableContentTypes*
 (array) The content types ordered by the quality score. Types with the
 highest scores will be returned first. The array keys are the content types,
 while the array values are the corresponding quality score and other
 parameters as given in the header.

$contentType				*yii/web/Request::$contentType*
 (string) Request content-type. Null is returned if this information is not
 available.

$acceptableLanguages			*yii/web/Request::$acceptableLanguages*
 (array) The languages ordered by the preference level. The first element
 represents the most preferred language.

$preferredLanguage			*yii/web/Request::$preferredLanguage*
 (string) The language that the application should use.

$eTags					*yii/web/Request::$eTags*
 (array) The entity tags

$cookies				*yii/web/Request::$cookies*
 (\yii\web\CookieCollection) The cookie collection.

$csrfToken				*yii/web/Request::$csrfToken*
 (string) The token used to perform CSRF validation.

$csrfTokenFromHeader			*yii/web/Request::$csrfTokenFromHeader*
 (string) The CSRF token sent via 'CSRF_HEADER' by browser. Null is returned
 if no such header is sent.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/web/Request::className*				public
 See |yii/base/Object::className|


*yii/web/Request::__construct*				public
 See |yii/base/Object::__construct|


*yii/web/Request::init*					public
 See |yii/base/Object::init|


*yii/web/Request::__get*					public
 See |yii/base/Component::__get|


*yii/web/Request::__set*					public
 See |yii/base/Component::__set|


*yii/web/Request::__isset*				public
 See |yii/base/Component::__isset|


*yii/web/Request::__unset*				public
 See |yii/base/Component::__unset|


*yii/web/Request::__call*					public
 See |yii/base/Component::__call|


*yii/web/Request::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/web/Request::canGetProperty*				public
 See |yii/base/Component::canGetProperty|


*yii/web/Request::canSetProperty*				public
 See |yii/base/Component::canSetProperty|


*yii/web/Request::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/web/Request::__clone*				public
 See |yii/base/Component::__clone|


*yii/web/Request::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/web/Request::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/web/Request::on*					public
 See |yii/base/Component::on|


*yii/web/Request::off*					public
 See |yii/base/Component::off|


*yii/web/Request::trigger*				public
 See |yii/base/Component::trigger|


*yii/web/Request::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/web/Request::getBehaviors*				public
 See |yii/base/Component::getBehaviors|


*yii/web/Request::attachBehavior*				public
 See |yii/base/Component::attachBehavior|


*yii/web/Request::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/web/Request::detachBehavior*				public
 See |yii/base/Component::detachBehavior|


*yii/web/Request::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/web/Request::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/web/Request::resolve*				public
>
 resolve()
<
(array) The first element is the route, and the second is the associated
parameters.



*yii/web/Request::getIsConsoleRequest*			public
 See |yii/base/Request::getIsConsoleRequest|


*yii/web/Request::setIsConsoleRequest*			public
 See |yii/base/Request::setIsConsoleRequest|


*yii/web/Request::getScriptFile*				public
>
 getScriptFile()
<
(string) The entry script file path

 The default implementation will simply return '$_SERVER['SCRIPT_FILENAME']'.


*yii/web/Request::setScriptFile*				public
>
 setScriptFile($value)
<
(void)

 The entry script file path normally can be obtained from
 '$_SERVER['SCRIPT_FILENAME']'. If your server configuration does not return
 the correct value, you may configure this property to make it right.
    [$value] (string) The entry script file path.


*yii/web/Request::getHeaders*				public
>
 getHeaders()
<
(\yii\web\HeaderCollection) The header collection

 The header collection contains incoming HTTP headers.


*yii/web/Request::getMethod*				public
>
 getMethod()
<
(string) Request method, such as GET, POST, HEAD, PUT, PATCH, DELETE. The
value returned is turned into upper case.



*yii/web/Request::getIsGet*				public
>
 getIsGet()
<
(boolean) Whether this is a GET request.



*yii/web/Request::getIsOptions*				public
>
 getIsOptions()
<
(boolean) Whether this is a OPTIONS request.



*yii/web/Request::getIsHead*				public
>
 getIsHead()
<
(boolean) Whether this is a HEAD request.



*yii/web/Request::getIsPost*				public
>
 getIsPost()
<
(boolean) Whether this is a POST request.



*yii/web/Request::getIsDelete*				public
>
 getIsDelete()
<
(boolean) Whether this is a DELETE request.



*yii/web/Request::getIsPut*				public
>
 getIsPut()
<
(boolean) Whether this is a PUT request.



*yii/web/Request::getIsPatch*				public
>
 getIsPatch()
<
(boolean) Whether this is a PATCH request.



*yii/web/Request::getIsAjax*				public
>
 getIsAjax()
<
(boolean) Whether this is an AJAX (XMLHttpRequest) request.

 Note that jQuery doesn't set the header in case of cross domain requests:
 https://stackoverflow.com/questions/8163703/cross-domain-ajax-doesnt-send-x-requested-with-header


*yii/web/Request::getIsPjax*				public
>
 getIsPjax()
<
(boolean) Whether this is a PJAX request



*yii/web/Request::getIsFlash*				public
>
 getIsFlash()
<
(boolean) Whether this is an Adobe Flash or Adobe Flex request.



*yii/web/Request::getRawBody*				public
>
 getRawBody()
<
(string) The request body



*yii/web/Request::setRawBody*				public
>
 setRawBody($rawBody)
<
(void)

    [$rawBody] (string) The request body


*yii/web/Request::getBodyParams*				public
>
 getBodyParams()
<
(array) The request parameters given in the request body.

 Request parameters are determined using the parsers configured in 'parsers'
 property. If no parsers are configured for the current 'contentType' it uses
 the PHP function 'mb_parse_str()' to parse the 'rawBody|request body'.


*yii/web/Request::setBodyParams*				public
>
 setBodyParams($values)
<
(void)

    [$values] (array) The request body parameters (name-value pairs)


*yii/web/Request::getBodyParam*				public
>
 getBodyParam($name, $defaultValue='null')
<
(mixed) The parameter value

 If the parameter does not exist, the second parameter passed to this method
 will be returned.
    [$name] (string) The parameter name
    [$defaultValue] (mixed) The default parameter value if the parameter does
    not exist.


*yii/web/Request::post*					public
>
 post($name='null', $defaultValue='null')
<
(array|mixed) 

    [$name] (string) The parameter name
    [$defaultValue] (mixed) The default parameter value if the parameter does
    not exist.


*yii/web/Request::getQueryParams*				public
>
 getQueryParams()
<
(array) The request GET parameter values.

 This method will return the contents of '$_GET' if params where not
 explicitly set.


*yii/web/Request::setQueryParams*				public
>
 setQueryParams($values)
<
(void)

    [$values] (array) The request query parameters (name-value pairs)


*yii/web/Request::get*					public
>
 get($name='null', $defaultValue='null')
<
(array|mixed) 

    [$name] (string) The parameter name
    [$defaultValue] (mixed) The default parameter value if the parameter does
    not exist.


*yii/web/Request::getQueryParam*				public
>
 getQueryParam($name, $defaultValue='null')
<
(mixed) The GET parameter value

 If the GET parameter does not exist, the second parameter passed to this
 method will be returned.
    [$name] (string) The GET parameter name.
    [$defaultValue] (mixed) The default parameter value if the GET parameter
    does not exist.


*yii/web/Request::getHostInfo*				public
>
 getHostInfo()
<
(string) Schema and hostname part (with port number if needed) of the request
URL (e.g. 'http://www.yiiframework.com')

 The returned URL does not have an ending slash. By default this is determined
 based on the user request information. You may explicitly specify it by
 setting the 'setHostInfo()|hostInfo' property.


*yii/web/Request::setHostInfo*				public
>
 setHostInfo($value)
<
(void)

 This setter is provided in case the schema and hostname cannot be determined
 on certain Web servers.
    [$value] (string) The schema and host part of the application URL. The
    trailing slashes will be removed.


*yii/web/Request::getBaseUrl*				public
>
 getBaseUrl()
<
(string) The relative URL for the application

 This is similar to 'scriptUrl' except that it does not include the script
 file name, and the ending slashes are removed.


*yii/web/Request::setBaseUrl*				public
>
 setBaseUrl($value)
<
(void)

 By default the URL is determined based on the entry script URL. This setter
 is provided in case you want to change this behavior.
    [$value] (string) The relative URL for the application


*yii/web/Request::getScriptUrl*				public
>
 getScriptUrl()
<
(string) The relative URL of the entry script.

 The implementation of this method referenced Zend_Controller_Request_Http in
 Zend Framework.


*yii/web/Request::setScriptUrl*				public
>
 setScriptUrl($value)
<
(void)

 This setter is provided in case the entry script URL cannot be determined on
 certain Web servers.
    [$value] (string) The relative URL for the application entry script.


*yii/web/Request::getPathInfo*				public
>
 getPathInfo()
<
(string) Part of the request URL that is after the entry script and before the
question mark. Note, the returned path info is already URL-decoded.

 A path info refers to the part that is after the entry script and before the
 question mark (query string). The starting and ending slashes are both
 removed.


*yii/web/Request::setPathInfo*				public
>
 setPathInfo($value)
<
(void)

 This method is mainly provided for testing purpose.
    [$value] (string) The path info of the current request


*yii/web/Request::resolvePathInfo*			protected
>
 resolvePathInfo()
<
(string) Part of the request URL that is after the entry script and before the
question mark. Note, the returned path info is decoded.

 A path info refers to the part that is after the entry script and before the
 question mark (query string). The starting slashes are both removed (ending
 slashes will be kept).


*yii/web/Request::getAbsoluteUrl*				public
>
 getAbsoluteUrl()
<
(string) The currently requested absolute URL.

 This is a shortcut to the concatenation of 'hostInfo' and 'url'.


*yii/web/Request::getUrl*					public
>
 getUrl()
<
(string) The currently requested relative URL. Note that the URI returned is
URL-encoded.

 This refers to the portion of the URL that is after the 'hostInfo' part. It
 includes the 'queryString' part if any.


*yii/web/Request::setUrl*					public
>
 setUrl($value)
<
(void)

 The URI must refer to the portion that is after 'hostInfo'. Note that the URI
 should be URL-encoded.
    [$value] (string) The request URI to be set


*yii/web/Request::resolveRequestUri*			protected
>
 resolveRequestUri()
<
(string|boolean) The request URI portion for the currently requested URL. Note
that the URI returned is URL-encoded.

 This refers to the portion that is after the 'hostInfo' part. It includes the
 'queryString' part if any. The implementation of this method referenced
 Zend_Controller_Request_Http in Zend Framework.


*yii/web/Request::getQueryString*				public
>
 getQueryString()
<
(string) Part of the request URL that is after the question mark



*yii/web/Request::getIsSecureConnection*			public
>
 getIsSecureConnection()
<
(boolean) If the request is sent via secure channel (https)



*yii/web/Request::getServerName*				public
>
 getServerName()
<
(string) Server name



*yii/web/Request::getServerPort*				public
>
 getServerPort()
<
(integer) Server port number



*yii/web/Request::getReferrer*				public
>
 getReferrer()
<
(string) URL referrer, null if not present



*yii/web/Request::getUserAgent*				public
>
 getUserAgent()
<
(string) User agent, null if not present



*yii/web/Request::getUserIP*				public
>
 getUserIP()
<
(string) User IP address. Null is returned if the user IP address cannot be
detected.



*yii/web/Request::getUserHost*				public
>
 getUserHost()
<
(string) User host name, null if cannot be determined



*yii/web/Request::getAuthUser*				public
>
 getAuthUser()
<
(string) The username sent via HTTP authentication, null if the username is
not given



*yii/web/Request::getAuthPassword*			public
>
 getAuthPassword()
<
(string) The password sent via HTTP authentication, null if the password is
not given



*yii/web/Request::getPort*				public
>
 getPort()
<
(integer) Port number for insecure requests.

 Defaults to 80, or the port specified by the server if the current request is
 insecure.


*yii/web/Request::setPort*				public
>
 setPort($value)
<
(void)

 This setter is provided in case a custom port is necessary for certain server
 configurations.
    [$value] (integer) Port number.


*yii/web/Request::getSecurePort*				public
>
 getSecurePort()
<
(integer) Port number for secure requests.

 Defaults to 443, or the port specified by the server if the current request
 is secure.


*yii/web/Request::setSecurePort*				public
>
 setSecurePort($value)
<
(void)

 This setter is provided in case a custom port is necessary for certain server
 configurations.
    [$value] (integer) Port number.


*yii/web/Request::getAcceptableContentTypes*		public
>
 getAcceptableContentTypes()
<
(array) The content types ordered by the quality score. Types with the highest
scores will be returned first. The array keys are the content types, while the
array values are the corresponding quality score and other parameters as given
in the header.

 This is determined by the 'Accept' HTTP header. For example,

   $_SERVER['HTTP_ACCEPT'] = 'text/plain; q=0.5, application/json;
 version=1.0, application/xml; version=2.0;';
   $types = $request->getAcceptableContentTypes();
   print_r($types);
   // displays:
   // [
   //     'application/json' => ['q' => 1, 'version' => '1.0'],
   //      'application/xml' => ['q' => 1, 'version' => '2.0'],
   //           'text/plain' => ['q' => 0.5],
   // ]




*yii/web/Request::setAcceptableContentTypes*		public
>
 setAcceptableContentTypes($value)
<
(void)

 Please refer to 'getAcceptableContentTypes()' on the format of the parameter.
    [$value] (array) The content types that are acceptable by the end user.
    They should be ordered by the preference level.


*yii/web/Request::getContentType*				public
>
 getContentType()
<
(string) Request content-type. Null is returned if this information is not
available.

 For the MIME-types the user expects in response, see
 'acceptableContentTypes'.


*yii/web/Request::getAcceptableLanguages*			public
>
 getAcceptableLanguages()
<
(array) The languages ordered by the preference level. The first element
represents the most preferred language.

 This is determined by the 'Accept-Language' HTTP header.


*yii/web/Request::setAcceptableLanguages*			public
>
 setAcceptableLanguages($value)
<
(void)

    [$value] (array) The languages that are acceptable by the end user. They
    should be ordered by the preference level.


*yii/web/Request::parseAcceptHeader*			public
>
 parseAcceptHeader($header)
<
(array) The acceptable values ordered by their quality score. The values with
the highest scores will be returned first.

 This method will return the acceptable values with their quality scores and
 the corresponding parameters as specified in the given 'Accept' header. The
 array keys of the return value are the acceptable values, while the array
 values consisting of the corresponding quality scores and parameters. The
 acceptable values with the highest quality scores will be returned first. For
 example,

   $header = 'text/plain; q=0.5, application/json; version=1.0,
 application/xml; version=2.0;';
   $accepts = $request->parseAcceptHeader($header);
   print_r($accepts);
   // displays:
   // [
   //     'application/json' => ['q' => 1, 'version' => '1.0'],
   //      'application/xml' => ['q' => 1, 'version' => '2.0'],
   //           'text/plain' => ['q' => 0.5],
   // ]


    [$header] (string) The header to be parsed


*yii/web/Request::getPreferredLanguage*			public
>
 getPreferredLanguage($languages='[]')
<
(string) The language that the application should use.

 The language resolution is based on the user preferred languages and the
 languages supported by the application. The method will try to find the best
 match.
    [$languages] (array) A list of the languages supported by the application.
    If this is empty, the current application language will be returned
    without further processing.


*yii/web/Request::getETags*				public
>
 getETags()
<
(array) The entity tags



*yii/web/Request::getCookies*				public
>
 getCookies()
<
(\yii\web\CookieCollection) The cookie collection.

 Through the returned cookie collection, you may access a cookie using the
 following syntax:

   $cookie = $request->cookies['name']
   if ($cookie !== null) {
       $value = $cookie->value;
   }

   // alternatively
   $value = $request->cookies->getValue('name');




*yii/web/Request::loadCookies*				protected
>
 loadCookies()
<
(array) The cookies obtained from request



*yii/web/Request::getCsrfToken*				public
>
 getCsrfToken($regenerate='false')
<
(string) The token used to perform CSRF validation.

 This token is a masked version of 'rawCsrfToken' to prevent [BREACH
 attacks](http://breachattack.com/). This token may be passed along via a
 hidden field of an HTML form or an HTTP header value to support CSRF
 validation.
    [$regenerate] (boolean) Whether to regenerate CSRF token. When this
    parameter is true, each time this method is called, a new CSRF token will
    be generated and persisted (in session or cookie).


*yii/web/Request::loadCsrfToken*				protected
>
 loadCsrfToken()
<
(string) The CSRF token loaded from cookie or session. Null is returned if the
cookie or session does not have CSRF token.



*yii/web/Request::generateCsrfToken*			protected
>
 generateCsrfToken()
<
(string) The random token for CSRF validation.



*yii/web/Request::getCsrfTokenFromHeader*			public
>
 getCsrfTokenFromHeader()
<
(string) The CSRF token sent via 'CSRF_HEADER' by browser. Null is returned if
no such header is sent.



*yii/web/Request::createCsrfCookie*			protected
>
 createCsrfCookie($token)
<
(\yii\web\Cookie) The generated cookie

 Initial values specified in 'csrfCookie' will be applied to the generated
 cookie.
    [$token] (string) The CSRF token


*yii/web/Request::validateCsrfToken*			public
>
 validateCsrfToken($token='null')
<
(boolean) Whether CSRF token is valid. If 'enableCsrfValidation' is false,
this method will return true.

 This method will validate the user-provided CSRF token by comparing it with
 the one stored in cookie or session. This method is mainly called in
 'Controller::beforeAction()'.

 Note that the method will NOT perform CSRF validation if
 'enableCsrfValidation' is false or the HTTP method is among GET, HEAD or
 OPTIONS.
    [$token] (string) The user-provided CSRF token to be validated. If null,
    the token will be retrieved from the 'csrfParam' POST field or HTTP
    header. This parameter is available since version 2.0.4.



 vim:tw=78:ts=8:ft=help:norl:
