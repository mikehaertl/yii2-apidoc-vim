
*yii/web/Request*   >> |yii/base/Request|
=================

DESCRIPTION
------------------------------------------------------------------------------

 It encapsulates the $_SERVER variable and resolves its inconsistency among
 different Web servers. Also it provides an interface to retrieve request
 parameters from $_POST, $_GET, $_COOKIES and REST parameters sent via other
 HTTP methods like PUT or DELETE.

 Request is configured as an application component in '\yii\web\Application'
 by default. You can access that instance via 'Yii::$app->request'.

 For more details and usage information on Request, see the [guide article on
 requests](guide:runtime-requests).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|
 |yii/base/Request::$isConsoleRequest|


$enableCsrfValidation			*yii/web/Request::$enableCsrfValidation*

 (bool) Whether to enable CSRF (Cross-Site Request Forgery) validation.
 Defaults to true. When CSRF validation is enabled, forms submitted to an Yii
 Web application must be originated from the same application. If not, a 400
 HTTP exception will be raised.

 Note, this feature requires that the user client accepts cookie. Also, to use
 this feature, forms submitted via POST method must contain a hidden input
 whose name is specified by 'csrfParam'. You may use
 '\yii\helpers\Html::beginForm()' to generate his hidden input.

 In JavaScript, you may get the values of 'csrfParam' and 'csrfToken' via
 'yii.getCsrfParam()' and 'yii.getCsrfToken()', respectively. The
 '\yii\web\YiiAsset' asset must be registered. You also need to include CSRF
 meta tags in your pages by using '\yii\helpers\Html::csrfMetaTags()'.

$csrfParam				*yii/web/Request::$csrfParam*

 (string) The name of the token used to prevent CSRF. Defaults to '_csrf'.
 This property is used only when 'enableCsrfValidation' is true.

$csrfCookie				*yii/web/Request::$csrfCookie*

 (array) The configuration for creating the CSRF 'Cookie|cookie'. This
 property is used only when both 'enableCsrfValidation' and 'enableCsrfCookie'
 are true.

$enableCsrfCookie			*yii/web/Request::$enableCsrfCookie*

 (bool) Whether to use cookie to persist CSRF token. If false, CSRF token will
 be stored in session under the name of 'csrfParam'. Note that while storing
 CSRF tokens in session increases security, it requires starting a session for
 every page, which will degrade your site performance.

$enableCookieValidation			*yii/web/Request::$enableCookieValidation*

 (bool) Whether cookies should be validated to ensure they are not tampered.
 Defaults to true.

$cookieValidationKey			*yii/web/Request::$cookieValidationKey*

 (string) A secret key used for cookie validation. This property must be set
 if 'enableCookieValidation' is true.

$methodParam				*yii/web/Request::$methodParam*

 (string) The name of the POST parameter that is used to indicate if a request
 is a PUT, PATCH or DELETE request tunneled through POST. Defaults to
 '_method'.

$parsers				*yii/web/Request::$parsers*

 (array) The parsers for converting the raw HTTP request body into
 'bodyParams'. The array keys are the request 'Content-Types', and the array
 values are the corresponding configurations for 'Yii::createObject|creating
 the parser objects'. A parser must implement the 'RequestParserInterface'.

 To enable parsing for JSON requests you can use the 'JsonParser' class like
 in the following example:

 ''' [     'application/json' => 'yii\web\JsonParser', ] '''

 To register a parser for parsing all request types you can use ''*'' as the
 array key. This one will be used as a fallback in case no other types match.

$trustedHosts				*yii/web/Request::$trustedHosts*

 (array) The configuration for trusted security related headers.

 An array key is an IPv4 or IPv6 IP address in CIDR notation for matching a
 client.

 An array value is a list of headers to trust. These will be matched against
 'secureHeaders' to determine which headers are allowed to be sent by a
 specified host. The case of the header names must be the same as specified in
 'secureHeaders'.

 For example, to trust all headers listed in 'secureHeaders' for IP addresses
 in range '192.168.0.0-192.168.0.254' write the following:

   [
       '192.168.0.0/24',
   ]

 To trust just the 'X-Forwarded-For' header from '10.0.0.1', use:

 ''' [     '10.0.0.1' => ['X-Forwarded-For'] ] '''

 Default is to trust all headers except those listed in 'secureHeaders' from
 all hosts. Matches are tried in order and searching is stopped when IP
 matches.

 > Info: Matching is performed using 'IpValidator'. See
 'IpValidator::::setRanges()|IpValidator::setRanges()' and
 'IpValidator::networks' for advanced matching.

$secureHeaders				*yii/web/Request::$secureHeaders*

 (array) Lists of headers that are, by default, subject to the trusted host
 configuration. These headers will be filtered unless explicitly allowed in
 'trustedHosts'. If the list contains the 'Forwarded' header, processing will
 be done according to RFC 7239. The match of header names is case-insensitive.

$ipHeaders				*yii/web/Request::$ipHeaders*

 (string[]) List of headers where proxies store the real client IP. It's not
 advisable to put insecure headers here. To use the 'Forwarded' header
 according to RFC 7239, the header must be added to 'secureHeaders' list. The
 match of header names is case-insensitive.

$secureProtocolHeaders			*yii/web/Request::$secureProtocolHeaders*

 (array) List of headers to check for determining whether the connection is
 made via HTTPS. The array keys are header names and the array value is a list
 of header values that indicate a secure connection. The match of header names
 and values is case-insensitive. It's not advisable to put insecure headers
 here.

$scriptFile				*yii/web/Request::$scriptFile*

 (string) The entry script file path

$headers				*yii/web/Request::$headers*

 (\yii\web\HeaderCollection) The header collection

$method					*yii/web/Request::$method*

 (string) Request method, such as GET, POST, HEAD, PUT, PATCH, DELETE. The
 value returned is turned into upper case.

$isGet					*yii/web/Request::$isGet*

 (bool) Whether this is a GET request.

$isOptions				*yii/web/Request::$isOptions*

 (bool) Whether this is a OPTIONS request.

$isHead					*yii/web/Request::$isHead*

 (bool) Whether this is a HEAD request.

$isPost					*yii/web/Request::$isPost*

 (bool) Whether this is a POST request.

$isDelete				*yii/web/Request::$isDelete*

 (bool) Whether this is a DELETE request.

$isPut					*yii/web/Request::$isPut*

 (bool) Whether this is a PUT request.

$isPatch				*yii/web/Request::$isPatch*

 (bool) Whether this is a PATCH request.

$isAjax					*yii/web/Request::$isAjax*

 (bool) Whether this is an AJAX (XMLHttpRequest) request.

$isPjax					*yii/web/Request::$isPjax*

 (bool) Whether this is a PJAX request

$isFlash				*yii/web/Request::$isFlash*

 (bool) Whether this is an Adobe Flash or Adobe Flex request.

$rawBody				*yii/web/Request::$rawBody*

 (string) The request body

$bodyParams				*yii/web/Request::$bodyParams*

 (array) The request parameters given in the request body.

$queryParams				*yii/web/Request::$queryParams*

 (array) The request GET parameter values.

$hostInfo				*yii/web/Request::$hostInfo*

 (string|null) Schema and hostname part (with port number if needed) of the
 request URL (e.g. 'http://www.yiiframework.com'), null if can't be obtained
 from '$_SERVER' and wasn't set.

$hostName				*yii/web/Request::$hostName*

 (string|null) Hostname part of the request URL (e.g. 'www.yiiframework.com')

$baseUrl				*yii/web/Request::$baseUrl*

 (string) The relative URL for the application

$scriptUrl				*yii/web/Request::$scriptUrl*

 (string) The relative URL of the entry script.

$pathInfo				*yii/web/Request::$pathInfo*

 (string) Part of the request URL that is after the entry script and before
 the question mark. Note, the returned path info is already URL-decoded.

$absoluteUrl				*yii/web/Request::$absoluteUrl*

 (string) The currently requested absolute URL.

$url					*yii/web/Request::$url*

 (string) The currently requested relative URL. Note that the URI returned may
 be URL-encoded depending on the client.

$queryString				*yii/web/Request::$queryString*

 (string) Part of the request URL that is after the question mark

$isSecureConnection			*yii/web/Request::$isSecureConnection*

 (bool) If the request is sent via secure channel (https)

$serverName				*yii/web/Request::$serverName*

 (string) Server name, null if not available

$serverPort				*yii/web/Request::$serverPort*

 (int|null) Server port number, null if not available

$referrer				*yii/web/Request::$referrer*

 (string|null) URL referrer, null if not available

$origin					*yii/web/Request::$origin*

 (string|null) URL origin of a CORS request, 'null' if not available.

$userAgent				*yii/web/Request::$userAgent*

 (string|null) User agent, null if not available

$userIP					*yii/web/Request::$userIP*

 (string|null) User IP address, null if not available

$userHost				*yii/web/Request::$userHost*

 (string|null) User host name, null if not available

$remoteIP				*yii/web/Request::$remoteIP*

 (string|null) Remote IP address, 'null' if not available.

$remoteHost				*yii/web/Request::$remoteHost*

 (string|null) Remote host name, 'null' if not available

$authUser				*yii/web/Request::$authUser*

 (string|null) The username sent via HTTP authentication, 'null' if the
 username is not given

$authPassword				*yii/web/Request::$authPassword*

 (string|null) The password sent via HTTP authentication, 'null' if the
 password is not given

$authCredentials			*yii/web/Request::$authCredentials*

 (array) That contains exactly two elements: 
   - 0: the username sent via HTTP authentication, 'null' if the
   username is not given 
   - 1: the password sent via HTTP authentication, 'null' if the
   password is not given

$port					*yii/web/Request::$port*

 (int) Port number for insecure requests.

$securePort				*yii/web/Request::$securePort*

 (int) Port number for secure requests.

$acceptableContentTypes			*yii/web/Request::$acceptableContentTypes*

 (array) The content types ordered by the quality score. Types with the
 highest scores will be returned first. The array keys are the content types,
 while the array values are the corresponding quality score and other
 parameters as given in the header.

$contentType				*yii/web/Request::$contentType*

 (string) Request content-type. Null is returned if this information is not
 available.

$acceptableLanguages			*yii/web/Request::$acceptableLanguages*

 (array) The languages ordered by the preference level. The first element
 represents the most preferred language.

$preferredLanguage			*yii/web/Request::$preferredLanguage*

 (string) The language that the application should use.

$eTags					*yii/web/Request::$eTags*

 (array) The entity tags

$cookies				*yii/web/Request::$cookies*

 (\yii\web\CookieCollection) The cookie collection.

$csrfToken				*yii/web/Request::$csrfToken*

 (string) The token used to perform CSRF validation.

$csrfTokenFromHeader			*yii/web/Request::$csrfTokenFromHeader*

 (string) The CSRF token sent via 'CSRF_HEADER' by browser. Null is returned
 if no such header is sent.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Request::getIsConsoleRequest|
 |yii/base/Request::setIsConsoleRequest|


*yii/web/Request::resolve*				public
>
 resolve()
<
return (array) The first element is the route, and the second is the associated
parameters.

 Resolves the current request into a route and the associated parameters.


*yii/web/Request::getScriptFile*				public
>
 getScriptFile()
<
return (string) The entry script file path

 Returns the entry script file path.

 The default implementation will simply return '$_SERVER['SCRIPT_FILENAME']'.


*yii/web/Request::setScriptFile*				public
>
 setScriptFile($value)
<
return (void)

 Sets the entry script file path.

 The entry script file path normally can be obtained from
 '$_SERVER['SCRIPT_FILENAME']'. If your server configuration does not return
 the correct value, you may configure this property to make it right.

    [$value] (string) The entry script file path.


*yii/web/Request::filterHeaders*				protected
>
 filterHeaders($headerCollection)
<
return (void)

 Filters headers according to the 'trustedHosts'.

    [$headerCollection] (\yii\web\HeaderCollection) 


*yii/web/Request::getTrustedHeaders*			protected
>
 getTrustedHeaders()
<
return (array) 

 Trusted headers according to the 'trustedHosts'.


*yii/web/Request::getIpValidator*				protected
>
 getIpValidator()
<
return (\yii\validators\IpValidator) 

 Creates instance of 'IpValidator'.

 You can override this method to adjust validator or implement different
 matching strategy.


*yii/web/Request::getHeaders*				public
>
 getHeaders()
<
return (\yii\web\HeaderCollection) The header collection

 Returns the header collection.

 The header collection contains incoming HTTP headers.


*yii/web/Request::getMethod*				public
>
 getMethod()
<
return (string) Request method, such as GET, POST, HEAD, PUT, PATCH, DELETE. The
value returned is turned into upper case.

 Returns the method of the current request (e.g. GET, POST, HEAD, PUT, PATCH,
 DELETE).


*yii/web/Request::getIsGet*				public
>
 getIsGet()
<
return (bool) Whether this is a GET request.

 Returns whether this is a GET request.


*yii/web/Request::getIsOptions*				public
>
 getIsOptions()
<
return (bool) Whether this is a OPTIONS request.

 Returns whether this is an OPTIONS request.


*yii/web/Request::getIsHead*				public
>
 getIsHead()
<
return (bool) Whether this is a HEAD request.

 Returns whether this is a HEAD request.


*yii/web/Request::getIsPost*				public
>
 getIsPost()
<
return (bool) Whether this is a POST request.

 Returns whether this is a POST request.


*yii/web/Request::getIsDelete*				public
>
 getIsDelete()
<
return (bool) Whether this is a DELETE request.

 Returns whether this is a DELETE request.


*yii/web/Request::getIsPut*				public
>
 getIsPut()
<
return (bool) Whether this is a PUT request.

 Returns whether this is a PUT request.


*yii/web/Request::getIsPatch*				public
>
 getIsPatch()
<
return (bool) Whether this is a PATCH request.

 Returns whether this is a PATCH request.


*yii/web/Request::getIsAjax*				public
>
 getIsAjax()
<
return (bool) Whether this is an AJAX (XMLHttpRequest) request.

 Returns whether this is an AJAX (XMLHttpRequest) request.

 Note that jQuery doesn't set the header in case of cross domain requests:
 https://stackoverflow.com/questions/8163703/cross-domain-ajax-doesnt-send-x-requested-with-header


*yii/web/Request::getIsPjax*				public
>
 getIsPjax()
<
return (bool) Whether this is a PJAX request

 Returns whether this is a PJAX request.


*yii/web/Request::getIsFlash*				public
>
 getIsFlash()
<
return (bool) Whether this is an Adobe Flash or Adobe Flex request.

 Returns whether this is an Adobe Flash or Flex request.


*yii/web/Request::getRawBody*				public
>
 getRawBody()
<
return (string) The request body

 Returns the raw HTTP request body.


*yii/web/Request::setRawBody*				public
>
 setRawBody($rawBody)
<
return (void)

 Sets the raw HTTP request body, this method is mainly used by test scripts to
 simulate raw HTTP requests.

    [$rawBody] (string) The request body


*yii/web/Request::getBodyParams*				public
>
 getBodyParams()
<
return (array) The request parameters given in the request body.

 Returns the request parameters given in the request body.

 Request parameters are determined using the parsers configured in 'parsers'
 property. If no parsers are configured for the current 'contentType' it uses
 the PHP function 'mb_parse_str()' to parse the 'rawBody|request body'.


*yii/web/Request::setBodyParams*				public
>
 setBodyParams($values)
<
return (void)

 Sets the request body parameters.

    [$values] (array) The request body parameters (name-value pairs)


*yii/web/Request::getBodyParam*				public
>
 getBodyParam($name, $defaultValue='null')
<
return (mixed) The parameter value

 Returns the named request body parameter value.

 If the parameter does not exist, the second parameter passed to this method
 will be returned.

    [$name] (string) The parameter name
    [$defaultValue] (mixed) The default parameter value if the parameter does
    not exist.


*yii/web/Request::post*					public
>
 post($name='null', $defaultValue='null')
<
return (array|mixed) 

 Returns POST parameter with a given name. If name isn't specified, returns an
 array of all POST parameters.

    [$name] (string) The parameter name
    [$defaultValue] (mixed) The default parameter value if the parameter does
    not exist.


*yii/web/Request::getQueryParams*				public
>
 getQueryParams()
<
return (array) The request GET parameter values.

 Returns the request parameters given in the 'queryString'.

 This method will return the contents of '$_GET' if params where not
 explicitly set.


*yii/web/Request::setQueryParams*				public
>
 setQueryParams($values)
<
return (void)

 Sets the request 'queryString' parameters.

    [$values] (array) The request query parameters (name-value pairs)


*yii/web/Request::get*					public
>
 get($name='null', $defaultValue='null')
<
return (array|mixed) 

 Returns GET parameter with a given name. If name isn't specified, returns an
 array of all GET parameters.

    [$name] (string) The parameter name
    [$defaultValue] (mixed) The default parameter value if the parameter does
    not exist.


*yii/web/Request::getQueryParam*				public
>
 getQueryParam($name, $defaultValue='null')
<
return (mixed) The GET parameter value

 Returns the named GET parameter value.

 If the GET parameter does not exist, the second parameter passed to this
 method will be returned.

    [$name] (string) The GET parameter name.
    [$defaultValue] (mixed) The default parameter value if the GET parameter
    does not exist.


*yii/web/Request::getHostInfo*				public
>
 getHostInfo()
<
return (string|null) Schema and hostname part (with port number if needed) of the
request URL (e.g. 'http://www.yiiframework.com'), null if can't be obtained
from '$_SERVER' and wasn't set.

 Returns the schema and host part of the current request URL.

 The returned URL does not have an ending slash.

 By default this value is based on the user request information. This method
 will return the value of '$_SERVER['HTTP_HOST']' if it is available or
 '$_SERVER['SERVER_NAME']' if not. You may want to check out the [PHP
 documentation](https://secure.php.net/manual/en/reserved.variables.server.php)
 for more information on these variables.

 You may explicitly specify it by setting the 'setHostInfo()|hostInfo'
 property.

 > Warning: Dependent on the server configuration this information may not be
 > reliable and [may be faked by the user sending the HTTP
 request](https://www.acunetix.com/vulnerabilities/web/host-header-attack). >
 If the webserver is configured to serve the same site independent of the
 value of > the 'Host' header, this value is not reliable. In such situations
 you should either > fix your webserver configuration or explicitly set the
 value by setting the 'setHostInfo()|hostInfo' property. > If you don't have
 access to the server configuration, you can setup '\yii\filters\HostControl'
 filter at > application level in order to protect against such kind of
 attack.


*yii/web/Request::setHostInfo*				public
>
 setHostInfo($value)
<
return (void)

 Sets the schema and host part of the application URL.

 This setter is provided in case the schema and hostname cannot be determined
 on certain Web servers.

    [$value] (string|null) The schema and host part of the application URL.
    The trailing slashes will be removed.


*yii/web/Request::getHostName*				public
>
 getHostName()
<
return (string|null) Hostname part of the request URL (e.g. 'www.yiiframework.com')

 Returns the host part of the current request URL.

 Value is calculated from current 'getHostInfo()|hostInfo' property.

 > Warning: The content of this value may not be reliable, dependent on the
 server > configuration. Please refer to 'getHostInfo()' for more information.


*yii/web/Request::getBaseUrl*				public
>
 getBaseUrl()
<
return (string) The relative URL for the application

 Returns the relative URL for the application.

 This is similar to 'scriptUrl' except that it does not include the script
 file name, and the ending slashes are removed.


*yii/web/Request::setBaseUrl*				public
>
 setBaseUrl($value)
<
return (void)

 Sets the relative URL for the application.

 By default the URL is determined based on the entry script URL. This setter
 is provided in case you want to change this behavior.

    [$value] (string) The relative URL for the application


*yii/web/Request::getScriptUrl*				public
>
 getScriptUrl()
<
return (string) The relative URL of the entry script.

 Returns the relative URL of the entry script.

 The implementation of this method referenced Zend_Controller_Request_Http in
 Zend Framework.


*yii/web/Request::setScriptUrl*				public
>
 setScriptUrl($value)
<
return (void)

 Sets the relative URL for the application entry script.

 This setter is provided in case the entry script URL cannot be determined on
 certain Web servers.

    [$value] (string) The relative URL for the application entry script.


*yii/web/Request::getPathInfo*				public
>
 getPathInfo()
<
return (string) Part of the request URL that is after the entry script and before the
question mark. Note, the returned path info is already URL-decoded.

 Returns the path info of the currently requested URL.

 A path info refers to the part that is after the entry script and before the
 question mark (query string). The starting and ending slashes are both
 removed.


*yii/web/Request::setPathInfo*				public
>
 setPathInfo($value)
<
return (void)

 Sets the path info of the current request.

 This method is mainly provided for testing purpose.

    [$value] (string) The path info of the current request


*yii/web/Request::resolvePathInfo*			protected
>
 resolvePathInfo()
<
return (string) Part of the request URL that is after the entry script and before the
question mark. Note, the returned path info is decoded.

 Resolves the path info part of the currently requested URL.

 A path info refers to the part that is after the entry script and before the
 question mark (query string). The starting slashes are both removed (ending
 slashes will be kept).


*yii/web/Request::getAbsoluteUrl*				public
>
 getAbsoluteUrl()
<
return (string) The currently requested absolute URL.

 Returns the currently requested absolute URL.

 This is a shortcut to the concatenation of 'hostInfo' and 'url'.


*yii/web/Request::getUrl*					public
>
 getUrl()
<
return (string) The currently requested relative URL. Note that the URI returned may
be URL-encoded depending on the client.

 Returns the currently requested relative URL.

 This refers to the portion of the URL that is after the 'hostInfo' part. It
 includes the 'queryString' part if any.


*yii/web/Request::setUrl*					public
>
 setUrl($value)
<
return (void)

 Sets the currently requested relative URL.

 The URI must refer to the portion that is after 'hostInfo'. Note that the URI
 should be URL-encoded.

    [$value] (string) The request URI to be set


*yii/web/Request::resolveRequestUri*			protected
>
 resolveRequestUri()
<
return (string|bool) The request URI portion for the currently requested URL. Note
that the URI returned may be URL-encoded depending on the client.

 Resolves the request URI portion for the currently requested URL.

 This refers to the portion that is after the 'hostInfo' part. It includes the
 'queryString' part if any. The implementation of this method referenced
 Zend_Controller_Request_Http in Zend Framework.


*yii/web/Request::getQueryString*				public
>
 getQueryString()
<
return (string) Part of the request URL that is after the question mark

 Returns part of the request URL that is after the question mark.


*yii/web/Request::getIsSecureConnection*			public
>
 getIsSecureConnection()
<
return (bool) If the request is sent via secure channel (https)

 Return if the request is sent via secure channel (https).


*yii/web/Request::getServerName*				public
>
 getServerName()
<
return (string) Server name, null if not available

 Returns the server name.


*yii/web/Request::getServerPort*				public
>
 getServerPort()
<
return (int|null) Server port number, null if not available

 Returns the server port number.


*yii/web/Request::getReferrer*				public
>
 getReferrer()
<
return (string|null) URL referrer, null if not available

 Returns the URL referrer.


*yii/web/Request::getOrigin*				public
>
 getOrigin()
<
return (string|null) URL origin of a CORS request, 'null' if not available.

 Returns the URL origin of a CORS request.

 The return value is taken from the 'Origin' 'getHeaders()|header' sent by the
 browser.

 Note that the origin request header indicates where a fetch originates from.
 It doesn't include any path information, but only the server name. It is sent
 with a CORS requests, as well as with POST requests. It is similar to the
 referer header, but, unlike this header, it doesn't disclose the whole path.
 Please refer to
 <https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Origin> for more
 information.


*yii/web/Request::getUserAgent*				public
>
 getUserAgent()
<
return (string|null) User agent, null if not available

 Returns the user agent.


*yii/web/Request::getUserIpFromIpHeaders*			protected
>
 getUserIpFromIpHeaders()
<
return (string|null) User IP address, null if not available

 Returns the user IP address from 'ipHeaders'.


*yii/web/Request::getUserIP*				public
>
 getUserIP()
<
return (string|null) User IP address, null if not available

 Returns the user IP address.

 The IP is determined using headers and / or '$_SERVER' variables.


*yii/web/Request::getUserIpFromIpHeader*			protected
>
 getUserIpFromIpHeader($ips)
<
return (string|null) IP as string. Null is returned if IP can not be determined from
header.

 Return user IP's from IP header.

    [$ips] (string) Comma separated IP list


*yii/web/Request::getUserHost*				public
>
 getUserHost()
<
return (string|null) User host name, null if not available

 Returns the user host name.

 The HOST is determined using headers and / or '$_SERVER' variables.


*yii/web/Request::getRemoteIP*				public
>
 getRemoteIP()
<
return (string|null) Remote IP address, 'null' if not available.

 Returns the IP on the other end of this connection.

 This is always the next hop, any headers are ignored.


*yii/web/Request::getRemoteHost*				public
>
 getRemoteHost()
<
return (string|null) Remote host name, 'null' if not available

 Returns the host name of the other end of this connection.

 This is always the next hop, any headers are ignored.


*yii/web/Request::getAuthUser*				public
>
 getAuthUser()
<
return (string|null) The username sent via HTTP authentication, 'null' if the
username is not given



*yii/web/Request::getAuthPassword*			public
>
 getAuthPassword()
<
return (string|null) The password sent via HTTP authentication, 'null' if the
password is not given



*yii/web/Request::getAuthCredentials*			public
>
 getAuthCredentials()
<
return (array) That contains exactly two elements: 
  - 0: the username sent via HTTP authentication, 'null' if the
  username is not given 
  - 1: the password sent via HTTP authentication, 'null' if the
  password is not given



*yii/web/Request::getPort*				public
>
 getPort()
<
return (int) Port number for insecure requests.

 Returns the port to use for insecure requests.

 Defaults to 80, or the port specified by the server if the current request is
 insecure.


*yii/web/Request::setPort*				public
>
 setPort($value)
<
return (void)

 Sets the port to use for insecure requests.

 This setter is provided in case a custom port is necessary for certain server
 configurations.

    [$value] (int) Port number.


*yii/web/Request::getSecurePort*				public
>
 getSecurePort()
<
return (int) Port number for secure requests.

 Returns the port to use for secure requests.

 Defaults to 443, or the port specified by the server if the current request
 is secure.


*yii/web/Request::setSecurePort*				public
>
 setSecurePort($value)
<
return (void)

 Sets the port to use for secure requests.

 This setter is provided in case a custom port is necessary for certain server
 configurations.

    [$value] (int) Port number.


*yii/web/Request::getAcceptableContentTypes*		public
>
 getAcceptableContentTypes()
<
return (array) The content types ordered by the quality score. Types with the highest
scores will be returned first. The array keys are the content types, while the
array values are the corresponding quality score and other parameters as given
in the header.

 Returns the content types acceptable by the end user.

 This is determined by the 'Accept' HTTP header. For example,

   $_SERVER['HTTP_ACCEPT'] = 'text/plain; q=0.5, application/json;
 version=1.0, application/xml; version=2.0;';
   $types = $request->getAcceptableContentTypes();
   print_r($types);
   // displays:
   // [
   //     'application/json' => ['q' => 1, 'version' => '1.0'],
   //      'application/xml' => ['q' => 1, 'version' => '2.0'],
   //           'text/plain' => ['q' => 0.5],
   // ]




*yii/web/Request::setAcceptableContentTypes*		public
>
 setAcceptableContentTypes($value)
<
return (void)

 Sets the acceptable content types.

 Please refer to 'getAcceptableContentTypes()' on the format of the parameter.

    [$value] (array) The content types that are acceptable by the end user.
    They should be ordered by the preference level.


*yii/web/Request::getContentType*				public
>
 getContentType()
<
return (string) Request content-type. Null is returned if this information is not
available.

 Returns request content-type The Content-Type header field indicates the MIME
 type of the data contained in 'getRawBody()' or, in the case of the HEAD
 method, the media type that would have been sent had the request been a GET.

 For the MIME-types the user expects in response, see
 'acceptableContentTypes'.


*yii/web/Request::getAcceptableLanguages*			public
>
 getAcceptableLanguages()
<
return (array) The languages ordered by the preference level. The first element
represents the most preferred language.

 Returns the languages acceptable by the end user.

 This is determined by the 'Accept-Language' HTTP header.


*yii/web/Request::setAcceptableLanguages*			public
>
 setAcceptableLanguages($value)
<
return (void)

    [$value] (array) The languages that are acceptable by the end user. They
    should be ordered by the preference level.


*yii/web/Request::parseAcceptHeader*			public
>
 parseAcceptHeader($header)
<
return (array) The acceptable values ordered by their quality score. The values with
the highest scores will be returned first.

 Parses the given 'Accept' (or 'Accept-Language') header.

 This method will return the acceptable values with their quality scores and
 the corresponding parameters as specified in the given 'Accept' header. The
 array keys of the return value are the acceptable values, while the array
 values consisting of the corresponding quality scores and parameters. The
 acceptable values with the highest quality scores will be returned first. For
 example,

   $header = 'text/plain; q=0.5, application/json; version=1.0,
 application/xml; version=2.0;';
   $accepts = $request->parseAcceptHeader($header);
   print_r($accepts);
   // displays:
   // [
   //     'application/json' => ['q' => 1, 'version' => '1.0'],
   //      'application/xml' => ['q' => 1, 'version' => '2.0'],
   //           'text/plain' => ['q' => 0.5],
   // ]



    [$header] (string) The header to be parsed


*yii/web/Request::getPreferredLanguage*			public
>
 getPreferredLanguage($languages='[]')
<
return (string) The language that the application should use.

 Returns the user-preferred language that should be used by this application.

 The language resolution is based on the user preferred languages and the
 languages supported by the application. The method will try to find the best
 match.

    [$languages] (array) A list of the languages supported by the application.
    If this is empty, the current application language will be returned
    without further processing.


*yii/web/Request::getETags*				public
>
 getETags()
<
return (array) The entity tags

 Gets the Etags.


*yii/web/Request::getCookies*				public
>
 getCookies()
<
return (\yii\web\CookieCollection) The cookie collection.

 Returns the cookie collection.

 Through the returned cookie collection, you may access a cookie using the
 following syntax:

   $cookie = $request->cookies['name']
   if ($cookie !== null) {
       $value = $cookie->value;
   }

   // alternatively
   $value = $request->cookies->getValue('name');




*yii/web/Request::loadCookies*				protected
>
 loadCookies()
<
return (array) The cookies obtained from request

 Converts '$_COOKIE' into an array of 'Cookie'.


*yii/web/Request::getCsrfToken*				public
>
 getCsrfToken($regenerate='false')
<
return (string) The token used to perform CSRF validation.

 Returns the token used to perform CSRF validation.

 This token is generated in a way to prevent [BREACH
 attacks](http://breachattack.com/). It may be passed along via a hidden field
 of an HTML form or an HTTP header value to support CSRF validation.

    [$regenerate] (bool) Whether to regenerate CSRF token. When this parameter
    is true, each time this method is called, a new CSRF token will be
    generated and persisted (in session or cookie).


*yii/web/Request::loadCsrfToken*				protected
>
 loadCsrfToken()
<
return (string) The CSRF token loaded from cookie or session. Null is returned if the
cookie or session does not have CSRF token.

 Loads the CSRF token from cookie or session.


*yii/web/Request::generateCsrfToken*			protected
>
 generateCsrfToken()
<
return (string) The random token for CSRF validation.

 Generates an unmasked random token used to perform CSRF validation.


*yii/web/Request::getCsrfTokenFromHeader*			public
>
 getCsrfTokenFromHeader()
<
return (string) The CSRF token sent via 'CSRF_HEADER' by browser. Null is returned if
no such header is sent.



*yii/web/Request::createCsrfCookie*			protected
>
 createCsrfCookie($token)
<
return (\yii\web\Cookie) The generated cookie

 Creates a cookie with a randomly generated CSRF token.

 Initial values specified in 'csrfCookie' will be applied to the generated
 cookie.

    [$token] (string) The CSRF token


*yii/web/Request::validateCsrfToken*			public
>
 validateCsrfToken($clientSuppliedToken='null')
<
return (bool) Whether CSRF token is valid. If 'enableCsrfValidation' is false, this
method will return true.

 Performs the CSRF validation.

 This method will validate the user-provided CSRF token by comparing it with
 the one stored in cookie or session. This method is mainly called in
 'Controller::beforeAction()'.

 Note that the method will NOT perform CSRF validation if
 'enableCsrfValidation' is false or the HTTP method is among GET, HEAD or
 OPTIONS.

    [$clientSuppliedToken] (string) The user-provided CSRF token to be
    validated. If null, the token will be retrieved from the 'csrfParam' POST
    field or HTTP header. This parameter is available since version 2.0.4.


*yii/web/Request::getSecureForwardedHeaderTrustedPart*	protected
>
 getSecureForwardedHeaderTrustedPart($token)
<
return (string|null) 

 Gets first 'Forwarded' header value for token

    [$token] (string) Header token


*yii/web/Request::getSecureForwardedHeaderTrustedParts*	protected
>
 getSecureForwardedHeaderTrustedParts()
<
return (array) 

 Gets only trusted 'Forwarded' header parts


*yii/web/Request::getSecureForwardedHeaderParts*		protected
>
 getSecureForwardedHeaderParts()
<
return (array) 

 Returns decoded forwarded header



 vim:tw=78:ts=8:ft=help:norl:
