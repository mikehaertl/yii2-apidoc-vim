
*yii/db/BatchQueryResult*   >> |yii/base/Object|
=========================

DESCRIPTION
------------------------------------------------------------------------------

 You usually do not instantiate BatchQueryResult directly. Instead, you obtain
 it by calling 'Query::batch()' or 'Query::each()'. Because BatchQueryResult
 implements the '\Iterator' interface, you can iterate it to obtain a batch of
 data in each iteration. For example,

   $query = (new Query)->from('user');
   foreach ($query->batch() as $i => $users) {
       // $users represents the rows in the $i-th batch
   }
   foreach ($query->each() as $user) {
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/BatchQueryResult::$db*

 (\yii\db\Connection) The DB connection to be used when performing batch
 query. If null, the "db" application component will be used.

$query					*yii/db/BatchQueryResult::$query*

 (\yii\db\Query) The query object associated with this batch query. Do not
 modify this property directly unless after 'reset()' is called explicitly.

$batchSize				*yii/db/BatchQueryResult::$batchSize*

 (integer) The number of rows to be returned in each batch.

$each					*yii/db/BatchQueryResult::$each*

 (boolean) Whether to return a single row during each iteration. If false, a
 whole batch of rows will be returned in each iteration.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/BatchQueryResult::className*			public

 See |yii/base/Object::className|


*yii/db/BatchQueryResult::__construct*			public

 See |yii/base/Object::__construct|


*yii/db/BatchQueryResult::init*				public

 See |yii/base/Object::init|


*yii/db/BatchQueryResult::__get*				public

 See |yii/base/Object::__get|


*yii/db/BatchQueryResult::__set*				public

 See |yii/base/Object::__set|


*yii/db/BatchQueryResult::__isset*			public

 See |yii/base/Object::__isset|


*yii/db/BatchQueryResult::__unset*			public

 See |yii/base/Object::__unset|


*yii/db/BatchQueryResult::__call*				public

 See |yii/base/Object::__call|


*yii/db/BatchQueryResult::hasProperty*			public

 See |yii/base/Object::hasProperty|


*yii/db/BatchQueryResult::canGetProperty*			public

 See |yii/base/Object::canGetProperty|


*yii/db/BatchQueryResult::canSetProperty*			public

 See |yii/base/Object::canSetProperty|


*yii/db/BatchQueryResult::hasMethod*			public

 See |yii/base/Object::hasMethod|


*yii/db/BatchQueryResult::__destruct*			public
>
 __destruct()
<
return (void)



*yii/db/BatchQueryResult::reset*				public
>
 reset()
<
return (void)

 This method will clean up the existing batch query so that a new batch query
 can be performed.


*yii/db/BatchQueryResult::rewind*				public
>
 rewind()
<
return (void)

 This method is required by the interface '\Iterator'.


*yii/db/BatchQueryResult::next*				public
>
 next()
<
return (void)

 This method is required by the interface '\Iterator'.


*yii/db/BatchQueryResult::fetchData*			protected
>
 fetchData()
<
return (array) The data fetched



*yii/db/BatchQueryResult::key*				public
>
 key()
<
return (integer) The index of the current row.

 This method is required by the interface '\Iterator'.


*yii/db/BatchQueryResult::current*			public
>
 current()
<
return (mixed) The current dataset.

 This method is required by the interface '\Iterator'.


*yii/db/BatchQueryResult::valid*				public
>
 valid()
<
return (boolean) Whether there is a valid dataset at the current position.

 This method is required by the interface '\Iterator'.



 vim:tw=78:ts=8:ft=help:norl:
