
*yii/base/Application*   >> |yii/base/Module|
======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/web/Application|
|yii/console/Application|

DESCRIPTION
------------------------------------------------------------------------------

 For more details and usage information on Application, see the [guide article
 on applications](guide:structure-applications).


PROPERTY DETAILS
------------------------------------------------------------------------------

$params					*yii/base/Application::$params*

 See |yii/base/Module::$params|

$id					*yii/base/Application::$id*

 See |yii/base/Module::$id|

$module					*yii/base/Application::$module*

 See |yii/base/Module::$module|

$layout					*yii/base/Application::$layout*

 (string|bool) The layout that should be applied for views in this
 application. Defaults to 'main'. If this is false, layout will be disabled.

$controllerMap				*yii/base/Application::$controllerMap*

 See |yii/base/Module::$controllerMap|

$controllerNamespace			*yii/base/Application::$controllerNamespace*

 (string) The namespace that controller classes are located in. This namespace
 will be used to load controller classes by prepending it to the controller
 class name. The default namespace is 'app\controllers'.

 Please refer to the [guide about class
 autoloading](guide:concept-autoloading.md) for more details.

$defaultRoute				*yii/base/Application::$defaultRoute*

 See |yii/base/Module::$defaultRoute|

$name					*yii/base/Application::$name*

 (string) The application name.

$charset				*yii/base/Application::$charset*

 (string) The charset currently used for the application.

$language				*yii/base/Application::$language*

 (string) The language that is meant to be used for end users. It is
 recommended that you use [IETF language
 tags](http://en.wikipedia.org/wiki/IETF_language_tag). For example, 'en'
 stands for English, while 'en-US' stands for English (United States).

$sourceLanguage				*yii/base/Application::$sourceLanguage*

 (string) The language that the application is written in. This mainly refers
 to the language that the messages and view files are written in.

$controller				*yii/base/Application::$controller*

 (\yii\base\Controller) The currently active controller instance

$requestedRoute				*yii/base/Application::$requestedRoute*

 (string) The requested route

$requestedAction			*yii/base/Application::$requestedAction*

 (\yii\base\Action) The requested Action. If null, it means the request cannot
 be resolved into an action.

$requestedParams			*yii/base/Application::$requestedParams*

 (array) The parameters supplied to the requested action.

$extensions				*yii/base/Application::$extensions*

 (array) List of installed Yii extensions. Each array element represents a
 single extension with the following structure:

   [
       'name' => 'extension name',
       'version' => 'version number',
       'bootstrap' => 'BootstrapClassName',  // optional, may also be a
 configuration array
       'alias' => [
           '@alias1' => 'to/path1',
           '@alias2' => 'to/path2',
       ],
   ]

 The "bootstrap" class listed above will be instantiated during the
 application 'bootstrap()|bootstrapping process'. If the class implements
 'BootstrapInterface', its 'BootstrapInterface::bootstrap()|bootstrap()'
 method will be also be called.

 If not set explicitly in the application config, this property will be
 populated with the contents of '@vendor/yiisoft/extensions.php'.

$bootstrap				*yii/base/Application::$bootstrap*

 (array) List of components that should be run during the application
 'bootstrap()|bootstrapping process'.

 Each component may be specified in one of the following formats:


   - an application component ID as specified via 'components'. 
   - a module ID as specified via 'modules'. 
   - a class name. 
   - a configuration array.

 During the bootstrapping process, each component will be instantiated. If the
 component class implements 'BootstrapInterface', its
 'BootstrapInterface::bootstrap()|bootstrap()' method will be also be called.

$state					*yii/base/Application::$state*

 (int) The current application state during a request handling life cycle.
 This property is managed by the application. Do not modify this property.

$loadedModules				*yii/base/Application::$loadedModules*

 (array) List of loaded modules indexed by their class names.

$behaviors				*yii/base/Application::$behaviors*

 See |yii/base/Component::$behaviors|

$components				*yii/base/Application::$components*

 See |yii/di/ServiceLocator::$components|

$uniqueId				*yii/base/Application::$uniqueId*

 (string) The unique ID of the module.

$basePath				*yii/base/Application::$basePath*

 See |yii/base/Module::$basePath|

$controllerPath				*yii/base/Application::$controllerPath*

 See |yii/base/Module::$controllerPath|

$viewPath				*yii/base/Application::$viewPath*

 See |yii/base/Module::$viewPath|

$layoutPath				*yii/base/Application::$layoutPath*

 See |yii/base/Module::$layoutPath|

$version				*yii/base/Application::$version*

 See |yii/base/Module::$version|

$aliases				*yii/base/Application::$aliases*

 See |yii/base/Module::$aliases|

$modules				*yii/base/Application::$modules*

 See |yii/base/Module::$modules|

$runtimePath				*yii/base/Application::$runtimePath*

 (string) The directory that stores runtime files. Defaults to the "runtime"
 subdirectory under 'basePath'.

$vendorPath				*yii/base/Application::$vendorPath*

 (string) The directory that stores vendor files. Defaults to "vendor"
 directory under 'basePath'.

$timeZone				*yii/base/Application::$timeZone*

 (string) The time zone used by this application.

$db					*yii/base/Application::$db*

 (\yii\db\Connection) The database connection.

$log					*yii/base/Application::$log*

 (\yii\log\Dispatcher) The log dispatcher application component.

$errorHandler				*yii/base/Application::$errorHandler*

 (\yii\web\ErrorHandler|\yii\console\ErrorHandler) The error handler
 application component.

$cache					*yii/base/Application::$cache*

 (\yii\caching\Cache) The cache application component. Null if the component
 is not enabled.

$formatter				*yii/base/Application::$formatter*

 (\yii\i18n\Formatter) The formatter application component.

$request				*yii/base/Application::$request*

 (\yii\web\Request|\yii\console\Request) The request component.

$response				*yii/base/Application::$response*

 (\yii\web\Response|\yii\console\Response) The response component.

$view					*yii/base/Application::$view*

 (\yii\base\View|\yii\web\View) The view application component that is used to
 render various view files.

$urlManager				*yii/base/Application::$urlManager*

 (\yii\web\UrlManager) The URL manager for this application.

$i18n					*yii/base/Application::$i18n*

 (\yii\i18n\I18N) The internationalization application component.

$mailer					*yii/base/Application::$mailer*

 (\yii\mail\MailerInterface) The mailer application component.

$authManager				*yii/base/Application::$authManager*

 (\yii\rbac\ManagerInterface) The auth manager application component. Null is
 returned if auth manager is not configured.

$assetManager				*yii/base/Application::$assetManager*

 (\yii\web\AssetManager) The asset manager application component.

$security				*yii/base/Application::$security*

 (\yii\base\Security) The security application component.

$container				*yii/base/Application::$container*

 (array) Values given in terms of name-value pairs



METHOD DETAILS
------------------------------------------------------------------------------


*yii/base/Application::className*				public

 See |yii/base/Object::className|


*yii/base/Application::__construct*			public
>
 __construct($config='[]')
<
return (void)

    [$config] (array) Name-value pairs that will be used to initialize the
    object properties. Note that the configuration must contain both 'id' and
    'basePath'.


*yii/base/Application::init*				public
>
 init()
<
return (void)



 This method is called after the module is created and initialized with
 property values given in configuration. The default implementation will
 initialize 'controllerNamespace' if it is not set.

 If you override this method, please make sure you call the parent
 implementation.




*yii/base/Application::__get*				public

 See |yii/di/ServiceLocator::__get|


*yii/base/Application::__set*				public

 See |yii/base/Object::__set|


*yii/base/Application::__isset*				public

 See |yii/di/ServiceLocator::__isset|


*yii/base/Application::__unset*				public

 See |yii/base/Object::__unset|


*yii/base/Application::__call*				public

 See |yii/base/Object::__call|


*yii/base/Application::hasProperty*			public

 See |yii/base/Object::hasProperty|


*yii/base/Application::canGetProperty*			public

 See |yii/base/Object::canGetProperty|


*yii/base/Application::canSetProperty*			public

 See |yii/base/Object::canSetProperty|


*yii/base/Application::hasMethod*				public

 See |yii/base/Object::hasMethod|


*yii/base/Application::__clone*				public

 See |yii/base/Component::__clone|


*yii/base/Application::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/base/Application::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/base/Application::on*				public

 See |yii/base/Component::on|


*yii/base/Application::off*				public

 See |yii/base/Component::off|


*yii/base/Application::trigger*				public

 See |yii/base/Component::trigger|


*yii/base/Application::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/base/Application::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/base/Application::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/base/Application::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/base/Application::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/base/Application::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/base/Application::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/base/Application::has*				public

 See |yii/di/ServiceLocator::has|


*yii/base/Application::get*				public

 See |yii/di/ServiceLocator::get|


*yii/base/Application::set*				public

 See |yii/di/ServiceLocator::set|


*yii/base/Application::clear*				public

 See |yii/di/ServiceLocator::clear|


*yii/base/Application::getComponents*			public

 See |yii/di/ServiceLocator::getComponents|


*yii/base/Application::setComponents*			public

 See |yii/di/ServiceLocator::setComponents|


*yii/base/Application::getInstance*			public

 See |yii/base/Module::getInstance|


*yii/base/Application::setInstance*			public

 See |yii/base/Module::setInstance|


*yii/base/Application::getUniqueId*			public
>
 getUniqueId()
<
return (string) The unique ID of the module.

 Since this is an application instance, it will always return an empty string.


*yii/base/Application::getBasePath*			public

 See |yii/base/Module::getBasePath|


*yii/base/Application::setBasePath*			public
>
 setBasePath($path)
<
return (void)

 This method can only be invoked at the beginning of the constructor.

    [$path] (string) The root directory of the application.


*yii/base/Application::getControllerPath*			public

 See |yii/base/Module::getControllerPath|


*yii/base/Application::getViewPath*			public

 See |yii/base/Module::getViewPath|


*yii/base/Application::setViewPath*			public

 See |yii/base/Module::setViewPath|


*yii/base/Application::getLayoutPath*			public

 See |yii/base/Module::getLayoutPath|


*yii/base/Application::setLayoutPath*			public

 See |yii/base/Module::setLayoutPath|


*yii/base/Application::getVersion*			public

 See |yii/base/Module::getVersion|


*yii/base/Application::setVersion*			public

 See |yii/base/Module::setVersion|


*yii/base/Application::defaultVersion*			protected

 See |yii/base/Module::defaultVersion|


*yii/base/Application::setAliases*			public

 See |yii/base/Module::setAliases|


*yii/base/Application::hasModule*				public

 See |yii/base/Module::hasModule|


*yii/base/Application::getModule*				public

 See |yii/base/Module::getModule|


*yii/base/Application::setModule*				public

 See |yii/base/Module::setModule|


*yii/base/Application::getModules*			public

 See |yii/base/Module::getModules|


*yii/base/Application::setModules*			public

 See |yii/base/Module::setModules|


*yii/base/Application::runAction*				public

 See |yii/base/Module::runAction|


*yii/base/Application::createController*			public

 See |yii/base/Module::createController|


*yii/base/Application::createControllerByID*		public

 See |yii/base/Module::createControllerByID|


*yii/base/Application::beforeAction*			public

 See |yii/base/Module::beforeAction|


*yii/base/Application::afterAction*			public

 See |yii/base/Module::afterAction|


*yii/base/Application::preInit*				public
>
 preInit($config)
<
return (void)

 This method is called at the beginning of the application constructor. It
 initializes several important application properties. If you override this
 method, please make sure you call the parent implementation.

    [$config] (array) The application configuration


*yii/base/Application::bootstrap*				protected
>
 bootstrap()
<
return (void)

 This method is called by 'init()' after the application has been fully
 configured. If you override this method, make sure you also call the parent
 implementation.


*yii/base/Application::registerErrorHandler*		protected
>
 registerErrorHandler($config)
<
return (void)

    [$config] (array) Application config


*yii/base/Application::run*				public
>
 run()
<
return (int) The exit status (0 means normal, non-zero values mean abnormal)

 This is the main entrance of an application.


*yii/base/Application::handleRequest*			public
>
 handleRequest($request)
<
return (\yii\base\Response) The resulting response

 This method should return an instance of 'Response' or its child class which
 represents the handling result of the request.

    [$request] (\yii\base\Request) The request to be handled


*yii/base/Application::getRuntimePath*			public
>
 getRuntimePath()
<
return (string) The directory that stores runtime files. Defaults to the "runtime"
subdirectory under 'basePath'.



*yii/base/Application::setRuntimePath*			public
>
 setRuntimePath($path)
<
return (void)

    [$path] (string) The directory that stores runtime files.


*yii/base/Application::getVendorPath*			public
>
 getVendorPath()
<
return (string) The directory that stores vendor files. Defaults to "vendor"
directory under 'basePath'.



*yii/base/Application::setVendorPath*			public
>
 setVendorPath($path)
<
return (void)

    [$path] (string) The directory that stores vendor files.


*yii/base/Application::getTimeZone*			public
>
 getTimeZone()
<
return (string) The time zone used by this application.

 This is a simple wrapper of PHP function date_default_timezone_get(). If time
 zone is not configured in php.ini or application config, it will be set to
 UTC by default.


*yii/base/Application::setTimeZone*			public
>
 setTimeZone($value)
<
return (void)

 This is a simple wrapper of PHP function date_default_timezone_set(). Refer
 to the [php manual](http://www.php.net/manual/en/timezones.php) for available
 timezones.

    [$value] (string) The time zone used by this application.


*yii/base/Application::getDb*				public
>
 getDb()
<
return (\yii\db\Connection) The database connection.



*yii/base/Application::getLog*				public
>
 getLog()
<
return (\yii\log\Dispatcher) The log dispatcher application component.



*yii/base/Application::getErrorHandler*			public
>
 getErrorHandler()
<
return (\yii\web\ErrorHandler|\yii\console\ErrorHandler) The error handler
application component.



*yii/base/Application::getCache*				public
>
 getCache()
<
return (\yii\caching\Cache) The cache application component. Null if the component is
not enabled.



*yii/base/Application::getFormatter*			public
>
 getFormatter()
<
return (\yii\i18n\Formatter) The formatter application component.



*yii/base/Application::getRequest*			public
>
 getRequest()
<
return (\yii\web\Request|\yii\console\Request) The request component.



*yii/base/Application::getResponse*			public
>
 getResponse()
<
return (\yii\web\Response|\yii\console\Response) The response component.



*yii/base/Application::getView*				public
>
 getView()
<
return (\yii\base\View|\yii\web\View) The view application component that is used to
render various view files.



*yii/base/Application::getUrlManager*			public
>
 getUrlManager()
<
return (\yii\web\UrlManager) The URL manager for this application.



*yii/base/Application::getI18n*				public
>
 getI18n()
<
return (\yii\i18n\I18N) The internationalization application component.



*yii/base/Application::getMailer*				public
>
 getMailer()
<
return (\yii\mail\MailerInterface) The mailer application component.



*yii/base/Application::getAuthManager*			public
>
 getAuthManager()
<
return (\yii\rbac\ManagerInterface) The auth manager application component. Null is
returned if auth manager is not configured.



*yii/base/Application::getAssetManager*			public
>
 getAssetManager()
<
return (\yii\web\AssetManager) The asset manager application component.



*yii/base/Application::getSecurity*			public
>
 getSecurity()
<
return (\yii\base\Security) The security application component.



*yii/base/Application::coreComponents*			public
>
 coreComponents()
<
return (void)



*yii/base/Application::end*				public
>
 end($status=0, $response='null')
<
return (void)

 This method replaces the 'exit()' function by ensuring the application life
 cycle is completed before terminating the application.

    [$status] (int) The exit status (value 0 means normal exit while other
    values mean abnormal exit).
    [$response] (\yii\base\Response) The response to be sent. If not set, the
    default application 'response' component will be used.


*yii/base/Application::setContainer*			public
>
 setContainer($config)
<
return (void)

    [$config] (array) Values given in terms of name-value pairs



 vim:tw=78:ts=8:ft=help:norl:
