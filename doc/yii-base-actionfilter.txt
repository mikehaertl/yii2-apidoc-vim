
*yii/base/ActionFilter*   >> |yii/base/Behavior|
=======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/filters/RateLimiter|
|yii/filters/auth/HttpBearerAuth|
|yii/filters/auth/AuthMethod|
|yii/filters/auth/CompositeAuth|
|yii/filters/auth/QueryParamAuth|
|yii/filters/auth/HttpBasicAuth|
|yii/filters/AccessControl|
|yii/filters/HttpCache|
|yii/filters/PageCache|
|yii/filters/ContentNegotiator|

DESCRIPTION
------------------------------------------------------------------------------

 An action filter will participate in the action execution workflow by
 responding to the 'beforeAction' and 'afterAction' events triggered by
 modules and controllers.

 Check implementation of '\yii\filters\AccessControl',
 '\yii\filters\PageCache' and '\yii\filters\HttpCache' as examples on how to
 use it.


PROPERTY DETAILS
------------------------------------------------------------------------------

$owner					*yii/base/ActionFilter::$owner*
 See |yii/base/Behavior::$owner|

$only					*yii/base/ActionFilter::$only*
 (array) List of action IDs that this filter should apply to. If this property
 is not set, then the filter applies to all actions, unless they are listed in
 'except'. If an action ID appears in both 'only' and 'except', this filter
 will NOT apply to it.

 Note that if the filter is attached to a module, the action IDs should also
 include child module IDs (if any) and controller IDs.

$except					*yii/base/ActionFilter::$except*
 (array) List of action IDs that this filter should not apply to.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/base/ActionFilter::className*			public
 See |yii/base/Object::className|


*yii/base/ActionFilter::__construct*			public
 See |yii/base/Object::__construct|


*yii/base/ActionFilter::init*				public
 See |yii/base/Object::init|


*yii/base/ActionFilter::__get*				public
 See |yii/base/Object::__get|


*yii/base/ActionFilter::__set*				public
 See |yii/base/Object::__set|


*yii/base/ActionFilter::__isset*				public
 See |yii/base/Object::__isset|


*yii/base/ActionFilter::__unset*				public
 See |yii/base/Object::__unset|


*yii/base/ActionFilter::__call*				public
 See |yii/base/Object::__call|


*yii/base/ActionFilter::hasProperty*			public
 See |yii/base/Object::hasProperty|


*yii/base/ActionFilter::canGetProperty*			public
 See |yii/base/Object::canGetProperty|


*yii/base/ActionFilter::canSetProperty*			public
 See |yii/base/Object::canSetProperty|


*yii/base/ActionFilter::hasMethod*			public
 See |yii/base/Object::hasMethod|


*yii/base/ActionFilter::events*				public
 See |yii/base/Behavior::events|


*yii/base/ActionFilter::attach*				public
>
 attach($owner)
<
(void)


    [$owner] () 


*yii/base/ActionFilter::detach*				public
>
 detach()
<
(void)




*yii/base/ActionFilter::beforeFilter*			public
>
 beforeFilter($event)
<
(void)


    [$event] (\yii\base\ActionEvent) 


*yii/base/ActionFilter::afterFilter*			public
>
 afterFilter($event)
<
(void)


    [$event] (\yii\base\ActionEvent) 


*yii/base/ActionFilter::beforeAction*			public
>
 beforeAction($action)
<
(boolean) Whether the action should continue to be executed.


    [$action] (\yii\base\Action) The action to be executed.


*yii/base/ActionFilter::afterAction*			public
>
 afterAction($action, $result)
<
(mixed) The processed action result.

 You may override this method to do some postprocessing for the action.
    [$action] (\yii\base\Action) The action just executed.
    [$result] (mixed) The action execution result


*yii/base/ActionFilter::isActive*				protected
>
 isActive($action)
<
(boolean) Whether the filer is active for the given action.


    [$action] (\yii\base\Action) The action being filtered



 vim:tw=78:ts=8:ft=help:norl:
