
*yii/validators/FilterValidator*   >> |yii/validators/Validator|
================================

DESCRIPTION
------------------------------------------------------------------------------

 FilterValidator is actually not a validator but a data processor. It invokes
 the specified filter callback to process the attribute value and save the
 processed value back to the attribute. The filter must be a valid PHP
 callback with the following signature:

   function foo($value) {
       // compute $newValue here
       return $newValue;
   }

 Many PHP functions qualify this signature (e.g. 'trim()').

 To specify the filter, set 'filter' property to be the callback.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/validators/Validator::$builtInValidators|
 |yii/validators/Validator::$attributes|
 |yii/validators/Validator::$message|
 |yii/validators/Validator::$on|
 |yii/validators/Validator::$except|
 |yii/validators/Validator::$skipOnError|
 |yii/validators/Validator::$enableClientValidation|
 |yii/validators/Validator::$isEmpty|
 |yii/validators/Validator::$when|
 |yii/validators/Validator::$whenClient|


$skipOnEmpty				*yii/validators/FilterValidator::$skipOnEmpty*

 (bool) This property is overwritten to be false so that this validator will
 be applied when the value being validated is empty.

$filter					*yii/validators/FilterValidator::$filter*

 (callable) The filter. This can be a global function name, anonymous
 function, etc. The function signature must be as follows,

   function foo($value) {
       // compute $newValue here
       return $newValue;
   }



$skipOnArray				*yii/validators/FilterValidator::$skipOnArray*

 (bool) Whether the filter should be skipped if an array input is given. If
 true and an array input is given, the filter will not be applied.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/validators/Validator::createValidator|
 |yii/validators/Validator::validateAttributes|
 |yii/validators/Validator::validate|
 |yii/validators/Validator::validateValue|
 |yii/validators/Validator::isActive|
 |yii/validators/Validator::addError|
 |yii/validators/Validator::isEmpty|
 |yii/validators/Validator::formatMessage|
 |yii/validators/Validator::getAttributeNames|


*yii/validators/FilterValidator::init*			public
>
 init()
<
return (void)

 {@inheritdoc}


*yii/validators/FilterValidator::validateAttribute*	public
>
 validateAttribute($model, $attribute)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 


*yii/validators/FilterValidator::clientValidateAttribute*	public
>
 clientValidateAttribute($model, $attribute, $view)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 
    [$view] () 


*yii/validators/FilterValidator::getClientOptions*	public
>
 getClientOptions($model, $attribute)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 



 vim:tw=78:ts=8:ft=help:norl:
