
*yii/validators/FilterValidator*   >> |yii/validators/Validator|
================================

DESCRIPTION
------------------------------------------------------------------------------

 FilterValidator is actually not a validator but a data processor. It invokes
 the specified filter callback to process the attribute value and save the
 processed value back to the attribute. The filter must be a valid PHP
 callback with the following signature:

   function foo($value) {
       // compute $newValue here
       return $newValue;
   }

 Many PHP functions qualify this signature (e.g. 'trim()').

 To specify the filter, set 'filter' property to be the callback.


PROPERTY DETAILS
------------------------------------------------------------------------------

$builtInValidators			*yii/validators/FilterValidator::$builtInValidators*

 See |yii/validators/Validator::$builtInValidators|

$attributes				*yii/validators/FilterValidator::$attributes*

 See |yii/validators/Validator::$attributes|

$message				*yii/validators/FilterValidator::$message*

 See |yii/validators/Validator::$message|

$on					*yii/validators/FilterValidator::$on*

 See |yii/validators/Validator::$on|

$except					*yii/validators/FilterValidator::$except*

 See |yii/validators/Validator::$except|

$skipOnError				*yii/validators/FilterValidator::$skipOnError*

 See |yii/validators/Validator::$skipOnError|

$skipOnEmpty				*yii/validators/FilterValidator::$skipOnEmpty*

 (bool) This property is overwritten to be false so that this validator will
 be applied when the value being validated is empty.

$enableClientValidation			*yii/validators/FilterValidator::$enableClientValidation*

 See |yii/validators/Validator::$enableClientValidation|

$isEmpty				*yii/validators/FilterValidator::$isEmpty*

 See |yii/validators/Validator::$isEmpty|

$when					*yii/validators/FilterValidator::$when*

 See |yii/validators/Validator::$when|

$whenClient				*yii/validators/FilterValidator::$whenClient*

 See |yii/validators/Validator::$whenClient|

$filter					*yii/validators/FilterValidator::$filter*

 (callable) The filter. This can be a global function name, anonymous
 function, etc. The function signature must be as follows,

   function foo($value) {
       // compute $newValue here
       return $newValue;
   }



$skipOnArray				*yii/validators/FilterValidator::$skipOnArray*

 (bool) Whether the filter should be skipped if an array input is given. If
 true and an array input is given, the filter will not be applied.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/validators/FilterValidator::className*		public

 See |yii/base/BaseObject::className|


*yii/validators/FilterValidator::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/validators/FilterValidator::init*			public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/validators/FilterValidator::__get*			public

 See |yii/base/Component::__get|


*yii/validators/FilterValidator::__set*			public

 See |yii/base/Component::__set|


*yii/validators/FilterValidator::__isset*			public

 See |yii/base/Component::__isset|


*yii/validators/FilterValidator::__unset*			public

 See |yii/base/Component::__unset|


*yii/validators/FilterValidator::__call*			public

 See |yii/base/Component::__call|


*yii/validators/FilterValidator::hasProperty*		public

 See |yii/base/Component::hasProperty|


*yii/validators/FilterValidator::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/validators/FilterValidator::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/validators/FilterValidator::hasMethod*		public

 See |yii/base/Component::hasMethod|


*yii/validators/FilterValidator::__clone*			public

 See |yii/base/Component::__clone|


*yii/validators/FilterValidator::behaviors*		public

 See |yii/base/Component::behaviors|


*yii/validators/FilterValidator::hasEventHandlers*	public

 See |yii/base/Component::hasEventHandlers|


*yii/validators/FilterValidator::on*			public

 See |yii/base/Component::on|


*yii/validators/FilterValidator::off*			public

 See |yii/base/Component::off|


*yii/validators/FilterValidator::trigger*			public

 See |yii/base/Component::trigger|


*yii/validators/FilterValidator::getBehavior*		public

 See |yii/base/Component::getBehavior|


*yii/validators/FilterValidator::getBehaviors*		public

 See |yii/base/Component::getBehaviors|


*yii/validators/FilterValidator::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/validators/FilterValidator::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/validators/FilterValidator::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/validators/FilterValidator::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/validators/FilterValidator::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/validators/FilterValidator::createValidator*		public

 See |yii/validators/Validator::createValidator|


*yii/validators/FilterValidator::validateAttributes*	public

 See |yii/validators/Validator::validateAttributes|


*yii/validators/FilterValidator::validateAttribute*	public
>
 validateAttribute($model, $attribute)
<
return (void)

 Validates a single attribute.



 Child classes must implement this method to provide the actual validation
 logic.



    [$model] (\yii\base\Model) The data model to be validated
    [$attribute] (string) The name of the attribute to be validated.


*yii/validators/FilterValidator::validate*		public

 See |yii/validators/Validator::validate|


*yii/validators/FilterValidator::validateValue*		protected

 See |yii/validators/Validator::validateValue|


*yii/validators/FilterValidator::clientValidateAttribute*	public
>
 clientValidateAttribute($model, $attribute, $view)
<
return (string|null) The client-side validation script. Null if the validator does
not support client-side validation.

 Returns the JavaScript needed for performing client-side validation.



 Calls 'getClientOptions()' to generate options array for client-side
 validation.

 You may override this method to return the JavaScript validation code if the
 validator can support client-side validation.

 The following JavaScript variables are predefined and can be used in the
 validation code:


   - 'attribute': an object describing the the attribute being
   validated. 
   - 'value': the value being validated. 
   - 'messages': an array used to hold the validation error messages
   for the attribute. 
   - 'deferred': an array used to hold deferred objects for
   asynchronous validation 
   - '$form': a jQuery object containing the form element

 The 'attribute' object contains the following properties: 
   - 'id': a unique ID identifying the attribute (e.g.
   "loginform-username") in the form 
   - 'name': attribute name or expression (e.g. "[0]content" for
   tabular input) 
   - 'container': the jQuery selector of the container of the input
   field 
   - 'input': the jQuery selector of the input field under the context
   of the form 
   - 'error': the jQuery selector of the error tag under the context of
   the container 
   - 'status': status of the input field, 0: empty, not entered before,
   1: validated, 2: pending validation, 3: validating



    [$model] (\yii\base\Model) The data model being validated
    [$attribute] (string) The name of the attribute to be validated.
    [$view] (\yii\web\View) The view object that is going to be used to render
    views or view files containing a model form with this validator applied.


*yii/validators/FilterValidator::getClientOptions*	public
>
 getClientOptions($model, $attribute)
<
return (array) The client-side validation options

 Returns the client-side validation options.



 This method is usually called from 'clientValidateAttribute()'. You may
 override this method to modify options that will be passed to the client-side
 validation.



    [$model] (\yii\base\Model) The model being validated
    [$attribute] (string) The attribute name being validated


*yii/validators/FilterValidator::isActive*		public

 See |yii/validators/Validator::isActive|


*yii/validators/FilterValidator::addError*		public

 See |yii/validators/Validator::addError|


*yii/validators/FilterValidator::isEmpty*			public

 See |yii/validators/Validator::isEmpty|


*yii/validators/FilterValidator::formatMessage*		protected

 See |yii/validators/Validator::formatMessage|


*yii/validators/FilterValidator::getAttributeNames*	public

 See |yii/validators/Validator::getAttributeNames|



 vim:tw=78:ts=8:ft=help:norl:
