
*yii/base/Event*   >> |yii/base/BaseObject|
================

SUBCLASSES
------------------------------------------------------------------------------

|yii/base/ModelEvent|
|yii/base/WidgetEvent|
|yii/base/ViewEvent|
|yii/base/ActionEvent|
|yii/i18n/MissingTranslationEvent|
|yii/mail/MailEvent|
|yii/db/AfterSaveEvent|
|yii/web/UserEvent|
|yii/httpclient/RequestEvent|
|yii/queue/ExecEvent|
|yii/queue/cli/WorkerEvent|
|yii/queue/JobEvent|
|yii/queue/ErrorEvent|
|yii/queue/PushEvent|

DESCRIPTION
------------------------------------------------------------------------------

 It encapsulates the parameters associated with an event. The 'sender'
 property describes who raises the event. And the 'handled' property indicates
 if the event is handled. If an event handler sets 'handled' to be 'true', the
 rest of the uninvoked handlers will no longer be called to handle the event.

 Additionally, when attaching an event handler, extra data may be passed and
 be available via the 'data' property when the event handler is invoked.

 For more details and usage information on Event, see the [guide article on
 events](guide:concept-events).


PROPERTY DETAILS
------------------------------------------------------------------------------

$name					*yii/base/Event::$name*

 (string) The event name. This property is set by 'Component::trigger()' and
 'trigger()'. Event handlers may use this property to check what event it is
 handling.

$sender					*yii/base/Event::$sender*

 (object) The sender of this event. If not set, this property will be set as
 the object whose 'trigger()' method is called. This property may also be a
 'null' when this event is a class-level event which is triggered in a static
 context.

$handled				*yii/base/Event::$handled*

 (bool) Whether the event is handled. Defaults to 'false'. When a handler sets
 this to be 'true', the event processing will stop and ignore the rest of the
 uninvoked event handlers.

$data					*yii/base/Event::$data*

 (mixed) The data that is passed to 'Component::on()' when attaching an event
 handler. Note that this varies according to which event handler is currently
 executing.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/base/Event::className*				public

 See |yii/base/BaseObject::className|


*yii/base/Event::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/base/Event::init*					public

 See |yii/base/BaseObject::init|


*yii/base/Event::__get*					public

 See |yii/base/BaseObject::__get|


*yii/base/Event::__set*					public

 See |yii/base/BaseObject::__set|


*yii/base/Event::__isset*					public

 See |yii/base/BaseObject::__isset|


*yii/base/Event::__unset*					public

 See |yii/base/BaseObject::__unset|


*yii/base/Event::__call*					public

 See |yii/base/BaseObject::__call|


*yii/base/Event::hasProperty*				public

 See |yii/base/BaseObject::hasProperty|


*yii/base/Event::canGetProperty*				public

 See |yii/base/BaseObject::canGetProperty|


*yii/base/Event::canSetProperty*				public

 See |yii/base/BaseObject::canSetProperty|


*yii/base/Event::hasMethod*				public

 See |yii/base/BaseObject::hasMethod|


*yii/base/Event::on*					public
>
 on($class, $name, $handler, $data='null', $append='true')
<
return (void)

 Attaches an event handler to a class-level event.

 When a class-level event is triggered, event handlers attached to that class
 and all parent classes will be invoked.

 For example, the following code attaches an event handler to 'ActiveRecord''s
 'afterInsert' event:

   Event::on(ActiveRecord::className(), ActiveRecord::EVENT_AFTER_INSERT,
 function ($event) {
       Yii::trace(get_class($event->sender) . ' is inserted.');
   });

 The handler will be invoked for EVERY successful ActiveRecord insertion.

 Since 2.0.14 you can specify either class name or event name as a wildcard
 pattern:

   Event::on('app\models\db\*', '*Insert', function ($event) {
       Yii::trace(get_class($event->sender) . ' is inserted.');
   });

 For more details about how to declare an event handler, please refer to
 'Component::on()'.

    [$class] (string) The fully qualified class name to which the event
    handler needs to attach.
    [$name] (string) The event name.
    [$handler] (callable) The event handler.
    [$data] (mixed) The data to be passed to the event handler when the event
    is triggered. When the event handler is invoked, this data can be accessed
    via 'Event::data'.
    [$append] (bool) Whether to append new event handler to the end of the
    existing handler list. If 'false', the new handler will be inserted at the
    beginning of the existing handler list.


*yii/base/Event::off*					public
>
 off($class, $name, $handler='null')
<
return (bool) Whether a handler is found and detached.

 Detaches an event handler from a class-level event.

 This method is the opposite of 'on()'.

 Note: in case wildcard pattern is passed for class name or event name, only
 the handlers registered with this wildcard will be removed, while handlers
 registered with plain names matching this wildcard will remain.

    [$class] (string) The fully qualified class name from which the event
    handler needs to be detached.
    [$name] (string) The event name.
    [$handler] (callable) The event handler to be removed. If it is 'null',
    all handlers attached to the named event will be removed.


*yii/base/Event::offAll*					public
>
 offAll()
<
return (void)

 Detaches all registered class-level event handlers.


*yii/base/Event::hasHandlers*				public
>
 hasHandlers($class, $name)
<
return (bool) Whether there is any handler attached to the event.

 Returns a value indicating whether there is any handler attached to the
 specified class-level event.

 Note that this method will also check all parent classes to see if there is
 any handler attached to the named event.

    [$class] (string|object) The object or the fully qualified class name
    specifying the class-level event.
    [$name] (string) The event name.


*yii/base/Event::trigger*					public
>
 trigger($class, $name, $event='null')
<
return (void)

 Triggers a class-level event.

 This method will cause invocation of event handlers that are attached to the
 named event for the specified class and all its parent classes.

    [$class] (string|object) The object or the fully qualified class name
    specifying the class-level event.
    [$name] (string) The event name.
    [$event] (\yii\base\Event) The event parameter. If not set, a default
    'Event' object will be created.



 vim:tw=78:ts=8:ft=help:norl:
