
*yii/authclient/OpenIdConnect*   >> |yii/authclient/OAuth2|
==============================

DESCRIPTION
------------------------------------------------------------------------------

 Application configuration example:

   'components' => [
       'authClientCollection' => [
           'class' => 'yii\authclient\Collection',
           'clients' => [
               'google' => [
                   'class' => 'yii\authclient\OpenIdConnect',
                   'issuerUrl' => 'https://accounts.google.com',
                   'clientId' => 'google_client_id',
                   'clientSecret' => 'google_client_secret',
                   'name' => 'google',
                   'title' => 'Google OpenID Connect',
               ],
           ],
       ]
       // ...
   ]

 This class requires 'web-token/jwt-checker','web-token/jwt-key-mgmt',
 'web-token/jwt-signature', 'web-token/jwt-signature-algorithm-hmac',
 'web-token/jwt-signature-algorithm-ecdsa' and
 'web-token/jwt-signature-algorithm-rsa' libraries to be installed for JWS
 verification. This can be done via composer:

 ''' composer require --prefer-dist "web-token/jwt-checker:>=1.0 <3.0"
 "web-token/jwt-signature:>=1.0 <3.0" "web-token/jwt-signature:>=1.0 <3.0"
 "web-token/jwt-signature-algorithm-hmac:>=1.0 <3.0"
 "web-token/jwt-signature-algorithm-ecdsa:>=1.0 <3.0"
 "web-token/jwt-signature-algorithm-rsa:>=1.0 <3.0" '''

 Note: if you are using well-trusted OpenIdConnect provider, you may disable
 'validateJws', making installation of 'web-token' library redundant, however
 it is not recommended as it violates the protocol specification.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/authclient/OAuth2::$version|
 |yii/authclient/BaseOAuth::$apiBaseUrl|
 |yii/authclient/BaseOAuth::$authUrl|
 |yii/authclient/BaseOAuth::$autoRefreshAccessToken|
 |yii/authclient/BaseOAuth::$parametersToKeepInReturnUrl|
 |yii/authclient/OAuth2::$clientId|
 |yii/authclient/OAuth2::$clientSecret|
 |yii/authclient/OAuth2::$tokenUrl|
 |yii/authclient/OAuth2::$validateAuthState|
 |yii/base/Component::$behaviors|
 |yii/authclient/ClientInterface::$id|
 |yii/authclient/ClientInterface::$name|
 |yii/authclient/ClientInterface::$title|
 |yii/authclient/ClientInterface::$userAttributes|
 |yii/authclient/BaseClient::$normalizeUserAttributeMap|
 |yii/authclient/ClientInterface::$viewOptions|
 |yii/authclient/BaseClient::$httpClient|
 |yii/authclient/BaseClient::$requestOptions|
 |yii/authclient/BaseClient::$stateStorage|
 |yii/authclient/BaseOAuth::$returnUrl|
 |yii/authclient/BaseOAuth::$accessToken|
 |yii/authclient/BaseOAuth::$signatureMethod|


$scope					*yii/authclient/OpenIdConnect::$scope*

 (string) 

 Auth request scope.



$issuerUrl				*yii/authclient/OpenIdConnect::$issuerUrl*

 (string) OpenID Issuer (provider) base URL, e.g. 'https://example.com'.

$validateJws				*yii/authclient/OpenIdConnect::$validateJws*

 (bool) Whether to validate/decrypt JWS received with Auth token. Note: this
 functionality requires 'web-token/jwt-checker', 'web-token/jwt-key-mgmt',
 'web-token/jwt-signature' composer package to be installed. You can disable
 this option in case of usage of trusted OpenIDConnect provider, however this
 violates the protocol rules, so you are doing it on your own risk.

$allowedJwsAlgorithms			*yii/authclient/OpenIdConnect::$allowedJwsAlgorithms*

 (array) JWS algorithms, which are allowed to be used. These are used by
 'web-token' library for JWS validation/decryption. Make sure to install
 'web-token/jwt-signature-algorithm-hmac',
 'web-token/jwt-signature-algorithm-ecdsa' and
 'web-token/jwt-signature-algorithm-rsa' packages that support the particular
 algorithm before adding it here.

$configParamsCacheKeyPrefix		*yii/authclient/OpenIdConnect::$configParamsCacheKeyPrefix*

 (string) The prefix for the key used to store 'configParams' data in cache.
 Actual cache key will be formed addition 'id' value to it.

$validateAuthNonce			*yii/authclient/OpenIdConnect::$validateAuthNonce*

 (bool) Whether to use and validate auth 'nonce' parameter in authentication
 flow.

$cache					*yii/authclient/OpenIdConnect::$cache*

 (\yii\caching\Cache|null) The cache object, 'null' 
   - if not enabled.

$configParams				*yii/authclient/OpenIdConnect::$configParams*

 (array) OpenID provider configuration parameters.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/authclient/ClientInterface::setId|
 |yii/authclient/ClientInterface::getId|
 |yii/authclient/ClientInterface::setName|
 |yii/authclient/ClientInterface::getName|
 |yii/authclient/ClientInterface::setTitle|
 |yii/authclient/ClientInterface::getTitle|
 |yii/authclient/BaseClient::setUserAttributes|
 |yii/authclient/ClientInterface::getUserAttributes|
 |yii/authclient/BaseClient::setNormalizeUserAttributeMap|
 |yii/authclient/BaseClient::getNormalizeUserAttributeMap|
 |yii/authclient/BaseClient::setViewOptions|
 |yii/authclient/ClientInterface::getViewOptions|
 |yii/authclient/BaseClient::getHttpClient|
 |yii/authclient/BaseOAuth::setHttpClient|
 |yii/authclient/BaseClient::setRequestOptions|
 |yii/authclient/BaseClient::getRequestOptions|
 |yii/authclient/BaseClient::getStateStorage|
 |yii/authclient/BaseClient::setStateStorage|
 |yii/authclient/BaseClient::defaultName|
 |yii/authclient/BaseClient::defaultTitle|
 |yii/authclient/BaseClient::defaultNormalizeUserAttributeMap|
 |yii/authclient/BaseClient::defaultViewOptions|
 |yii/authclient/BaseOAuth::createHttpClient|
 |yii/authclient/BaseClient::normalizeUserAttributes|
 |yii/authclient/BaseClient::createRequest|
 |yii/authclient/BaseOAuth::defaultRequestOptions|
 |yii/authclient/BaseClient::setState|
 |yii/authclient/BaseClient::getState|
 |yii/authclient/BaseClient::removeState|
 |yii/authclient/BaseClient::getStateKeyPrefix|
 |yii/authclient/BaseOAuth::setReturnUrl|
 |yii/authclient/BaseOAuth::getReturnUrl|
 |yii/authclient/BaseOAuth::setAccessToken|
 |yii/authclient/BaseOAuth::getAccessToken|
 |yii/authclient/BaseOAuth::setSignatureMethod|
 |yii/authclient/BaseOAuth::getSignatureMethod|
 |yii/authclient/BaseOAuth::defaultReturnUrl|
 |yii/authclient/BaseOAuth::createSignatureMethod|
 |yii/authclient/BaseOAuth::sendRequest|
 |yii/authclient/BaseOAuth::composeUrl|
 |yii/authclient/BaseOAuth::saveAccessToken|
 |yii/authclient/BaseOAuth::restoreAccessToken|
 |yii/authclient/BaseOAuth::createApiRequest|
 |yii/authclient/BaseOAuth::beforeApiRequestSend|
 |yii/authclient/BaseOAuth::api|
 |yii/authclient/OAuth2::generateAuthState|
 |yii/authclient/OAuth2::authenticateClient|
 |yii/authclient/OAuth2::authenticateUser|
 |yii/authclient/OAuth2::authenticateUserJwt|


*yii/authclient/OpenIdConnect::initUserAttributes*	protected
>
 initUserAttributes()
<
return (array) Auth user attributes.

 Initializes authenticated user attributes.








*yii/authclient/OpenIdConnect::createToken*		protected
>
 createToken($tokenConfig='[]')
<
return (\yii\authclient\OAuthToken) Token instance.

 Creates token from its configuration.







    [$tokenConfig] (array) Token configuration.


*yii/authclient/OpenIdConnect::refreshAccessToken*	public
>
 refreshAccessToken($token)
<
return (\yii\authclient\OAuthToken) New auth token.

 Gets new auth token to replace expired one.







    [$token] (\yii\authclient\OAuthToken) Expired auth token.


*yii/authclient/OpenIdConnect::applyAccessTokenToRequest*	public
>
 applyAccessTokenToRequest($request, $accessToken)
<
return (void)

 Applies access token to the HTTP request instance.







    [$request] (\yii\httpclient\Request) HTTP request instance.
    [$accessToken] (\yii\authclient\OAuthToken) Access token instance.


*yii/authclient/OpenIdConnect::buildAuthUrl*		public
>
 buildAuthUrl($params='[]')
<
return (string) Authorization URL.

 Composes user authorization URL.







    [$params] (array) Additional auth GET params.


*yii/authclient/OpenIdConnect::fetchAccessToken*		public
>
 fetchAccessToken($authCode, $params='[]')
<
return (\yii\authclient\OAuthToken) Access token.

 Fetches access token from authorization code.







    [$authCode] (string) Authorization code, usually comes at GET parameter
    'code'.
    [$params] (array) Additional request params.


*yii/authclient/OpenIdConnect::applyClientCredentialsToRequest*protected
>
 applyClientCredentialsToRequest($request)
<
return (void)

 Applies client credentials (e.g. 'clientId' and 'clientSecret') to the HTTP
 request instance.



 This method should be invoked before sending any HTTP request, which requires
 client credentials.



    [$request] (\yii\httpclient\Request) HTTP request instance.


*yii/authclient/OpenIdConnect::getValidateAuthNonce*	public
>
 getValidateAuthNonce()
<
return (bool) Whether to use and validate auth 'nonce' parameter in authentication
flow.



*yii/authclient/OpenIdConnect::setValidateAuthNonce*	public
>
 setValidateAuthNonce($validateAuthNonce)
<
return (void)

    [$validateAuthNonce] (bool) Whether to use and validate auth 'nonce'
    parameter in authentication flow.


*yii/authclient/OpenIdConnect::getCache*			public
>
 getCache()
<
return (\yii\caching\Cache|null) The cache object, 'null' 
  - if not enabled.



*yii/authclient/OpenIdConnect::setCache*			public
>
 setCache($cache)
<
return (void)

 Sets up a component to be used for caching.

 This can be one of the following:


   - an application component ID (e.g. 'cache') 
   - a configuration array 
   - a '\yii\caching\Cache' object

 When 'null' is passed, it means caching is not enabled.

    [$cache] (\yii\caching\Cache|array|string|null) The cache object or the ID
    of the cache application component.


*yii/authclient/OpenIdConnect::getConfigParams*		public
>
 getConfigParams()
<
return (array) OpenID provider configuration parameters.



*yii/authclient/OpenIdConnect::getConfigParam*		public
>
 getConfigParam($name)
<
return (mixed) Configuration parameter value.

 Returns particular configuration parameter value.

    [$name] (string) Configuration parameter name.


*yii/authclient/OpenIdConnect::discoverConfig*		protected
>
 discoverConfig()
<
return (array) OpenID Provider configuration parameters.

 Discovers OpenID Provider configuration parameters.


*yii/authclient/OpenIdConnect::getJwkSet*			protected
>
 getJwkSet()
<
return (\yii\authclient\JWKSet) Object represents a key set.

 Return JwkSet, returning related data.


*yii/authclient/OpenIdConnect::getJwsLoader*		protected
>
 getJwsLoader()
<
return (\Jose\Component\Signature\JWSLoader) To do token validation.

 Return JWSLoader that validate the JWS token.


*yii/authclient/OpenIdConnect::loadJws*			protected
>
 loadJws($jws)
<
return (array) JWS underlying data.

 Decrypts/validates JWS, returning related data.

    [$jws] (string) Raw JWS input.


*yii/authclient/OpenIdConnect::validateClaims*		protected
>
 validateClaims($claims)
<
return (void)

 Validates the claims data received from OpenID provider.

    [$claims] (array) Claims data.


*yii/authclient/OpenIdConnect::generateAuthNonce*		protected
>
 generateAuthNonce()
<
return (string) Auth nonce value.

 Generates the auth nonce value.



 vim:tw=78:ts=8:ft=help:norl:
