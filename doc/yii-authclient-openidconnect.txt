
*yii/authclient/OpenIdConnect*   >> |yii/authclient/OAuth2|
==============================

DESCRIPTION
------------------------------------------------------------------------------

 Application configuration example:

   'components' => [
       'authClientCollection' => [
           'class' => 'yii\authclient\Collection',
           'clients' => [
               'google' => [
                   'class' => 'yii\authclient\OpenIdConnect',
                   'issuerUrl' => 'https://accounts.google.com',
                   'clientId' => 'google_client_id',
                   'clientSecret' => 'google_client_secret',
                   'name' => 'google',
                   'title' => 'Google OpenID Connect',
               ],
           ],
       ]
       // ...
   ]

 This class requires 'spomky-labs/jose' library to be installed for JWS
 verification. This can be done via composer:

 ''' composer require --prefer-dist "spomky-labs/jose:~5.0.6" '''

 Note: if you are using well-trusted OpenIdConnect provider, you may disable
 'validateJws', making installation of 'spomky-labs/jose' library redundant,
 however it is not recommended as it violates the protocol specification.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/authclient/BaseOAuth::$version|
 |yii/authclient/BaseOAuth::$apiBaseUrl|
 |yii/authclient/BaseOAuth::$authUrl|
 |yii/authclient/BaseOAuth::$autoRefreshAccessToken|
 |yii/authclient/OAuth2::$clientId|
 |yii/authclient/OAuth2::$clientSecret|
 |yii/authclient/OAuth2::$tokenUrl|
 |yii/authclient/OAuth2::$validateAuthState|


$scope					*yii/authclient/OpenIdConnect::$scope*

 ()

$issuerUrl				*yii/authclient/OpenIdConnect::$issuerUrl*

 (string) OpenID Issuer (provider) base URL, e.g. 'https://example.com'.

$validateJws				*yii/authclient/OpenIdConnect::$validateJws*

 (bool) Whether to validate/decrypt JWS received with Auth token. Note: this
 functionality requires 'spomky-labs/jose' composer package to be installed.
 You can disable this option in case of usage of trusted OpenIDConnect
 provider, however this violates the protocol rules, so you are doing it on
 your own risk.

$allowedJwsAlgorithms			*yii/authclient/OpenIdConnect::$allowedJwsAlgorithms*

 (array) JWS algorithms, which are allowed to be used. These are used by
 'spomky-labs/jose' library for JWS validation/decryption. Make sure
 'spomky-labs/jose' supports the particular algorithm before adding it here.

$configParamsCacheKeyPrefix		*yii/authclient/OpenIdConnect::$configParamsCacheKeyPrefix*

 (string) The prefix for the key used to store 'configParams' data in cache.
 Actual cache key will be formed addition 'id' value to it.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/authclient/ClientInterface::setId|
 |yii/authclient/ClientInterface::getId|
 |yii/authclient/ClientInterface::setName|
 |yii/authclient/ClientInterface::getName|
 |yii/authclient/ClientInterface::setTitle|
 |yii/authclient/ClientInterface::getTitle|
 |yii/authclient/BaseClient::setUserAttributes|
 |yii/authclient/ClientInterface::getUserAttributes|
 |yii/authclient/BaseClient::setNormalizeUserAttributeMap|
 |yii/authclient/BaseClient::getNormalizeUserAttributeMap|
 |yii/authclient/BaseClient::setViewOptions|
 |yii/authclient/ClientInterface::getViewOptions|
 |yii/authclient/BaseClient::getHttpClient|
 |yii/authclient/BaseOAuth::setHttpClient|
 |yii/authclient/BaseClient::setRequestOptions|
 |yii/authclient/BaseClient::getRequestOptions|
 |yii/authclient/BaseClient::getStateStorage|
 |yii/authclient/BaseClient::setStateStorage|
 |yii/authclient/BaseClient::defaultName|
 |yii/authclient/BaseClient::defaultTitle|
 |yii/authclient/BaseClient::defaultNormalizeUserAttributeMap|
 |yii/authclient/BaseClient::defaultViewOptions|
 |yii/authclient/BaseOAuth::createHttpClient|
 |yii/authclient/BaseClient::normalizeUserAttributes|
 |yii/authclient/BaseClient::createRequest|
 |yii/authclient/BaseOAuth::defaultRequestOptions|
 |yii/authclient/BaseClient::setState|
 |yii/authclient/BaseClient::getState|
 |yii/authclient/BaseClient::removeState|
 |yii/authclient/BaseClient::getStateKeyPrefix|
 |yii/authclient/BaseOAuth::setReturnUrl|
 |yii/authclient/BaseOAuth::getReturnUrl|
 |yii/authclient/BaseOAuth::setAccessToken|
 |yii/authclient/BaseOAuth::getAccessToken|
 |yii/authclient/BaseOAuth::setSignatureMethod|
 |yii/authclient/BaseOAuth::getSignatureMethod|
 |yii/authclient/BaseOAuth::createSignatureMethod|
 |yii/authclient/BaseOAuth::sendRequest|
 |yii/authclient/BaseOAuth::composeUrl|
 |yii/authclient/BaseOAuth::saveAccessToken|
 |yii/authclient/BaseOAuth::restoreAccessToken|
 |yii/authclient/BaseOAuth::createApiRequest|
 |yii/authclient/BaseOAuth::beforeApiRequestSend|
 |yii/authclient/BaseOAuth::api|
 |yii/authclient/BaseOAuth::applyAccessTokenToRequest|
 |yii/authclient/OAuth2::generateAuthState|
 |yii/authclient/OAuth2::authenticateClient|
 |yii/authclient/OAuth2::authenticateUser|
 |yii/authclient/OAuth2::authenticateUserJwt|


*yii/authclient/OpenIdConnect::initUserAttributes*	protected
>
 initUserAttributes()
<
return (void)

 {@inheritdoc}


*yii/authclient/OpenIdConnect::defaultReturnUrl*		protected
>
 defaultReturnUrl()
<
return (void)

 {@inheritdoc}


*yii/authclient/OpenIdConnect::createToken*		protected
>
 createToken($tokenConfig='[]')
<
return (void)

 {@inheritdoc}

    [$tokenConfig] () 


*yii/authclient/OpenIdConnect::refreshAccessToken*	public
>
 refreshAccessToken($token)
<
return (void)

 {@inheritdoc}

    [$token] () 


*yii/authclient/OpenIdConnect::buildAuthUrl*		public
>
 buildAuthUrl($params='[]')
<
return (void)

 {@inheritdoc}

    [$params] () 


*yii/authclient/OpenIdConnect::fetchAccessToken*		public
>
 fetchAccessToken($authCode, $params='[]')
<
return (void)

 {@inheritdoc}

    [$authCode] () 
    [$params] () 


*yii/authclient/OpenIdConnect::applyClientCredentialsToRequest*protected
>
 applyClientCredentialsToRequest($request)
<
return (void)

 {@inheritdoc}

    [$request] () 


*yii/authclient/OpenIdConnect::getValidateAuthNonce*	public
>
 getValidateAuthNonce()
<
return (bool) Whether to use and validate auth 'nonce' parameter in authentication
flow.



*yii/authclient/OpenIdConnect::setValidateAuthNonce*	public
>
 setValidateAuthNonce($validateAuthNonce)
<
return (void)

    [$validateAuthNonce] (bool) Whether to use and validate auth 'nonce'
    parameter in authentication flow.


*yii/authclient/OpenIdConnect::getCache*			public
>
 getCache()
<
return (\yii\caching\Cache|null) The cache object, 'null' 
  - if not enabled.



*yii/authclient/OpenIdConnect::setCache*			public
>
 setCache($cache)
<
return (void)

 Sets up a component to be used for caching.

 This can be one of the following:


   - an application component ID (e.g. 'cache') 
   - a configuration array 
   - a '\yii\caching\Cache' object

 When 'null' is passed, it means caching is not enabled.

    [$cache] (\yii\caching\Cache|array|string|null) The cache object or the ID
    of the cache application component.


*yii/authclient/OpenIdConnect::getConfigParams*		public
>
 getConfigParams()
<
return (array) OpenID provider configuration parameters.



*yii/authclient/OpenIdConnect::getConfigParam*		public
>
 getConfigParam($name)
<
return (mixed) Configuration parameter value.

 Returns particular configuration parameter value.

    [$name] (string) Configuration parameter name.


*yii/authclient/OpenIdConnect::discoverConfig*		protected
>
 discoverConfig()
<
return (array) OpenID Provider configuration parameters.

 Discovers OpenID Provider configuration parameters.


*yii/authclient/OpenIdConnect::loadJws*			protected
>
 loadJws($jws)
<
return (array) JWS underlying data.

 Decrypts/validates JWS, returning related data.

    [$jws] (string) Raw JWS input.


*yii/authclient/OpenIdConnect::generateAuthNonce*		protected
>
 generateAuthNonce()
<
return (string) Auth nonce value.

 Generates the auth nonce value.



 vim:tw=78:ts=8:ft=help:norl:
