
*yii/captcha/CaptchaValidator*   >> |yii/validators/Validator|
==============================

DESCRIPTION
------------------------------------------------------------------------------

 CaptchaValidator should be used together with 'CaptchaAction'.

 Note that once CAPTCHA validation succeeds, a new CAPTCHA will be generated
 automatically. As a result, CAPTCHA validation should not be used in AJAX
 validation mode because it may fail the validation even if a user enters the
 same code as shown in the CAPTCHA image which is actually different from the
 latest CAPTCHA code.


PROPERTY DETAILS
------------------------------------------------------------------------------

$builtInValidators			*yii/captcha/CaptchaValidator::$builtInValidators*

 See |yii/validators/Validator::$builtInValidators|

$attributes				*yii/captcha/CaptchaValidator::$attributes*

 See |yii/validators/Validator::$attributes|

$message				*yii/captcha/CaptchaValidator::$message*

 See |yii/validators/Validator::$message|

$on					*yii/captcha/CaptchaValidator::$on*

 See |yii/validators/Validator::$on|

$except					*yii/captcha/CaptchaValidator::$except*

 See |yii/validators/Validator::$except|

$skipOnError				*yii/captcha/CaptchaValidator::$skipOnError*

 See |yii/validators/Validator::$skipOnError|

$skipOnEmpty				*yii/captcha/CaptchaValidator::$skipOnEmpty*

 (bool) Whether to skip this validator if the input is empty.

$enableClientValidation			*yii/captcha/CaptchaValidator::$enableClientValidation*

 See |yii/validators/Validator::$enableClientValidation|

$isEmpty				*yii/captcha/CaptchaValidator::$isEmpty*

 See |yii/validators/Validator::$isEmpty|

$when					*yii/captcha/CaptchaValidator::$when*

 See |yii/validators/Validator::$when|

$whenClient				*yii/captcha/CaptchaValidator::$whenClient*

 See |yii/validators/Validator::$whenClient|

$caseSensitive				*yii/captcha/CaptchaValidator::$caseSensitive*

 (bool) Whether the comparison is case sensitive. Defaults to false.

$captchaAction				*yii/captcha/CaptchaValidator::$captchaAction*

 (string) The route of the controller action that renders the CAPTCHA image.

$behaviors				*yii/captcha/CaptchaValidator::$behaviors*

 See |yii/base/Component::$behaviors|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/captcha/CaptchaValidator::className*			public

 See |yii/base/Object::className|


*yii/captcha/CaptchaValidator::__construct*		public

 See |yii/base/Object::__construct|


*yii/captcha/CaptchaValidator::init*			public
>
 init()
<
return (void)



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/captcha/CaptchaValidator::__get*			public

 See |yii/base/Object::__get|


*yii/captcha/CaptchaValidator::__set*			public

 See |yii/base/Object::__set|


*yii/captcha/CaptchaValidator::__isset*			public

 See |yii/base/Object::__isset|


*yii/captcha/CaptchaValidator::__unset*			public

 See |yii/base/Object::__unset|


*yii/captcha/CaptchaValidator::__call*			public

 See |yii/base/Object::__call|


*yii/captcha/CaptchaValidator::hasProperty*		public

 See |yii/base/Object::hasProperty|


*yii/captcha/CaptchaValidator::canGetProperty*		public

 See |yii/base/Object::canGetProperty|


*yii/captcha/CaptchaValidator::canSetProperty*		public

 See |yii/base/Object::canSetProperty|


*yii/captcha/CaptchaValidator::hasMethod*			public

 See |yii/base/Object::hasMethod|


*yii/captcha/CaptchaValidator::__clone*			public

 See |yii/base/Component::__clone|


*yii/captcha/CaptchaValidator::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/captcha/CaptchaValidator::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/captcha/CaptchaValidator::on*			public

 See |yii/base/Component::on|


*yii/captcha/CaptchaValidator::off*			public

 See |yii/base/Component::off|


*yii/captcha/CaptchaValidator::trigger*			public

 See |yii/base/Component::trigger|


*yii/captcha/CaptchaValidator::getBehavior*		public

 See |yii/base/Component::getBehavior|


*yii/captcha/CaptchaValidator::getBehaviors*		public

 See |yii/base/Component::getBehaviors|


*yii/captcha/CaptchaValidator::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/captcha/CaptchaValidator::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/captcha/CaptchaValidator::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/captcha/CaptchaValidator::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/captcha/CaptchaValidator::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/captcha/CaptchaValidator::createValidator*		public

 See |yii/validators/Validator::createValidator|


*yii/captcha/CaptchaValidator::validateAttributes*	public

 See |yii/validators/Validator::validateAttributes|


*yii/captcha/CaptchaValidator::validateAttribute*		public

 See |yii/validators/Validator::validateAttribute|


*yii/captcha/CaptchaValidator::validate*			public

 See |yii/validators/Validator::validate|


*yii/captcha/CaptchaValidator::validateValue*		protected
>
 validateValue($value)
<
return (array|null) The error message and the parameters to be inserted into the
error message. Null should be returned if the data is valid.



 A validator class can implement this method to support data validation out of
 the context of a data model.



    [$value] (mixed) The data value to be validated.


*yii/captcha/CaptchaValidator::clientValidateAttribute*	public
>
 clientValidateAttribute($model, $attribute, $view)
<
return (string) The client-side validation script. Null if the validator does not
support client-side validation.



 Calls 'getClientOptions()' to generate options array for client-side
 validation.

 You may override this method to return the JavaScript validation code if the
 validator can support client-side validation.

 The following JavaScript variables are predefined and can be used in the
 validation code:


   - 'attribute': an object describing the the attribute being
   validated. 
   - 'value': the value being validated. 
   - 'messages': an array used to hold the validation error messages
   for the attribute. 
   - 'deferred': an array used to hold deferred objects for
   asynchronous validation 
   - '$form': a jQuery object containing the form element

 The 'attribute' object contains the following properties: 
   - 'id': a unique ID identifying the attribute (e.g.
   "loginform-username") in the form 
   - 'name': attribute name or expression (e.g. "[0]content" for
   tabular input) 
   - 'container': the jQuery selector of the container of the input
   field 
   - 'input': the jQuery selector of the input field under the context
   of the form 
   - 'error': the jQuery selector of the error tag under the context of
   the container 
   - 'status': status of the input field, 0: empty, not entered before,
   1: validated, 2: pending validation, 3: validating



    [$model] (\yii\base\Model) The data model being validated
    [$attribute] (string) The name of the attribute to be validated.
    [$view] (\yii\web\View) The view object that is going to be used to render
    views or view files containing a model form with this validator applied.


*yii/captcha/CaptchaValidator::getClientOptions*		public
>
 getClientOptions($model, $attribute)
<
return (array) The client-side validation options



 This method is usually called from 'clientValidateAttribute()'. You may
 override this method to modify options that will be passed to the client-side
 validation.



    [$model] (\yii\base\Model) The model being validated
    [$attribute] (string) The attribute name being validated


*yii/captcha/CaptchaValidator::isActive*			public

 See |yii/validators/Validator::isActive|


*yii/captcha/CaptchaValidator::addError*			public

 See |yii/validators/Validator::addError|


*yii/captcha/CaptchaValidator::isEmpty*			public

 See |yii/validators/Validator::isEmpty|


*yii/captcha/CaptchaValidator::createCaptchaAction*	public
>
 createCaptchaAction()
<
return (\yii\captcha\CaptchaAction) The action object




 vim:tw=78:ts=8:ft=help:norl:
