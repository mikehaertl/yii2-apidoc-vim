
*yii/widgets/BaseListView*   >> |yii/base/Widget|
==========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/grid/GridView|
|yii/widgets/ListView|

DESCRIPTION
------------------------------------------------------------------------------

 It provides features like sorting, paging and also filtering the data.

 For more details and usage information on BaseListView, see the [guide
 article on data widgets](guide:output-data-widgets).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Widget::$counter|
 |yii/base/Widget::$autoIdPrefix|
 |yii/base/Widget::$stack|
 |yii/base/Component::$behaviors|
 |yii/base/Widget::$id|
 |yii/base/Widget::$view|
 |yii/base/ViewContextInterface::$viewPath|


$options				*yii/widgets/BaseListView::$options*

 (array) The HTML attributes for the container tag of the list view. The "tag"
 element specifies the tag name of the container element and defaults to
 "div".

$dataProvider				*yii/widgets/BaseListView::$dataProvider*

 (\yii\data\DataProviderInterface) The data provider for the view. This
 property is required.

$pager					*yii/widgets/BaseListView::$pager*

 (array) The configuration for the pager widget. By default, 'LinkPager' will
 be used to render the pager. You can use a different widget class by
 configuring the "class" element. Note that the widget must support the
 'pagination' property which will be populated with the
 '\yii\data\BaseDataProvider::pagination|pagination' value of the
 'dataProvider' and will overwrite this value.

$sorter					*yii/widgets/BaseListView::$sorter*

 (array) The configuration for the sorter widget. By default, 'LinkSorter'
 will be used to render the sorter. You can use a different widget class by
 configuring the "class" element. Note that the widget must support the 'sort'
 property which will be populated with the
 '\yii\data\BaseDataProvider::sort|sort' value of the 'dataProvider' and will
 overwrite this value.

$summary				*yii/widgets/BaseListView::$summary*

 (string) The HTML content to be displayed as the summary of the list view. If
 you do not want to show the summary, you may set it with an empty string.

 The following tokens will be replaced with the corresponding values:


   - '{begin}': the starting row number (1-based) currently being
   displayed 
   - '{end}': the ending row number (1-based) currently being displayed 
   - '{count}': the number of rows currently being displayed 
   - '{totalCount}': the total number of rows available 
   - '{page}': the page number (1-based) current being displayed 
   - '{pageCount}': the number of pages available

$summaryOptions				*yii/widgets/BaseListView::$summaryOptions*

 (array) The HTML attributes for the summary of the list view. The "tag"
 element specifies the tag name of the summary element and defaults to "div".

$showOnEmpty				*yii/widgets/BaseListView::$showOnEmpty*

 (bool) Whether to show an empty list view if 'dataProvider' returns no data.
 The default value is false which displays an element according to the
 'emptyText' and 'emptyTextOptions' properties.

$emptyText				*yii/widgets/BaseListView::$emptyText*

 (string|false) The HTML content to be displayed when 'dataProvider' does not
 have any data. When this is set to 'false' no extra HTML content will be
 generated. The default value is the text "No results found." which will be
 translated to the current application language.

$emptyTextOptions			*yii/widgets/BaseListView::$emptyTextOptions*

 (array) The HTML attributes for the emptyText of the list view. The "tag"
 element specifies the tag name of the emptyText element and defaults to
 "div".

$layout					*yii/widgets/BaseListView::$layout*

 (string) The layout that determines how different sections of the list view
 should be organized. The following tokens will be replaced with the
 corresponding section contents:


   - '{summary}': the summary section. See 'renderSummary()'. 
   - '{items}': the list items. See 'renderItems()'. 
   - '{sorter}': the sorter. See 'renderSorter()'. 
   - '{pager}': the pager. See 'renderPager()'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Widget::begin|
 |yii/base/Widget::end|
 |yii/base/Widget::widget|
 |yii/base/Widget::getId|
 |yii/base/Widget::setId|
 |yii/base/Widget::getView|
 |yii/base/Widget::setView|
 |yii/base/Widget::render|
 |yii/base/Widget::renderFile|
 |yii/base/ViewContextInterface::getViewPath|
 |yii/base/Widget::beforeRun|
 |yii/base/Widget::afterRun|


*yii/widgets/BaseListView::init*				public
>
 init()
<
return (void)

 Initializes the view.


*yii/widgets/BaseListView::run*				public
>
 run()
<
return (void)

 Runs the widget.


*yii/widgets/BaseListView::renderItems*			public
>
 renderItems()
<
return (string) The rendering result.

 Renders the data models.


*yii/widgets/BaseListView::renderSection*			public
>
 renderSection($name)
<
return (string|bool) The rendering result of the section, or false if the named
section is not supported.

 Renders a section of the specified name.

 If the named section is not supported, false will be returned.

    [$name] (string) The section name, e.g., '{summary}', '{items}'.


*yii/widgets/BaseListView::renderEmpty*			public
>
 renderEmpty()
<
return (string) The rendering result

 Renders the HTML content indicating that the list view has no data.


*yii/widgets/BaseListView::renderSummary*			public
>
 renderSummary()
<
return (void)

 Renders the summary text.


*yii/widgets/BaseListView::renderPager*			public
>
 renderPager()
<
return (string) The rendering result

 Renders the pager.


*yii/widgets/BaseListView::renderSorter*			public
>
 renderSorter()
<
return (string) The rendering result

 Renders the sorter.



 vim:tw=78:ts=8:ft=help:norl:
