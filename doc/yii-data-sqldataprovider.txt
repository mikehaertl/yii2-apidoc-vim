
*yii/data/SqlDataProvider*   >> |yii/data/BaseDataProvider|
==========================

DESCRIPTION
------------------------------------------------------------------------------

 SqlDataProvider provides data in terms of arrays, each representing a row of
 query result.

 Like other data providers, SqlDataProvider also supports sorting and
 pagination. It does so by modifying the given 'sql' statement with "ORDER BY"
 and "LIMIT" clauses. You may configure the 'sort' and 'pagination' properties
 to customize sorting and pagination behaviors.

 SqlDataProvider may be used in the following way:

   $count = Yii::$app->db->createCommand('
       SELECT COUNT(*) FROM user WHERE status=:status
   ', [':status' => 1])->queryScalar();

   $dataProvider = new SqlDataProvider([
       'sql' => 'SELECT * FROM user WHERE status=:status',
       'params' => [':status' => 1],
       'totalCount' => $count,
       'sort' => [
           'attributes' => [
               'age',
               'name' => [
                   'asc' => ['first_name' => SORT_ASC, 'last_name' =>
 SORT_ASC],
                   'desc' => ['first_name' => SORT_DESC, 'last_name' =>
 SORT_DESC],
                   'default' => SORT_DESC,
                   'label' => 'Name',
               ],
           ],
       ],
       'pagination' => [
           'pageSize' => 20,
       ],
   ]);

   // get the user records in the current page
   $models = $dataProvider->getModels();

 Note: if you want to use the pagination feature, you must configure the
 'totalCount' property to be the total number of rows (without pagination).
 And if you want to use the sorting feature, you must configure the 'sort'
 property so that the provider knows which columns can be sorted.

 For more details and usage information on SqlDataProvider, see the [guide
 article on data providers](guide:output-data-providers).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/data/BaseDataProvider::$id|


$db					*yii/data/SqlDataProvider::$db*

 (\yii\db\Connection|array|string) The DB connection object or the application
 component ID of the DB connection. Starting from version 2.0.2, this can also
 be a configuration array for creating the object.

$sql					*yii/data/SqlDataProvider::$sql*

 (string) The SQL statement to be used for fetching data rows.

$params					*yii/data/SqlDataProvider::$params*

 (array) Parameters (name=>value) to be bound to the SQL statement.

$key					*yii/data/SqlDataProvider::$key*

 (string|callable) The column that is used as the key of the data models. This
 can be either a column name, or a callable that returns the key value of a
 given data model.

 If this is not set, the keys of the 'models' array will be used.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/data/BaseDataProvider::prepare|
 |yii/data/BaseDataProvider::getModels|
 |yii/data/BaseDataProvider::setModels|
 |yii/data/BaseDataProvider::getKeys|
 |yii/data/BaseDataProvider::setKeys|
 |yii/data/BaseDataProvider::getCount|
 |yii/data/BaseDataProvider::getTotalCount|
 |yii/data/BaseDataProvider::setTotalCount|
 |yii/data/BaseDataProvider::getPagination|
 |yii/data/BaseDataProvider::setPagination|
 |yii/data/BaseDataProvider::getSort|
 |yii/data/BaseDataProvider::setSort|
 |yii/data/BaseDataProvider::refresh|


*yii/data/SqlDataProvider::init*				public
>
 init()
<
return (void)

 Initializes the DB connection component.

 This method will initialize the 'db' property to make sure it refers to a
 valid DB connection.


*yii/data/SqlDataProvider::prepareModels*			protected
>
 prepareModels()
<
return (void)

 {@inheritdoc}


*yii/data/SqlDataProvider::prepareKeys*			protected
>
 prepareKeys($models)
<
return (void)

 {@inheritdoc}

    [$models] () 


*yii/data/SqlDataProvider::prepareTotalCount*		protected
>
 prepareTotalCount()
<
return (void)

 {@inheritdoc}



 vim:tw=78:ts=8:ft=help:norl:
