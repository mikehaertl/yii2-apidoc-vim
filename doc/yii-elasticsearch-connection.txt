
*yii/elasticsearch/Connection*   >> |yii/base/Component|
==============================


PROPERTY DETAILS
------------------------------------------------------------------------------

$autodetectCluster			*yii/elasticsearch/Connection::$autodetectCluster*

 (boolean) Whether to autodetect available cluster nodes on 'open()'

$nodes					*yii/elasticsearch/Connection::$nodes*

 (array) The elasticsearch cluster nodes to connect to.

 This is populated with the result of a cluster nodes request when
 'autodetectCluster' is true.

 Additional special options:

  
   - 'auth': overrides 'auth' property. For example:###CODE###

$activeNode				*yii/elasticsearch/Connection::$activeNode*

 (string) The active node. Key of one of the 'nodes'. Will be randomly
 selected on 'open()'.

$auth					*yii/elasticsearch/Connection::$auth*

 (array) Authentication data used to connect to the ElasticSearch node.

 Array elements:

  
   - 'username': the username for authentication.  
   - 'password': the password for authentication.

 Array either MUST contain both username and password on not contain any
 authentication credentials.

$connectionTimeout			*yii/elasticsearch/Connection::$connectionTimeout*

 (float) Timeout to use for connecting to an elasticsearch node. This value
 will be used to configure the curl 'CURLOPT_CONNECTTIMEOUT' option. If not
 set, no explicit timeout will be set for curl.

$dataTimeout				*yii/elasticsearch/Connection::$dataTimeout*

 (float) Timeout to use when reading the response from an elasticsearch node.
 This value will be used to configure the curl 'CURLOPT_TIMEOUT' option. If
 not set, no explicit timeout will be set for curl.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/elasticsearch/Connection::className*			public

 See |yii/base/BaseObject::className|


*yii/elasticsearch/Connection::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/elasticsearch/Connection::init*			public
>
 init()
<
return (void)



*yii/elasticsearch/Connection::__get*			public

 See |yii/base/Component::__get|


*yii/elasticsearch/Connection::__set*			public

 See |yii/base/Component::__set|


*yii/elasticsearch/Connection::__isset*			public

 See |yii/base/Component::__isset|


*yii/elasticsearch/Connection::__unset*			public

 See |yii/base/Component::__unset|


*yii/elasticsearch/Connection::__call*			public

 See |yii/base/Component::__call|


*yii/elasticsearch/Connection::hasProperty*		public

 See |yii/base/Component::hasProperty|


*yii/elasticsearch/Connection::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/elasticsearch/Connection::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/elasticsearch/Connection::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/elasticsearch/Connection::__clone*			public

 See |yii/base/Component::__clone|


*yii/elasticsearch/Connection::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/elasticsearch/Connection::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/elasticsearch/Connection::on*			public

 See |yii/base/Component::on|


*yii/elasticsearch/Connection::off*			public

 See |yii/base/Component::off|


*yii/elasticsearch/Connection::trigger*			public

 See |yii/base/Component::trigger|


*yii/elasticsearch/Connection::getBehavior*		public

 See |yii/base/Component::getBehavior|


*yii/elasticsearch/Connection::getBehaviors*		public

 See |yii/base/Component::getBehaviors|


*yii/elasticsearch/Connection::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/elasticsearch/Connection::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/elasticsearch/Connection::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/elasticsearch/Connection::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/elasticsearch/Connection::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/elasticsearch/Connection::__sleep*			public
>
 __sleep()
<
return (array) 

 Closes the connection when this component is being serialized.


*yii/elasticsearch/Connection::getIsActive*		public
>
 getIsActive()
<
return (boolean) Whether the DB connection is established

 Returns a value indicating whether the DB connection is established.


*yii/elasticsearch/Connection::open*			public
>
 open()
<
return (void)

 Establishes a DB connection.

 It does nothing if a DB connection has already been established.


*yii/elasticsearch/Connection::populateNodes*		protected
>
 populateNodes()
<
return (void)

 Populates 'nodes' with the result of a cluster nodes request.


*yii/elasticsearch/Connection::selectActiveNode*		protected
>
 selectActiveNode()
<
return (void)

 Select active node randomly


*yii/elasticsearch/Connection::close*			public
>
 close()
<
return (void)

 Closes the currently active DB connection.

 It does nothing if the connection is already closed.


*yii/elasticsearch/Connection::initConnection*		protected
>
 initConnection()
<
return (void)

 Initializes the DB connection.

 This method is invoked right after the DB connection is established. The
 default implementation triggers an 'EVENT_AFTER_OPEN' event.


*yii/elasticsearch/Connection::getDriverName*		public
>
 getDriverName()
<
return (string) Name of the DB driver

 Returns the name of the DB driver for the current 'dsn'.


*yii/elasticsearch/Connection::createCommand*		public
>
 createCommand($config='[]')
<
return (\yii\elasticsearch\Command) The DB command

 Creates a command for execution.

    [$config] (array) The configuration for the Command class


*yii/elasticsearch/Connection::getQueryBuilder*		public
>
 getQueryBuilder()
<
return (\yii\elasticsearch\QueryBuilder) 

 Creates new query builder instance


*yii/elasticsearch/Connection::get*			public
>
 get($url, $options='[]', $body='null', $raw='false')
<
return (mixed) Response

 Performs GET HTTP request

    [$url] (string|array) URL
    [$options] (array) URL options
    [$body] (string) Request body
    [$raw] (boolean) If response body contains JSON and should be decoded


*yii/elasticsearch/Connection::head*			public
>
 head($url, $options='[]', $body='null')
<
return (mixed) Response

 Performs HEAD HTTP request

    [$url] (string|array) URL
    [$options] (array) URL options
    [$body] (string) Request body


*yii/elasticsearch/Connection::post*			public
>
 post($url, $options='[]', $body='null', $raw='false')
<
return (mixed) Response

 Performs POST HTTP request

    [$url] (string|array) URL
    [$options] (array) URL options
    [$body] (string) Request body
    [$raw] (boolean) If response body contains JSON and should be decoded


*yii/elasticsearch/Connection::put*			public
>
 put($url, $options='[]', $body='null', $raw='false')
<
return (mixed) Response

 Performs PUT HTTP request

    [$url] (string|array) URL
    [$options] (array) URL options
    [$body] (string) Request body
    [$raw] (boolean) If response body contains JSON and should be decoded


*yii/elasticsearch/Connection::delete*			public
>
 delete($url, $options='[]', $body='null', $raw='false')
<
return (mixed) Response

 Performs DELETE HTTP request

    [$url] (string|array) URL
    [$options] (array) URL options
    [$body] (string) Request body
    [$raw] (boolean) If response body contains JSON and should be decoded


*yii/elasticsearch/Connection::httpRequest*		protected
>
 httpRequest($method, $url, $requestBody='null', $raw='false')
<
return (mixed) If request failed

 Performs HTTP request

    [$method] (string) Method name
    [$url] (string) URL
    [$requestBody] (string) Request body
    [$raw] (boolean) If response body contains JSON and should be decoded


*yii/elasticsearch/Connection::decodeErrorBody*		protected
>
 decodeErrorBody($body)
<
return (mixed) 

 Try to decode error information if it is valid json, return it if not.

    [$body] () 


*yii/elasticsearch/Connection::getNodeInfo*		public
>
 getNodeInfo()
<
return (void)



*yii/elasticsearch/Connection::getClusterState*		public
>
 getClusterState()
<
return (void)




 vim:tw=78:ts=8:ft=help:norl:
