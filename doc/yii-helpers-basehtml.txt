
*yii/helpers/BaseHtml*  
======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/helpers/Html|
|yii/bootstrap/BaseHtml|
|yii/bootstrap/Html|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseHtml. Use 'Html' instead.


PROPERTY DETAILS
------------------------------------------------------------------------------

$attributeRegex				*yii/helpers/BaseHtml::$attributeRegex*

 (string) Regular expression used for attribute name validation.

$voidElements				*yii/helpers/BaseHtml::$voidElements*

 (array) List of void elements (element name => 1)

$attributeOrder				*yii/helpers/BaseHtml::$attributeOrder*

 (array) The preferred order of attributes in a tag. This mainly affects the
 order of the attributes that are rendered by 'renderTagAttributes()'.

$dataAttributes				*yii/helpers/BaseHtml::$dataAttributes*

 (array) List of tag attributes that should be specially handled when their
 values are of array type. In particular, if the value of the 'data' attribute
 is '['name' => 'xyz', 'age' => 13]', two attributes will be generated instead
 of one: 'data-name="xyz" data-age="13"'.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/helpers/BaseHtml::encode*				public
>
 encode($content, $doubleEncode='true')
<
return (string) The encoded content

 Encodes special characters into HTML entities.

 The '\yii\base\Application::charset|application charset' will be used for
 encoding.

    [$content] (string) The content to be encoded
    [$doubleEncode] (bool) Whether to encode HTML entities in '$content'. If
    false, HTML entities in '$content' will not be further encoded.


*yii/helpers/BaseHtml::decode*				public
>
 decode($content)
<
return (string) The decoded content

 Decodes special HTML entities back to the corresponding characters.

 This is the opposite of 'encode()'.

    [$content] (string) The content to be decoded


*yii/helpers/BaseHtml::tag*				public
>
 tag($name, $content='''', $options='[]')
<
return (string) The generated HTML tag

 Generates a complete HTML tag.

    [$name] (string|bool|null) The tag name. If $name is 'null' or 'false',
    the corresponding content will be rendered without any tag.
    [$content] (string) The content to be enclosed between the start and end
    tags. It will not be HTML-encoded. If this is coming from end users, you
    should consider 'encode()' it to prevent XSS attacks.
    [$options] (array) The HTML tag attributes (HTML options) in terms of
    name-value pairs. These will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'encode()'. If a
    value is null, the corresponding attribute will not be rendered.

    For example when using '['class' => 'my-class', 'target' => '_blank',
    'value' => null]' it will result in the html attributes rendered like
    this: 'class="my-class" target="_blank"'.

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::beginTag*				public
>
 beginTag($name, $options='[]')
<
return (string) The generated start tag

 Generates a start tag.

    [$name] (string|bool|null) The tag name. If $name is 'null' or 'false',
    the corresponding content will be rendered without any tag.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::endTag*				public
>
 endTag($name)
<
return (string) The generated end tag

 Generates an end tag.

    [$name] (string|bool|null) The tag name. If $name is 'null' or 'false',
    the corresponding content will be rendered without any tag.


*yii/helpers/BaseHtml::style*				public
>
 style($content, $options='[]')
<
return (string) The generated style tag

 Generates a style tag.

    [$content] (string) The style content
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::script*				public
>
 script($content, $options='[]')
<
return (string) The generated script tag

 Generates a script tag.

    [$content] (string) The script content
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::cssFile*				public
>
 cssFile($url, $options='[]')
<
return (string) The generated link tag

 Generates a link tag that refers to an external CSS file.

    [$url] (array|string) The URL of the external CSS file. This parameter
    will be processed by 'Url::to()'.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - condition: specifies the conditional comments for IE, e.g., 'lt IE
      9'. When this is specified,   the generated 'link' tag will be enclosed
    within the conditional comments. This is mainly useful   for supporting
    old versions of IE browsers. 
      - noscript: if set to true, 'link' tag will be wrapped into
      '<noscript>' tags.

    The rest of the options will be rendered as the attributes of the
    resulting link tag. The values will be HTML-encoded using 'encode()'. If a
    value is null, the corresponding attribute will not be rendered. See
    'renderTagAttributes()' for details on how attributes are being rendered.


*yii/helpers/BaseHtml::jsFile*				public
>
 jsFile($url, $options='[]')
<
return (string) The generated script tag

 Generates a script tag that refers to an external JavaScript file.

    [$url] (string) The URL of the external JavaScript file. This parameter
    will be processed by 'Url::to()'.
    [$options] (array) The tag options in terms of name-value pairs. The
    following option is specially handled:


      - condition: specifies the conditional comments for IE, e.g., 'lt IE
      9'. When this is specified,   the generated 'script' tag will be
    enclosed within the conditional comments. This is mainly useful   for
    supporting old versions of IE browsers.

    The rest of the options will be rendered as the attributes of the
    resulting script tag. The values will be HTML-encoded using 'encode()'. If
    a value is null, the corresponding attribute will not be rendered. See
    'renderTagAttributes()' for details on how attributes are being rendered.


*yii/helpers/BaseHtml::csrfMetaTags*			public
>
 csrfMetaTags()
<
return (string) The generated meta tags

 Generates the meta tags containing CSRF token information.


*yii/helpers/BaseHtml::beginForm*				public
>
 beginForm($action='\'\'', $method=''post'', $options='[]')
<
return (string) The generated form start tag.

 Generates a form start tag.

    [$action] (array|string) The form action URL. This parameter will be
    processed by 'Url::to()'.
    [$method] (string) The form submission method, such as "post", "get",
    "put", "delete" (case-insensitive). Since most browsers only support
    "post" and "get", if other methods are given, they will be simulated using
    "post", and a hidden input will be added which contains the actual method
    type. See '\yii\web\Request::methodParam' for more details.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.

    Special options:

     
      - 'csrf': whether to generate the CSRF hidden input. Defaults to
      true.


*yii/helpers/BaseHtml::endForm*				public
>
 endForm()
<
return (string) The generated tag

 Generates a form end tag.


*yii/helpers/BaseHtml::a*					public
>
 a($text, $url='null', $options='[]')
<
return (string) The generated hyperlink

 Generates a hyperlink tag.

    [$text] (string) Link body. It will NOT be HTML-encoded. Therefore you can
    pass in HTML code such as an image tag. If this is coming from end users,
    you should consider 'encode()' it to prevent XSS attacks.
    [$url] (array|string|null) The URL for the hyperlink tag. This parameter
    will be processed by 'Url::to()' and will be used for the "href" attribute
    of the tag. If this parameter is null, the "href" attribute will not be
    generated.

    If you want to use an absolute url you can call 'Url::to()' yourself,
    before passing the URL to this method, like this:

      Html::a('link text', Url::to($url, true))


    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::mailto*				public
>
 mailto($text, $email='null', $options='[]')
<
return (string) The generated mailto link

 Generates a mailto hyperlink.

    [$text] (string) Link body. It will NOT be HTML-encoded. Therefore you can
    pass in HTML code such as an image tag. If this is coming from end users,
    you should consider 'encode()' it to prevent XSS attacks.
    [$email] (string) Email address. If this is null, the first parameter
    (link body) will be treated as the email address and used.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::img*				public
>
 img($src, $options='[]')
<
return (string) The generated image tag.

 Generates an image tag.

    [$src] (array|string) The image URL. This parameter will be processed by
    'Url::to()'.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.

    Since version 2.0.12 It is possible to pass the 'srcset' option as an
    array which keys are descriptors and values are URLs. All URLs will be
    processed by 'Url::to()'.


*yii/helpers/BaseHtml::label*				public
>
 label($content, $for='null', $options='[]')
<
return (string) The generated label tag

 Generates a label tag.

    [$content] (string) Label text. It will NOT be HTML-encoded. Therefore you
    can pass in HTML code such as an image tag. If this is is coming from end
    users, you should 'encode()' it to prevent XSS attacks.
    [$for] (string) The ID of the HTML element that this label is associated
    with. If this is null, the "for" attribute will not be generated.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::button*				public
>
 button($content=''Button'', $options='[]')
<
return (string) The generated button tag

 Generates a button tag.

    [$content] (string) The content enclosed within the button tag. It will
    NOT be HTML-encoded. Therefore you can pass in HTML code such as an image
    tag. If this is is coming from end users, you should consider 'encode()'
    it to prevent XSS attacks.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::submitButton*			public
>
 submitButton($content=''Submit'', $options='[]')
<
return (string) The generated submit button tag

 Generates a submit button tag.

 Be careful when naming form elements such as submit buttons. According to the
 [jQuery documentation](https://api.jquery.com/submit/) there are some
 reserved names that can cause conflicts, e.g. 'submit', 'length', or
 'method'.

    [$content] (string) The content enclosed within the button tag. It will
    NOT be HTML-encoded. Therefore you can pass in HTML code such as an image
    tag. If this is is coming from end users, you should consider 'encode()'
    it to prevent XSS attacks.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::resetButton*			public
>
 resetButton($content=''Reset'', $options='[]')
<
return (string) The generated reset button tag

 Generates a reset button tag.

    [$content] (string) The content enclosed within the button tag. It will
    NOT be HTML-encoded. Therefore you can pass in HTML code such as an image
    tag. If this is is coming from end users, you should consider 'encode()'
    it to prevent XSS attacks.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::input*				public
>
 input($type, $name='null', $value='null', $options='[]')
<
return (string) The generated input tag

 Generates an input type of the given type.

    [$type] (string) The type attribute.
    [$name] (string) The name attribute. If it is null, the name attribute
    will not be generated.
    [$value] (string) The value attribute. If it is null, the value attribute
    will not be generated.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::buttonInput*			public
>
 buttonInput($label=''Button'', $options='[]')
<
return (string) The generated button tag

 Generates an input button.

    [$label] (string) The value attribute. If it is null, the value attribute
    will not be generated.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::submitInput*			public
>
 submitInput($label=''Submit'', $options='[]')
<
return (string) The generated button tag

 Generates a submit input button.

 Be careful when naming form elements such as submit buttons. According to the
 [jQuery documentation](https://api.jquery.com/submit/) there are some
 reserved names that can cause conflicts, e.g. 'submit', 'length', or
 'method'.

    [$label] (string) The value attribute. If it is null, the value attribute
    will not be generated.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::resetInput*			public
>
 resetInput($label=''Reset'', $options='[]')
<
return (string) The generated button tag

 Generates a reset input button.

    [$label] (string) The value attribute. If it is null, the value attribute
    will not be generated.
    [$options] (array) The attributes of the button tag. The values will be
    HTML-encoded using 'encode()'. Attributes whose value is null will be
    ignored and not put in the tag returned. See 'renderTagAttributes()' for
    details on how attributes are being rendered.


*yii/helpers/BaseHtml::textInput*				public
>
 textInput($name, $value='null', $options='[]')
<
return (string) The generated text input tag

 Generates a text input field.

    [$name] (string) The name attribute.
    [$value] (string) The value attribute. If it is null, the value attribute
    will not be generated.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::hiddenInput*			public
>
 hiddenInput($name, $value='null', $options='[]')
<
return (string) The generated hidden input tag

 Generates a hidden input field.

    [$name] (string) The name attribute.
    [$value] (string) The value attribute. If it is null, the value attribute
    will not be generated.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::passwordInput*			public
>
 passwordInput($name, $value='null', $options='[]')
<
return (string) The generated password input tag

 Generates a password input field.

    [$name] (string) The name attribute.
    [$value] (string) The value attribute. If it is null, the value attribute
    will not be generated.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::fileInput*				public
>
 fileInput($name, $value='null', $options='[]')
<
return (string) The generated file input tag

 Generates a file input field.

 To use a file input field, you should set the enclosing form's "enctype"
 attribute to be "multipart/form-data". After the form is submitted, the
 uploaded file information can be obtained via $_FILES[$name] (see PHP
 documentation).

    [$name] (string) The name attribute.
    [$value] (string) The value attribute. If it is null, the value attribute
    will not be generated.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered.


*yii/helpers/BaseHtml::textarea*				public
>
 textarea($name, $value='''', $options='[]')
<
return (string) The generated text area tag

 Generates a text area input.

    [$name] (string) The input name
    [$value] (string) The input value. Note that it will be encoded using
    'encode()'.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. See 'renderTagAttributes()' for details on
    how attributes are being rendered. The following special options are
    recognized:


      - 'doubleEncode': whether to double encode HTML entities in
      '$value'. If 'false', HTML entities in '$value' will not   be further
    encoded. This option is available since version 2.0.11.


*yii/helpers/BaseHtml::radio*				public
>
 radio($name, $checked='false', $options='[]')
<
return (string) The generated radio button tag

 Generates a radio button input.

    [$name] (string) The name attribute.
    [$checked] (bool) Whether the radio button should be checked.
    [$options] (array) The tag options in terms of name-value pairs. See
    'booleanInput()' for details about accepted attributes.


*yii/helpers/BaseHtml::checkbox*				public
>
 checkbox($name, $checked='false', $options='[]')
<
return (string) The generated checkbox tag

 Generates a checkbox input.

    [$name] (string) The name attribute.
    [$checked] (bool) Whether the checkbox should be checked.
    [$options] (array) The tag options in terms of name-value pairs. See
    'booleanInput()' for details about accepted attributes.


*yii/helpers/BaseHtml::booleanInput*			protected
>
 booleanInput($type, $name, $checked='false', $options='[]')
<
return (string) The generated checkbox tag

 Generates a boolean input.

    [$type] (string) The input type. This can be either 'radio' or 'checkbox'.
    [$name] (string) The name attribute.
    [$checked] (bool) Whether the checkbox should be checked.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - uncheck: string, the value associated with the uncheck state of
      the checkbox. When this attribute   is present, a hidden input will be
    generated so that if the checkbox is not checked and is submitted,   the
    value of this attribute will still be submitted to the server via the
    hidden input. 
      - label: string, a label displayed next to the checkbox.  It will
      NOT be HTML-encoded. Therefore you can pass   in HTML code such as an
    image tag. If this is is coming from end users, you should 'encode()' it
    to prevent XSS attacks.   When this option is specified, the checkbox will
    be enclosed by a label tag. 
      - labelOptions: array, the HTML attributes for the label tag. Do not
      set this option unless you set the "label" option.

    The rest of the options will be rendered as the attributes of the
    resulting checkbox tag. The values will be HTML-encoded using 'encode()'.
    If a value is null, the corresponding attribute will not be rendered. See
    'renderTagAttributes()' for details on how attributes are being rendered.


*yii/helpers/BaseHtml::dropDownList*			public
>
 dropDownList($name, $selection='null', $items='[]', $options='[]')
<
return (string) The generated drop-down list tag

 Generates a drop-down list.

    [$name] (string) The input name
    [$selection] (string|array|null) The selected value(s). String for single
    or array for multiple selection(s).
    [$items] (array) The option data items. The array keys are option values,
    and the array values are the corresponding option labels. The array can
    also be nested (i.e. some array values are arrays too). For each
    sub-array, an option group will be generated whose label is the key
    associated with the sub-array. If you have a list of data models, you may
    convert them into the format described above using
    '\yii\helpers\ArrayHelper::map()'.

    Note, the values and labels will be automatically HTML-encoded by this
    method, and the blank spaces in the labels will also be HTML-encoded.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - prompt: string, a prompt text to be displayed as the first option.
      Since version 2.0.11 you can use an array   to override the value and to
    set other tag attributes:

        ['text' => 'Please select', 'options' => ['value' => 'none', 'class'
    => 'prompt', 'label' => 'Select']],


      - options: array, the attributes for the select option tags. The
      array keys must be valid option values,   and the array values are the
    extra attributes for the corresponding option tags. For example,

        [
            'value1' => ['disabled' => true],
            'value2' => ['label' => 'value 2'],
        ];


      - groups: array, the attributes for the optgroup tags. The structure
      of this is similar to that of 'options',   except that the array keys
    represent the optgroup labels specified in $items. 
      - encodeSpaces: bool, whether to encode spaces in option prompt and
      option value with '&nbsp;' character.   Defaults to false. 
      - encode: bool, whether to encode option prompt and option value
      characters.   Defaults to 'true'. This option is available since 2.0.3.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'encode()'. If a
    value is null, the corresponding attribute will not be rendered. See
    'renderTagAttributes()' for details on how attributes are being rendered.


*yii/helpers/BaseHtml::listBox*				public
>
 listBox($name, $selection='null', $items='[]', $options='[]')
<
return (string) The generated list box tag

 Generates a list box.

    [$name] (string) The input name
    [$selection] (string|array|null) The selected value(s). String for single
    or array for multiple selection(s).
    [$items] (array) The option data items. The array keys are option values,
    and the array values are the corresponding option labels. The array can
    also be nested (i.e. some array values are arrays too). For each
    sub-array, an option group will be generated whose label is the key
    associated with the sub-array. If you have a list of data models, you may
    convert them into the format described above using
    '\yii\helpers\ArrayHelper::map()'.

    Note, the values and labels will be automatically HTML-encoded by this
    method, and the blank spaces in the labels will also be HTML-encoded.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - prompt: string, a prompt text to be displayed as the first option.
      Since version 2.0.11 you can use an array   to override the value and to
    set other tag attributes:

        ['text' => 'Please select', 'options' => ['value' => 'none', 'class'
    => 'prompt', 'label' => 'Select']],


      - options: array, the attributes for the select option tags. The
      array keys must be valid option values,   and the array values are the
    extra attributes for the corresponding option tags. For example,

        [
            'value1' => ['disabled' => true],
            'value2' => ['label' => 'value 2'],
        ];


      - groups: array, the attributes for the optgroup tags. The structure
      of this is similar to that of 'options',   except that the array keys
    represent the optgroup labels specified in $items. 
      - unselect: string, the value that will be submitted when no option
      is selected.   When this attribute is set, a hidden field will be
    generated so that if no option is selected in multiple   mode, we can
    still obtain the posted unselect value. 
      - encodeSpaces: bool, whether to encode spaces in option prompt and
      option value with '&nbsp;' character.   Defaults to false. 
      - encode: bool, whether to encode option prompt and option value
      characters.   Defaults to 'true'. This option is available since 2.0.3.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'encode()'. If a
    value is null, the corresponding attribute will not be rendered. See
    'renderTagAttributes()' for details on how attributes are being rendered.


*yii/helpers/BaseHtml::checkboxList*			public
>
 checkboxList($name, $selection='null', $items='[]', $options='[]')
<
return (string) The generated checkbox list

 Generates a list of checkboxes.

 A checkbox list allows multiple selection, like 'listBox()'. As a result, the
 corresponding submitted value is an array.

    [$name] (string) The name attribute of each checkbox.
    [$selection] (string|array|null) The selected value(s). String for single
    or array for multiple selection(s).
    [$items] (array) The data item used to generate the checkboxes. The array
    keys are the checkbox values, while the array values are the corresponding
    labels.
    [$options] (array) Options (name => config) for the checkbox list
    container tag. The following options are specially handled:


      - tag: string|false, the tag name of the container element. False to
      render checkbox without container.   See also 'tag()'. 
      - unselect: string, the value that should be submitted when none of
      the checkboxes is selected.   By setting this option, a hidden input
    will be generated. 
      - encode: boolean, whether to HTML-encode the checkbox labels.
      Defaults to true.   This option is ignored if 'item' option is set. 
      - separator: string, the HTML code that separates items. 
      - itemOptions: array, the options for generating the checkbox tag
      using 'checkbox()'. 
      - item: callable, a callback that can be used to customize the
      generation of the HTML code   corresponding to a single item in $items.
    The signature of this callback must be:

        function ($index, $label, $name, $checked, $value)

    where $index is the zero-based index of the checkbox in the whole list;
    $label   is the label for the checkbox; and $name, $value and $checked
    represent the name,   value and the checked status of the checkbox input,
    respectively.

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::radioList*				public
>
 radioList($name, $selection='null', $items='[]', $options='[]')
<
return (string) The generated radio button list

 Generates a list of radio buttons.

 A radio button list is like a checkbox list, except that it only allows
 single selection.

    [$name] (string) The name attribute of each radio button.
    [$selection] (string|array|null) The selected value(s). String for single
    or array for multiple selection(s).
    [$items] (array) The data item used to generate the radio buttons. The
    array keys are the radio button values, while the array values are the
    corresponding labels.
    [$options] (array) Options (name => config) for the radio button list
    container tag. The following options are specially handled:


      - tag: string|false, the tag name of the container element. False to
      render radio buttons without container.   See also 'tag()'. 
      - unselect: string, the value that should be submitted when none of
      the radio buttons is selected.   By setting this option, a hidden input
    will be generated. 
      - encode: boolean, whether to HTML-encode the checkbox labels.
      Defaults to true.   This option is ignored if 'item' option is set. 
      - separator: string, the HTML code that separates items. 
      - itemOptions: array, the options for generating the radio button
      tag using 'radio()'. 
      - item: callable, a callback that can be used to customize the
      generation of the HTML code   corresponding to a single item in $items.
    The signature of this callback must be:

        function ($index, $label, $name, $checked, $value)

    where $index is the zero-based index of the radio button in the whole
    list; $label   is the label for the radio button; and $name, $value and
    $checked represent the name,   value and the checked status of the radio
    button input, respectively.

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::ul*				public
>
 ul($items, $options='[]')
<
return (string) The generated unordered list. An empty list tag will be returned if
'$items' is empty.

 Generates an unordered list.

    [$items] (array|\Traversable) The items for generating the list. Each item
    generates a single list item. Note that items will be automatically HTML
    encoded if '$options['encode']' is not set or true.
    [$options] (array) Options (name => config) for the radio button list. The
    following options are supported:


      - encode: boolean, whether to HTML-encode the items. Defaults to
      true.   This option is ignored if the 'item' option is specified. 
      - separator: string, the HTML code that separates items. Defaults to
      a simple newline ('"\n"').   This option is available since version
    2.0.7. 
      - itemOptions: array, the HTML attributes for the 'li' tags. This
      option is ignored if the 'item' option is specified. 
      - item: callable, a callback that is used to generate each
      individual list item.   The signature of this callback must be:

        function ($item, $index)

    where $index is the array key corresponding to '$item' in '$items'. The
    callback should return   the whole list item tag.

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::ol*				public
>
 ol($items, $options='[]')
<
return (string) The generated ordered list. An empty string is returned if '$items'
is empty.

 Generates an ordered list.

    [$items] (array|\Traversable) The items for generating the list. Each item
    generates a single list item. Note that items will be automatically HTML
    encoded if '$options['encode']' is not set or true.
    [$options] (array) Options (name => config) for the radio button list. The
    following options are supported:


      - encode: boolean, whether to HTML-encode the items. Defaults to
      true.   This option is ignored if the 'item' option is specified. 
      - itemOptions: array, the HTML attributes for the 'li' tags. This
      option is ignored if the 'item' option is specified. 
      - item: callable, a callback that is used to generate each
      individual list item.   The signature of this callback must be:

        function ($item, $index)

    where $index is the array key corresponding to '$item' in '$items'. The
    callback should return   the whole list item tag.

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::activeLabel*			public
>
 activeLabel($model, $attribute, $options='[]')
<
return (string) The generated label tag

 Generates a label tag for the given model attribute.

 The label text is the label associated with the attribute, obtained via
 'Model::getAttributeLabel()'.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. The following options are specially
    handled:


      - label: this specifies the label to be displayed. Note that this
      will NOT be 'encode()|encoded'.   If this is not set,
    'Model::getAttributeLabel()' will be called to get the label for display  
    (after encoding).

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::activeHint*			public
>
 activeHint($model, $attribute, $options='[]')
<
return (string) The generated hint tag

 Generates a hint tag for the given model attribute.

 The hint text is the hint associated with the attribute, obtained via
 'Model::getAttributeHint()'. If no hint content can be obtained, method will
 return an empty string.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. If a value is null, the corresponding
    attribute will not be rendered. The following options are specially
    handled:


      - hint: this specifies the hint to be displayed. Note that this will
      NOT be 'encode()|encoded'.   If this is not set,
    'Model::getAttributeHint()' will be called to get the hint for display  
    (without encoding).

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::errorSummary*			public
>
 errorSummary($models, $options='[]')
<
return (string) The generated error summary

 Generates a summary of the validation errors.

 If there is no validation error, an empty error summary markup will still be
 generated, but it will be hidden.

    [$models] (\yii\base\Model|\yii\base\Model[]) The model(s) whose
    validation errors are to be displayed.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - header: string, the header HTML for the error summary. If not set,
      a default prompt string will be used. 
      - footer: string, the footer HTML for the error summary. Defaults to
      empty string. 
      - encode: boolean, if set to false then the error messages won't be
      encoded. Defaults to 'true'. 
      - showAllErrors: boolean, if set to true every error message for
      each attribute will be shown otherwise   only the first error message
    for each attribute will be shown. Defaults to 'false'.   Option is
    available since 2.0.10.

    The rest of the options will be rendered as the attributes of the
    container tag.


*yii/helpers/BaseHtml::error*				public
>
 error($model, $attribute, $options='[]')
<
return (string) The generated label tag

 Generates a tag that contains the first validation error of the specified
 model attribute.

 Note that even if there is no validation error, this method will still return
 an empty error tag.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. The
    values will be HTML-encoded using 'encode()'. If a value is null, the
    corresponding attribute will not be rendered.

    The following options are specially handled:


      - tag: this specifies the tag name. If not set, "div" will be used.  
    See also 'tag()'. 
      - encode: boolean, if set to false then the error message won't be
      encoded. 
      - errorSource (since 2.0.14): \Closure|callable, callback that will
      be called to obtain an error message.   The signature of the callback
    must be: 'function ($model, $attribute)' and return a string.   When not
    set, the '$model->getFirstError()' method will be called.

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::activeInput*			public
>
 activeInput($type, $model, $attribute, $options='[]')
<
return (string) The generated input tag

 Generates an input tag for the given model attribute.

 This method will generate the "name" and "value" tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.

    [$type] (string) The input type (e.g. 'text', 'password')
    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. See 'renderTagAttributes()' for details
    on how attributes are being rendered.


*yii/helpers/BaseHtml::activeTextInput*			public
>
 activeTextInput($model, $attribute, $options='[]')
<
return (string) The generated input tag

 Generates a text input tag for the given model attribute.

 This method will generate the "name" and "value" tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. See 'renderTagAttributes()' for details
    on how attributes are being rendered. The following special options are
    recognized:


      - maxlength: integer|boolean, when 'maxlength' is set true and the
      model attribute is validated   by a string validator, the 'maxlength'
    option will take the value of '\yii\validators\StringValidator::max'.  
    This is available since version 2.0.3. 
      - placeholder: string|boolean, when 'placeholder' equals 'true', the
      attribute label from the $model will be used   as a placeholder (this
    behavior is available since version 2.0.14).


*yii/helpers/BaseHtml::setActivePlaceholder*		protected
>
 setActivePlaceholder($model, $attribute, $options='[]')
<
return (void)

 Generate placeholder from model attribute label.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'.


*yii/helpers/BaseHtml::activeHiddenInput*			public
>
 activeHiddenInput($model, $attribute, $options='[]')
<
return (string) The generated input tag

 Generates a hidden input tag for the given model attribute.

 This method will generate the "name" and "value" tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. See 'renderTagAttributes()' for details
    on how attributes are being rendered.


*yii/helpers/BaseHtml::activePasswordInput*		public
>
 activePasswordInput($model, $attribute, $options='[]')
<
return (string) The generated input tag

 Generates a password input tag for the given model attribute.

 This method will generate the "name" and "value" tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. See 'renderTagAttributes()' for details
    on how attributes are being rendered. The following special options are
    recognized:


      - maxlength: integer|boolean, when 'maxlength' is set true and the
      model attribute is validated   by a string validator, the 'maxlength'
    option will take the value of '\yii\validators\StringValidator::max'.  
    This option is available since version 2.0.6. 
      - placeholder: string|boolean, when 'placeholder' equals 'true', the
      attribute label from the $model will be used   as a placeholder (this
    behavior is available since version 2.0.14).


*yii/helpers/BaseHtml::activeFileInput*			public
>
 activeFileInput($model, $attribute, $options='[]')
<
return (string) The generated input tag

 Generates a file input tag for the given model attribute.

 This method will generate the "name" and "value" tag attributes automatically
 for the model attribute unless they are explicitly specified in '$options'.
 Additionally, if a separate set of HTML options array is defined inside
 '$options' with a key named 'hiddenOptions', it will be passed to the
 'activeHiddenInput' field as its own '$options' parameter.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. See 'renderTagAttributes()' for details
    on how attributes are being rendered. If 'hiddenOptions' parameter which
    is another set of HTML options array is defined, it will be extracted from
    '$options' to be used for the hidden input.


*yii/helpers/BaseHtml::activeTextarea*			public
>
 activeTextarea($model, $attribute, $options='[]')
<
return (string) The generated textarea tag

 Generates a textarea tag for the given model attribute.

 The model attribute value will be used as the content in the textarea.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. These
    will be rendered as the attributes of the resulting tag. The values will
    be HTML-encoded using 'encode()'. See 'renderTagAttributes()' for details
    on how attributes are being rendered. The following special options are
    recognized:


      - maxlength: integer|boolean, when 'maxlength' is set true and the
      model attribute is validated   by a string validator, the 'maxlength'
    option will take the value of '\yii\validators\StringValidator::max'.  
    This option is available since version 2.0.6. 
      - placeholder: string|boolean, when 'placeholder' equals 'true', the
      attribute label from the $model will be used   as a placeholder (this
    behavior is available since version 2.0.14).


*yii/helpers/BaseHtml::activeRadio*			public
>
 activeRadio($model, $attribute, $options='[]')
<
return (string) The generated radio button tag

 Generates a radio button tag together with a label for the given model
 attribute.

 This method will generate the "checked" tag attribute according to the model
 attribute value.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. See
    'booleanInput()' for details about accepted attributes.


*yii/helpers/BaseHtml::activeCheckbox*			public
>
 activeCheckbox($model, $attribute, $options='[]')
<
return (string) The generated checkbox tag

 Generates a checkbox tag together with a label for the given model attribute.

 This method will generate the "checked" tag attribute according to the model
 attribute value.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. See
    'booleanInput()' for details about accepted attributes.


*yii/helpers/BaseHtml::activeBooleanInput*		protected
>
 activeBooleanInput($type, $model, $attribute, $options='[]')
<
return (string) The generated input element

 Generates a boolean input This method is mainly called by 'activeCheckbox()'
 and 'activeRadio()'.

    [$type] (string) The input type. This can be either 'radio' or 'checkbox'.
    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$options] (array) The tag options in terms of name-value pairs. See
    'booleanInput()' for details about accepted attributes.


*yii/helpers/BaseHtml::activeDropDownList*		public
>
 activeDropDownList($model, $attribute, $items, $options='[]')
<
return (string) The generated drop-down list tag

 Generates a drop-down list for the given model attribute.

 The selection of the drop-down list is taken from the value of the model
 attribute.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$items] (array) The option data items. The array keys are option values,
    and the array values are the corresponding option labels. The array can
    also be nested (i.e. some array values are arrays too). For each
    sub-array, an option group will be generated whose label is the key
    associated with the sub-array. If you have a list of data models, you may
    convert them into the format described above using
    '\yii\helpers\ArrayHelper::map()'.

    Note, the values and labels will be automatically HTML-encoded by this
    method, and the blank spaces in the labels will also be HTML-encoded.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - prompt: string, a prompt text to be displayed as the first option.
      Since version 2.0.11 you can use an array   to override the value and to
    set other tag attributes:

        ['text' => 'Please select', 'options' => ['value' => 'none', 'class'
    => 'prompt', 'label' => 'Select']],


      - options: array, the attributes for the select option tags. The
      array keys must be valid option values,   and the array values are the
    extra attributes for the corresponding option tags. For example,

        [
            'value1' => ['disabled' => true],
            'value2' => ['label' => 'value 2'],
        ];


      - groups: array, the attributes for the optgroup tags. The structure
      of this is similar to that of 'options',   except that the array keys
    represent the optgroup labels specified in $items. 
      - encodeSpaces: bool, whether to encode spaces in option prompt and
      option value with '&nbsp;' character.   Defaults to false. 
      - encode: bool, whether to encode option prompt and option value
      characters.   Defaults to 'true'. This option is available since 2.0.3.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'encode()'. If a
    value is null, the corresponding attribute will not be rendered. See
    'renderTagAttributes()' for details on how attributes are being rendered.


*yii/helpers/BaseHtml::activeListBox*			public
>
 activeListBox($model, $attribute, $items, $options='[]')
<
return (string) The generated list box tag

 Generates a list box.

 The selection of the list box is taken from the value of the model attribute.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$items] (array) The option data items. The array keys are option values,
    and the array values are the corresponding option labels. The array can
    also be nested (i.e. some array values are arrays too). For each
    sub-array, an option group will be generated whose label is the key
    associated with the sub-array. If you have a list of data models, you may
    convert them into the format described above using
    '\yii\helpers\ArrayHelper::map()'.

    Note, the values and labels will be automatically HTML-encoded by this
    method, and the blank spaces in the labels will also be HTML-encoded.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - prompt: string, a prompt text to be displayed as the first option.
      Since version 2.0.11 you can use an array   to override the value and to
    set other tag attributes:

        ['text' => 'Please select', 'options' => ['value' => 'none', 'class'
    => 'prompt', 'label' => 'Select']],


      - options: array, the attributes for the select option tags. The
      array keys must be valid option values,   and the array values are the
    extra attributes for the corresponding option tags. For example,

        [
            'value1' => ['disabled' => true],
            'value2' => ['label' => 'value 2'],
        ];


      - groups: array, the attributes for the optgroup tags. The structure
      of this is similar to that of 'options',   except that the array keys
    represent the optgroup labels specified in $items. 
      - unselect: string, the value that will be submitted when no option
      is selected.   When this attribute is set, a hidden field will be
    generated so that if no option is selected in multiple   mode, we can
    still obtain the posted unselect value. 
      - encodeSpaces: bool, whether to encode spaces in option prompt and
      option value with '&nbsp;' character.   Defaults to false. 
      - encode: bool, whether to encode option prompt and option value
      characters.   Defaults to 'true'. This option is available since 2.0.3.

    The rest of the options will be rendered as the attributes of the
    resulting tag. The values will be HTML-encoded using 'encode()'. If a
    value is null, the corresponding attribute will not be rendered. See
    'renderTagAttributes()' for details on how attributes are being rendered.


*yii/helpers/BaseHtml::activeCheckboxList*		public
>
 activeCheckboxList($model, $attribute, $items, $options='[]')
<
return (string) The generated checkbox list

 Generates a list of checkboxes.

 A checkbox list allows multiple selection, like 'listBox()'. As a result, the
 corresponding submitted value is an array. The selection of the checkbox list
 is taken from the value of the model attribute.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$items] (array) The data item used to generate the checkboxes. The array
    keys are the checkbox values, and the array values are the corresponding
    labels. Note that the labels will NOT be HTML-encoded, while the values
    will.
    [$options] (array) Options (name => config) for the checkbox list
    container tag. The following options are specially handled:


      - tag: string|false, the tag name of the container element. False to
      render checkbox without container.   See also 'tag()'. 
      - unselect: string, the value that should be submitted when none of
      the checkboxes is selected.   You may set this option to be null to
    prevent default value submission.   If this option is not set, an empty
    string will be submitted. 
      - encode: boolean, whether to HTML-encode the checkbox labels.
      Defaults to true.   This option is ignored if 'item' option is set. 
      - separator: string, the HTML code that separates items. 
      - itemOptions: array, the options for generating the checkbox tag
      using 'checkbox()'. 
      - item: callable, a callback that can be used to customize the
      generation of the HTML code   corresponding to a single item in $items.
    The signature of this callback must be:

        function ($index, $label, $name, $checked, $value)

    where $index is the zero-based index of the checkbox in the whole list;
    $label   is the label for the checkbox; and $name, $value and $checked
    represent the name,   value and the checked status of the checkbox input.

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::activeRadioList*			public
>
 activeRadioList($model, $attribute, $items, $options='[]')
<
return (string) The generated radio button list

 Generates a list of radio buttons.

 A radio button list is like a checkbox list, except that it only allows
 single selection. The selection of the radio buttons is taken from the value
 of the model attribute.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$items] (array) The data item used to generate the radio buttons. The
    array keys are the radio values, and the array values are the
    corresponding labels. Note that the labels will NOT be HTML-encoded, while
    the values will.
    [$options] (array) Options (name => config) for the radio button list
    container tag. The following options are specially handled:


      - tag: string|false, the tag name of the container element. False to
      render radio button without container.   See also 'tag()'. 
      - unselect: string, the value that should be submitted when none of
      the radio buttons is selected.   You may set this option to be null to
    prevent default value submission.   If this option is not set, an empty
    string will be submitted. 
      - encode: boolean, whether to HTML-encode the checkbox labels.
      Defaults to true.   This option is ignored if 'item' option is set. 
      - separator: string, the HTML code that separates items. 
      - itemOptions: array, the options for generating the radio button
      tag using 'radio()'. 
      - item: callable, a callback that can be used to customize the
      generation of the HTML code   corresponding to a single item in $items.
    The signature of this callback must be:

        function ($index, $label, $name, $checked, $value)

    where $index is the zero-based index of the radio button in the whole
    list; $label   is the label for the radio button; and $name, $value and
    $checked represent the name,   value and the checked status of the radio
    button input.

    See 'renderTagAttributes()' for details on how attributes are being
    rendered.


*yii/helpers/BaseHtml::activeListInput*			protected
>
 activeListInput($type, $model, $attribute, $items, $options='[]')
<
return (string) The generated input list

 Generates a list of input fields.

 This method is mainly called by 'activeListBox()', 'activeRadioList()' and
 'activeCheckboxList()'.

    [$type] (string) The input type. This can be 'listBox', 'radioList', or
    'checkBoxList'.
    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for the format about attribute expression.
    [$items] (array) The data item used to generate the input fields. The
    array keys are the input values, and the array values are the
    corresponding labels. Note that the labels will NOT be HTML-encoded, while
    the values will.
    [$options] (array) Options (name => config) for the input list. The
    supported special options depend on the input type specified by '$type'.


*yii/helpers/BaseHtml::renderSelectOptions*		public
>
 renderSelectOptions($selection, $items, $tagOptions='[]')
<
return (string) The generated list options

 Renders the option tags that can be used by 'dropDownList()' and 'listBox()'.

    [$selection] (string|array|null) The selected value(s). String for single
    or array for multiple selection(s).
    [$items] (array) The option data items. The array keys are option values,
    and the array values are the corresponding option labels. The array can
    also be nested (i.e. some array values are arrays too). For each
    sub-array, an option group will be generated whose label is the key
    associated with the sub-array. If you have a list of data models, you may
    convert them into the format described above using
    '\yii\helpers\ArrayHelper::map()'.

    Note, the values and labels will be automatically HTML-encoded by this
    method, and the blank spaces in the labels will also be HTML-encoded.
    [$tagOptions] (array) The $options parameter that is passed to the
    'dropDownList()' or 'listBox()' call. This method will take out these
    elements, if any: "prompt", "options" and "groups". See more details in
    'dropDownList()' for the explanation of these elements.


*yii/helpers/BaseHtml::renderTagAttributes*		public
>
 renderTagAttributes($attributes)
<
return (string) The rendering result. If the attributes are not empty, they will be
rendered into a string with a leading white space (so that it can be directly
appended to the tag name in a tag. If there is no attribute, an empty string
will be returned.

 Renders the HTML tag attributes.

 Attributes whose values are of boolean type will be treated as [boolean
 attributes](http://www.w3.org/TR/html5/infrastructure.html#boolean-attributes).

 Attributes whose values are null will not be rendered.

 The values of attributes will be HTML-encoded using 'encode()'.

 The "data" attribute is specially handled when it is receiving an array
 value. In this case, the array will be "expanded" and a list data attributes
 will be rendered. For example, if ''data' => ['id' => 1, 'name' => 'yii']',
 then this will be rendered: 'data-id="1" data-name="yii"'. Additionally
 ''data' => ['params' => ['id' => 1, 'name' => 'yii'], 'status' => 'ok']' will
 be rendered as: 'data-params='{"id":1,"name":"yii"}' data-status="ok"'.

    [$attributes] (array) Attributes to be rendered. The attribute values will
    be HTML-encoded using 'encode()'.


*yii/helpers/BaseHtml::addCssClass*			public
>
 addCssClass($options, $class)
<
return (void)

 Adds a CSS class (or several classes) to the specified options.

 If the CSS class is already in the options, it will not be added again. If
 class specification at given options is an array, and some class placed there
 with the named (string) key, overriding of such key will have no effect. For
 example:

   $options = ['class' => ['persistent' => 'initial']];
   Html::addCssClass($options, ['persistent' => 'override']);
   var_dump($options['class']); // outputs: array('persistent' => 'initial');



    [$options] (array) The options to be modified.
    [$class] (string|array) The CSS class(es) to be added


*yii/helpers/BaseHtml::removeCssClass*			public
>
 removeCssClass($options, $class)
<
return (void)

 Removes a CSS class from the specified options.

    [$options] (array) The options to be modified.
    [$class] (string|array) The CSS class(es) to be removed


*yii/helpers/BaseHtml::addCssStyle*			public
>
 addCssStyle($options, $style, $overwrite='true')
<
return (void)

 Adds the specified CSS style to the HTML options.

 If the options already contain a 'style' element, the new style will be
 merged with the existing one. If a CSS property exists in both the new and
 the old styles, the old one may be overwritten if '$overwrite' is true.

 For example,

   Html::addCssStyle($options, 'width: 100px; height: 200px');



    [$options] (array) The HTML options to be modified.
    [$style] (string|array) The new style string (e.g. ''width: 100px; height:
    200px'') or array (e.g. '['width' => '100px', 'height' => '200px']').
    [$overwrite] (bool) Whether to overwrite existing CSS properties if the
    new style contain them too.


*yii/helpers/BaseHtml::removeCssStyle*			public
>
 removeCssStyle($options, $properties)
<
return (void)

 Removes the specified CSS style from the HTML options.

 For example,

   Html::removeCssStyle($options, ['width', 'height']);



    [$options] (array) The HTML options to be modified.
    [$properties] (string|array) The CSS properties to be removed. You may use
    a string if you are removing a single property.


*yii/helpers/BaseHtml::cssStyleFromArray*			public
>
 cssStyleFromArray($style)
<
return (string) The CSS style string. If the CSS style is empty, a null will be
returned.

 Converts a CSS style array into a string representation.

 For example,

   print_r(Html::cssStyleFromArray(['width' => '100px', 'height' =>
 '200px']));
   // will display: 'width: 100px; height: 200px;'



    [$style] (array) The CSS style array. The array keys are the CSS property
    names, and the array values are the corresponding CSS property values.


*yii/helpers/BaseHtml::cssStyleToArray*			public
>
 cssStyleToArray($style)
<
return (array) The array representation of the CSS style

 Converts a CSS style string into an array representation.

 The array keys are the CSS property names, and the array values are the
 corresponding CSS property values.

 For example,

   print_r(Html::cssStyleToArray('width: 100px; height: 200px;'));
   // will display: ['width' => '100px', 'height' => '200px']



    [$style] (string) The CSS style string


*yii/helpers/BaseHtml::getAttributeName*			public
>
 getAttributeName($attribute)
<
return (string) The attribute name without prefix and suffix.

 Returns the real attribute name from the given attribute expression.

 An attribute expression is an attribute name prefixed and/or suffixed with
 array indexes. It is mainly used in tabular data input and/or input of array
 type. Below are some examples:


   - '[0]content' is used in tabular data input to represent the
   "content" attribute   for the first model in tabular input; 
   - 'dates[0]' represents the first array element of the "dates"
   attribute; 
   - '[0]dates[0]' represents the first array element of the "dates"
   attribute   for the first model in tabular input.

 If '$attribute' has neither prefix nor suffix, it will be returned back
 without change.

    [$attribute] (string) The attribute name or expression


*yii/helpers/BaseHtml::getAttributeValue*			public
>
 getAttributeValue($model, $attribute)
<
return (string|array) The corresponding attribute value

 Returns the value of the specified attribute name or expression.

 For an attribute expression like '[0]dates[0]', this method will return the
 value of '$model->dates[0]'. See 'getAttributeName()' for more details about
 attribute expression.

 If an attribute value is an instance of 'ActiveRecordInterface' or an array
 of such instances, the primary value(s) of the AR instance(s) will be
 returned instead.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression


*yii/helpers/BaseHtml::getInputName*			public
>
 getInputName($model, $attribute)
<
return (string) The generated input name

 Generates an appropriate input name for the specified attribute name or
 expression.

 This method generates a name that can be used as the input name to collect
 user input for the specified attribute. The name is generated according to
 the 'Model::formName|form name' of the model and the given attribute name.
 For example, if the form name of the 'Post' model is 'Post', then the input
 name generated for the 'content' attribute would be 'Post[content]'.

 See 'getAttributeName()' for explanation of attribute expression.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression


*yii/helpers/BaseHtml::getInputId*			public
>
 getInputId($model, $attribute)
<
return (string) The generated input ID

 Generates an appropriate input ID for the specified attribute name or
 expression.

 This method converts the result 'getInputName()' into a valid input ID. For
 example, if 'getInputName()' returns 'Post[content]', this method will return
 'post-content'.

    [$model] (\yii\base\Model) The model object
    [$attribute] (string) The attribute name or expression. See
    'getAttributeName()' for explanation of attribute expression.


*yii/helpers/BaseHtml::escapeJsRegularExpression*		public
>
 escapeJsRegularExpression($regexp)
<
return (string) The escaped result.

 Escapes regular expression to use in JavaScript.

    [$regexp] (string) The regular expression to be escaped.



 vim:tw=78:ts=8:ft=help:norl:
