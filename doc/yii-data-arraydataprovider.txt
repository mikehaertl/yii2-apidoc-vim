
*yii/data/ArrayDataProvider*   >> |yii/data/BaseDataProvider|
============================

SUBCLASSES
------------------------------------------------------------------------------

|yii/debug/models/timeline/DataProvider|

DESCRIPTION
------------------------------------------------------------------------------

 The 'allModels' property contains all data models that may be sorted and/or
 paginated. ArrayDataProvider will provide the data after sorting and/or
 pagination. You may configure the 'sort' and 'pagination' properties to
 customize the sorting and pagination behaviors.

 Elements in the 'allModels' array may be either objects (e.g. model objects)
 or associative arrays (e.g. query results of DAO). Make sure to set the 'key'
 property to the name of the field that uniquely identifies a data record or
 false if you do not have such a field.

 Compared to 'ActiveDataProvider', ArrayDataProvider could be less efficient
 because it needs to have 'allModels' ready.

 ArrayDataProvider may be used in the following way:

   $query = new Query;
   $provider = new ArrayDataProvider([
       'allModels' => $query->from('post')->all(),
       'sort' => [
           'attributes' => ['id', 'username', 'email'],
       ],
       'pagination' => [
           'pageSize' => 10,
       ],
   ]);
   // get the posts in the current page
   $posts = $provider->getModels();

 Note: if you want to use the sorting feature, you must configure the 'sort'
 property so that the provider knows which columns can be sorted.

 For more details and usage information on ArrayDataProvider, see the [guide
 article on data providers](guide:output-data-providers).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/data/BaseDataProvider::$id|


$key					*yii/data/ArrayDataProvider::$key*

 (string|callable) The column that is used as the key of the data models. This
 can be either a column name, or a callable that returns the key value of a
 given data model. If this is not set, the index of the 'models' array will be
 used.

$allModels				*yii/data/ArrayDataProvider::$allModels*

 (array) The data that is not paginated or sorted. When pagination is enabled,
 this property usually contains more elements than 'models'. The array
 elements must use zero-based integer keys.

$modelClass				*yii/data/ArrayDataProvider::$modelClass*

 (string) The name of the '\yii\base\Model|Model' class that will be
 represented. This property is used to get columns' names.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/data/BaseDataProvider::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/data/BaseDataProvider::prepare|
 |yii/data/BaseDataProvider::getModels|
 |yii/data/BaseDataProvider::setModels|
 |yii/data/BaseDataProvider::getKeys|
 |yii/data/BaseDataProvider::setKeys|
 |yii/data/BaseDataProvider::getCount|
 |yii/data/BaseDataProvider::getTotalCount|
 |yii/data/BaseDataProvider::setTotalCount|
 |yii/data/BaseDataProvider::getPagination|
 |yii/data/BaseDataProvider::setPagination|
 |yii/data/BaseDataProvider::getSort|
 |yii/data/BaseDataProvider::setSort|
 |yii/data/BaseDataProvider::refresh|


*yii/data/ArrayDataProvider::prepareModels*		protected
>
 prepareModels()
<
return (void)

 {@inheritdoc}


*yii/data/ArrayDataProvider::prepareKeys*			protected
>
 prepareKeys($models)
<
return (void)

 {@inheritdoc}

    [$models] () 


*yii/data/ArrayDataProvider::prepareTotalCount*		protected
>
 prepareTotalCount()
<
return (void)

 {@inheritdoc}


*yii/data/ArrayDataProvider::sortModels*			protected
>
 sortModels($models, $sort)
<
return (array) The sorted data models

 Sorts the data models according to the given sort definition.

    [$models] (array) The models to be sorted
    [$sort] (\yii\data\Sort) The sort definition



 vim:tw=78:ts=8:ft=help:norl:
