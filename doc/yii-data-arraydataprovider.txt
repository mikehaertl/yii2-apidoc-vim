
*yii\data\ArrayDataProvider*   >> yii\data\BaseDataProvider
============================

 The [[allModels]] property contains all data models that may be sorted and/or
 paginated. ArrayDataProvider will provide the data after sorting and/or
 pagination. You may configure the [[sort]] and [[pagination]] properties to
 customize the sorting and pagination behaviors.

 Elements in the [[allModels]] array may be either objects (e.g. model
 objects) or associative arrays (e.g. query results of DAO). Make sure to set
 the [[key]] property to the name of the field that uniquely identifies a data
 record or false if you do not have such a field.

 Compared to [[ActiveDataProvider]], ArrayDataProvider could be less efficient
 because it needs to have [[allModels]] ready.

 ArrayDataProvider may be used in the following way:

   $query = new Query;
   $provider = new ArrayDataProvider([
       'allModels' => $query->from('post')->all(),
       'sort' => [
           'attributes' => ['id', 'username', 'email'],
       ],
       'pagination' => [
           'pageSize' => 10,
       ],
   ]);
   // get the posts in the current page
   $posts = $provider->getModels();

 Note: if you want to use the sorting feature, you must configure the [[sort]]
 property so that the provider knows which columns can be sorted.


PROPERTY DETAILS
------------------------------------------------------------------------------

<$id>					*yii.data.ArrayDataProvider::$id*
 See |yii.data.BaseDataProvider::$id|

<$key>					*yii.data.ArrayDataProvider::$key*
 (string|callable) The column that is used as the key of the data models. This
 can be either a column name, or a callable that returns the key value of a
 given data model. If this is not set, the index of the [[models]] array will
 be used.

<$allModels>				*yii.data.ArrayDataProvider::$allModels*
 (array) The data that is not paginated or sorted. When pagination is enabled,
 this property usually contains more elements than [[models]]. The array
 elements must use zero-based integer keys.

<$behaviors>				*yii.data.ArrayDataProvider::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

<$models>				*yii.data.ArrayDataProvider::$models*
 (array) The list of data models in the current page.

<$keys> 				*yii.data.ArrayDataProvider::$keys*
 (array) The list of key values corresponding to [[models]]. Each data model
 in [[models]] is uniquely identified by the corresponding key value in this
 array.

<$count>				*yii.data.ArrayDataProvider::$count*
 (integer) The number of data models in the current page.

<$totalCount>				*yii.data.ArrayDataProvider::$totalCount*
 (integer) Total number of possible data models.

<$pagination>				*yii.data.ArrayDataProvider::$pagination*
 (\yii\data\Pagination|boolean) The pagination object. If this is false, it
 means the pagination is disabled.

<$sort> 				*yii.data.ArrayDataProvider::$sort*
 (\yii\data\Sort|boolean) The sorting object. If this is false, it means the
 sorting is disabled.



METHOD DETAILS
------------------------------------------------------------------------------

*yii.data.ArrayDataProvider::className* 			 public
 See |yii.base.Object::className|


*yii.data.ArrayDataProvider::__construct*			 public
 See |yii.base.Object::__construct|


*yii.data.ArrayDataProvider::init*				 public
 See |yii.base.Object::init|


*yii.data.ArrayDataProvider::__get*				 public
 See |yii.base.Component::__get|


*yii.data.ArrayDataProvider::__set*				 public
 See |yii.base.Component::__set|


*yii.data.ArrayDataProvider::__isset*				 public
 See |yii.base.Component::__isset|


*yii.data.ArrayDataProvider::__unset*				 public
 See |yii.base.Component::__unset|


*yii.data.ArrayDataProvider::__call*				 public
 See |yii.base.Component::__call|


*yii.data.ArrayDataProvider::hasProperty*			 public
 See |yii.base.Component::hasProperty|


*yii.data.ArrayDataProvider::canGetProperty*			 public
 See |yii.base.Component::canGetProperty|


*yii.data.ArrayDataProvider::canSetProperty*			 public
 See |yii.base.Component::canSetProperty|


*yii.data.ArrayDataProvider::hasMethod* 			 public
 See |yii.base.Component::hasMethod|


*yii.data.ArrayDataProvider::__clone*				 public
 See |yii.base.Component::__clone|


*yii.data.ArrayDataProvider::behaviors* 			 public
 See |yii.base.Component::behaviors|


*yii.data.ArrayDataProvider::hasEventHandlers*			 public
 See |yii.base.Component::hasEventHandlers|


*yii.data.ArrayDataProvider::on*				 public
 See |yii.base.Component::on|


*yii.data.ArrayDataProvider::off*				 public
 See |yii.base.Component::off|


*yii.data.ArrayDataProvider::trigger*				 public
 See |yii.base.Component::trigger|


*yii.data.ArrayDataProvider::getBehavior*			 public
 See |yii.base.Component::getBehavior|


*yii.data.ArrayDataProvider::getBehaviors*			 public
 See |yii.base.Component::getBehaviors|


*yii.data.ArrayDataProvider::attachBehavior*			 public
 See |yii.base.Component::attachBehavior|


*yii.data.ArrayDataProvider::attachBehaviors*			 public
 See |yii.base.Component::attachBehaviors|


*yii.data.ArrayDataProvider::detachBehavior*			 public
 See |yii.base.Component::detachBehavior|


*yii.data.ArrayDataProvider::detachBehaviors*			 public
 See |yii.base.Component::detachBehaviors|


*yii.data.ArrayDataProvider::ensureBehaviors*			 public
 See |yii.base.Component::ensureBehaviors|


*yii.data.ArrayDataProvider::prepareModels*			 protected
>
 prepareModels()
<
(array) The available data models




*yii.data.ArrayDataProvider::prepareKeys*			 protected
>
 prepareKeys($models)
<
(array) The keys


    [$models] () 


*yii.data.ArrayDataProvider::prepareTotalCount* 		 protected
>
 prepareTotalCount()
<
(integer) Total number of data models in this data provider.




*yii.data.ArrayDataProvider::prepare*				 public
 See |yii.data.BaseDataProvider::prepare|


*yii.data.ArrayDataProvider::getModels* 			 public
 See |yii.data.BaseDataProvider::getModels|


*yii.data.ArrayDataProvider::setModels* 			 public
 See |yii.data.BaseDataProvider::setModels|


*yii.data.ArrayDataProvider::getKeys*				 public
 See |yii.data.BaseDataProvider::getKeys|


*yii.data.ArrayDataProvider::setKeys*				 public
 See |yii.data.BaseDataProvider::setKeys|


*yii.data.ArrayDataProvider::getCount*				 public
 See |yii.data.BaseDataProvider::getCount|


*yii.data.ArrayDataProvider::getTotalCount*			 public
 See |yii.data.BaseDataProvider::getTotalCount|


*yii.data.ArrayDataProvider::setTotalCount*			 public
 See |yii.data.BaseDataProvider::setTotalCount|


*yii.data.ArrayDataProvider::getPagination*			 public
 See |yii.data.BaseDataProvider::getPagination|


*yii.data.ArrayDataProvider::setPagination*			 public
 See |yii.data.BaseDataProvider::setPagination|


*yii.data.ArrayDataProvider::getSort*				 public
 See |yii.data.BaseDataProvider::getSort|


*yii.data.ArrayDataProvider::setSort*				 public
 See |yii.data.BaseDataProvider::setSort|


*yii.data.ArrayDataProvider::refresh*				 public
 See |yii.data.BaseDataProvider::refresh|


*yii.data.ArrayDataProvider::sortModels*			 protected
>
 sortModels($models, $sort)
<
(array) The sorted data models


    [$models] (array) The models to be sorted
    [$sort] (\yii\data\Sort) The sort definition



 vim:tw=78:ts=8:ft=help:norl:
