
*yii/filters/VerbFilter*   >> |yii/base/Behavior|
========================

DESCRIPTION
------------------------------------------------------------------------------

 It allows to define allowed HTTP request methods for each action and will
 throw an HTTP 405 error when the method is not allowed.

 To use VerbFilter, declare it in the 'behaviors()' method of your controller
 class. For example, the following declarations will define a typical set of
 allowed request methods for REST CRUD actions.

   public function behaviors()
   {
       return [
           'verbs' => [
               'class' => \yii\filters\VerbFilter::className(),
               'actions' => [
                   'index'  => ['GET'],
                   'view'   => ['GET'],
                   'create' => ['GET', 'POST'],
                   'update' => ['GET', 'PUT', 'POST'],
                   'delete' => ['POST', 'DELETE'],
               ],
           ],
       ];
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

$owner					*yii/filters/VerbFilter::$owner*

 See |yii/base/Behavior::$owner|

$actions				*yii/filters/VerbFilter::$actions*

 (array) This property defines the allowed request methods for each action.
 For each action that should only support limited set of request methods you
 add an entry with the action id as array key and an array of allowed methods
 (e.g. GET, HEAD, PUT) as the value. If an action is not listed all request
 methods are considered allowed.

 You can use ''*'' to stand for all actions. When an action is explicitly
 specified, it takes precedence over the specification given by ''*''.

 For example,

   [
     'create' => ['GET', 'POST'],
     'update' => ['GET', 'PUT', 'POST'],
     'delete' => ['POST', 'DELETE'],
     '*' => ['GET'],
   ]





METHOD DETAILS
------------------------------------------------------------------------------


*yii/filters/VerbFilter::className*			public

 See |yii/base/BaseObject::className|


*yii/filters/VerbFilter::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/filters/VerbFilter::init*				public

 See |yii/base/BaseObject::init|


*yii/filters/VerbFilter::__get*				public

 See |yii/base/BaseObject::__get|


*yii/filters/VerbFilter::__set*				public

 See |yii/base/BaseObject::__set|


*yii/filters/VerbFilter::__isset*				public

 See |yii/base/BaseObject::__isset|


*yii/filters/VerbFilter::__unset*				public

 See |yii/base/BaseObject::__unset|


*yii/filters/VerbFilter::__call*				public

 See |yii/base/BaseObject::__call|


*yii/filters/VerbFilter::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/filters/VerbFilter::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/filters/VerbFilter::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/filters/VerbFilter::hasMethod*			public

 See |yii/base/BaseObject::hasMethod|


*yii/filters/VerbFilter::events*				public
>
 events()
<
return (array) Events (array keys) and the corresponding event handler methods (array
values).



*yii/filters/VerbFilter::attach*				public

 See |yii/base/Behavior::attach|


*yii/filters/VerbFilter::detach*				public

 See |yii/base/Behavior::detach|


*yii/filters/VerbFilter::beforeAction*			public
>
 beforeAction($event)
<
return (bool) 

    [$event] (\yii\base\ActionEvent) 



 vim:tw=78:ts=8:ft=help:norl:
