
*yii/queue/db/Queue*   >> |yii/queue/cli/Queue|
====================


PROPERTY DETAILS
------------------------------------------------------------------------------

$strictJobType				*yii/queue/db/Queue::$strictJobType*

 See |yii/queue/Queue::$strictJobType|

$serializer				*yii/queue/db/Queue::$serializer*

 See |yii/queue/Queue::$serializer|

$ttr					*yii/queue/db/Queue::$ttr*

 See |yii/queue/Queue::$ttr|

$attempts				*yii/queue/db/Queue::$attempts*

 See |yii/queue/Queue::$attempts|

$loopConfig				*yii/queue/db/Queue::$loopConfig*

 See |yii/queue/cli/Queue::$loopConfig|

$commandClass				*yii/queue/db/Queue::$commandClass*

 (string) Command class name

$commandOptions				*yii/queue/db/Queue::$commandOptions*

 See |yii/queue/cli/Queue::$commandOptions|

$messageHandler				*yii/queue/db/Queue::$messageHandler*

 See |yii/queue/cli/Queue::$messageHandler|

$db					*yii/queue/db/Queue::$db*

 (\yii\db\Connection|array|string)

$mutex					*yii/queue/db/Queue::$mutex*

 (\yii\mutex\Mutex|array|string)

$mutexTimeout				*yii/queue/db/Queue::$mutexTimeout*

 (int) Timeout

$tableName				*yii/queue/db/Queue::$tableName*

 (string) Table name

$channel				*yii/queue/db/Queue::$channel*

 (string)

$deleteReleased				*yii/queue/db/Queue::$deleteReleased*

 (boolean) Ability to delete released messages from table



METHOD DETAILS
------------------------------------------------------------------------------


*yii/queue/db/Queue::className*				public

 See |yii/base/BaseObject::className|


*yii/queue/db/Queue::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/queue/db/Queue::init*				public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/queue/db/Queue::__get*				public

 See |yii/base/Component::__get|


*yii/queue/db/Queue::__set*				public

 See |yii/base/Component::__set|


*yii/queue/db/Queue::__isset*				public

 See |yii/base/Component::__isset|


*yii/queue/db/Queue::__unset*				public

 See |yii/base/Component::__unset|


*yii/queue/db/Queue::__call*				public

 See |yii/base/Component::__call|


*yii/queue/db/Queue::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/queue/db/Queue::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/queue/db/Queue::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/queue/db/Queue::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/queue/db/Queue::__clone*				public

 See |yii/base/Component::__clone|


*yii/queue/db/Queue::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/queue/db/Queue::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/queue/db/Queue::on*					public

 See |yii/base/Component::on|


*yii/queue/db/Queue::off*					public

 See |yii/base/Component::off|


*yii/queue/db/Queue::trigger*				public

 See |yii/base/Component::trigger|


*yii/queue/db/Queue::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/queue/db/Queue::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/queue/db/Queue::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/queue/db/Queue::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/queue/db/Queue::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/queue/db/Queue::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/queue/db/Queue::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/queue/db/Queue::ttr*					public

 See |yii/queue/Queue::ttr|


*yii/queue/db/Queue::delay*				public

 See |yii/queue/Queue::delay|


*yii/queue/db/Queue::priority*				public

 See |yii/queue/Queue::priority|


*yii/queue/db/Queue::push*				public

 See |yii/queue/Queue::push|


*yii/queue/db/Queue::pushMessage*				protected
>
 pushMessage($message, $ttr, $delay, $priority)
<
return (string) Id of a job message







    [$message] (string) 
    [$ttr] (int) Time to reserve in seconds
    [$delay] (int) 
    [$priority] (mixed) 


*yii/queue/db/Queue::getWorkerPid*			public

 See |yii/queue/cli/Queue::getWorkerPid|


*yii/queue/db/Queue::handleMessage*			protected

 See |yii/queue/cli/Queue::handleMessage|


*yii/queue/db/Queue::handleError*				public

 See |yii/queue/Queue::handleError|


*yii/queue/db/Queue::isWaiting*				public

 See |yii/queue/Queue::isWaiting|


*yii/queue/db/Queue::isReserved*				public

 See |yii/queue/Queue::isReserved|


*yii/queue/db/Queue::isDone*				public

 See |yii/queue/Queue::isDone|


*yii/queue/db/Queue::status*				public
>
 status($id)
<
return (int) Status code







    [$id] (string) Of a job message


*yii/queue/db/Queue::getCommandId*			protected

 See |yii/queue/cli/Queue::getCommandId|


*yii/queue/db/Queue::bootstrap*				public

 See |yii/queue/cli/Queue::bootstrap|


*yii/queue/db/Queue::runWorker*				protected

 See |yii/queue/cli/Queue::runWorker|


*yii/queue/db/Queue::execute*				public

 See |yii/queue/cli/Queue::execute|


*yii/queue/db/Queue::run*					public
>
 run($repeat, $delay=0)
<
return (null|int) Exit code.

 Listens queue and runs each job.

    [$repeat] (bool) Whether to continue listening when queue is empty.
    [$delay] (int) Number of seconds to sleep before next iteration.


*yii/queue/db/Queue::clear*				public
>
 clear()
<
return (void)

 Clears the queue


*yii/queue/db/Queue::remove*				public
>
 remove($id)
<
return (bool) 

 Removes a job by ID

    [$id] (int) Of a job


*yii/queue/db/Queue::reserve*				protected
>
 reserve()
<
return (array|false) Payload

 Takes one message from waiting list and reserves it for handling.


*yii/queue/db/Queue::release*				protected
>
 release($payload)
<
return (void)

    [$payload] (array) 



 vim:tw=78:ts=8:ft=help:norl:
