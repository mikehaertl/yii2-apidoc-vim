
*yii/queue/cli/SignalLoop*   >> |yii/base/BaseObject|
==========================


PROPERTY DETAILS
------------------------------------------------------------------------------


$exitSignals				*yii/queue/cli/SignalLoop::$exitSignals*

 (array) Of signals to exit from listening of the queue.

$suspendSignals				*yii/queue/cli/SignalLoop::$suspendSignals*

 (array) Of signals to suspend listening of the queue. For example: SIGTSTP

$resumeSignals				*yii/queue/cli/SignalLoop::$resumeSignals*

 (array) Of signals to resume listening of the queue. For example: SIGCONT

$queue					*yii/queue/cli/SignalLoop::$queue*

 (\yii\queue\cli\Queue)



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|


*yii/queue/cli/SignalLoop::__construct*			public
>
 __construct($queue, $config='[]')
<
return (void)

 Constructor.



 The default implementation does two things:


   - Initializes the object with the given configuration '$config'. 
   - Call 'init()'.

 If this method is overridden in a child class, it is recommended that


   - the last parameter of the constructor is a configuration array,
   like '$config' here. 
   - call the parent implementation at the end of the constructor.



    [$queue] (\yii\queue\cli\Queue) 
    [$config] (array) Name-value pairs that will be used to initialize the
    object properties


*yii/queue/cli/SignalLoop::init*				public
>
 init()
<
return (void)

 Sets signal handlers.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/queue/cli/SignalLoop::canContinue*			public
>
 canContinue()
<
return (bool) Whether to continue listening of the queue.

 Checks signals state.









 vim:tw=78:ts=8:ft=help:norl:
