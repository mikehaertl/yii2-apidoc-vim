
*yii/helpers/BaseStringHelper*  
==============================

SUBCLASSES
------------------------------------------------------------------------------

|yii/helpers/StringHelper|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseStringHelper. Use 'StringHelper' instead.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/helpers/BaseStringHelper::byteLength*		public
>
 byteLength($string)
<
return (int) The number of bytes in the given string.

 Returns the number of bytes in the given string.

 This method ensures the string is treated as a byte array by using
 'mb_strlen()'.

    [$string] (string) The string being measured for length


*yii/helpers/BaseStringHelper::byteSubstr*		public
>
 byteSubstr($string, $start, $length=null)
<
return (string) The extracted part of string, or FALSE on failure or an empty string.

 Returns the portion of string specified by the start and length parameters.

 This method ensures the string is treated as a byte array by using
 'mb_substr()'.

    [$string] (string) The input string. Must be one character or longer.
    [$start] (int) The starting position
    [$length] (int) The desired portion length. If not specified or 'null',
    there will be no limit on length i.e. the output will be until the end of
    the string.


*yii/helpers/BaseStringHelper::basename*			public
>
 basename($path, $suffix='''')
<
return (string) The trailing name component of the given path.

 Returns the trailing name component of a path.

 This method is similar to the php function 'basename()' except that it will
 treat both \ and / as directory separators, independent of the operating
 system. This method was mainly created to work on php namespaces. When
 working with real file paths, php's 'basename()' should work fine for you.
 Note: this method is not aware of the actual filesystem, or path components
 such as "..".

    [$path] (string) A path string.
    [$suffix] (string) If the name component ends in suffix this will also be
    cut off.


*yii/helpers/BaseStringHelper::dirname*			public
>
 dirname($path)
<
return (string) The parent directory's path.

 Returns parent directory's path.

 This method is similar to 'dirname()' except that it will treat both \ and /
 as directory separators, independent of the operating system.

    [$path] (string) A path string.


*yii/helpers/BaseStringHelper::truncate*			public
>
 truncate($string, $length, $suffix=''...'', $encoding='null', $asHtml='false')
<
return (string) The truncated string.

 Truncates a string to the number of characters specified.

    [$string] (string) The string to truncate.
    [$length] (int) How many characters from original string to include into
    truncated string.
    [$suffix] (string) String to append to the end of truncated string.
    [$encoding] (string) The charset to use, defaults to charset currently
    used by application.
    [$asHtml] (bool) Whether to treat the string being truncated as HTML and
    preserve proper HTML tags. This parameter is available since version
    2.0.1.


*yii/helpers/BaseStringHelper::truncateWords*		public
>
 truncateWords($string, $count, $suffix=''...'', $asHtml='false')
<
return (string) The truncated string.

 Truncates a string to the number of words specified.

    [$string] (string) The string to truncate.
    [$count] (int) How many words from original string to include into
    truncated string.
    [$suffix] (string) String to append to the end of truncated string.
    [$asHtml] (bool) Whether to treat the string being truncated as HTML and
    preserve proper HTML tags. This parameter is available since version
    2.0.1.


*yii/helpers/BaseStringHelper::truncateHtml*		protected
>
 truncateHtml($string, $count, $suffix, $encoding='false')
<
return (string) 

 Truncate a string while preserving the HTML.

    [$string] (string) The string to truncate
    [$count] (int) 
    [$suffix] (string) String to append to the end of the truncated string.
    [$encoding] (string|bool) 


*yii/helpers/BaseStringHelper::startsWith*		public
>
 startsWith($string, $with, $caseSensitive='true')
<
return (bool) Returns true if first input starts with second input, false otherwise

 Check if given string starts with specified substring.

 Binary and multibyte safe.

    [$string] (string) Input string
    [$with] (string) Part to search inside the $string
    [$caseSensitive] (bool) Case sensitive search. Default is true. When case
    sensitive is enabled, $with must exactly match the starting of the string
    in order to get a true value.


*yii/helpers/BaseStringHelper::endsWith*			public
>
 endsWith($string, $with, $caseSensitive='true')
<
return (bool) Returns true if first input ends with second input, false otherwise

 Check if given string ends with specified substring.

 Binary and multibyte safe.

    [$string] (string) Input string to check
    [$with] (string) Part to search inside of the $string.
    [$caseSensitive] (bool) Case sensitive search. Default is true. When case
    sensitive is enabled, $with must exactly match the ending of the string in
    order to get a true value.


*yii/helpers/BaseStringHelper::explode*			public
>
 explode($string, $delimiter='','', $trim='true', $skipEmpty='false')
<
return (array) 

 Explodes string into array, optionally trims values and skips empty ones.

    [$string] (string) String to be exploded.
    [$delimiter] (string) Delimiter. Default is ','.
    [$trim] (mixed) Whether to trim each element. Can be:   
      - boolean - to trim normally;   
      - string - custom characters to trim. Will be passed as a second
      argument to 'trim()' function.   
      - callable - will be called for each value instead of trim. Takes
      the only argument - value.
    [$skipEmpty] (bool) Whether to skip empty strings between delimiters.
    Default is false.


*yii/helpers/BaseStringHelper::countWords*		public
>
 countWords($string)
<
return (int) 

 Counts words in a string.

    [$string] (string) 


*yii/helpers/BaseStringHelper::normalizeNumber*		public
>
 normalizeNumber($value)
<
return (string) 

 Returns string representation of number value with replaced commas to dots,
 if decimal point of current locale is comma.

    [$value] (int|float|string) 


*yii/helpers/BaseStringHelper::base64UrlEncode*		public
>
 base64UrlEncode($input)
<
return (string) Encoded string.

 Encodes string into "Base 64 Encoding with URL and Filename Safe Alphabet"
 (RFC 4648).

 > Note: Base 64 padding '=' may be at the end of the returned string. > '='
 is not transparent to URL encoding.

    [$input] (string) The string to encode.


*yii/helpers/BaseStringHelper::base64UrlDecode*		public
>
 base64UrlDecode($input)
<
return (string) Decoded string.

 Decodes "Base 64 Encoding with URL and Filename Safe Alphabet" (RFC 4648).

    [$input] (string) Encoded string.


*yii/helpers/BaseStringHelper::floatToString*		public
>
 floatToString($number)
<
return (string) The string representation of the number.

 Safely casts a float to string independent of the current locale.

 The decimal separator will always be '.'.

    [$number] (float|int) A floating point number or integer.



 vim:tw=78:ts=8:ft=help:norl:
