
*yii/db/ActiveQueryInterface*  
=============================

DESCRIPTION
------------------------------------------------------------------------------

 That are methods for either normal queries that return active records but
 also relational queries in which the query represents a relation between two
 active record classes and will return related records only.

 A class implementing this interface should also use 'ActiveQueryTrait' and
 'ActiveRelationTrait'.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/ActiveQueryInterface::all*			public

 See |yii/db/QueryInterface::all|


*yii/db/ActiveQueryInterface::one*			public
>
 one($db='null')
<
return (\yii\db\ActiveRecordInterface|array|null) A single row of query result.
Depending on the setting of 'asArray', the query result may be either an array
or an ActiveRecord object. 'null' will be returned if the query results in
nothing.

 Executes query and returns a single row of result.

    [$db] (\yii\db\Connection) The DB connection used to create the DB
    command. If 'null', the DB connection returned by
    'ActiveQueryTrait::$modelClass|modelClass' will be used.


*yii/db/ActiveQueryInterface::count*			public

 See |yii/db/QueryInterface::count|


*yii/db/ActiveQueryInterface::exists*			public

 See |yii/db/QueryInterface::exists|


*yii/db/ActiveQueryInterface::indexBy*			public
>
 indexBy($column)
<
return ($this) The query object itself

 Sets the 'indexBy' property.

    [$column] (string|callable) The name of the column by which the query
    results should be indexed by. This can also be a callable (e.g. anonymous
    function) that returns the index value based on the given row or model
    data. The signature of the callable should be:

      // $model is an AR instance when `asArray` is false,
      // or an array of column values when `asArray` is true.
      function ($model)
      {
          // return the index value corresponding to $model
      }




*yii/db/ActiveQueryInterface::where*			public

 See |yii/db/QueryInterface::where|


*yii/db/ActiveQueryInterface::andWhere*			public

 See |yii/db/QueryInterface::andWhere|


*yii/db/ActiveQueryInterface::orWhere*			public

 See |yii/db/QueryInterface::orWhere|


*yii/db/ActiveQueryInterface::filterWhere*		public

 See |yii/db/QueryInterface::filterWhere|


*yii/db/ActiveQueryInterface::andFilterWhere*		public

 See |yii/db/QueryInterface::andFilterWhere|


*yii/db/ActiveQueryInterface::orFilterWhere*		public

 See |yii/db/QueryInterface::orFilterWhere|


*yii/db/ActiveQueryInterface::orderBy*			public

 See |yii/db/QueryInterface::orderBy|


*yii/db/ActiveQueryInterface::addOrderBy*			public

 See |yii/db/QueryInterface::addOrderBy|


*yii/db/ActiveQueryInterface::limit*			public

 See |yii/db/QueryInterface::limit|


*yii/db/ActiveQueryInterface::offset*			public

 See |yii/db/QueryInterface::offset|


*yii/db/ActiveQueryInterface::emulateExecution*		public

 See |yii/db/QueryInterface::emulateExecution|


*yii/db/ActiveQueryInterface::asArray*			public
>
 asArray($value='true')
<
return ($this) The query object itself

 Sets the 'asArray' property.

    [$value] (bool) Whether to return the query results in terms of arrays
    instead of Active Records.


*yii/db/ActiveQueryInterface::with*			public
>
 with()
<
return ($this) The query object itself

 Specifies the relations with which this query should be performed.

 The parameters to this method can be either one or multiple strings, or a
 single array of relation names and the optional callbacks to customize the
 relations.

 A relation name can refer to a relation defined in
 'ActiveQueryTrait::modelClass|modelClass' or a sub-relation that stands for a
 relation of a related record. For example, 'orders.address' means the
 'address' relation defined in the model class corresponding to the 'orders'
 relation.

 The following are some usage examples:

   // find customers together with their orders and country
   Customer::find()->with('orders', 'country')->all();
   // find customers together with their orders and the orders' shipping
 address
   Customer::find()->with('orders.address')->all();
   // find customers together with their country and orders of status 1
   Customer::find()->with([
       'orders' => function (\yii\db\ActiveQuery $query) {
           $query->andWhere('status = 1');
       },
       'country',
   ])->all();




*yii/db/ActiveQueryInterface::via*			public
>
 via($relationName, $callable='null')
<
return ($this) The relation object itself.

 Specifies the relation associated with the junction table for use in
 relational query.

    [$relationName] (string) The relation name. This refers to a relation
    declared in the 'ActiveRelationTrait::primaryModel|primaryModel' of the
    relation.
    [$callable] (callable) A PHP callback for customizing the relation
    associated with the junction table. Its signature should be
    'function($query)', where '$query' is the query to be customized.


*yii/db/ActiveQueryInterface::findFor*			public
>
 findFor($name, $model)
<
return (mixed) The related record(s)

 Finds the related records for the specified primary record.

 This method is invoked when a relation of an ActiveRecord is being accessed
 in a lazy fashion.

    [$name] (string) The relation name
    [$model] (\yii\db\ActiveRecordInterface) The primary model



 vim:tw=78:ts=8:ft=help:norl:
