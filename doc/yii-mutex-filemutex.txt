
*yii/mutex/FileMutex*   >> |yii/mutex/Mutex|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 This component relies on PHP 'flock()' function.

 Application configuration example:

 ''' [     'components' => [         'mutex'=> [             'class' =>
 'yii\mutex\FileMutex'         ],     ], ] '''

 Note: this component can maintain the locks only for the single web server,
 it probably will not suffice to your in case you are using cloud server
 solution.

 Warning: due to 'flock()' function nature this component is unreliable when
 using a multithreaded server API like ISAPI.


PROPERTY DETAILS
------------------------------------------------------------------------------

$autoRelease				*yii/mutex/FileMutex::$autoRelease*
 See |yii/mutex/Mutex::$autoRelease|

$mutexPath				*yii/mutex/FileMutex::$mutexPath*
 (string) The directory to store mutex files. You may use path alias here.
 Defaults to the "mutex" subdirectory under the application runtime path.

$fileMode				*yii/mutex/FileMutex::$fileMode*
 (integer) The permission to be set for newly created mutex files. This value
 will be used by PHP chmod() function. No umask will be applied. If not set,
 the permission will be determined by the current environment.

$dirMode				*yii/mutex/FileMutex::$dirMode*
 (integer) The permission to be set for newly created directories. This value
 will be used by PHP chmod() function. No umask will be applied. Defaults to
 0775, meaning the directory is read-writable by owner and group, but
 read-only for other users.

$behaviors				*yii/mutex/FileMutex::$behaviors*
 See |yii/base/Component::$behaviors|



METHOD DETAILS
------------------------------------------------------------------------------

*yii/mutex/FileMutex::className*				public
 See |yii/base/Object::className|


*yii/mutex/FileMutex::__construct*			public
 See |yii/base/Object::__construct|


*yii/mutex/FileMutex::init*				public
>
 init()
<
(void)



*yii/mutex/FileMutex::__get*				public
 See |yii/base/Component::__get|


*yii/mutex/FileMutex::__set*				public
 See |yii/base/Component::__set|


*yii/mutex/FileMutex::__isset*				public
 See |yii/base/Component::__isset|


*yii/mutex/FileMutex::__unset*				public
 See |yii/base/Component::__unset|


*yii/mutex/FileMutex::__call*				public
 See |yii/base/Component::__call|


*yii/mutex/FileMutex::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/mutex/FileMutex::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/mutex/FileMutex::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/mutex/FileMutex::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/mutex/FileMutex::__clone*				public
 See |yii/base/Component::__clone|


*yii/mutex/FileMutex::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/mutex/FileMutex::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/mutex/FileMutex::on*					public
 See |yii/base/Component::on|


*yii/mutex/FileMutex::off*				public
 See |yii/base/Component::off|


*yii/mutex/FileMutex::trigger*				public
 See |yii/base/Component::trigger|


*yii/mutex/FileMutex::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/mutex/FileMutex::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/mutex/FileMutex::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/mutex/FileMutex::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/mutex/FileMutex::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/mutex/FileMutex::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/mutex/FileMutex::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/mutex/FileMutex::acquire*				public
 See |yii/mutex/Mutex::acquire|


*yii/mutex/FileMutex::release*				public
 See |yii/mutex/Mutex::release|


*yii/mutex/FileMutex::acquireLock*			protected
>
 acquireLock($name, $timeout=0)
<
(boolean) Acquiring result.

    [$name] (string) Of the lock to be acquired.
    [$timeout] (integer) To wait for lock to become released.


*yii/mutex/FileMutex::releaseLock*			protected
>
 releaseLock($name)
<
(boolean) Release result.

    [$name] (string) Of the lock to be released.



 vim:tw=78:ts=8:ft=help:norl:
