
*yii/mutex/FileMutex*   >> |yii/mutex/Mutex|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 This component relies on PHP 'flock()' function.

 Application configuration example:

   [
       'components' => [
           'mutex' => [
               'class' => 'yii\mutex\FileMutex'
           ],
       ],
   ]

 > Note: this component can maintain the locks only for the single web server,
 > it probably will not suffice in case you are using cloud server solution.

 > Warning: due to 'flock()' function nature this component is unreliable when
 > using a multithreaded server API like ISAPI.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/mutex/Mutex::$autoRelease|


$mutexPath				*yii/mutex/FileMutex::$mutexPath*

 (string) The directory to store mutex files. You may use [path
 alias](guide:concept-aliases) here. Defaults to the "mutex" subdirectory
 under the application runtime path.

$fileMode				*yii/mutex/FileMutex::$fileMode*

 (int) The permission to be set for newly created mutex files. This value will
 be used by PHP chmod() function. No umask will be applied. If not set, the
 permission will be determined by the current environment.

$dirMode				*yii/mutex/FileMutex::$dirMode*

 (int) The permission to be set for newly created directories. This value will
 be used by PHP chmod() function. No umask will be applied. Defaults to 0775,
 meaning the directory is read-writable by owner and group, but read-only for
 other users.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/mutex/Mutex::acquire|
 |yii/mutex/Mutex::release|


*yii/mutex/FileMutex::init*				public
>
 init()
<
return (void)

 Initializes mutex component implementation dedicated for UNIX, GNU/Linux, Mac
 OS X, and other UNIX-like operating systems.


*yii/mutex/FileMutex::acquireLock*			protected
>
 acquireLock($name, $timeout=0)
<
return (bool) Acquiring result.

 Acquires lock by given name.

    [$name] (string) Of the lock to be acquired.
    [$timeout] (int) Time (in seconds) to wait for lock to become released.


*yii/mutex/FileMutex::releaseLock*			protected
>
 releaseLock($name)
<
return (bool) Release result.

 Releases lock by given name.

    [$name] (string) Of the lock to be released.


*yii/mutex/FileMutex::getLockFilePath*			protected
>
 getLockFilePath($name)
<
return (string) 

 Generate path for lock file.

    [$name] (string) 



 vim:tw=78:ts=8:ft=help:norl:
