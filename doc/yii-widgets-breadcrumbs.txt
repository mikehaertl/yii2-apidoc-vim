
*yii/widgets/Breadcrumbs*   >> |yii/base/Widget|
=========================

DESCRIPTION
------------------------------------------------------------------------------

 For example, breadcrumbs like "Home / Sample Post / Edit" means the user is
 viewing an edit page for the "Sample Post". He can click on "Sample Post" to
 view that page, or he can click on "Home" to return to the homepage.

 To use Breadcrumbs, you need to configure its 'links' property, which
 specifies the links to be displayed. For example,

   // $this is the view object currently being used
   echo Breadcrumbs::widget([
       'itemTemplate' => "<li><i>{link}</i></li>\n", // template for all links
       'links' => [
           [
               'label' => 'Post Category',
               'url' => ['post-category/view', 'id' => 10],
               'template' => "<li><b>{link}</b></li>\n", // template for this
 link only
           ],
           ['label' => 'Sample Post', 'url' => ['post/edit', 'id' => 1]],
           'Edit',
       ],
   ]);

 Because breadcrumbs usually appears in nearly every page of a website, you
 may consider placing it in a layout view. You can use a view parameter (e.g.
 '$this->params['breadcrumbs']') to configure the links in different views. In
 the layout view, you assign this view parameter to the 'links' property like
 the following:

   // $this is the view object currently being used
   echo Breadcrumbs::widget([
       'links' => isset($this->params['breadcrumbs']) ?
 $this->params['breadcrumbs'] : [],
   ]);




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Widget::$counter|
 |yii/base/Widget::$autoIdPrefix|
 |yii/base/Widget::$stack|
 |yii/base/Component::$behaviors|
 |yii/base/Widget::$id|
 |yii/base/Widget::$view|
 |yii/base/Widget::$viewPath|


$tag					*yii/widgets/Breadcrumbs::$tag*

 (string) The name of the breadcrumb container tag.

$options				*yii/widgets/Breadcrumbs::$options*

 (array) The HTML attributes for the breadcrumb container tag.

$encodeLabels				*yii/widgets/Breadcrumbs::$encodeLabels*

 (bool) Whether to HTML-encode the link labels.

$homeLink				*yii/widgets/Breadcrumbs::$homeLink*

 (array) The first hyperlink in the breadcrumbs (called home link). Please
 refer to 'links' on the format of the link. If this property is not set, it
 will default to a link pointing to '\yii\web\Application::homeUrl' with the
 label 'Home'. If this property is false, the home link will not be rendered.

$links					*yii/widgets/Breadcrumbs::$links*

 (array) List of links to appear in the breadcrumbs. If this property is
 empty, the widget will not render anything. Each array element represents a
 single link in the breadcrumbs with the following structure:

   [
       'label' => 'label of the link',  // required
       'url' => 'url of the link',      // optional, will be processed by
 Url::to()
       'template' => 'own template of the item', // optional, if not set
 $this->itemTemplate will be used
   ]

 If a link is active, you only need to specify its "label", and instead of
 writing '['label' => $label]', you may simply use '$label'.

 Since version 2.0.1, any additional array elements for each link will be
 treated as the HTML attributes for the hyperlink tag. For example, the
 following link specification will generate a hyperlink with CSS class
 'external':

   [
       'label' => 'demo',
       'url' => 'http://example.com',
       'class' => 'external',
   ]

 Since version 2.0.3 each individual link can override global 'encodeLabels'
 param like the following:

   [
       'label' => '<strong>Hello!</strong>',
       'encode' => false,
   ]



$itemTemplate				*yii/widgets/Breadcrumbs::$itemTemplate*

 (string) The template used to render each inactive item in the breadcrumbs.
 The token '{link}' will be replaced with the actual HTML link for each
 inactive item.

$activeItemTemplate			*yii/widgets/Breadcrumbs::$activeItemTemplate*

 (string) The template used to render each active item in the breadcrumbs. The
 token '{link}' will be replaced with the actual HTML link for each active
 item.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Widget::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Widget::begin|
 |yii/base/Widget::end|
 |yii/base/Widget::widget|
 |yii/base/Widget::getId|
 |yii/base/Widget::setId|
 |yii/base/Widget::getView|
 |yii/base/Widget::setView|
 |yii/base/Widget::render|
 |yii/base/Widget::renderFile|
 |yii/base/Widget::getViewPath|
 |yii/base/Widget::beforeRun|
 |yii/base/Widget::afterRun|


*yii/widgets/Breadcrumbs::run*				public
>
 run()
<
return (void)

 Renders the widget.


*yii/widgets/Breadcrumbs::renderItem*			protected
>
 renderItem($link, $template)
<
return (string) The rendering result

 Renders a single breadcrumb item.

    [$link] (array) The link to be rendered. It must contain the "label"
    element. The "url" element is optional.
    [$template] (string) The template to be used to rendered the link. The
    token "{link}" will be replaced by the link.



 vim:tw=78:ts=8:ft=help:norl:
