
*yii/mongodb/console/controllers/MigrateController*   >> |yii/console/controllers/BaseMigrateController|
===================================================

DESCRIPTION
------------------------------------------------------------------------------

 This is an analog of '\yii\console\controllers\MigrateController' for
 MongoDB.

 This command provides support for tracking the migration history, upgrading
 or downloading with migrations, and creating new migration skeletons.

 The migration history is stored in a MongoDB collection named as
 'migrationCollection'. This collection will be automatically created the
 first time this command is executed, if it does not exist.

 In order to enable this command you should adjust the configuration of your
 console application:

   return [
       // ...
       'controllerMap' => [
           'mongodb-migrate' =>
 'yii\mongodb\console\controllers\MigrateController'
       ],
   ];

 Below are some common usages of this command:

   # creates a new migration named 'create_user_collection'
   yii mongodb-migrate/create create_user_collection

   # applies ALL new migrations
   yii mongodb-migrate

   # reverts the last applied migration
   yii mongodb-migrate/down

 Since 2.1.2, in case of usage Yii version >= 2.0.10, you can use namespaced
 migrations. In order to enable this feature you should configure
 'migrationNamespaces' property for the controller at application
 configuration:

   return [
       'controllerMap' => [
           'mongodb-migrate' => [
               'class' => 'yii\mongodb\console\controllers\MigrateController',
               'migrationNamespaces' => [
                   'app\migrations',
                   'some\extension\migrations',
               ],
               //'migrationPath' => null, // allows to disable not namespaced
 migration completely
           ],
       ],
   ];




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Controller::$id|
 |yii/base/Controller::$module|
 |yii/console/controllers/BaseMigrateController::$defaultAction|
 |yii/base/Controller::$layout|
 |yii/base/Controller::$action|
 |yii/console/Controller::$interactive|
 |yii/console/Controller::$color|
 |yii/console/Controller::$help|
 |yii/console/controllers/BaseMigrateController::$migrationPath|
 |yii/console/controllers/BaseMigrateController::$migrationNamespaces|
 |yii/console/controllers/BaseMigrateController::$compact|
 |yii/base/Component::$behaviors|
 |yii/base/Controller::$modules|
 |yii/base/Controller::$uniqueId|
 |yii/base/Controller::$route|
 |yii/base/Controller::$view|
 |yii/base/ViewContextInterface::$viewPath|
 |yii/console/Controller::$passedOptions|
 |yii/console/Controller::$passedOptionValues|
 |yii/console/Controller::$helpSummary|


$templateFile				*yii/mongodb/console/controllers/MigrateController::$templateFile*

 (string) 

 The template file for generating new migrations. This can be either a [path
 alias](guide:concept-aliases) (e.g. "@app/migrations/template.php") or a file
 path.



$migrationCollection			*yii/mongodb/console/controllers/MigrateController::$migrationCollection*

 (string|array) The name of the collection for keeping applied migration
 information.

$db					*yii/mongodb/console/controllers/MigrateController::$db*

 (\yii\mongodb\Connection|string) The DB connection object or the application
 component ID of the DB connection.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Controller::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Controller::actions|
 |yii/console/Controller::runAction|
 |yii/base/Controller::run|
 |yii/console/Controller::bindActionParams|
 |yii/base/Controller::createAction|
 |yii/base/Controller::afterAction|
 |yii/base/Controller::getModules|
 |yii/base/Controller::getUniqueId|
 |yii/base/Controller::getRoute|
 |yii/base/Controller::render|
 |yii/base/Controller::renderContent|
 |yii/base/Controller::renderPartial|
 |yii/base/Controller::renderFile|
 |yii/base/Controller::getView|
 |yii/base/Controller::setView|
 |yii/base/ViewContextInterface::getViewPath|
 |yii/base/Controller::setViewPath|
 |yii/base/Controller::findLayoutFile|
 |yii/console/Controller::isColorEnabled|
 |yii/console/Controller::ansiFormat|
 |yii/console/Controller::stdout|
 |yii/console/Controller::stderr|
 |yii/console/Controller::prompt|
 |yii/console/Controller::confirm|
 |yii/console/Controller::select|
 |yii/console/Controller::optionAliases|
 |yii/console/Controller::getOptionValues|
 |yii/console/Controller::getPassedOptions|
 |yii/console/Controller::getPassedOptionValues|
 |yii/console/Controller::getHelpSummary|
 |yii/console/Controller::getHelp|
 |yii/console/Controller::getActionHelpSummary|
 |yii/console/Controller::getActionHelp|
 |yii/console/Controller::getActionArgsHelp|
 |yii/console/Controller::getActionOptionsHelp|
 |yii/console/Controller::getActionMethodReflection|
 |yii/console/Controller::parseDocCommentTags|
 |yii/console/Controller::parseDocCommentSummary|
 |yii/console/Controller::parseDocCommentDetail|
 |yii/console/controllers/BaseMigrateController::actionUp|
 |yii/console/controllers/BaseMigrateController::actionDown|
 |yii/console/controllers/BaseMigrateController::actionRedo|
 |yii/console/controllers/BaseMigrateController::actionTo|
 |yii/console/controllers/BaseMigrateController::actionMark|
 |yii/console/controllers/BaseMigrateController::actionFresh|
 |yii/console/controllers/BaseMigrateController::actionHistory|
 |yii/console/controllers/BaseMigrateController::actionNew|
 |yii/console/controllers/BaseMigrateController::actionCreate|
 |yii/console/controllers/BaseMigrateController::migrateUp|
 |yii/console/controllers/BaseMigrateController::migrateDown|
 |yii/console/controllers/BaseMigrateController::includeMigrationFile|
 |yii/console/controllers/BaseMigrateController::migrateToTime|
 |yii/console/controllers/BaseMigrateController::migrateToVersion|
 |yii/console/controllers/BaseMigrateController::getNewMigrations|
 |yii/console/controllers/BaseMigrateController::generateMigrationSourceCode|
 |yii/console/controllers/BaseMigrateController::getMigrationNameLimit|


*yii/mongodb/console/controllers/MigrateController::beforeAction*public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to be executed.

 This method is invoked right before an action is to be executed (after all
 possible filters.) It checks the existence of the 'migrationPath'.

    [$action] (\yii\base\Action) The action to be executed.


*yii/mongodb/console/controllers/MigrateController::options*public
>
 options($actionID)
<
return (string[]) The names of the options valid for the action

 Returns the names of valid options for the action (id) An option requires the
 existence of a public member variable whose name is the option name.



 Child classes may override this method to specify possible options.

 Note that the values setting via options are not available until
 'beforeAction()' is being called.



    [$actionID] (string) The action id of the current request


*yii/mongodb/console/controllers/MigrateController::createMigration*protected
>
 createMigration($class)
<
return (\yii\mongodb\Migration) The migration instance

 Creates a new migration instance.

    [$class] (string) The migration class name


*yii/mongodb/console/controllers/MigrateController::truncateDatabase*protected
>
 truncateDatabase()
<
return (void)

 Truncates the database.



 This method should be overwritten in subclasses to implement the task of
 clearing the database.




*yii/mongodb/console/controllers/MigrateController::getMigrationHistory*protected
>
 getMigrationHistory($limit)
<
return (array) The migration history

 Returns the migration history.







    [$limit] (int) The maximum number of records in the history to be
    returned. 'null' for "no limit".


*yii/mongodb/console/controllers/MigrateController::addMigrationHistory*protected
>
 addMigrationHistory($version)
<
return (void)

 Adds new migration entry to the history.







    [$version] (string) Migration version name.


*yii/mongodb/console/controllers/MigrateController::removeMigrationHistory*protected
>
 removeMigrationHistory($version)
<
return (void)

 Removes existing migration from the history.







    [$version] (string) Migration version name.


*yii/mongodb/console/controllers/MigrateController::ensureBaseMigrationHistory*protected
>
 ensureBaseMigrationHistory()
<
return (void)

 Ensures migration history contains at least base migration entry.



 vim:tw=78:ts=8:ft=help:norl:
