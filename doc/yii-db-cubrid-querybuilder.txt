
*yii/db/cubrid/QueryBuilder*   >> |yii/db/QueryBuilder|
============================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/QueryBuilder::$db|
 |yii/db/QueryBuilder::$separator|
 |yii/db/QueryBuilder::$conditionBuilders|
 |yii/db/QueryBuilder::$conditionClasses|
 |yii/db/QueryBuilder::$expressionBuilders|


$typeMap				*yii/db/cubrid/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/db/QueryBuilder::__construct|
 |yii/db/QueryBuilder::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/db/QueryBuilder::defaultConditionClasses|
 |yii/db/QueryBuilder::setExpressionBuilders|
 |yii/db/QueryBuilder::setConditionClasses|
 |yii/db/QueryBuilder::build|
 |yii/db/QueryBuilder::buildExpression|
 |yii/db/QueryBuilder::getExpressionBuilder|
 |yii/db/QueryBuilder::insert|
 |yii/db/QueryBuilder::prepareInsertValues|
 |yii/db/QueryBuilder::prepareInsertSelectSubQuery|
 |yii/db/QueryBuilder::batchInsert|
 |yii/db/QueryBuilder::prepareUpsertColumns|
 |yii/db/QueryBuilder::update|
 |yii/db/QueryBuilder::prepareUpdateSets|
 |yii/db/QueryBuilder::delete|
 |yii/db/QueryBuilder::createTable|
 |yii/db/QueryBuilder::renameTable|
 |yii/db/QueryBuilder::dropTable|
 |yii/db/QueryBuilder::addPrimaryKey|
 |yii/db/QueryBuilder::dropPrimaryKey|
 |yii/db/QueryBuilder::truncateTable|
 |yii/db/QueryBuilder::addColumn|
 |yii/db/QueryBuilder::dropColumn|
 |yii/db/QueryBuilder::renameColumn|
 |yii/db/QueryBuilder::alterColumn|
 |yii/db/QueryBuilder::addForeignKey|
 |yii/db/QueryBuilder::dropForeignKey|
 |yii/db/QueryBuilder::createIndex|
 |yii/db/QueryBuilder::addUnique|
 |yii/db/QueryBuilder::dropUnique|
 |yii/db/QueryBuilder::addDefaultValue|
 |yii/db/QueryBuilder::dropDefaultValue|
 |yii/db/QueryBuilder::checkIntegrity|
 |yii/db/QueryBuilder::createView|
 |yii/db/QueryBuilder::dropView|
 |yii/db/QueryBuilder::getColumnType|
 |yii/db/QueryBuilder::buildSelect|
 |yii/db/QueryBuilder::buildFrom|
 |yii/db/QueryBuilder::buildJoin|
 |yii/db/QueryBuilder::buildWhere|
 |yii/db/QueryBuilder::buildGroupBy|
 |yii/db/QueryBuilder::buildHaving|
 |yii/db/QueryBuilder::buildOrderByAndLimit|
 |yii/db/QueryBuilder::buildOrderBy|
 |yii/db/QueryBuilder::hasLimit|
 |yii/db/QueryBuilder::hasOffset|
 |yii/db/QueryBuilder::buildUnion|
 |yii/db/QueryBuilder::buildColumns|
 |yii/db/QueryBuilder::buildCondition|
 |yii/db/QueryBuilder::createConditionFromArray|
 |yii/db/QueryBuilder::buildHashCondition|
 |yii/db/QueryBuilder::buildAndCondition|
 |yii/db/QueryBuilder::buildNotCondition|
 |yii/db/QueryBuilder::buildBetweenCondition|
 |yii/db/QueryBuilder::buildInCondition|
 |yii/db/QueryBuilder::buildLikeCondition|
 |yii/db/QueryBuilder::buildExistsCondition|
 |yii/db/QueryBuilder::buildSimpleCondition|
 |yii/db/QueryBuilder::bindParam|


*yii/db/cubrid/QueryBuilder::defaultExpressionBuilders*	protected
>
 defaultExpressionBuilders()
<
return (void)

 {@inheritdoc}


*yii/db/cubrid/QueryBuilder::upsert*			public
>
 upsert($table, $insertColumns, $updateColumns, $params)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$insertColumns] () 
    [$updateColumns] () 
    [$params] () 


*yii/db/cubrid/QueryBuilder::dropIndex*			public
>
 dropIndex($name, $table)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 


*yii/db/cubrid/QueryBuilder::addCheck*			public
>
 addCheck($name, $table, $expression)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 
    [$expression] () 


*yii/db/cubrid/QueryBuilder::dropCheck*			public
>
 dropCheck($name, $table)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 


*yii/db/cubrid/QueryBuilder::resetSequence*		public
>
 resetSequence($tableName, $value='null')
<
return (string) The SQL statement for resetting sequence

 Creates a SQL statement for resetting the sequence value of a table's primary
 key.

 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.

    [$tableName] (string) The name of the table whose primary key sequence
    will be reset
    [$value] (mixed) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/cubrid/QueryBuilder::addCommentOnColumn*		public
>
 addCommentOnColumn($table, $column, $comment)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$column] () 
    [$comment] () 


*yii/db/cubrid/QueryBuilder::addCommentOnTable*		public
>
 addCommentOnTable($table, $comment)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$comment] () 


*yii/db/cubrid/QueryBuilder::dropCommentFromColumn*	public
>
 dropCommentFromColumn($table, $column)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$column] () 


*yii/db/cubrid/QueryBuilder::dropCommentFromTable*	public
>
 dropCommentFromTable($table)
<
return (void)

 {@inheritdoc}

    [$table] () 


*yii/db/cubrid/QueryBuilder::buildLimit*			public
>
 buildLimit($limit, $offset)
<
return (void)

 {@inheritdoc}

    [$limit] () 
    [$offset] () 


*yii/db/cubrid/QueryBuilder::selectExists*		public
>
 selectExists($rawSql)
<
return (void)

 {@inheritdoc}

    [$rawSql] () 



 vim:tw=78:ts=8:ft=help:norl:
