
*yii\validators\ExistValidator*   >> yii\validators\Validator
===============================

 ExistValidator checks if the value being validated can be found in the table
 column specified by the ActiveRecord class [[targetClass]] and the attribute
 [[targetAttribute]].

 This validator is often used to verify that a foreign key contains a value
 that can be found in the foreign table.

 The followings are examples of validation rules using this validator:

   // a1 needs to exist
   ['a1', 'exist']
   // a1 needs to exist, but its value will use a2 to check for the existence
   ['a1', 'exist', 'targetAttribute' => 'a2']
   // a1 and a2 need to exist together, and they both will receive error
 message
   [['a1', 'a2'], 'exist', 'targetAttribute' => ['a1', 'a2']]
   // a1 and a2 need to exist together, only a1 will receive error message
   ['a1', 'exist', 'targetAttribute' => ['a1', 'a2']]
   // a1 needs to exist by checking the existence of both a2 and a3 (using a1
 value)
   ['a1', 'exist', 'targetAttribute' => ['a2', 'a1' => 'a3']]




PROPERTY DETAILS
------------------------------------------------------------------------------

<$builtInValidators>			*yii\validators\ExistValidator::$builtInValidators*
 See |yii\validators\Validator::$builtInValidators|

<$attributes>				*yii\validators\ExistValidator::$attributes*
 See |yii\validators\Validator::$attributes|

<$message>				*yii\validators\ExistValidator::$message*
 See |yii\validators\Validator::$message|

<$on>					*yii\validators\ExistValidator::$on*
 See |yii\validators\Validator::$on|

<$except>				*yii\validators\ExistValidator::$except*
 See |yii\validators\Validator::$except|

<$skipOnError>				*yii\validators\ExistValidator::$skipOnError*
 See |yii\validators\Validator::$skipOnError|

<$skipOnEmpty>				*yii\validators\ExistValidator::$skipOnEmpty*
 See |yii\validators\Validator::$skipOnEmpty|

<$enableClientValidation>		*yii\validators\ExistValidator::$enableClientValidation*
 See |yii\validators\Validator::$enableClientValidation|

<$isEmpty>				*yii\validators\ExistValidator::$isEmpty*
 See |yii\validators\Validator::$isEmpty|

<$when> 				*yii\validators\ExistValidator::$when*
 See |yii\validators\Validator::$when|

<$whenClient>				*yii\validators\ExistValidator::$whenClient*
 See |yii\validators\Validator::$whenClient|

<$targetClass>				*yii\validators\ExistValidator::$targetClass*
 (string) The name of the ActiveRecord class that should be used to validate
 the existence of the current attribute value. It not set, it will use the
 ActiveRecord class of the attribute being validated.

<$targetAttribute>			*yii\validators\ExistValidator::$targetAttribute*
 (string|array) The name of the ActiveRecord attribute that should be used to
 validate the existence of the current attribute value. If not set, it will
 use the name of the attribute currently being validated. You may use an array
 to validate the existence of multiple columns at the same time. The array
 values are the attributes that will be used to validate the existence, while
 the array keys are the attributes whose values are to be validated. If the
 key and the value are the same, you can just specify the value.

<$filter>				*yii\validators\ExistValidator::$filter*
 (string|array|\Closure) Additional filter to be applied to the DB query used
 to check the existence of the attribute value. This can be a string or an
 array representing the additional query condition (refer to
 [[\yii\db\Query::where()]] on the format of query condition), or an anonymous
 function with the signature 'function ($query)', where '$query' is the
 [[\yii\db\Query|Query]] object that you can modify in the function.

<$behaviors>				*yii\validators\ExistValidator::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component



METHOD DETAILS
------------------------------------------------------------------------------

*yii\validators\ExistValidator::className*			 public
 See |yii\base\Object::className|


*yii\validators\ExistValidator::__construct*			 public
 See |yii\base\Object::__construct|


*yii\validators\ExistValidator::init*				 public
>
 init()
<
(void)




*yii\validators\ExistValidator::__get*				 public
 See |yii\base\Component::__get|


*yii\validators\ExistValidator::__set*				 public
 See |yii\base\Component::__set|


*yii\validators\ExistValidator::__isset*			 public
 See |yii\base\Component::__isset|


*yii\validators\ExistValidator::__unset*			 public
 See |yii\base\Component::__unset|


*yii\validators\ExistValidator::__call* 			 public
 See |yii\base\Component::__call|


*yii\validators\ExistValidator::hasProperty*			 public
 See |yii\base\Component::hasProperty|


*yii\validators\ExistValidator::canGetProperty* 		 public
 See |yii\base\Component::canGetProperty|


*yii\validators\ExistValidator::canSetProperty* 		 public
 See |yii\base\Component::canSetProperty|


*yii\validators\ExistValidator::hasMethod*			 public
 See |yii\base\Component::hasMethod|


*yii\validators\ExistValidator::__clone*			 public
 See |yii\base\Component::__clone|


*yii\validators\ExistValidator::behaviors*			 public
 See |yii\base\Component::behaviors|


*yii\validators\ExistValidator::hasEventHandlers*		 public
 See |yii\base\Component::hasEventHandlers|


*yii\validators\ExistValidator::on*				 public
 See |yii\base\Component::on|


*yii\validators\ExistValidator::off*				 public
 See |yii\base\Component::off|


*yii\validators\ExistValidator::trigger*			 public
 See |yii\base\Component::trigger|


*yii\validators\ExistValidator::getBehavior*			 public
 See |yii\base\Component::getBehavior|


*yii\validators\ExistValidator::getBehaviors*			 public
 See |yii\base\Component::getBehaviors|


*yii\validators\ExistValidator::attachBehavior* 		 public
 See |yii\base\Component::attachBehavior|


*yii\validators\ExistValidator::attachBehaviors*		 public
 See |yii\base\Component::attachBehaviors|


*yii\validators\ExistValidator::detachBehavior* 		 public
 See |yii\base\Component::detachBehavior|


*yii\validators\ExistValidator::detachBehaviors*		 public
 See |yii\base\Component::detachBehaviors|


*yii\validators\ExistValidator::ensureBehaviors*		 public
 See |yii\base\Component::ensureBehaviors|


*yii\validators\ExistValidator::createValidator*		 public
 See |yii\validators\Validator::createValidator|


*yii\validators\ExistValidator::validateAttributes*		 public
 See |yii\validators\Validator::validateAttributes|


*yii\validators\ExistValidator::validateAttribute*		 public
>
 validateAttribute($object, $attribute)
<
(void)


    [$object] () 
    [$attribute] () 


*yii\validators\ExistValidator::validate*			 public
 See |yii\validators\Validator::validate|


*yii\validators\ExistValidator::validateValue*			 protected
>
 validateValue($value)
<
(array|null) The error message and the parameters to be inserted into the
error message. Null should be returned if the data is valid.


    [$value] () 


*yii\validators\ExistValidator::clientValidateAttribute*	 public
 See |yii\validators\Validator::clientValidateAttribute|


*yii\validators\ExistValidator::isActive*			 public
 See |yii\validators\Validator::isActive|


*yii\validators\ExistValidator::addError*			 public
 See |yii\validators\Validator::addError|


*yii\validators\ExistValidator::isEmpty*			 public
 See |yii\validators\Validator::isEmpty|


*yii\validators\ExistValidator::createQuery*			 protected
>
 createQuery($targetClass, $condition)
<
(\yii\db\ActiveQueryInterface) The query instance


    [$targetClass] (string) The target AR class
    [$condition] (mixed) Query condition



 vim:tw=78:ts=8:ft=help:norl:
