
*yii/validators/ExistValidator*   >> |yii/validators/Validator|
===============================

DESCRIPTION
------------------------------------------------------------------------------

 ExistValidator checks if the value being validated can be found in the table
 column specified by the ActiveRecord class 'targetClass' and the attribute
 'targetAttribute'.

 This validator is often used to verify that a foreign key contains a value
 that can be found in the foreign table.

 The following are examples of validation rules using this validator:

   // a1 needs to exist
   ['a1', 'exist']
   // a1 needs to exist, but its value will use a2 to check for the existence
   ['a1', 'exist', 'targetAttribute' => 'a2']
   // a1 and a2 need to exist together, and they both will receive error
 message
   [['a1', 'a2'], 'exist', 'targetAttribute' => ['a1', 'a2']]
   // a1 and a2 need to exist together, only a1 will receive error message
   ['a1', 'exist', 'targetAttribute' => ['a1', 'a2']]
   // a1 needs to exist by checking the existence of both a2 and a3 (using a1
 value)
   ['a1', 'exist', 'targetAttribute' => ['a2', 'a1' => 'a3']]




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/validators/Validator::$builtInValidators|
 |yii/validators/Validator::$attributes|
 |yii/validators/Validator::$message|
 |yii/validators/Validator::$on|
 |yii/validators/Validator::$except|
 |yii/validators/Validator::$skipOnError|
 |yii/validators/Validator::$skipOnEmpty|
 |yii/validators/Validator::$enableClientValidation|
 |yii/validators/Validator::$isEmpty|
 |yii/validators/Validator::$when|
 |yii/validators/Validator::$whenClient|


$targetClass				*yii/validators/ExistValidator::$targetClass*

 (string) The name of the ActiveRecord class that should be used to validate
 the existence of the current attribute value. If not set, it will use the
 ActiveRecord class of the attribute being validated.

$targetAttribute			*yii/validators/ExistValidator::$targetAttribute*

 (string|array) The name of the ActiveRecord attribute that should be used to
 validate the existence of the current attribute value. If not set, it will
 use the name of the attribute currently being validated. You may use an array
 to validate the existence of multiple columns at the same time. The array key
 is the name of the attribute with the value to validate, the array value is
 the name of the database field to search.

$targetRelation				*yii/validators/ExistValidator::$targetRelation*

 (string) The name of the relation that should be used to validate the
 existence of the current attribute value This param overwrites $targetClass
 and $targetAttribute

$filter					*yii/validators/ExistValidator::$filter*

 (string|array|\Closure) Additional filter to be applied to the DB query used
 to check the existence of the attribute value. This can be a string or an
 array representing the additional query condition (refer to
 '\yii\db\Query::where()' on the format of query condition), or an anonymous
 function with the signature 'function ($query)', where '$query' is the
 '\yii\db\Query|Query' object that you can modify in the function.

$allowArray				*yii/validators/ExistValidator::$allowArray*

 (bool) Whether to allow array type attribute.

$targetAttributeJunction		*yii/validators/ExistValidator::$targetAttributeJunction*

 (string) And|or define how target attributes are related

$forceMasterDb				*yii/validators/ExistValidator::$forceMasterDb*

 (bool) Whether this validator is forced to always use master DB



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/validators/Validator::createValidator|
 |yii/validators/Validator::validateAttributes|
 |yii/validators/Validator::validate|
 |yii/validators/Validator::clientValidateAttribute|
 |yii/validators/Validator::getClientOptions|
 |yii/validators/Validator::isActive|
 |yii/validators/Validator::addError|
 |yii/validators/Validator::isEmpty|
 |yii/validators/Validator::formatMessage|
 |yii/validators/Validator::getAttributeNames|


*yii/validators/ExistValidator::init*			public
>
 init()
<
return (void)

 {@inheritdoc}


*yii/validators/ExistValidator::validateAttribute*	public
>
 validateAttribute($model, $attribute)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 


*yii/validators/ExistValidator::validateValue*		protected
>
 validateValue($value)
<
return (void)

 {@inheritdoc}

    [$value] () 


*yii/validators/ExistValidator::createQuery*		protected
>
 createQuery($targetClass, $condition)
<
return (\yii\db\ActiveQueryInterface) The query instance

 Creates a query instance with the given condition.

    [$targetClass] (string) The target AR class
    [$condition] (mixed) Query condition



 vim:tw=78:ts=8:ft=help:norl:
