
*yii/redis/ActiveRecord*   >> |yii/db/BaseActiveRecord|
========================

DESCRIPTION
------------------------------------------------------------------------------

 This class implements the ActiveRecord pattern for the
 [redis](http://redis.io/) key-value store.

 For defining a record a subclass should at least implement the 'attributes()'
 method to define attributes. A primary key can be defined via 'primaryKey()'
 which defaults to 'id' if not specified.

 The following is an example model called 'Customer':

   class Customer extends \yii\redis\ActiveRecord
   {
       public function attributes()
       {
           return ['id', 'name', 'address', 'registration_date'];
       }
   }





METHOD DETAILS
------------------------------------------------------------------------------


*yii/redis/ActiveRecord::getDb*				public
>
 getDb()
<
return (\yii\redis\Connection) The database connection used by this AR class.

 Returns the database connection used by this AR class.

 By default, the "redis" application component is used as the database
 connection. You may override this method if you want to use a different
 database connection.


*yii/redis/ActiveRecord::find*				public
>
 find()
<
return (\yii\redis\ActiveQuery) The newly created 'ActiveQuery' instance.



*yii/redis/ActiveRecord::primaryKey*			public
>
 primaryKey()
<
return (string[]) The primary keys of this record.

 Returns the primary key name(s) for this AR class.

 This method should be overridden by child classes to define the primary key.

 Note that an array should be returned even when it is a single primary key.


*yii/redis/ActiveRecord::attributes*			public
>
 attributes()
<
return (array) List of attribute names.

 Returns the list of all attribute names of the model.

 This method must be overridden by child classes to define available
 attributes.


*yii/redis/ActiveRecord::keyPrefix*			public
>
 keyPrefix()
<
return (string) The prefix to apply to all AR keys

 Declares prefix of the key that represents the keys that store this records
 in redis.

 By default this method returns the class name as the table name by calling
 'Inflector::camel2id()'. For example, 'Customer' becomes 'customer', and
 'OrderItem' becomes 'order_item'. You may override this method if you want
 different key naming.


*yii/redis/ActiveRecord::insert*				public
>
 insert($runValidation='true', $attributes='null')
<
return (void)

    [$runValidation] () 
    [$attributes] () 


*yii/redis/ActiveRecord::updateAll*			public
>
 updateAll($attributes, $condition='null')
<
return (int) The number of rows updated

 Updates the whole table using the provided attribute values and conditions.

 For example, to change the status to be 1 for all customers whose status is
 2:

   Customer::updateAll(['status' => 1], ['id' => 2]);



    [$attributes] (array) Attribute values (name-value pairs) to be saved into
    the table
    [$condition] (array) The conditions that will be put in the WHERE part of
    the UPDATE SQL. Please refer to 'ActiveQuery::where()' on how to specify
    this parameter.


*yii/redis/ActiveRecord::updateAllCounters*		public
>
 updateAllCounters($counters, $condition='null')
<
return (int) The number of rows updated

 Updates the whole table using the provided counter changes and conditions.

 For example, to increment all customers' age by 1,

   Customer::updateAllCounters(['age' => 1]);



    [$counters] (array) The counters to be updated (attribute name =>
    increment value). Use negative values if you want to decrement the
    counters.
    [$condition] (array) The conditions that will be put in the WHERE part of
    the UPDATE SQL. Please refer to 'ActiveQuery::where()' on how to specify
    this parameter.


*yii/redis/ActiveRecord::deleteAll*			public
>
 deleteAll($condition='null')
<
return (int) The number of rows deleted

 Deletes rows in the table using the provided conditions.

 WARNING: If you do not specify any condition, this method will delete ALL
 rows in the table.

 For example, to delete all customers whose status is 3:

   Customer::deleteAll(['status' => 3]);



    [$condition] (array) The conditions that will be put in the WHERE part of
    the DELETE SQL. Please refer to 'ActiveQuery::where()' on how to specify
    this parameter.


*yii/redis/ActiveRecord::buildKey*			public
>
 buildKey($key)
<
return (string) The generated key

 Builds a normalized key from a given primary key value.

    [$key] (mixed) The key to be normalized



 vim:tw=78:ts=8:ft=help:norl:
