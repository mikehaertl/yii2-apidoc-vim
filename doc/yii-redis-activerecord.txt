
*yii/redis/ActiveRecord*   >> |yii/db/BaseActiveRecord|
========================

DESCRIPTION
------------------------------------------------------------------------------

 This class implements the ActiveRecord pattern for the
 [redis](http://redis.io/) key-value store.

 For defining a record a subclass should at least implement the 'attributes()'
 method to define attributes. A primary key can be defined via 'primaryKey()'
 which defaults to 'id' if not specified.

 The following is an example model called 'Customer':

   [
       'components' => [
           'cache' => [
               'class' => 'yii\redis\Cache',
               'redis' => [
                   'hostname' => 'localhost',
                   'port' => 6379,
                   'database' => 0,
               ]
           ],
       ],
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

$behaviors				*yii/redis/ActiveRecord::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$validators				*yii/redis/ActiveRecord::$validators*
 (\ArrayObject|\yii\validators\Validator[]) All the validators declared in the
 model.

$activeValidators			*yii/redis/ActiveRecord::$activeValidators*
 (\yii\validators\Validator[]) The validators applicable to the current
 'scenario'.

$errors					*yii/redis/ActiveRecord::$errors*
 (array) Errors for all attributes or the specified attribute. Empty array is
 returned if no error. Note that when returning errors for all attributes, the
 result is a two-dimensional array, like the following:

   [
       'components' => [
           'cache' => [
               'class' => 'yii\redis\Cache',
               // 'redis' => 'redis' // id of the connection application
 component
           ],
       ],
   ]



$firstErrors				*yii/redis/ActiveRecord::$firstErrors*
 (array) The first errors. The array keys are the attribute names, and the
 array values are the corresponding error messages. An empty array will be
 returned if there is no error.

$attributes				*yii/redis/ActiveRecord::$attributes*
 (array) Attribute values (name => value).

$scenario				*yii/redis/ActiveRecord::$scenario*
 (string) The scenario that this model is in. Defaults to 'SCENARIO_DEFAULT'.

$iterator				*yii/redis/ActiveRecord::$iterator*
 (\ArrayIterator) An iterator for traversing the items in the list.

$relatedRecords				*yii/redis/ActiveRecord::$relatedRecords*
 (array) An array of related records indexed by relation names.

$oldAttributes				*yii/redis/ActiveRecord::$oldAttributes*
 (array) The old attribute values (name-value pairs)

$dirtyAttributes			*yii/redis/ActiveRecord::$dirtyAttributes*
 (array) The changed attribute values (name-value pairs)

$isNewRecord				*yii/redis/ActiveRecord::$isNewRecord*
 (boolean) Whether the record is new and should be inserted when calling
 'save()'.

$primaryKey				*yii/redis/ActiveRecord::$primaryKey*
 (mixed) The primary key value. An array (column name => column value) is
 returned if the primary key is composite or '$asArray' is true. A string is
 returned otherwise (null will be returned if the key value is null).

$oldPrimaryKey				*yii/redis/ActiveRecord::$oldPrimaryKey*
 (mixed) The old primary key value. An array (column name => column value) is
 returned if the primary key is composite or '$asArray' is true. A string is
 returned otherwise (null will be returned if the key value is null).



METHOD DETAILS
------------------------------------------------------------------------------

*yii/redis/ActiveRecord::className*			public
 See |yii/base/Object::className|


*yii/redis/ActiveRecord::__construct*			public
 See |yii/base/Object::__construct|


*yii/redis/ActiveRecord::init*				public
 See |yii/db/BaseActiveRecord::init|


*yii/redis/ActiveRecord::__get*				public
 See |yii/db/BaseActiveRecord::__get|


*yii/redis/ActiveRecord::__set*				public
 See |yii/db/BaseActiveRecord::__set|


*yii/redis/ActiveRecord::__isset*				public
 See |yii/db/BaseActiveRecord::__isset|


*yii/redis/ActiveRecord::__unset*				public
 See |yii/db/BaseActiveRecord::__unset|


*yii/redis/ActiveRecord::__call*				public
 See |yii/base/Component::__call|


*yii/redis/ActiveRecord::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/redis/ActiveRecord::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/redis/ActiveRecord::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/redis/ActiveRecord::hasMethod*			public
 See |yii/base/Component::hasMethod|


*yii/redis/ActiveRecord::__clone*				public
 See |yii/base/Component::__clone|


*yii/redis/ActiveRecord::behaviors*			public
 See |yii/base/Component::behaviors|


*yii/redis/ActiveRecord::hasEventHandlers*		public
 See |yii/base/Component::hasEventHandlers|


*yii/redis/ActiveRecord::on*				public
 See |yii/base/Component::on|


*yii/redis/ActiveRecord::off*				public
 See |yii/base/Component::off|


*yii/redis/ActiveRecord::trigger*				public
 See |yii/base/Component::trigger|


*yii/redis/ActiveRecord::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/redis/ActiveRecord::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/redis/ActiveRecord::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/redis/ActiveRecord::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/redis/ActiveRecord::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/redis/ActiveRecord::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/redis/ActiveRecord::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/redis/ActiveRecord::fields*				public
 See |yii/base/ArrayableTrait::fields|


*yii/redis/ActiveRecord::extraFields*			public
 See |yii/base/ArrayableTrait::extraFields|


*yii/redis/ActiveRecord::toArray*				public
 See |yii/base/ArrayableTrait::toArray|


*yii/redis/ActiveRecord::resolveFields*			protected
 See |yii/base/ArrayableTrait::resolveFields|


*yii/redis/ActiveRecord::rules*				public
 See |yii/base/Model::rules|


*yii/redis/ActiveRecord::scenarios*			public
 See |yii/base/Model::scenarios|


*yii/redis/ActiveRecord::formName*			public
 See |yii/base/Model::formName|


*yii/redis/ActiveRecord::attributes*			public
>
 attributes()
<
(array) List of attribute names.

 This method must be overridden by child classes to define available
 attributes.


*yii/redis/ActiveRecord::attributeLabels*			public
 See |yii/base/Model::attributeLabels|


*yii/redis/ActiveRecord::validate*			public
 See |yii/base/Model::validate|


*yii/redis/ActiveRecord::beforeValidate*			public
 See |yii/base/Model::beforeValidate|


*yii/redis/ActiveRecord::afterValidate*			public
 See |yii/base/Model::afterValidate|


*yii/redis/ActiveRecord::getValidators*			public
 See |yii/base/Model::getValidators|


*yii/redis/ActiveRecord::getActiveValidators*		public
 See |yii/base/Model::getActiveValidators|


*yii/redis/ActiveRecord::createValidators*		public
 See |yii/base/Model::createValidators|


*yii/redis/ActiveRecord::isAttributeRequired*		public
 See |yii/base/Model::isAttributeRequired|


*yii/redis/ActiveRecord::isAttributeSafe*			public
 See |yii/base/Model::isAttributeSafe|


*yii/redis/ActiveRecord::isAttributeActive*		public
 See |yii/base/Model::isAttributeActive|


*yii/redis/ActiveRecord::getAttributeLabel*		public
 See |yii/db/BaseActiveRecord::getAttributeLabel|


*yii/redis/ActiveRecord::hasErrors*			public
 See |yii/base/Model::hasErrors|


*yii/redis/ActiveRecord::getErrors*			public
 See |yii/base/Model::getErrors|


*yii/redis/ActiveRecord::getFirstErrors*			public
 See |yii/base/Model::getFirstErrors|


*yii/redis/ActiveRecord::getFirstError*			public
 See |yii/base/Model::getFirstError|


*yii/redis/ActiveRecord::addError*			public
 See |yii/base/Model::addError|


*yii/redis/ActiveRecord::clearErrors*			public
 See |yii/base/Model::clearErrors|


*yii/redis/ActiveRecord::generateAttributeLabel*		public
 See |yii/base/Model::generateAttributeLabel|


*yii/redis/ActiveRecord::getAttributes*			public
 See |yii/base/Model::getAttributes|


*yii/redis/ActiveRecord::setAttributes*			public
 See |yii/base/Model::setAttributes|


*yii/redis/ActiveRecord::onUnsafeAttribute*		public
 See |yii/base/Model::onUnsafeAttribute|


*yii/redis/ActiveRecord::getScenario*			public
 See |yii/base/Model::getScenario|


*yii/redis/ActiveRecord::setScenario*			public
 See |yii/base/Model::setScenario|


*yii/redis/ActiveRecord::safeAttributes*			public
 See |yii/base/Model::safeAttributes|


*yii/redis/ActiveRecord::activeAttributes*		public
 See |yii/base/Model::activeAttributes|


*yii/redis/ActiveRecord::load*				public
 See |yii/base/Model::load|


*yii/redis/ActiveRecord::loadMultiple*			public
 See |yii/base/Model::loadMultiple|


*yii/redis/ActiveRecord::validateMultiple*		public
 See |yii/base/Model::validateMultiple|


*yii/redis/ActiveRecord::getIterator*			public
 See |yii/base/Model::getIterator|


*yii/redis/ActiveRecord::offsetExists*			public
 See |yii/db/BaseActiveRecord::offsetExists|


*yii/redis/ActiveRecord::offsetGet*			public
 See |yii/base/Model::offsetGet|


*yii/redis/ActiveRecord::offsetSet*			public
 See |yii/base/Model::offsetSet|


*yii/redis/ActiveRecord::offsetUnset*			public
 See |yii/db/BaseActiveRecord::offsetUnset|


*yii/redis/ActiveRecord::findOne*				public
 See |yii/db/BaseActiveRecord::findOne|


*yii/redis/ActiveRecord::findAll*				public
 See |yii/db/BaseActiveRecord::findAll|


*yii/redis/ActiveRecord::findByCondition*			protected
 See |yii/db/BaseActiveRecord::findByCondition|


*yii/redis/ActiveRecord::updateAll*			public
>
 updateAll($attributes, $condition='null')
<
(integer) The number of rows updated

 For example, to change the status to be 1 for all customers whose status is
 2:

   class Customer extends \yii\redis\ActiveRecord
   {
       public function attributes()
       {
           return ['id', 'name', 'address', 'registration_date'];
       }
   }


    [$attributes] (array) Attribute values (name-value pairs) to be saved into
    the table
    [$condition] (array) The conditions that will be put in the WHERE part of
    the UPDATE SQL. Please refer to 'ActiveQuery::where()' on how to specify
    this parameter.


*yii/redis/ActiveRecord::updateAllCounters*		public
>
 updateAllCounters($counters, $condition='null')
<
(integer) The number of rows updated

 For example, to increment all customers' age by 1,

   [
       'username' => [
           'Username is required.',
           'Username must contain only word characters.',
       ],
       'email' => [
           'Email address is invalid.',
       ]
   ]


    [$counters] (array) The counters to be updated (attribute name =>
    increment value). Use negative values if you want to decrement the
    counters.
    [$condition] (array) The conditions that will be put in the WHERE part of
    the UPDATE SQL. Please refer to 'ActiveQuery::where()' on how to specify
    this parameter.


*yii/redis/ActiveRecord::deleteAll*			public
>
 deleteAll($condition='null')
<
(integer) The number of rows deleted

 WARNING: If you do not specify any condition, this method will delete ALL
 rows in the table.

 For example, to delete all customers whose status is 3:

   Customer::updateAll(['status' => 1], ['id' => 2]);


    [$condition] (array) The conditions that will be put in the WHERE part of
    the DELETE SQL. Please refer to 'ActiveQuery::where()' on how to specify
    this parameter.


*yii/redis/ActiveRecord::optimisticLock*			public
 See |yii/db/BaseActiveRecord::optimisticLock|


*yii/redis/ActiveRecord::hasOne*				public
 See |yii/db/BaseActiveRecord::hasOne|


*yii/redis/ActiveRecord::hasMany*				public
 See |yii/db/BaseActiveRecord::hasMany|


*yii/redis/ActiveRecord::populateRelation*		public
 See |yii/db/BaseActiveRecord::populateRelation|


*yii/redis/ActiveRecord::isRelationPopulated*		public
 See |yii/db/BaseActiveRecord::isRelationPopulated|


*yii/redis/ActiveRecord::getRelatedRecords*		public
 See |yii/db/BaseActiveRecord::getRelatedRecords|


*yii/redis/ActiveRecord::hasAttribute*			public
 See |yii/db/BaseActiveRecord::hasAttribute|


*yii/redis/ActiveRecord::getAttribute*			public
 See |yii/db/BaseActiveRecord::getAttribute|


*yii/redis/ActiveRecord::setAttribute*			public
 See |yii/db/BaseActiveRecord::setAttribute|


*yii/redis/ActiveRecord::getOldAttributes*		public
 See |yii/db/BaseActiveRecord::getOldAttributes|


*yii/redis/ActiveRecord::setOldAttributes*		public
 See |yii/db/BaseActiveRecord::setOldAttributes|


*yii/redis/ActiveRecord::getOldAttribute*			public
 See |yii/db/BaseActiveRecord::getOldAttribute|


*yii/redis/ActiveRecord::setOldAttribute*			public
 See |yii/db/BaseActiveRecord::setOldAttribute|


*yii/redis/ActiveRecord::markAttributeDirty*		public
 See |yii/db/BaseActiveRecord::markAttributeDirty|


*yii/redis/ActiveRecord::isAttributeChanged*		public
 See |yii/db/BaseActiveRecord::isAttributeChanged|


*yii/redis/ActiveRecord::getDirtyAttributes*		public
 See |yii/db/BaseActiveRecord::getDirtyAttributes|


*yii/redis/ActiveRecord::save*				public
 See |yii/db/BaseActiveRecord::save|


*yii/redis/ActiveRecord::update*				public
 See |yii/db/BaseActiveRecord::update|


*yii/redis/ActiveRecord::updateAttributes*		public
 See |yii/db/BaseActiveRecord::updateAttributes|


*yii/redis/ActiveRecord::updateInternal*			protected
 See |yii/db/BaseActiveRecord::updateInternal|


*yii/redis/ActiveRecord::updateCounters*			public
 See |yii/db/BaseActiveRecord::updateCounters|


*yii/redis/ActiveRecord::delete*				public
 See |yii/db/BaseActiveRecord::delete|


*yii/redis/ActiveRecord::getIsNewRecord*			public
 See |yii/db/BaseActiveRecord::getIsNewRecord|


*yii/redis/ActiveRecord::setIsNewRecord*			public
 See |yii/db/BaseActiveRecord::setIsNewRecord|


*yii/redis/ActiveRecord::afterFind*			public
 See |yii/db/BaseActiveRecord::afterFind|


*yii/redis/ActiveRecord::beforeSave*			public
 See |yii/db/BaseActiveRecord::beforeSave|


*yii/redis/ActiveRecord::afterSave*			public
 See |yii/db/BaseActiveRecord::afterSave|


*yii/redis/ActiveRecord::beforeDelete*			public
 See |yii/db/BaseActiveRecord::beforeDelete|


*yii/redis/ActiveRecord::afterDelete*			public
 See |yii/db/BaseActiveRecord::afterDelete|


*yii/redis/ActiveRecord::refresh*				public
 See |yii/db/BaseActiveRecord::refresh|


*yii/redis/ActiveRecord::equals*				public
 See |yii/db/BaseActiveRecord::equals|


*yii/redis/ActiveRecord::getPrimaryKey*			public
 See |yii/db/BaseActiveRecord::getPrimaryKey|


*yii/redis/ActiveRecord::getOldPrimaryKey*		public
 See |yii/db/BaseActiveRecord::getOldPrimaryKey|


*yii/redis/ActiveRecord::populateRecord*			public
 See |yii/db/BaseActiveRecord::populateRecord|


*yii/redis/ActiveRecord::instantiate*			public
 See |yii/db/BaseActiveRecord::instantiate|


*yii/redis/ActiveRecord::getRelation*			public
 See |yii/db/BaseActiveRecord::getRelation|


*yii/redis/ActiveRecord::link*				public
 See |yii/db/BaseActiveRecord::link|


*yii/redis/ActiveRecord::unlink*				public
 See |yii/db/BaseActiveRecord::unlink|


*yii/redis/ActiveRecord::unlinkAll*			public
 See |yii/db/BaseActiveRecord::unlinkAll|


*yii/redis/ActiveRecord::isPrimaryKey*			public
 See |yii/db/BaseActiveRecord::isPrimaryKey|


*yii/redis/ActiveRecord::primaryKey*			public
>
 primaryKey()
<
(string[]) The primary keys of this record.

 This method should be overridden by child classes to define the primary key.

 Note that an array should be returned even when it is a single primary key.


*yii/redis/ActiveRecord::find*				public
>
 find()
<
(static|\yii\db\ActiveQueryInterface) The newly created
'ActiveQueryInterface|ActiveQuery' instance.

 The returned 'ActiveQueryInterface|ActiveQuery' instance can be further
 customized by calling methods defined in 'ActiveQueryInterface' before
 'one()' or 'all()' is called to return populated ActiveRecord instances. For
 example,

   Customer::updateAllCounters(['age' => 1]);

 This method is also called by 'BaseActiveRecord::hasOne()' and
 'BaseActiveRecord::hasMany()' to create a relational query.

 You may override this method to return a customized query. For example,

   Customer::deleteAll(['status' => 3]);

 The following code shows how to apply a default condition for all queries:

 '''php class Customer extends ActiveRecord {     public static function
 find()     {         return parent::find()->where(['deleted' => false]);    
 } }

 // Use andWhere()/orWhere() to apply the default condition // SELECT FROM
 customer WHERE 'deleted'=:deleted AND age>30 $customers =
 Customer::find()->andWhere('age>30')->all();

 // Use where() to ignore the default condition // SELECT FROM customer WHERE
 age>30 $customers = Customer::find()->where('age>30')->all();


*yii/redis/ActiveRecord::insert*				public
>
 insert($runValidation='true', $attributes='null')
<
(boolean) Whether the attributes are valid and the record is inserted
successfully.

 Usage example:

   // find the customer whose ID is 1
   $customer = Customer::find()->where(['id' => 1])->one();

   // find all active customers and order them by their age:
   $customers = Customer::find()
       ->where(['status' => 1])
       ->orderBy('age')
       ->all();


    [$runValidation] (boolean) Whether to perform validation before saving the
    record. If the validation fails, the record will not be inserted into the
    database.
    [$attributes] (array) List of attributes that need to be saved. Defaults
    to null, meaning all attributes that are loaded from DB will be saved.


*yii/redis/ActiveRecord::getDb*				public
>
 getDb()
<
(\yii\redis\Connection) The database connection used by this AR class.

 By default, the "redis" application component is used as the database
 connection. You may override this method if you want to use a different
 database connection.


*yii/redis/ActiveRecord::keyPrefix*			public
>
 keyPrefix()
<
(string) The prefix to apply to all AR keys

 By default this method returns the class name as the table name by calling
 'Inflector::camel2id()'. For example, 'Customer' becomes 'customer', and
 'OrderItem' becomes 'order_item'. You may override this method if you want
 different key naming.


*yii/redis/ActiveRecord::buildKey*			public
>
 buildKey($key)
<
(string) The generated key

    [$key] (mixed) The key to be normalized



 vim:tw=78:ts=8:ft=help:norl:
