
*yii/gii/generators/model/Generator*   >> |yii/gii/Generator|
====================================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/gii/Generator::$templates|
 |yii/gii/Generator::$template|
 |yii/gii/Generator::$enableI18N|
 |yii/gii/Generator::$messageCategory|


$db					*yii/gii/generators/model/Generator::$db*

 ()

$ns					*yii/gii/generators/model/Generator::$ns*

 ()

$tableName				*yii/gii/generators/model/Generator::$tableName*

 ()

$modelClass				*yii/gii/generators/model/Generator::$modelClass*

 ()

$baseClass				*yii/gii/generators/model/Generator::$baseClass*

 ()

$generateRelations			*yii/gii/generators/model/Generator::$generateRelations*

 ()

$generateRelationsFromCurrentSchema	*yii/gii/generators/model/Generator::$generateRelationsFromCurrentSchema*

 ()

$generateLabelsFromComments		*yii/gii/generators/model/Generator::$generateLabelsFromComments*

 ()

$useTablePrefix				*yii/gii/generators/model/Generator::$useTablePrefix*

 ()

$standardizeCapitals			*yii/gii/generators/model/Generator::$standardizeCapitals*

 ()

$useSchemaName				*yii/gii/generators/model/Generator::$useSchemaName*

 ()

$generateQuery				*yii/gii/generators/model/Generator::$generateQuery*

 ()

$queryNs				*yii/gii/generators/model/Generator::$queryNs*

 ()

$queryClass				*yii/gii/generators/model/Generator::$queryClass*

 ()

$queryBaseClass				*yii/gii/generators/model/Generator::$queryBaseClass*

 ()

$tableNames				*yii/gii/generators/model/Generator::$tableNames*

 ()

$classNames				*yii/gii/generators/model/Generator::$classNames*

 ()



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/gii/Generator::init|
 |yii/gii/Generator::successMessage|
 |yii/gii/Generator::formView|
 |yii/gii/Generator::defaultTemplate|
 |yii/gii/Generator::loadStickyAttributes|
 |yii/gii/Generator::saveStickyAttributes|
 |yii/gii/Generator::getStickyDataFile|
 |yii/gii/Generator::save|
 |yii/gii/Generator::getTemplatePath|
 |yii/gii/Generator::render|
 |yii/gii/Generator::validateTemplate|
 |yii/gii/Generator::validateClass|
 |yii/gii/Generator::validateNewClass|
 |yii/gii/Generator::validateMessageCategory|
 |yii/gii/Generator::isReservedKeyword|
 |yii/gii/Generator::generateString|


*yii/gii/generators/model/Generator::getName*		public
>
 getName()
<
return (string) Name of the code generator








*yii/gii/generators/model/Generator::generate*		public
>
 generate()
<
return (\yii\gii\CodeFile[]) A list of code files to be created.

 Generates the code based on the current user input and the specified code
 template files.



 This is the main method that child classes should implement. Please refer to
 '\yii\gii\generators\controller\Generator::generate()' as an example on how
 to implement this method.




*yii/gii/generators/model/Generator::attributeLabels*	public
>
 attributeLabels()
<
return (void)








*yii/gii/generators/model/Generator::requiredTemplates*	public
>
 requiredTemplates()
<
return (array) List of code template files that are required. They should be file
paths relative to 'templatePath'.

 Returns a list of code template files that are required.



 Derived classes usually should override this method if they require the
 existence of certain template files.




*yii/gii/generators/model/Generator::stickyAttributes*	public
>
 stickyAttributes()
<
return (array) List of sticky attributes

 Returns the list of sticky attributes.



 A sticky attribute will remember its value and will initialize the attribute
 with this value when the generator is restarted.




*yii/gii/generators/model/Generator::hints*		public
>
 hints()
<
return (array) The list of hint messages

 Returns the list of hint messages.



 The array keys are the attribute names, and the array values are the
 corresponding hint messages. Hint messages will be displayed to end users
 when they are filling the form for the generator.




*yii/gii/generators/model/Generator::autoCompleteData*	public
>
 autoCompleteData()
<
return (array) The list of auto complete values

 Returns the list of auto complete values.



 The array keys are the attribute names, and the array values are the
 corresponding auto complete values. Auto complete values can also be callable
 typed in order one want to make postponed data generation.




*yii/gii/generators/model/Generator::getDescription*	public
>
 getDescription()
<
return (string) The detailed description of the generator.








*yii/gii/generators/model/Generator::rules*		public
>
 rules()
<
return (void)



 Child classes should override this method like the following so that the
 parent rules are included:

   return array_merge(parent::rules(), [
       ...rules for the child class...
   ]);




*yii/gii/generators/model/Generator::getTablePrefix*	public
>
 getTablePrefix()
<
return (string) 

 Returns the 'tablePrefix' property of the DB connection as specified


*yii/gii/generators/model/Generator::generateProperties*	protected
>
 generateProperties($table)
<
return (array) The generated properties (property => type)

 Generates the properties for the specified table.

    [$table] (\yii\db\TableSchema) The table schema


*yii/gii/generators/model/Generator::generateLabels*	public
>
 generateLabels($table)
<
return (array) The generated attribute labels (name => label)

 Generates the attribute labels for the specified table.

    [$table] (\yii\db\TableSchema) The table schema


*yii/gii/generators/model/Generator::generateRules*	public
>
 generateRules($table)
<
return (array) The generated validation rules

 Generates validation rules for the specified table.

    [$table] (\yii\db\TableSchema) The table schema


*yii/gii/generators/model/Generator::getSchemaNames*	protected
>
 getSchemaNames()
<
return (string[]) All db schema names or an array with a single empty string



*yii/gii/generators/model/Generator::generateRelations*	protected
>
 generateRelations()
<
return (array) The generated relation declarations



*yii/gii/generators/model/Generator::addInverseRelations*	protected
>
 addInverseRelations($relations)
<
return (array) Relation declarations extended with inverse relation names

 Adds inverse relations

    [$relations] (array) Relation declarations


*yii/gii/generators/model/Generator::isHasManyRelation*	protected
>
 isHasManyRelation($table, $fks)
<
return (bool) 

 Determines if relation is of has many type

    [$table] (\yii\db\TableSchema) 
    [$fks] (array) 


*yii/gii/generators/model/Generator::generateRelationLink*protected
>
 generateRelationLink($refs)
<
return (string) The generated link parameter.

 Generates the link parameter to be used in generating the relation
 declaration.

    [$refs] (array) Reference constraint


*yii/gii/generators/model/Generator::checkJunctionTable*	protected
>
 checkJunctionTable($table)
<
return (array|bool) All unique foreign key pairs if the table is a junction table, or
false if the table is not a junction table.

 Checks if the given table is a junction table, that is it has at least one
 pair of unique foreign keys.

    [$table] () 


*yii/gii/generators/model/Generator::generateRelationName*protected
>
 generateRelationName($relations, $table, $key, $multiple)
<
return (string) The relation name

 Generate a relation name for the specified table and a base name.

    [$relations] (array) The relations being generated currently.
    [$table] (\yii\db\TableSchema) The table schema
    [$key] (string) A base name that the relation name may be generated from
    [$multiple] (bool) Whether this is a has-many relation


*yii/gii/generators/model/Generator::validateDb*		public
>
 validateDb()
<
return (void)

 Validates the 'db' attribute.


*yii/gii/generators/model/Generator::validateNamespace*	public
>
 validateNamespace($attribute)
<
return (void)

 Validates the namespace.

    [$attribute] (string) Namespace variable.


*yii/gii/generators/model/Generator::validateModelClass*	public
>
 validateModelClass()
<
return (void)

 Validates the 'modelClass' attribute.


*yii/gii/generators/model/Generator::validateTableName*	public
>
 validateTableName()
<
return (void)

 Validates the 'tableName' attribute.


*yii/gii/generators/model/Generator::getTableNames*	protected
>
 getTableNames()
<
return (array) The table names that match the pattern specified by 'tableName'.



*yii/gii/generators/model/Generator::generateTableName*	public
>
 generateTableName($tableName)
<
return (string) The generated table name

 Generates the table name by considering table prefix.

 If 'useTablePrefix' is false, the table name will be returned without change.

    [$tableName] (string) The table name (which may contain schema prefix)


*yii/gii/generators/model/Generator::generateClassName*	protected
>
 generateClassName($tableName, $useSchemaName='null')
<
return (string) The generated class name

 Generates a class name from the specified table name.

    [$tableName] (string) The table name (which may contain schema prefix)
    [$useSchemaName] (bool) Should schema name be included in the class name,
    if present


*yii/gii/generators/model/Generator::generateQueryClassName*protected
>
 generateQueryClassName($modelClassName)
<
return (string) Generated class name

 Generates a query class name from the specified model class name.

    [$modelClassName] (string) Model class name


*yii/gii/generators/model/Generator::getDbConnection*	protected
>
 getDbConnection()
<
return (\yii\db\Connection) The DB connection as specified by 'db'.



*yii/gii/generators/model/Generator::getDbDriverName*	protected
>
 getDbDriverName()
<
return (string|null) Driver name of db connection. In case db is not instance of
\yii\db\Connection null will be returned.



*yii/gii/generators/model/Generator::isColumnAutoIncremental*protected
>
 isColumnAutoIncremental($table, $columns)
<
return (bool) Whether any of the specified columns is auto incremental.

 Checks if any of the specified columns is auto incremental.

    [$table] (\yii\db\TableSchema) The table schema
    [$columns] (array) Columns to check for autoIncrement property



 vim:tw=78:ts=8:ft=help:norl:
