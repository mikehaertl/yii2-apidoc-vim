
*yii/gii/generators/model/Generator*   >> |yii/gii/Generator|
====================================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/gii/Generator::$templates|
 |yii/gii/Generator::$template|
 |yii/gii/Generator::$enableI18N|
 |yii/gii/Generator::$messageCategory|


$db					*yii/gii/generators/model/Generator::$db*

 ()

$ns					*yii/gii/generators/model/Generator::$ns*

 ()

$tableName				*yii/gii/generators/model/Generator::$tableName*

 ()

$modelClass				*yii/gii/generators/model/Generator::$modelClass*

 ()

$baseClass				*yii/gii/generators/model/Generator::$baseClass*

 ()

$generateRelations			*yii/gii/generators/model/Generator::$generateRelations*

 ()

$generateRelationsFromCurrentSchema	*yii/gii/generators/model/Generator::$generateRelationsFromCurrentSchema*

 ()

$generateLabelsFromComments		*yii/gii/generators/model/Generator::$generateLabelsFromComments*

 ()

$useTablePrefix				*yii/gii/generators/model/Generator::$useTablePrefix*

 ()

$useSchemaName				*yii/gii/generators/model/Generator::$useSchemaName*

 ()

$generateQuery				*yii/gii/generators/model/Generator::$generateQuery*

 ()

$queryNs				*yii/gii/generators/model/Generator::$queryNs*

 ()

$queryClass				*yii/gii/generators/model/Generator::$queryClass*

 ()

$queryBaseClass				*yii/gii/generators/model/Generator::$queryBaseClass*

 ()

$tableNames				*yii/gii/generators/model/Generator::$tableNames*

 ()

$classNames				*yii/gii/generators/model/Generator::$classNames*

 ()



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/gii/Generator::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/StaticInstanceTrait::instance|
 |yii/base/ArrayableTrait::fields|
 |yii/base/ArrayableTrait::extraFields|
 |yii/base/ArrayableTrait::toArray|
 |yii/base/ArrayableTrait::extractRootFields|
 |yii/base/ArrayableTrait::extractFieldsFor|
 |yii/base/ArrayableTrait::resolveFields|
 |yii/base/Model::scenarios|
 |yii/base/Model::formName|
 |yii/base/Model::attributes|
 |yii/base/Model::attributeHints|
 |yii/base/Model::validate|
 |yii/base/Model::beforeValidate|
 |yii/base/Model::afterValidate|
 |yii/base/Model::getValidators|
 |yii/base/Model::getActiveValidators|
 |yii/base/Model::createValidators|
 |yii/base/Model::isAttributeRequired|
 |yii/base/Model::isAttributeSafe|
 |yii/base/Model::isAttributeActive|
 |yii/base/Model::getAttributeLabel|
 |yii/base/Model::getAttributeHint|
 |yii/base/Model::hasErrors|
 |yii/base/Model::getErrors|
 |yii/base/Model::getFirstErrors|
 |yii/base/Model::getFirstError|
 |yii/base/Model::getErrorSummary|
 |yii/base/Model::addError|
 |yii/base/Model::addErrors|
 |yii/base/Model::clearErrors|
 |yii/base/Model::generateAttributeLabel|
 |yii/base/Model::getAttributes|
 |yii/base/Model::setAttributes|
 |yii/base/Model::onUnsafeAttribute|
 |yii/base/Model::getScenario|
 |yii/base/Model::setScenario|
 |yii/base/Model::safeAttributes|
 |yii/base/Model::activeAttributes|
 |yii/base/Model::load|
 |yii/base/Model::loadMultiple|
 |yii/base/Model::validateMultiple|
 |yii/base/Model::getIterator|
 |yii/base/Model::offsetExists|
 |yii/base/Model::offsetGet|
 |yii/base/Model::offsetSet|
 |yii/base/Model::offsetUnset|
 |yii/gii/Generator::successMessage|
 |yii/gii/Generator::formView|
 |yii/gii/Generator::defaultTemplate|
 |yii/gii/Generator::loadStickyAttributes|
 |yii/gii/Generator::saveStickyAttributes|
 |yii/gii/Generator::getStickyDataFile|
 |yii/gii/Generator::save|
 |yii/gii/Generator::getTemplatePath|
 |yii/gii/Generator::render|
 |yii/gii/Generator::validateTemplate|
 |yii/gii/Generator::validateClass|
 |yii/gii/Generator::validateNewClass|
 |yii/gii/Generator::validateMessageCategory|
 |yii/gii/Generator::isReservedKeyword|
 |yii/gii/Generator::generateString|


*yii/gii/generators/model/Generator::rules*		public
>
 rules()
<
return (array) Validation rules

 Returns the validation rules for attributes.



 Validation rules are used by 'validate()' to check if attribute values are
 valid. Child classes may override this method to declare different validation
 rules.

 Each rule is an array with the following structure:

   [
       ['attribute1', 'attribute2'],
       'validator type',
       'on' => ['scenario1', 'scenario2'],
       //...other parameters...
   ]

 where

  
   - attribute list: required, specifies the attributes array to be
   validated, for single attribute you can pass a string;  
   - validator type: required, specifies the validator to be used. It
   can be a built-in validator name,    a method name of the model class, an
 anonymous function, or a validator class name.  
   - on: optional, specifies the 'scenario|scenarios' array in which
   the validation    rule can be applied. If this option is not set, the rule
 will apply to all scenarios.  
   - additional name-value pairs can be specified to initialize the
   corresponding validator properties.    Please refer to individual validator
 class API for possible properties.

 A validator can be either an object of a class extending 'Validator', or a
 model class method (called *inline validator*) that has the following
 signature:

   // $params refers to validation parameters given in the rule
   function validatorName($attribute, $params)

 In the above '$attribute' refers to the attribute currently being validated
 while '$params' contains an array of validator configuration options such as
 'max' in case of 'string' validator. The value of the attribute currently
 being validated can be accessed as '$this->$attribute'. Note the '$' before
 'attribute'; this is taking the value of the variable '$attribute' and using
 it as the name of the property to access.

 Yii also provides a set of 'Validator::builtInValidators|built-in
 validators'. Each one has an alias name which can be used when specifying a
 validation rule.

 Below are some examples:

   [
       // built-in "required" validator
       [['username', 'password'], 'required'],
       // built-in "string" validator customized with "min" and "max"
 properties
       ['username', 'string', 'min' => 3, 'max' => 12],
       // built-in "compare" validator that is used in "register" scenario
 only
       ['password', 'compare', 'compareAttribute' => 'password2', 'on' =>
 'register'],
       // an inline validator defined via the "authenticate()" method in the
 model class
       ['password', 'authenticate', 'on' => 'login'],
       // a validator of class "DateRangeValidator"
       ['dateRange', 'DateRangeValidator'],
   ];

 Note, in order to inherit rules defined in the parent class, a child class
 needs to merge the parent rules with child rules using functions such as
 'array_merge()'.

 Child classes should override this method like the following so that the
 parent rules are included:

   return array_merge(parent::rules(), [
       ...rules for the child class...
   ]);




*yii/gii/generators/model/Generator::attributeLabels*	public
>
 attributeLabels()
<
return (array) Attribute labels (name => label)

 Returns the attribute labels.



 Attribute labels are mainly used for display purpose. For example, given an
 attribute 'firstName', we can declare a label 'First Name' which is more
 user-friendly and can be displayed to end users.

 By default an attribute label is generated using 'generateAttributeLabel()'.
 This method allows you to explicitly specify attribute labels.

 Note, in order to inherit labels defined in the parent class, a child class
 needs to merge the parent labels with child labels using functions such as
 'array_merge()'.




*yii/gii/generators/model/Generator::getName*		public
>
 getName()
<
return (string) Name of the code generator








*yii/gii/generators/model/Generator::generate*		public
>
 generate()
<
return (\yii\gii\CodeFile[]) A list of code files to be created.

 Generates the code based on the current user input and the specified code
 template files.



 This is the main method that child classes should implement. Please refer to
 '\yii\gii\generators\controller\Generator::generate()' as an example on how
 to implement this method.




*yii/gii/generators/model/Generator::requiredTemplates*	public
>
 requiredTemplates()
<
return (array) List of code template files that are required. They should be file
paths relative to 'templatePath'.

 Returns a list of code template files that are required.



 Derived classes usually should override this method if they require the
 existence of certain template files.




*yii/gii/generators/model/Generator::stickyAttributes*	public
>
 stickyAttributes()
<
return (array) List of sticky attributes

 Returns the list of sticky attributes.



 A sticky attribute will remember its value and will initialize the attribute
 with this value when the generator is restarted.




*yii/gii/generators/model/Generator::hints*		public
>
 hints()
<
return (array) The list of hint messages

 Returns the list of hint messages.



 The array keys are the attribute names, and the array values are the
 corresponding hint messages. Hint messages will be displayed to end users
 when they are filling the form for the generator.




*yii/gii/generators/model/Generator::autoCompleteData*	public
>
 autoCompleteData()
<
return (array) The list of auto complete values

 Returns the list of auto complete values.



 The array keys are the attribute names, and the array values are the
 corresponding auto complete values. Auto complete values can also be callable
 typed in order one want to make postponed data generation.




*yii/gii/generators/model/Generator::getDescription*	public
>
 getDescription()
<
return (string) The detailed description of the generator.








*yii/gii/generators/model/Generator::getTablePrefix*	public
>
 getTablePrefix()
<
return (string) 

 Returns the 'tablePrefix' property of the DB connection as specified


*yii/gii/generators/model/Generator::generateProperties*	protected
>
 generateProperties($table)
<
return (array) The generated properties (property => type)

 Generates the properties for the specified table.

    [$table] (\yii\db\TableSchema) The table schema


*yii/gii/generators/model/Generator::generateLabels*	public
>
 generateLabels($table)
<
return (array) The generated attribute labels (name => label)

 Generates the attribute labels for the specified table.

    [$table] (\yii\db\TableSchema) The table schema


*yii/gii/generators/model/Generator::generateRules*	public
>
 generateRules($table)
<
return (array) The generated validation rules

 Generates validation rules for the specified table.

    [$table] (\yii\db\TableSchema) The table schema


*yii/gii/generators/model/Generator::getSchemaNames*	protected
>
 getSchemaNames()
<
return (string[]) All db schema names or an array with a single empty string



*yii/gii/generators/model/Generator::generateRelations*	protected
>
 generateRelations()
<
return (array) The generated relation declarations



*yii/gii/generators/model/Generator::addInverseRelations*	protected
>
 addInverseRelations($relations)
<
return (array) Relation declarations extended with inverse relation names

 Adds inverse relations

    [$relations] (array) Relation declarations


*yii/gii/generators/model/Generator::isHasManyRelation*	protected
>
 isHasManyRelation($table, $fks)
<
return (bool) 

 Determines if relation is of has many type

    [$table] (\yii\db\TableSchema) 
    [$fks] (array) 


*yii/gii/generators/model/Generator::generateRelationLink*protected
>
 generateRelationLink($refs)
<
return (string) The generated link parameter.

 Generates the link parameter to be used in generating the relation
 declaration.

    [$refs] (array) Reference constraint


*yii/gii/generators/model/Generator::checkJunctionTable*	protected
>
 checkJunctionTable($table)
<
return (array|bool) All unique foreign key pairs if the table is a junction table, or
false if the table is not a junction table.

 Checks if the given table is a junction table, that is it has at least one
 pair of unique foreign keys.

    [$table] () 


*yii/gii/generators/model/Generator::generateRelationName*protected
>
 generateRelationName($relations, $table, $key, $multiple)
<
return (string) The relation name

 Generate a relation name for the specified table and a base name.

    [$relations] (array) The relations being generated currently.
    [$table] (\yii\db\TableSchema) The table schema
    [$key] (string) A base name that the relation name may be generated from
    [$multiple] (bool) Whether this is a has-many relation


*yii/gii/generators/model/Generator::validateDb*		public
>
 validateDb()
<
return (void)

 Validates the 'db' attribute.


*yii/gii/generators/model/Generator::validateNamespace*	public
>
 validateNamespace($attribute)
<
return (void)

 Validates the namespace.

    [$attribute] (string) Namespace variable.


*yii/gii/generators/model/Generator::validateModelClass*	public
>
 validateModelClass()
<
return (void)

 Validates the 'modelClass' attribute.


*yii/gii/generators/model/Generator::validateTableName*	public
>
 validateTableName()
<
return (void)

 Validates the 'tableName' attribute.


*yii/gii/generators/model/Generator::getTableNames*	protected
>
 getTableNames()
<
return (array) The table names that match the pattern specified by 'tableName'.



*yii/gii/generators/model/Generator::generateTableName*	public
>
 generateTableName($tableName)
<
return (string) The generated table name

 Generates the table name by considering table prefix.

 If 'useTablePrefix' is false, the table name will be returned without change.

    [$tableName] (string) The table name (which may contain schema prefix)


*yii/gii/generators/model/Generator::generateClassName*	protected
>
 generateClassName($tableName, $useSchemaName='null')
<
return (string) The generated class name

 Generates a class name from the specified table name.

    [$tableName] (string) The table name (which may contain schema prefix)
    [$useSchemaName] (bool) Should schema name be included in the class name,
    if present


*yii/gii/generators/model/Generator::generateQueryClassName*protected
>
 generateQueryClassName($modelClassName)
<
return (string) Generated class name

 Generates a query class name from the specified model class name.

    [$modelClassName] (string) Model class name


*yii/gii/generators/model/Generator::getDbConnection*	protected
>
 getDbConnection()
<
return (\yii\db\Connection) The DB connection as specified by 'db'.



*yii/gii/generators/model/Generator::getDbDriverName*	protected
>
 getDbDriverName()
<
return (string|null) Driver name of db connection. In case db is not instance of
\yii\db\Connection null will be returned.



*yii/gii/generators/model/Generator::isColumnAutoIncremental*protected
>
 isColumnAutoIncremental($table, $columns)
<
return (bool) Whether any of the specified columns is auto incremental.

 Checks if any of the specified columns is auto incremental.

    [$table] (\yii\db\TableSchema) The table schema
    [$columns] (array) Columns to check for autoIncrement property



 vim:tw=78:ts=8:ft=help:norl:
