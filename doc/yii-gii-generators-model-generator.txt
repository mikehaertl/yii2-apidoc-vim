
*yii/gii/generators/model/Generator*   >> |yii/gii/Generator|
====================================


PROPERTY DETAILS
------------------------------------------------------------------------------

$templates				*yii/gii/generators/model/Generator::$templates*
 See |yii/gii/Generator::$templates|

$template				*yii/gii/generators/model/Generator::$template*
 See |yii/gii/Generator::$template|

$enableI18N				*yii/gii/generators/model/Generator::$enableI18N*
 See |yii/gii/Generator::$enableI18N|

$messageCategory			*yii/gii/generators/model/Generator::$messageCategory*
 See |yii/gii/Generator::$messageCategory|

$db					*yii/gii/generators/model/Generator::$db*
 ()

$ns					*yii/gii/generators/model/Generator::$ns*
 ()

$tableName				*yii/gii/generators/model/Generator::$tableName*
 ()

$modelClass				*yii/gii/generators/model/Generator::$modelClass*
 ()

$baseClass				*yii/gii/generators/model/Generator::$baseClass*
 ()

$generateRelations			*yii/gii/generators/model/Generator::$generateRelations*
 ()

$generateLabelsFromComments		*yii/gii/generators/model/Generator::$generateLabelsFromComments*
 ()

$useTablePrefix				*yii/gii/generators/model/Generator::$useTablePrefix*
 ()

$behaviors				*yii/gii/generators/model/Generator::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$validators				*yii/gii/generators/model/Generator::$validators*
 (\ArrayObject|\yii\validators\Validator[]) All the validators declared in the
 model.

$activeValidators			*yii/gii/generators/model/Generator::$activeValidators*
 (\yii\validators\Validator[]) The validators applicable to the current
 'scenario'.

$errors					*yii/gii/generators/model/Generator::$errors*
 (array) Errors for all attributes or the specified attribute. Empty array is
 returned if no error. Note that when returning errors for all attributes, the
 result is a two-dimensional array, like the following:

   // $params refers to validation parameters given in the rule
   function validatorName($attribute, $params)



$firstErrors				*yii/gii/generators/model/Generator::$firstErrors*
 (array) The first errors. The array keys are the attribute names, and the
 array values are the corresponding error messages. An empty array will be
 returned if there is no error.

$attributes				*yii/gii/generators/model/Generator::$attributes*
 (array) Attribute values (name => value).

$scenario				*yii/gii/generators/model/Generator::$scenario*
 (string) The scenario that this model is in. Defaults to 'SCENARIO_DEFAULT'.

$iterator				*yii/gii/generators/model/Generator::$iterator*
 (\ArrayIterator) An iterator for traversing the items in the list.

$name					*yii/gii/generators/model/Generator::$name*
 (string) Name of the code generator

$description				*yii/gii/generators/model/Generator::$description*
 (string) The detailed description of the generator.

$stickyDataFile				*yii/gii/generators/model/Generator::$stickyDataFile*
 (string) The file path that stores the sticky attribute values.

$templatePath				*yii/gii/generators/model/Generator::$templatePath*
 (string) The root path of the template files that are currently being used.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/gii/generators/model/Generator::className*		public
 See |yii/base/Object::className|


*yii/gii/generators/model/Generator::__construct*		public
 See |yii/base/Object::__construct|


*yii/gii/generators/model/Generator::init*		public
 See |yii/gii/Generator::init|


*yii/gii/generators/model/Generator::__get*		public
 See |yii/base/Component::__get|


*yii/gii/generators/model/Generator::__set*		public
 See |yii/base/Component::__set|


*yii/gii/generators/model/Generator::__isset*		public
 See |yii/base/Component::__isset|


*yii/gii/generators/model/Generator::__unset*		public
 See |yii/base/Component::__unset|


*yii/gii/generators/model/Generator::__call*		public
 See |yii/base/Component::__call|


*yii/gii/generators/model/Generator::hasProperty*		public
 See |yii/base/Component::hasProperty|


*yii/gii/generators/model/Generator::canGetProperty*	public
 See |yii/base/Component::canGetProperty|


*yii/gii/generators/model/Generator::canSetProperty*	public
 See |yii/base/Component::canSetProperty|


*yii/gii/generators/model/Generator::hasMethod*		public
 See |yii/base/Component::hasMethod|


*yii/gii/generators/model/Generator::__clone*		public
 See |yii/base/Component::__clone|


*yii/gii/generators/model/Generator::behaviors*		public
 See |yii/base/Component::behaviors|


*yii/gii/generators/model/Generator::hasEventHandlers*	public
 See |yii/base/Component::hasEventHandlers|


*yii/gii/generators/model/Generator::on*			public
 See |yii/base/Component::on|


*yii/gii/generators/model/Generator::off*			public
 See |yii/base/Component::off|


*yii/gii/generators/model/Generator::trigger*		public
 See |yii/base/Component::trigger|


*yii/gii/generators/model/Generator::getBehavior*		public
 See |yii/base/Component::getBehavior|


*yii/gii/generators/model/Generator::getBehaviors*	public
 See |yii/base/Component::getBehaviors|


*yii/gii/generators/model/Generator::attachBehavior*	public
 See |yii/base/Component::attachBehavior|


*yii/gii/generators/model/Generator::attachBehaviors*	public
 See |yii/base/Component::attachBehaviors|


*yii/gii/generators/model/Generator::detachBehavior*	public
 See |yii/base/Component::detachBehavior|


*yii/gii/generators/model/Generator::detachBehaviors*	public
 See |yii/base/Component::detachBehaviors|


*yii/gii/generators/model/Generator::ensureBehaviors*	public
 See |yii/base/Component::ensureBehaviors|


*yii/gii/generators/model/Generator::fields*		public
 See |yii/base/ArrayableTrait::fields|


*yii/gii/generators/model/Generator::extraFields*		public
 See |yii/base/ArrayableTrait::extraFields|


*yii/gii/generators/model/Generator::toArray*		public
 See |yii/base/ArrayableTrait::toArray|


*yii/gii/generators/model/Generator::resolveFields*	protected
 See |yii/base/ArrayableTrait::resolveFields|


*yii/gii/generators/model/Generator::rules*		public
>
 rules()
<
(array) Validation rules

 Validation rules are used by 'validate()' to check if attribute values are
 valid. Child classes may override this method to declare different validation
 rules.

 Each rule is an array with the following structure:

   [
       // built-in "required" validator
       [['username', 'password'], 'required'],
       // built-in "string" validator customized with "min" and "max"
 properties
       ['username', 'string', 'min' => 3, 'max' => 12],
       // built-in "compare" validator that is used in "register" scenario
 only
       ['password', 'compare', 'compareAttribute' => 'password2', 'on' =>
 'register'],
       // an inline validator defined via the "authenticate()" method in the
 model class
       ['password', 'authenticate', 'on' => 'login'],
       // a validator of class "DateRangeValidator"
       ['dateRange', 'DateRangeValidator'],
   ];

 where

  
   - attribute list: required, specifies the attributes array to be
   validated, for single attribute you can pass string;  
   - validator type: required, specifies the validator to be used. It
   can be a built-in validator name,    a method name of the model class, an
 anonymous function, or a validator class name.  
   - on: optional, specifies the 'scenario|scenarios' array when the
   validation    rule can be applied. If this option is not set, the rule will
 apply to all scenarios.  
   - additional name-value pairs can be specified to initialize the
   corresponding validator properties.    Please refer to individual validator
 class API for possible properties.

 A validator can be either an object of a class extending 'Validator', or a
 model class method (called *inline validator*) that has the following
 signature:

   [
       'username' => [
           'Username is required.',
           'Username must contain only word characters.',
       ],
       'email' => [
           'Email address is invalid.',
       ]
   ]

 In the above '$attribute' refers to currently validated attribute name while
 '$params' contains an array of validator configuration options such as 'max'
 in case of 'string' validator. Currently validate attribute value can be
 accessed as '$this->[$attribute]'.

 Yii also provides a set of 'Validator::builtInValidators|built-in
 validators'. They each has an alias name which can be used when specifying a
 validation rule.

 Below are some examples:

   [
       ['attribute1', 'attribute2'],
       'validator type',
       'on' => ['scenario1', 'scenario2'],
       ...other parameters...
   ]

 Note, in order to inherit rules defined in the parent class, a child class
 needs to merge the parent rules with child rules using functions such as
 'array_merge()'.


*yii/gii/generators/model/Generator::scenarios*		public
 See |yii/base/Model::scenarios|


*yii/gii/generators/model/Generator::formName*		public
 See |yii/base/Model::formName|


*yii/gii/generators/model/Generator::attributes*		public
 See |yii/base/Model::attributes|


*yii/gii/generators/model/Generator::attributeLabels*	public
>
 attributeLabels()
<
(array) Attribute labels (name => label)

 Attribute labels are mainly used for display purpose. For example, given an
 attribute 'firstName', we can declare a label 'First Name' which is more
 user-friendly and can be displayed to end users.

 By default an attribute label is generated using 'generateAttributeLabel()'.
 This method allows you to explicitly specify attribute labels.

 Note, in order to inherit labels defined in the parent class, a child class
 needs to merge the parent labels with child labels using functions such as
 'array_merge()'.


*yii/gii/generators/model/Generator::validate*		public
 See |yii/base/Model::validate|


*yii/gii/generators/model/Generator::beforeValidate*	public
 See |yii/base/Model::beforeValidate|


*yii/gii/generators/model/Generator::afterValidate*	public
 See |yii/base/Model::afterValidate|


*yii/gii/generators/model/Generator::getValidators*	public
 See |yii/base/Model::getValidators|


*yii/gii/generators/model/Generator::getActiveValidators*	public
 See |yii/base/Model::getActiveValidators|


*yii/gii/generators/model/Generator::createValidators*	public
 See |yii/base/Model::createValidators|


*yii/gii/generators/model/Generator::isAttributeRequired*	public
 See |yii/base/Model::isAttributeRequired|


*yii/gii/generators/model/Generator::isAttributeSafe*	public
 See |yii/base/Model::isAttributeSafe|


*yii/gii/generators/model/Generator::isAttributeActive*	public
 See |yii/base/Model::isAttributeActive|


*yii/gii/generators/model/Generator::getAttributeLabel*	public
 See |yii/base/Model::getAttributeLabel|


*yii/gii/generators/model/Generator::hasErrors*		public
 See |yii/base/Model::hasErrors|


*yii/gii/generators/model/Generator::getErrors*		public
 See |yii/base/Model::getErrors|


*yii/gii/generators/model/Generator::getFirstErrors*	public
 See |yii/base/Model::getFirstErrors|


*yii/gii/generators/model/Generator::getFirstError*	public
 See |yii/base/Model::getFirstError|


*yii/gii/generators/model/Generator::addError*		public
 See |yii/base/Model::addError|


*yii/gii/generators/model/Generator::clearErrors*		public
 See |yii/base/Model::clearErrors|


*yii/gii/generators/model/Generator::generateAttributeLabel*public
 See |yii/base/Model::generateAttributeLabel|


*yii/gii/generators/model/Generator::getAttributes*	public
 See |yii/base/Model::getAttributes|


*yii/gii/generators/model/Generator::setAttributes*	public
 See |yii/base/Model::setAttributes|


*yii/gii/generators/model/Generator::onUnsafeAttribute*	public
 See |yii/base/Model::onUnsafeAttribute|


*yii/gii/generators/model/Generator::getScenario*		public
 See |yii/base/Model::getScenario|


*yii/gii/generators/model/Generator::setScenario*		public
 See |yii/base/Model::setScenario|


*yii/gii/generators/model/Generator::safeAttributes*	public
 See |yii/base/Model::safeAttributes|


*yii/gii/generators/model/Generator::activeAttributes*	public
 See |yii/base/Model::activeAttributes|


*yii/gii/generators/model/Generator::load*		public
 See |yii/base/Model::load|


*yii/gii/generators/model/Generator::loadMultiple*	public
 See |yii/base/Model::loadMultiple|


*yii/gii/generators/model/Generator::validateMultiple*	public
 See |yii/base/Model::validateMultiple|


*yii/gii/generators/model/Generator::getIterator*		public
 See |yii/base/Model::getIterator|


*yii/gii/generators/model/Generator::offsetExists*	public
 See |yii/base/Model::offsetExists|


*yii/gii/generators/model/Generator::offsetGet*		public
 See |yii/base/Model::offsetGet|


*yii/gii/generators/model/Generator::offsetSet*		public
 See |yii/base/Model::offsetSet|


*yii/gii/generators/model/Generator::offsetUnset*		public
 See |yii/base/Model::offsetUnset|


*yii/gii/generators/model/Generator::getName*		public
>
 getName()
<
(string) Name of the code generator



*yii/gii/generators/model/Generator::generate*		public
>
 generate()
<
(\yii\gii\CodeFile[]) A list of code files to be created.

 This is the main method that child classes should implement. Please refer to
 '\yii\gii\generators\controller\Generator::generate()' as an example on how
 to implement this method.


*yii/gii/generators/model/Generator::requiredTemplates*	public
>
 requiredTemplates()
<
(array) List of code template files that are required. They should be file
paths relative to 'templatePath'.

 Derived classes usually should override this method if they require the
 existence of certain template files.


*yii/gii/generators/model/Generator::stickyAttributes*	public
>
 stickyAttributes()
<
(array) List of sticky attributes

 A sticky attribute will remember its value and will initialize the attribute
 with this value when the generator is restarted.


*yii/gii/generators/model/Generator::hints*		public
>
 hints()
<
(array) The list of hint messages

 The array keys are the attribute names, and the array values are the
 corresponding hint messages. Hint messages will be displayed to end users
 when they are filling the form for the generator.


*yii/gii/generators/model/Generator::autoCompleteData*	public
>
 autoCompleteData()
<
(array) The list of auto complete values

 The array keys are the attribute names, and the array values are the
 corresponding auto complete values. Auto complete values can also be callable
 typed in order one want to make postponed data generation.


*yii/gii/generators/model/Generator::successMessage*	public
 See |yii/gii/Generator::successMessage|


*yii/gii/generators/model/Generator::formView*		public
 See |yii/gii/Generator::formView|


*yii/gii/generators/model/Generator::defaultTemplate*	public
 See |yii/gii/Generator::defaultTemplate|


*yii/gii/generators/model/Generator::getDescription*	public
>
 getDescription()
<
(string) The detailed description of the generator.



*yii/gii/generators/model/Generator::loadStickyAttributes*public
 See |yii/gii/Generator::loadStickyAttributes|


*yii/gii/generators/model/Generator::saveStickyAttributes*public
 See |yii/gii/Generator::saveStickyAttributes|


*yii/gii/generators/model/Generator::getStickyDataFile*	public
 See |yii/gii/Generator::getStickyDataFile|


*yii/gii/generators/model/Generator::save*		public
 See |yii/gii/Generator::save|


*yii/gii/generators/model/Generator::getTemplatePath*	public
 See |yii/gii/Generator::getTemplatePath|


*yii/gii/generators/model/Generator::render*		public
 See |yii/gii/Generator::render|


*yii/gii/generators/model/Generator::validateTemplate*	public
 See |yii/gii/Generator::validateTemplate|


*yii/gii/generators/model/Generator::validateClass*	public
 See |yii/gii/Generator::validateClass|


*yii/gii/generators/model/Generator::validateNewClass*	public
 See |yii/gii/Generator::validateNewClass|


*yii/gii/generators/model/Generator::validateMessageCategory*public
 See |yii/gii/Generator::validateMessageCategory|


*yii/gii/generators/model/Generator::isReservedKeyword*	public
 See |yii/gii/Generator::isReservedKeyword|


*yii/gii/generators/model/Generator::generateString*	public
 See |yii/gii/Generator::generateString|


*yii/gii/generators/model/Generator::generateLabels*	public
>
 generateLabels($table)
<
(array) The generated attribute labels (name => label)

    [$table] (\yii\db\TableSchema) The table schema


*yii/gii/generators/model/Generator::generateRules*	public
>
 generateRules($table)
<
(array) The generated validation rules

    [$table] (\yii\db\TableSchema) The table schema


*yii/gii/generators/model/Generator::generateRelations*	protected
>
 generateRelations()
<
(array) The generated relation declarations



*yii/gii/generators/model/Generator::generateRelationLink*protected
>
 generateRelationLink($refs)
<
(string) The generated link parameter.

    [$refs] (array) Reference constraint


*yii/gii/generators/model/Generator::checkPivotTable*	protected
>
 checkPivotTable($table)
<
(array|boolean) The relevant foreign key constraint information if the table
is a pivot table, or false if the table is not a pivot table.

 For simplicity, this method only deals with the case where the pivot contains
 two PK columns, each referencing a column in a different table.
    [$table] () 


*yii/gii/generators/model/Generator::generateRelationName*protected
>
 generateRelationName($relations, $className, $table, $key, $multiple)
<
(string) The relation name

    [$relations] (array) The relations being generated currently.
    [$className] (string) The class name that will contain the relation
    declarations
    [$table] (\yii\db\TableSchema) The table schema
    [$key] (string) A base name that the relation name may be generated from
    [$multiple] (boolean) Whether this is a has-many relation


*yii/gii/generators/model/Generator::validateDb*		public
>
 validateDb()
<
(void)



*yii/gii/generators/model/Generator::validateNamespace*	public
>
 validateNamespace()
<
(void)



*yii/gii/generators/model/Generator::validateModelClass*	public
>
 validateModelClass()
<
(void)



*yii/gii/generators/model/Generator::validateTableName*	public
>
 validateTableName()
<
(void)



*yii/gii/generators/model/Generator::getTableNames*	protected
>
 getTableNames()
<
(array) The table names that match the pattern specified by 'tableName'.



*yii/gii/generators/model/Generator::generateTableName*	public
>
 generateTableName($tableName)
<
(string) The generated table name

 If 'useTablePrefix' is false, the table name will be returned without change.
    [$tableName] (string) The table name (which may contain schema prefix)


*yii/gii/generators/model/Generator::generateClassName*	protected
>
 generateClassName($tableName)
<
(string) The generated class name

    [$tableName] (string) The table name (which may contain schema prefix)


*yii/gii/generators/model/Generator::getDbConnection*	protected
>
 getDbConnection()
<
(\yii\db\Connection) The DB connection as specified by 'db'.



*yii/gii/generators/model/Generator::isColumnAutoIncremental*protected
>
 isColumnAutoIncremental($table, $columns)
<
(boolean) Whether any of the specified columns is auto incremental.

    [$table] (\yii\db\TableSchema) The table schema
    [$columns] (array) Columns to check for autoIncrement property



 vim:tw=78:ts=8:ft=help:norl:
