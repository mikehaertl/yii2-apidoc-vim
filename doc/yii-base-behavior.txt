
*yii/base/Behavior*   >> |yii/base/BaseObject|
===================

SUBCLASSES
------------------------------------------------------------------------------

|yii/filters/HostControl|
|yii/filters/HttpCache|
|yii/filters/RateLimiter|
|yii/filters/auth/QueryParamAuth|
|yii/filters/auth/HttpBearerAuth|
|yii/filters/auth/CompositeAuth|
|yii/filters/auth/HttpBasicAuth|
|yii/filters/auth/HttpHeaderAuth|
|yii/filters/auth/AuthMethod|
|yii/filters/ContentNegotiator|
|yii/filters/Cors|
|yii/filters/AccessControl|
|yii/filters/PageCache|
|yii/filters/AjaxFilter|
|yii/filters/VerbFilter|
|yii/base/ActionFilter|
|yii/behaviors/BlameableBehavior|
|yii/behaviors/TimestampBehavior|
|yii/behaviors/AttributeTypecastBehavior|
|yii/behaviors/AttributeBehavior|
|yii/behaviors/CacheableWidgetBehavior|
|yii/behaviors/OptimisticLockBehavior|
|yii/behaviors/SluggableBehavior|
|yii/behaviors/AttributesBehavior|
|yii/queue/LogBehavior|
|yii/queue/closure/Behavior|
|yii/queue/cli/Verbose|
|yii/queue/cli/VerboseBehavior|

DESCRIPTION
------------------------------------------------------------------------------

 A behavior can be used to enhance the functionality of an existing component
 without modifying its code. In particular, it can "inject" its own methods
 and properties into the component and make them directly accessible via the
 component. It can also respond to the events triggered in the component and
 thus intercept the normal code execution.

 For more details and usage information on Behavior, see the [guide article on
 behaviors](guide:concept-behaviors).


PROPERTY DETAILS
------------------------------------------------------------------------------


$owner					*yii/base/Behavior::$owner*

 (\yii\base\Component|null) The owner of this behavior



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|


*yii/base/Behavior::events*				public
>
 events()
<
return (array) Events (array keys) and the corresponding event handler methods (array
values).

 Declares event handlers for the 'owner''s events.

 Child classes may override this method to declare what PHP callbacks should
 be attached to the events of the 'owner' component.

 The callbacks will be attached to the 'owner''s events when the behavior is
 attached to the owner; and they will be detached from the events when the
 behavior is detached from the component.

 The callbacks can be any of the following:


   - method in this behavior: ''handleClick'', equivalent to '[$this,
   'handleClick']' 
   - object method: '[$object, 'handleClick']' 
   - static method: '['Page', 'handleClick']' 
   - anonymous function: 'function ($event) { ... }'

 The following is an example:

   [
       Model::EVENT_BEFORE_VALIDATE => 'myBeforeValidate',
       Model::EVENT_AFTER_VALIDATE => 'myAfterValidate',
   ]




*yii/base/Behavior::attach*				public
>
 attach($owner)
<
return (void)

 Attaches the behavior object to the component.

 The default implementation will set the 'owner' property and attach event
 handlers as declared in 'events'. Make sure you call the parent
 implementation if you override this method.

    [$owner] (\yii\base\Component) The component that this behavior is to be
    attached to.


*yii/base/Behavior::detach*				public
>
 detach()
<
return (void)

 Detaches the behavior object from the component.

 The default implementation will unset the 'owner' property and detach event
 handlers declared in 'events'. Make sure you call the parent implementation
 if you override this method.



 vim:tw=78:ts=8:ft=help:norl:
