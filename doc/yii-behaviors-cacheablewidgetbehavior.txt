
*yii/behaviors/CacheableWidgetBehavior*   >> |yii/base/Behavior|
=======================================

DESCRIPTION
------------------------------------------------------------------------------

 The behavior may be used without any configuration if an application has
 'cache' component configured. By default the widget will be cached for one
 minute.

 The following example will cache the posts widget for an indefinite duration
 until any post is modified.

   use yii\behaviors\CacheableWidgetBehavior;

   public function behaviors()
   {
       return [
           [
               'class' => CacheableWidgetBehavior::className(),
               'cacheDuration' => 0,
               'cacheDependency' => [
                   'class' => 'yii\caching\DbDependency',
                   'sql' => 'SELECT MAX(updated_at) FROM posts',
               ],
           ],
       ];
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Behavior::$owner|


$cache					*yii/behaviors/CacheableWidgetBehavior::$cache*

 (\yii\caching\CacheInterface|string|array) A cache object or a cache
 component ID or a configuration array for creating a cache object. Defaults
 to the 'cache' application component.

$cacheDuration				*yii/behaviors/CacheableWidgetBehavior::$cacheDuration*

 (int) Cache duration in seconds. Set to '0' to indicate that the cached data
 will never expire. Defaults to 60 seconds or 1 minute.

$cacheDependency			*yii/behaviors/CacheableWidgetBehavior::$cacheDependency*

 (\yii\caching\Dependency|array|null) A cache dependency or a configuration
 array for creating a cache dependency or 'null' meaning no cache dependency.

 For example,

   [
       'class' => 'yii\caching\DbDependency',
       'sql' => 'SELECT MAX(updated_at) FROM posts',
   ]

 would make the widget cache depend on the last modified time of all posts. If
 any post has its modification time changed, the cached content would be
 invalidated.

$cacheKeyVariations			*yii/behaviors/CacheableWidgetBehavior::$cacheKeyVariations*

 (string[]|string) An array of strings or a single string which would cause
 the variation of the content being cached (e.g. an application language, a
 GET parameter).

 The following variation setting will cause the content to be cached in
 different versions according to the current application language:

   [
       Yii::$app->language,
   ]



$cacheEnabled				*yii/behaviors/CacheableWidgetBehavior::$cacheEnabled*

 (bool) Whether to enable caching or not. Allows to turn the widget caching on
 and off according to specific conditions. The following configuration will
 disable caching when a special GET parameter is passed:

   empty(Yii::$app->request->get('disable-caching'))





METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Behavior::events|
 |yii/base/Behavior::detach|


*yii/behaviors/CacheableWidgetBehavior::attach*		public
>
 attach($owner)
<
return (void)

 {@inheritdoc}

    [$owner] () 


*yii/behaviors/CacheableWidgetBehavior::beforeRun*	public
>
 beforeRun($event)
<
return (void)

 Begins fragment caching. Prevents owner widget from execution if its contents
 can be retrieved from the cache.

    [$event] (\yii\base\WidgetEvent) 'Widget::EVENT_BEFORE_RUN' event.


*yii/behaviors/CacheableWidgetBehavior::afterRun*		public
>
 afterRun($event)
<
return (void)

 Outputs widget contents and ends fragment caching.

    [$event] (\yii\base\WidgetEvent) 'Widget::EVENT_AFTER_RUN' event.



 vim:tw=78:ts=8:ft=help:norl:
