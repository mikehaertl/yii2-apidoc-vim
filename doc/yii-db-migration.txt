
*yii/db/Migration*   >> |yii/base/Component|
==================

SUBCLASSES
------------------------------------------------------------------------------

|yii/queue/db/migrations/M170601155600Priority|
|yii/queue/db/migrations/M170509001400Retry|
|yii/queue/db/migrations/M170307170300Later|
|yii/queue/db/migrations/M161119140200Queue|

DESCRIPTION
------------------------------------------------------------------------------

 Migration is designed to be used together with the "yii migrate" command.

 Each child class of Migration represents an individual database migration
 which is identified by the child class name.

 Within each migration, the 'up()' method should be overridden to contain the
 logic for "upgrading" the database; while the 'down()' method for the
 "downgrading" logic. The "yii migrate" command manages all available
 migrations in an application.

 If the database supports transactions, you may also override 'safeUp()' and
 'safeDown()' so that if anything wrong happens during the upgrading or
 downgrading, the whole migration can be reverted in a whole.

 Note that some DB queries in some DBMS cannot be put into a transaction. For
 some examples, please refer to [implicit
 commit](http://dev.mysql.com/doc/refman/5.7/en/implicit-commit.html). If this
 is the case, you should still implement 'up()' and 'down()', instead.

 Migration provides a set of convenient methods for manipulating database data
 and schema. For example, the 'insert()' method can be used to easily insert a
 row of data into a database table; the 'createTable()' method can be used to
 create a database table. Compared with the same methods in 'Command', these
 methods will display extra information showing the method parameters and
 execution time, which may be useful when applying migrations.

 For more details and usage information on Migration, see the [guide article
 on Migration](guide:db-migrations).


PROPERTY DETAILS
------------------------------------------------------------------------------


$db					*yii/db/Migration::$db*

 (\yii\db\Connection|array|string) The DB connection object or the application
 component ID of the DB connection that this migration should work with.
 Starting from version 2.0.2, this can also be a configuration array for
 creating the object.

 Note that when a Migration object is created by the 'migrate' command, this
 property will be overwritten by the command. If you do not want to use the DB
 connection provided by the command, you may override the 'init()' method like
 the following:

   public function init()
   {
       $this->db = 'db2';
       parent::init();
   }



$maxSqlOutputLength			*yii/db/Migration::$maxSqlOutputLength*

 (int) Max number of characters of the SQL outputted. Useful for reduction of
 long statements and making console output more compact.

$compact				*yii/db/Migration::$compact*

 (bool) Indicates whether the console output should be compacted. If this is
 set to true, the individual commands ran within the migration will not be
 output to the console. Default is false, in other words the output is fully
 verbose by default.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/db/SchemaBuilderTrait::primaryKey|
 |yii/db/SchemaBuilderTrait::bigPrimaryKey|
 |yii/db/SchemaBuilderTrait::char|
 |yii/db/SchemaBuilderTrait::string|
 |yii/db/SchemaBuilderTrait::text|
 |yii/db/SchemaBuilderTrait::tinyInteger|
 |yii/db/SchemaBuilderTrait::smallInteger|
 |yii/db/SchemaBuilderTrait::integer|
 |yii/db/SchemaBuilderTrait::bigInteger|
 |yii/db/SchemaBuilderTrait::float|
 |yii/db/SchemaBuilderTrait::double|
 |yii/db/SchemaBuilderTrait::decimal|
 |yii/db/SchemaBuilderTrait::dateTime|
 |yii/db/SchemaBuilderTrait::timestamp|
 |yii/db/SchemaBuilderTrait::time|
 |yii/db/SchemaBuilderTrait::date|
 |yii/db/SchemaBuilderTrait::binary|
 |yii/db/SchemaBuilderTrait::boolean|
 |yii/db/SchemaBuilderTrait::money|
 |yii/db/SchemaBuilderTrait::json|


*yii/db/Migration::init*					public
>
 init()
<
return (void)

 Initializes the migration.

 This method will set 'db' to be the 'db' application component, if it is
 'null'.


*yii/db/Migration::getDb*					protected
>
 getDb()
<
return (void)

 {@inheritdoc}


*yii/db/Migration::up*					public
>
 up()
<
return (bool) Return a false value to indicate the migration fails and should not
proceed further. All other return values mean the migration succeeds.

 This method contains the logic to be executed when applying this migration.

 Child classes may override this method to provide actual migration logic.


*yii/db/Migration::down*					public
>
 down()
<
return (bool) Return a false value to indicate the migration fails and should not
proceed further. All other return values mean the migration succeeds.

 This method contains the logic to be executed when removing this migration.

 The default implementation throws an exception indicating the migration
 cannot be removed. Child classes may override this method if the
 corresponding migrations can be removed.


*yii/db/Migration::safeUp*				public
>
 safeUp()
<
return (bool) Return a false value to indicate the migration fails and should not
proceed further. All other return values mean the migration succeeds.

 This method contains the logic to be executed when applying this migration.

 This method differs from 'up()' in that the DB logic implemented here will be
 enclosed within a DB transaction. Child classes may implement this method
 instead of 'up()' if the DB logic needs to be within a transaction.

 Note: Not all DBMS support transactions. And some DB queries cannot be put
 into a transaction. For some examples, please refer to [implicit
 commit](http://dev.mysql.com/doc/refman/5.7/en/implicit-commit.html).


*yii/db/Migration::safeDown*				public
>
 safeDown()
<
return (bool) Return a false value to indicate the migration fails and should not
proceed further. All other return values mean the migration succeeds.

 This method contains the logic to be executed when removing this migration.

 This method differs from 'down()' in that the DB logic implemented here will
 be enclosed within a DB transaction. Child classes may implement this method
 instead of 'down()' if the DB logic needs to be within a transaction.

 Note: Not all DBMS support transactions. And some DB queries cannot be put
 into a transaction. For some examples, please refer to [implicit
 commit](http://dev.mysql.com/doc/refman/5.7/en/implicit-commit.html).


*yii/db/Migration::execute*				public
>
 execute($sql, $params='[]')
<
return (void)

 Executes a SQL statement.

 This method executes the specified SQL statement using 'db'.

    [$sql] (string) The SQL statement to be executed
    [$params] (array) Input parameters (name => value) for the SQL execution.
    See 'Command::execute()' for more details.


*yii/db/Migration::insert*				public
>
 insert($table, $columns)
<
return (void)

 Creates and executes an INSERT SQL statement.

 The method will properly escape the column names, and bind the values to be
 inserted.

    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column data (name => value) to be inserted into the
    table.


*yii/db/Migration::batchInsert*				public
>
 batchInsert($table, $columns, $rows)
<
return (void)

 Creates and executes a batch INSERT SQL statement.

 The method will properly escape the column names, and bind the values to be
 inserted.

    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column names.
    [$rows] (array) The rows to be batch inserted into the table


*yii/db/Migration::upsert*				public
>
 upsert($table, $insertColumns, $updateColumns='true', $params='[]')
<
return ($this) The command object itself.

 Creates and executes a command to insert rows into a database table if they
 do not already exist (matching unique constraints), or update them if they
 do.

 The method will properly escape the column names, and bind the values to be
 inserted.

    [$table] (string) The table that new rows will be inserted into/updated
    in.
    [$insertColumns] (array|\yii\db\Query) The column data (name => value) to
    be inserted into the table or instance of 'Query' to perform 'INSERT INTO
    ... SELECT' SQL statement.
    [$updateColumns] (array|bool) The column data (name => value) to be
    updated if they already exist. If 'true' is passed, the column data will
    be updated to match the insert column data. If 'false' is passed, no
    update will be performed if the column data already exists.
    [$params] (array) The parameters to be bound to the command.


*yii/db/Migration::update*				public
>
 update($table, $columns, $condition='\'\'', $params='[]')
<
return (void)

 Creates and executes an UPDATE SQL statement.

 The method will properly escape the column names and bind the values to be
 updated.

    [$table] (string) The table to be updated.
    [$columns] (array) The column data (name => value) to be updated.
    [$condition] (array|string) The conditions that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify conditions.
    [$params] (array) The parameters to be bound to the query.


*yii/db/Migration::delete*				public
>
 delete($table, $condition='\'\'', $params='[]')
<
return (void)

 Creates and executes a DELETE SQL statement.

    [$table] (string) The table where the data will be deleted from.
    [$condition] (array|string) The conditions that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify conditions.
    [$params] (array) The parameters to be bound to the query.


*yii/db/Migration::createTable*				public
>
 createTable($table, $columns, $options='null')
<
return (void)

 Builds and executes a SQL statement for creating a new DB table.

 The columns in the new  table should be specified as name-definition pairs
 (e.g. 'name' => 'string'), where name stands for a column name which will be
 properly quoted by the method, and definition stands for the column type
 which can contain an abstract DB type.

 The 'QueryBuilder::getColumnType()' method will be invoked to convert any
 abstract type into a physical one.

 If a column is specified with definition only (e.g. 'PRIMARY KEY (name,
 type)'), it will be directly put into the generated SQL.

    [$table] (string) The name of the table to be created. The name will be
    properly quoted by the method.
    [$columns] (array) The columns (name => definition) in the new table.
    [$options] (string) Additional SQL fragment that will be appended to the
    generated SQL.


*yii/db/Migration::renameTable*				public
>
 renameTable($table, $newName)
<
return (void)

 Builds and executes a SQL statement for renaming a DB table.

    [$table] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/Migration::dropTable*				public
>
 dropTable($table)
<
return (void)

 Builds and executes a SQL statement for dropping a DB table.

    [$table] (string) The table to be dropped. The name will be properly
    quoted by the method.


*yii/db/Migration::truncateTable*				public
>
 truncateTable($table)
<
return (void)

 Builds and executes a SQL statement for truncating a DB table.

    [$table] (string) The table to be truncated. The name will be properly
    quoted by the method.


*yii/db/Migration::addColumn*				public
>
 addColumn($table, $column, $type)
<
return (void)

 Builds and executes a SQL statement for adding a new DB column.

    [$table] (string) The table that the new column will be added to. The
    table name will be properly quoted by the method.
    [$column] (string) The name of the new column. The name will be properly
    quoted by the method.
    [$type] (string) The column type. The 'QueryBuilder::getColumnType()'
    method will be invoked to convert abstract column type (if any) into the
    physical one. Anything that is not recognized as abstract type will be
    kept in the generated SQL. For example, 'string' will be turned into
    'varchar(255)', while 'string not null' will become 'varchar(255) not
    null'.


*yii/db/Migration::dropColumn*				public
>
 dropColumn($table, $column)
<
return (void)

 Builds and executes a SQL statement for dropping a DB column.

    [$table] (string) The table whose column is to be dropped. The name will
    be properly quoted by the method.
    [$column] (string) The name of the column to be dropped. The name will be
    properly quoted by the method.


*yii/db/Migration::renameColumn*				public
>
 renameColumn($table, $name, $newName)
<
return (void)

 Builds and executes a SQL statement for renaming a column.

    [$table] (string) The table whose column is to be renamed. The name will
    be properly quoted by the method.
    [$name] (string) The old name of the column. The name will be properly
    quoted by the method.
    [$newName] (string) The new name of the column. The name will be properly
    quoted by the method.


*yii/db/Migration::alterColumn*				public
>
 alterColumn($table, $column, $type)
<
return (void)

 Builds and executes a SQL statement for changing the definition of a column.

    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The new column type. The 'QueryBuilder::getColumnType()'
    method will be invoked to convert abstract column type (if any) into the
    physical one. Anything that is not recognized as abstract type will be
    kept in the generated SQL. For example, 'string' will be turned into
    'varchar(255)', while 'string not null' will become 'varchar(255) not
    null'.


*yii/db/Migration::addPrimaryKey*				public
>
 addPrimaryKey($name, $table, $columns)
<
return (void)

 Builds and executes a SQL statement for creating a primary key.

 The method will properly quote the table and column names.

    [$name] (string) The name of the primary key constraint.
    [$table] (string) The table that the primary key constraint will be added
    to.
    [$columns] (string|array) Comma separated string or array of columns that
    the primary key will consist of.


*yii/db/Migration::dropPrimaryKey*			public
>
 dropPrimaryKey($name, $table)
<
return (void)

 Builds and executes a SQL statement for dropping a primary key.

    [$name] (string) The name of the primary key constraint to be removed.
    [$table] (string) The table that the primary key constraint will be
    removed from.


*yii/db/Migration::addForeignKey*				public
>
 addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete='null', $update='null')
<
return (void)

 Builds a SQL statement for adding a foreign key constraint to an existing
 table.

 The method will properly quote the table and column names.

    [$name] (string) The name of the foreign key constraint.
    [$table] (string) The table that the foreign key constraint will be added
    to.
    [$columns] (string|array) The name of the column to that the constraint
    will be added on. If there are multiple columns, separate them with commas
    or use an array.
    [$refTable] (string) The table that the foreign key references to.
    [$refColumns] (string|array) The name of the column that the foreign key
    references to. If there are multiple columns, separate them with commas or
    use an array.
    [$delete] (string) The ON DELETE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
    [$update] (string) The ON UPDATE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL


*yii/db/Migration::dropForeignKey*			public
>
 dropForeignKey($name, $table)
<
return (void)

 Builds a SQL statement for dropping a foreign key constraint.

    [$name] (string) The name of the foreign key constraint to be dropped. The
    name will be properly quoted by the method.
    [$table] (string) The table whose foreign is to be dropped. The name will
    be properly quoted by the method.


*yii/db/Migration::createIndex*				public
>
 createIndex($name, $table, $columns, $unique='false')
<
return (void)

 Builds and executes a SQL statement for creating a new index.

    [$name] (string) The name of the index. The name will be properly quoted
    by the method.
    [$table] (string) The table that the new index will be created for. The
    table name will be properly quoted by the method.
    [$columns] (string|array) The column(s) that should be included in the
    index. If there are multiple columns, please separate them by commas or
    use an array. Each column name will be properly quoted by the method.
    Quoting will be skipped for column names that include a left parenthesis
    "(".
    [$unique] (bool) Whether to add UNIQUE constraint on the created index.


*yii/db/Migration::dropIndex*				public
>
 dropIndex($name, $table)
<
return (void)

 Builds and executes a SQL statement for dropping an index.

    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/db/Migration::addCommentOnColumn*			public
>
 addCommentOnColumn($table, $column, $comment)
<
return (void)

 Builds and execute a SQL statement for adding comment to column.

    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.
    [$column] (string) The name of the column to be commented. The column name
    will be properly quoted by the method.
    [$comment] (string) The text of the comment to be added. The comment will
    be properly quoted by the method.


*yii/db/Migration::addCommentOnTable*			public
>
 addCommentOnTable($table, $comment)
<
return (void)

 Builds a SQL statement for adding comment to table.

    [$table] (string) The table to be commented. The table name will be
    properly quoted by the method.
    [$comment] (string) The text of the comment to be added. The comment will
    be properly quoted by the method.


*yii/db/Migration::dropCommentFromColumn*			public
>
 dropCommentFromColumn($table, $column)
<
return (void)

 Builds and execute a SQL statement for dropping comment from column.

    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.
    [$column] (string) The name of the column to be commented. The column name
    will be properly quoted by the method.


*yii/db/Migration::dropCommentFromTable*			public
>
 dropCommentFromTable($table)
<
return (void)

 Builds a SQL statement for dropping comment from table.

    [$table] (string) The table whose column is to be commented. The table
    name will be properly quoted by the method.


*yii/db/Migration::beginCommand*				protected
>
 beginCommand($description)
<
return (float) The time before the command is executed, for the time elapsed to be
calculated.

 Prepares for a command to be executed, and outputs to the console.

    [$description] (string) The description for the command, to be output to
    the console.


*yii/db/Migration::endCommand*				protected
>
 endCommand($time)
<
return (void)

 Finalizes after the command has been executed, and outputs to the console the
 time elapsed.

    [$time] (float) The time before the command was executed.



 vim:tw=78:ts=8:ft=help:norl:
