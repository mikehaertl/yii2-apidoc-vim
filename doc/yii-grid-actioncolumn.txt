
*yii/grid/ActionColumn*   >> |yii/grid/Column|
=======================

DESCRIPTION
------------------------------------------------------------------------------

 To add an ActionColumn to the gridview, add it to the
 'GridView::columns|columns' configuration as follows:

   'columns' => [
       // ...
       [
           'class' => ActionColumn::className(),
           // you may configure additional properties here
       ],
   ]

 For more details and usage information on ActionColumn, see the [guide
 article on data widgets](guide:output-data-widgets).


PROPERTY DETAILS
------------------------------------------------------------------------------

$grid					*yii/grid/ActionColumn::$grid*

 See |yii/grid/Column::$grid|

$header					*yii/grid/ActionColumn::$header*

 See |yii/grid/Column::$header|

$footer					*yii/grid/ActionColumn::$footer*

 See |yii/grid/Column::$footer|

$content				*yii/grid/ActionColumn::$content*

 See |yii/grid/Column::$content|

$visible				*yii/grid/ActionColumn::$visible*

 See |yii/grid/Column::$visible|

$options				*yii/grid/ActionColumn::$options*

 See |yii/grid/Column::$options|

$headerOptions				*yii/grid/ActionColumn::$headerOptions*

 (array) 

 The HTML attributes for the header cell tag.



$contentOptions				*yii/grid/ActionColumn::$contentOptions*

 See |yii/grid/Column::$contentOptions|

$footerOptions				*yii/grid/ActionColumn::$footerOptions*

 See |yii/grid/Column::$footerOptions|

$filterOptions				*yii/grid/ActionColumn::$filterOptions*

 See |yii/grid/Column::$filterOptions|

$controller				*yii/grid/ActionColumn::$controller*

 (string) The ID of the controller that should handle the actions specified
 here. If not set, it will use the currently active controller. This property
 is mainly used by 'urlCreator' to create URLs for different actions. The
 value of this property will be prefixed to each action name to form the route
 of the action.

$template				*yii/grid/ActionColumn::$template*

 (string) The template used for composing each cell in the action column.
 Tokens enclosed within curly brackets are treated as controller action IDs
 (also called *button names* in the context of action column). They will be
 replaced by the corresponding button rendering callbacks specified in
 'buttons'. For example, the token '{view}' will be replaced by the result of
 the callback 'buttons['view']'. If a callback cannot be found, the token will
 be replaced with an empty string.

 As an example, to only have the view, and update button you can add the
 ActionColumn to your GridView columns as follows:

   ['class' => 'yii\grid\ActionColumn', 'template' => '{view} {update}'],



$buttons				*yii/grid/ActionColumn::$buttons*

 (array) Button rendering callbacks. The array keys are the button names
 (without curly brackets), and the values are the corresponding button
 rendering callbacks. The callbacks should use the following signature:

   function ($url, $model, $key) {
       // return the button HTML code
   }

 where '$url' is the URL that the column creates for the button, '$model' is
 the model object being rendered for the current row, and '$key' is the key of
 the model in the data provider array.

 You can add further conditions to the button, for example only display it,
 when the model is editable (here assuming you have a status field that
 indicates that):

   [
       'update' => function ($url, $model, $key) {
           return $model->status === 'editable' ? Html::a('Update', $url) :
 '';
       },
   ],



$visibleButtons				*yii/grid/ActionColumn::$visibleButtons*

 (array) Visibility conditions for each button. The array keys are the button
 names (without curly brackets), and the values are the boolean true/false or
 the anonymous function. When the button name is not specified in this array
 it will be shown by default. The callbacks must use the following signature:

   function ($model, $key, $index) {
       return $model->status === 'editable';
   }

 Or you can pass a boolean value:

   [
       'update' => \Yii::$app->user->can('update'),
   ],



$urlCreator				*yii/grid/ActionColumn::$urlCreator*

 (callable) A callback that creates a button URL using the specified model
 information. The signature of the callback should be the same as that of
 'createUrl()' Since 2.0.10 it can accept additional parameter, which refers
 to the column instance itself:

   function (string $action, mixed $model, mixed $key, integer $index,
 ActionColumn $this) {
       //return string;
   }

 If this property is not set, button URLs will be created using 'createUrl()'.

$buttonOptions				*yii/grid/ActionColumn::$buttonOptions*

 (array) Html options to be applied to the 'initDefaultButton()|default
 button'.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/grid/ActionColumn::className*			public

 See |yii/base/Object::className|


*yii/grid/ActionColumn::__construct*			public

 See |yii/base/Object::__construct|


*yii/grid/ActionColumn::init*				public
>
 init()
<
return (void)



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/grid/ActionColumn::__get*				public

 See |yii/base/Object::__get|


*yii/grid/ActionColumn::__set*				public

 See |yii/base/Object::__set|


*yii/grid/ActionColumn::__isset*				public

 See |yii/base/Object::__isset|


*yii/grid/ActionColumn::__unset*				public

 See |yii/base/Object::__unset|


*yii/grid/ActionColumn::__call*				public

 See |yii/base/Object::__call|


*yii/grid/ActionColumn::hasProperty*			public

 See |yii/base/Object::hasProperty|


*yii/grid/ActionColumn::canGetProperty*			public

 See |yii/base/Object::canGetProperty|


*yii/grid/ActionColumn::canSetProperty*			public

 See |yii/base/Object::canSetProperty|


*yii/grid/ActionColumn::hasMethod*			public

 See |yii/base/Object::hasMethod|


*yii/grid/ActionColumn::renderHeaderCell*			public

 See |yii/grid/Column::renderHeaderCell|


*yii/grid/ActionColumn::renderFooterCell*			public

 See |yii/grid/Column::renderFooterCell|


*yii/grid/ActionColumn::renderDataCell*			public

 See |yii/grid/Column::renderDataCell|


*yii/grid/ActionColumn::renderFilterCell*			public

 See |yii/grid/Column::renderFilterCell|


*yii/grid/ActionColumn::renderHeaderCellContent*		protected

 See |yii/grid/Column::renderHeaderCellContent|


*yii/grid/ActionColumn::getHeaderCellLabel*		protected

 See |yii/grid/Column::getHeaderCellLabel|


*yii/grid/ActionColumn::renderFooterCellContent*		protected

 See |yii/grid/Column::renderFooterCellContent|


*yii/grid/ActionColumn::renderDataCellContent*		protected
>
 renderDataCellContent($model, $key, $index)
<
return (string) The rendering result







    [$model] (mixed) The data model
    [$key] (mixed) The key associated with the data model
    [$index] (int) The zero-based index of the data model among the models
    array returned by 'GridView::dataProvider'.


*yii/grid/ActionColumn::renderFilterCellContent*		protected

 See |yii/grid/Column::renderFilterCellContent|


*yii/grid/ActionColumn::initDefaultButtons*		protected
>
 initDefaultButtons()
<
return (void)



*yii/grid/ActionColumn::initDefaultButton*		protected
>
 initDefaultButton($name, $iconName, $additionalOptions='[]')
<
return (void)

    [$name] (string) Button name as it's written in template
    [$iconName] (string) The part of Bootstrap glyphicon class that makes it
    unique
    [$additionalOptions] (array) Array of additional options


*yii/grid/ActionColumn::createUrl*			public
>
 createUrl($action, $model, $key, $index)
<
return (string) The created URL

 This method is called for each button and each row.

    [$action] (string) The button name (or action ID)
    [$model] (\yii\db\ActiveRecordInterface) The data model
    [$key] (mixed) The key associated with the data model
    [$index] (int) The current row index



 vim:tw=78:ts=8:ft=help:norl:
