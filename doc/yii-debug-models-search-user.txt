
*yii/debug/models/search/User*   >> |yii/base/Model|
==============================


PROPERTY DETAILS
------------------------------------------------------------------------------

$identityImplement			*yii/debug/models/search/User::$identityImplement*

 (\yii\base\Model) Implementation of IdentityInterface



METHOD DETAILS
------------------------------------------------------------------------------


*yii/debug/models/search/User::className*			public

 See |yii/base/BaseObject::className|


*yii/debug/models/search/User::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/debug/models/search/User::init*			public
>
 init()
<
return (void)



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/debug/models/search/User::__get*			public
>
 __get($name)
<
return (mixed) The property value or the value of a behavior's property



 This method will check in the following order and act accordingly:

  
   - a property defined by a getter: return the getter result  
   - a property of a behavior: return the behavior property value

 Do not call this method directly as it is a PHP magic method that will be
 implicitly called when executing '$value = $component->property;'.



    [$name] (string) The property name


*yii/debug/models/search/User::__set*			public
>
 __set($name, $value)
<
return (void)



 This method will check in the following order and act accordingly:

  
   - a property defined by a setter: set the property value  
   - an event in the format of "on xyz": attach the handler to the
   event "xyz"  
   - a behavior in the format of "as xyz": attach the behavior named as
   "xyz"  
   - a property of a behavior: set the behavior property value

 Do not call this method directly as it is a PHP magic method that will be
 implicitly called when executing '$component->property = $value;'.



    [$name] (string) The property name or the event name
    [$value] (mixed) The property value


*yii/debug/models/search/User::__isset*			public

 See |yii/base/Component::__isset|


*yii/debug/models/search/User::__unset*			public

 See |yii/base/Component::__unset|


*yii/debug/models/search/User::__call*			public

 See |yii/base/Component::__call|


*yii/debug/models/search/User::hasProperty*		public

 See |yii/base/Component::hasProperty|


*yii/debug/models/search/User::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/debug/models/search/User::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/debug/models/search/User::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/debug/models/search/User::__clone*			public

 See |yii/base/Component::__clone|


*yii/debug/models/search/User::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/debug/models/search/User::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/debug/models/search/User::on*			public

 See |yii/base/Component::on|


*yii/debug/models/search/User::off*			public

 See |yii/base/Component::off|


*yii/debug/models/search/User::trigger*			public

 See |yii/base/Component::trigger|


*yii/debug/models/search/User::getBehavior*		public

 See |yii/base/Component::getBehavior|


*yii/debug/models/search/User::getBehaviors*		public

 See |yii/base/Component::getBehaviors|


*yii/debug/models/search/User::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/debug/models/search/User::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/debug/models/search/User::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/debug/models/search/User::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/debug/models/search/User::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/debug/models/search/User::instance*			public

 See |yii/base/StaticInstanceTrait::instance|


*yii/debug/models/search/User::fields*			public

 See |yii/base/ArrayableTrait::fields|


*yii/debug/models/search/User::extraFields*		public

 See |yii/base/ArrayableTrait::extraFields|


*yii/debug/models/search/User::toArray*			public

 See |yii/base/ArrayableTrait::toArray|


*yii/debug/models/search/User::resolveFields*		protected

 See |yii/base/ArrayableTrait::resolveFields|


*yii/debug/models/search/User::rules*			public
>
 rules()
<
return (array) Validation rules



 Validation rules are used by 'validate()' to check if attribute values are
 valid. Child classes may override this method to declare different validation
 rules.

 Each rule is an array with the following structure:

   [
       ['attribute1', 'attribute2'],
       'validator type',
       'on' => ['scenario1', 'scenario2'],
       //...other parameters...
   ]

 where

  
   - attribute list: required, specifies the attributes array to be
   validated, for single attribute you can pass a string;  
   - validator type: required, specifies the validator to be used. It
   can be a built-in validator name,    a method name of the model class, an
 anonymous function, or a validator class name.  
   - on: optional, specifies the 'scenario|scenarios' array in which
   the validation    rule can be applied. If this option is not set, the rule
 will apply to all scenarios.  
   - additional name-value pairs can be specified to initialize the
   corresponding validator properties.    Please refer to individual validator
 class API for possible properties.

 A validator can be either an object of a class extending 'Validator', or a
 model class method (called *inline validator*) that has the following
 signature:

   // $params refers to validation parameters given in the rule
   function validatorName($attribute, $params)

 In the above '$attribute' refers to the attribute currently being validated
 while '$params' contains an array of validator configuration options such as
 'max' in case of 'string' validator. The value of the attribute currently
 being validated can be accessed as '$this->$attribute'. Note the '$' before
 'attribute'; this is taking the value of the variable '$attribute' and using
 it as the name of the property to access.

 Yii also provides a set of 'Validator::builtInValidators|built-in
 validators'. Each one has an alias name which can be used when specifying a
 validation rule.

 Below are some examples:

   [
       // built-in "required" validator
       [['username', 'password'], 'required'],
       // built-in "string" validator customized with "min" and "max"
 properties
       ['username', 'string', 'min' => 3, 'max' => 12],
       // built-in "compare" validator that is used in "register" scenario
 only
       ['password', 'compare', 'compareAttribute' => 'password2', 'on' =>
 'register'],
       // an inline validator defined via the "authenticate()" method in the
 model class
       ['password', 'authenticate', 'on' => 'login'],
       // a validator of class "DateRangeValidator"
       ['dateRange', 'DateRangeValidator'],
   ];

 Note, in order to inherit rules defined in the parent class, a child class
 needs to merge the parent rules with child rules using functions such as
 'array_merge()'.




*yii/debug/models/search/User::scenarios*			public

 See |yii/base/Model::scenarios|


*yii/debug/models/search/User::formName*			public

 See |yii/base/Model::formName|


*yii/debug/models/search/User::attributes*		public
>
 attributes()
<
return (array) List of attribute names.



 By default, this method returns all public non-static properties of the
 class. You may override this method to change the default behavior.




*yii/debug/models/search/User::attributeLabels*		public

 See |yii/base/Model::attributeLabels|


*yii/debug/models/search/User::attributeHints*		public

 See |yii/base/Model::attributeHints|


*yii/debug/models/search/User::validate*			public

 See |yii/base/Model::validate|


*yii/debug/models/search/User::beforeValidate*		public

 See |yii/base/Model::beforeValidate|


*yii/debug/models/search/User::afterValidate*		public

 See |yii/base/Model::afterValidate|


*yii/debug/models/search/User::getValidators*		public

 See |yii/base/Model::getValidators|


*yii/debug/models/search/User::getActiveValidators*	public

 See |yii/base/Model::getActiveValidators|


*yii/debug/models/search/User::createValidators*		public

 See |yii/base/Model::createValidators|


*yii/debug/models/search/User::isAttributeRequired*	public

 See |yii/base/Model::isAttributeRequired|


*yii/debug/models/search/User::isAttributeSafe*		public

 See |yii/base/Model::isAttributeSafe|


*yii/debug/models/search/User::isAttributeActive*		public

 See |yii/base/Model::isAttributeActive|


*yii/debug/models/search/User::getAttributeLabel*		public

 See |yii/base/Model::getAttributeLabel|


*yii/debug/models/search/User::getAttributeHint*		public

 See |yii/base/Model::getAttributeHint|


*yii/debug/models/search/User::hasErrors*			public

 See |yii/base/Model::hasErrors|


*yii/debug/models/search/User::getErrors*			public

 See |yii/base/Model::getErrors|


*yii/debug/models/search/User::getFirstErrors*		public

 See |yii/base/Model::getFirstErrors|


*yii/debug/models/search/User::getFirstError*		public

 See |yii/base/Model::getFirstError|


*yii/debug/models/search/User::addError*			public

 See |yii/base/Model::addError|


*yii/debug/models/search/User::addErrors*			public

 See |yii/base/Model::addErrors|


*yii/debug/models/search/User::clearErrors*		public

 See |yii/base/Model::clearErrors|


*yii/debug/models/search/User::generateAttributeLabel*	public

 See |yii/base/Model::generateAttributeLabel|


*yii/debug/models/search/User::getAttributes*		public

 See |yii/base/Model::getAttributes|


*yii/debug/models/search/User::setAttributes*		public

 See |yii/base/Model::setAttributes|


*yii/debug/models/search/User::onUnsafeAttribute*		public

 See |yii/base/Model::onUnsafeAttribute|


*yii/debug/models/search/User::getScenario*		public

 See |yii/base/Model::getScenario|


*yii/debug/models/search/User::setScenario*		public

 See |yii/base/Model::setScenario|


*yii/debug/models/search/User::safeAttributes*		public

 See |yii/base/Model::safeAttributes|


*yii/debug/models/search/User::activeAttributes*		public

 See |yii/base/Model::activeAttributes|


*yii/debug/models/search/User::load*			public

 See |yii/base/Model::load|


*yii/debug/models/search/User::loadMultiple*		public

 See |yii/base/Model::loadMultiple|


*yii/debug/models/search/User::validateMultiple*		public

 See |yii/base/Model::validateMultiple|


*yii/debug/models/search/User::getIterator*		public

 See |yii/base/Model::getIterator|


*yii/debug/models/search/User::offsetExists*		public

 See |yii/base/Model::offsetExists|


*yii/debug/models/search/User::offsetGet*			public

 See |yii/base/Model::offsetGet|


*yii/debug/models/search/User::offsetSet*			public

 See |yii/base/Model::offsetSet|


*yii/debug/models/search/User::offsetUnset*		public

 See |yii/base/Model::offsetUnset|


*yii/debug/models/search/User::search*			public
>
 search($params)
<
return (void)

    [$params] () 



 vim:tw=78:ts=8:ft=help:norl:
