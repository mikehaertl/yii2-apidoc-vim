
*yii/console/controllers/FixtureController*   >> |yii/console/Controller|
===========================================

SUBCLASSES
------------------------------------------------------------------------------

|yii/faker/FixtureController|

DESCRIPTION
------------------------------------------------------------------------------

 ''' #load fixtures from UsersFixture class with default namespace
 "tests\unit\fixtures" yii fixture/load User

 #also a short version of this command (generate action is default) yii
 fixture User

 #load all fixtures yii fixture "*"

 #load all fixtures except User yii fixture "*, -User"

 #load fixtures with different namespace. yii fixture/load User
 --namespace=alias\my\custom\namespace\goes\here '''

 The 'unload' sub-command can be used similarly to unload fixtures.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Controller::$id|
 |yii/base/Controller::$module|
 |yii/base/Controller::$layout|
 |yii/base/Controller::$action|
 |yii/console/Controller::$interactive|
 |yii/console/Controller::$color|
 |yii/console/Controller::$help|


$defaultAction				*yii/console/controllers/FixtureController::$defaultAction*

 (string) Controller default action ID.

$namespace				*yii/console/controllers/FixtureController::$namespace*

 (string) Default namespace to search fixtures in

$globalFixtures				*yii/console/controllers/FixtureController::$globalFixtures*

 (array) Global fixtures that should be applied when loading and unloading. By
 default it is set to 'InitDbFixture' that disables and enables integrity
 check, so your data can be safely loaded.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Controller::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Controller::actions|
 |yii/console/Controller::runAction|
 |yii/base/Controller::run|
 |yii/console/Controller::bindActionParams|
 |yii/base/Controller::createAction|
 |yii/base/Controller::beforeAction|
 |yii/base/Controller::afterAction|
 |yii/base/Controller::getModules|
 |yii/base/Controller::getUniqueId|
 |yii/base/Controller::getRoute|
 |yii/base/Controller::render|
 |yii/base/Controller::renderContent|
 |yii/base/Controller::renderPartial|
 |yii/base/Controller::renderFile|
 |yii/base/Controller::getView|
 |yii/base/Controller::setView|
 |yii/base/Controller::getViewPath|
 |yii/base/Controller::setViewPath|
 |yii/base/Controller::findLayoutFile|
 |yii/console/Controller::isColorEnabled|
 |yii/console/Controller::ansiFormat|
 |yii/console/Controller::stdout|
 |yii/console/Controller::stderr|
 |yii/console/Controller::prompt|
 |yii/console/Controller::confirm|
 |yii/console/Controller::select|
 |yii/console/Controller::getOptionValues|
 |yii/console/Controller::getPassedOptions|
 |yii/console/Controller::getPassedOptionValues|
 |yii/console/Controller::getHelpSummary|
 |yii/console/Controller::getHelp|
 |yii/console/Controller::getActionHelpSummary|
 |yii/console/Controller::getActionHelp|
 |yii/console/Controller::getActionArgsHelp|
 |yii/console/Controller::getActionOptionsHelp|
 |yii/console/Controller::getActionMethodReflection|
 |yii/console/Controller::parseDocCommentTags|
 |yii/console/Controller::parseDocCommentSummary|
 |yii/console/Controller::parseDocCommentDetail|
 |yii/test/FixtureTrait::fixtures|
 |yii/test/FixtureTrait::globalFixtures|
 |yii/test/FixtureTrait::loadFixtures|
 |yii/test/FixtureTrait::unloadFixtures|
 |yii/test/FixtureTrait::initFixtures|
 |yii/test/FixtureTrait::getFixtures|
 |yii/test/FixtureTrait::getFixture|
 |yii/test/FixtureTrait::createFixtures|


*yii/console/controllers/FixtureController::options*	public
>
 options($actionID)
<
return (void)

 {@inheritdoc}

    [$actionID] () 


*yii/console/controllers/FixtureController::optionAliases*public
>
 optionAliases()
<
return (void)

 {@inheritdoc}


*yii/console/controllers/FixtureController::actionLoad*	public
>
 actionLoad($fixturesInput='[]')
<
return (int) Return code

 Loads the specified fixture data.

 For example,

 ''' # load the fixture data specified by User and UserProfile. # any existing
 fixture data will be removed first yii fixture/load "User, UserProfile"

 # load all available fixtures found under 'tests\unit\fixtures' yii
 fixture/load "*"

 # load all fixtures except User and UserProfile yii fixture/load "*, -User,
 -UserProfile" '''

    [$fixturesInput] (array) 


*yii/console/controllers/FixtureController::actionUnload*	public
>
 actionUnload($fixturesInput='[]')
<
return (int) Return code

 Unloads the specified fixtures.

 For example,

 ''' # unload the fixture data specified by User and UserProfile. yii
 fixture/unload "User, UserProfile"

 # unload all fixtures found under 'tests\unit\fixtures' yii fixture/unload
 "*"

 # unload all fixtures except User and UserProfile yii fixture/unload "*,
 -User, -UserProfile" '''

    [$fixturesInput] (array) 


*yii/console/controllers/FixtureController::notifyNothingToLoad*public
>
 notifyNothingToLoad($foundFixtures, $except)
<
return (void)

 Notifies user that there are no fixtures to load according input conditions.

    [$foundFixtures] (array) Array of found fixtures
    [$except] (array) Array of names of fixtures that should not be loaded


*yii/console/controllers/FixtureController::notifyNothingToUnload*public
>
 notifyNothingToUnload($foundFixtures, $except)
<
return (void)

 Notifies user that there are no fixtures to unload according input
 conditions.

    [$foundFixtures] (array) Array of found fixtures
    [$except] (array) Array of names of fixtures that should not be loaded


*yii/console/controllers/FixtureController::needToApplyAll*public
>
 needToApplyAll($fixture)
<
return (bool) 

 Checks if needed to apply all fixtures.

    [$fixture] (string) 



 vim:tw=78:ts=8:ft=help:norl:
