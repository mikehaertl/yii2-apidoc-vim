
*yii\web\HttpCache*   >> yii\base\ActionFilter
===================

 It is an action filter that can be added to a controller and handles the
 'beforeAction' event.

 To use AccessControl, declare it in the 'behaviors()' method of your
 controller class. In the following example the filter will be applied to the
 'list'-action and the Last-Modified header will contain the date of the last
 update to the user table in the database.

   public function behaviors()
   {
       return [
           'httpCache' => [
               'class' => \yii\web\HttpCache::className(),
               'only' => ['list'],
               'lastModified' => function ($action, $params) {
                   $q = new Query();
                   return
 strtotime($q->from('users')->max('updated_timestamp'));
               },
   //            'etagSeed' => function ($action, $params) {
   //                return // generate etag seed here
   //            }
           ],
       ];
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

<$owner>				*yii\web\HttpCache::$owner*
 See |yii\base\Behavior::$owner|

<$only> 				*yii\web\HttpCache::$only*
 See |yii\base\ActionFilter::$only|

<$except>				*yii\web\HttpCache::$except*
 See |yii\base\ActionFilter::$except|

<$lastModified> 			*yii\web\HttpCache::$lastModified*
 (callable) A PHP callback that returns the UNIX timestamp of the last
 modification time. The callback's signature should be:

   function ($action, $params)

 where '$action' is the [[Action]] object that this filter is currently
 handling; '$params' takes the value of [[params]]. The callback should return
 a UNIX timestamp.

<$etagSeed>				*yii\web\HttpCache::$etagSeed*
 (callable) A PHP callback that generates the Etag seed string. The callback's
 signature should be:

   function ($action, $params)

 where '$action' is the [[Action]] object that this filter is currently
 handling; '$params' takes the value of [[params]]. The callback should return
 a string serving as the seed for generating an Etag.

<$params>				*yii\web\HttpCache::$params*
 (mixed) Additional parameters that should be passed to the [[lastModified]]
 and [[etagSeed]] callbacks.

<$cacheControlHeader>			*yii\web\HttpCache::$cacheControlHeader*
 (string) HTTP cache control header. If null, the header will not be sent.



METHOD DETAILS
------------------------------------------------------------------------------

*yii\web\HttpCache::className*					 public
 See |yii\base\Object::className|


*yii\web\HttpCache::__construct*				 public
 See |yii\base\Object::__construct|


*yii\web\HttpCache::init*					 public
 See |yii\base\Object::init|


*yii\web\HttpCache::__get*					 public
 See |yii\base\Object::__get|


*yii\web\HttpCache::__set*					 public
 See |yii\base\Object::__set|


*yii\web\HttpCache::__isset*					 public
 See |yii\base\Object::__isset|


*yii\web\HttpCache::__unset*					 public
 See |yii\base\Object::__unset|


*yii\web\HttpCache::__call*					 public
 See |yii\base\Object::__call|


*yii\web\HttpCache::hasProperty*				 public
 See |yii\base\Object::hasProperty|


*yii\web\HttpCache::canGetProperty*				 public
 See |yii\base\Object::canGetProperty|


*yii\web\HttpCache::canSetProperty*				 public
 See |yii\base\Object::canSetProperty|


*yii\web\HttpCache::hasMethod*					 public
 See |yii\base\Object::hasMethod|


*yii\web\HttpCache::events*					 public
 See |yii\base\ActionFilter::events|


*yii\web\HttpCache::attach*					 public
 See |yii\base\Behavior::attach|


*yii\web\HttpCache::detach*					 public
 See |yii\base\Behavior::detach|


*yii\web\HttpCache::beforeFilter*				 public
 See |yii\base\ActionFilter::beforeFilter|


*yii\web\HttpCache::afterFilter*				 public
 See |yii\base\ActionFilter::afterFilter|


*yii\web\HttpCache::beforeAction*				 public
>
 beforeAction($action)
<
(boolean) Whether the action should continue to be executed.


    [$action] (\yii\base\Action) The action to be executed.


*yii\web\HttpCache::afterAction*				 public
 See |yii\base\ActionFilter::afterAction|


*yii\web\HttpCache::isActive*					 protected
 See |yii\base\ActionFilter::isActive|


*yii\web\HttpCache::validateCache*				 protected
>
 validateCache($lastModified, $etag)
<
(boolean) Whether the HTTP cache is still valid.


    [$lastModified] (integer) The calculated Last-Modified value in terms of a
    UNIX timestamp. If null, the Last-Modified header will not be validated.
    [$etag] (string) The calculated ETag value. If null, the ETag header will
    not be validated.


*yii\web\HttpCache::sendCacheControlHeader*			 protected
>
 sendCacheControlHeader()
<
(void)




*yii\web\HttpCache::generateEtag*				 protected
>
 generateEtag($seed)
<
(string) The generated Etag


    [$seed] (string) Seed for the ETag



 vim:tw=78:ts=8:ft=help:norl:
