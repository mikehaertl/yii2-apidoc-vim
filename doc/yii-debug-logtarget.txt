
*yii/debug/LogTarget*   >> |yii/log/Target|
=====================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/log/Target::$categories|
 |yii/log/Target::$except|
 |yii/log/Target::$logVars|
 |yii/log/Target::$prefix|
 |yii/log/Target::$exportInterval|
 |yii/log/Target::$messages|
 |yii/log/Target::$microtime|


$module					*yii/debug/LogTarget::$module*

 (\yii\debug\Module)

$tag					*yii/debug/LogTarget::$tag*

 ()



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/log/Target::getContextMessage|
 |yii/log/Target::getLevels|
 |yii/log/Target::setLevels|
 |yii/log/Target::filterMessages|
 |yii/log/Target::formatMessage|
 |yii/log/Target::getMessagePrefix|
 |yii/log/Target::setEnabled|
 |yii/log/Target::getEnabled|
 |yii/log/Target::getTime|


*yii/debug/LogTarget::__construct*			public
>
 __construct($module, $config='[]')
<
return (void)

    [$module] (\yii\debug\Module) 
    [$config] (array) 


*yii/debug/LogTarget::export*				public
>
 export()
<
return (void)

 Exports log messages to a specific destination.

 Child classes must implement this method.


*yii/debug/LogTarget::collect*				public
>
 collect($messages, $final)
<
return (void)

 Processes the given log messages.

 This method will filter the given messages with 'levels' and 'categories'.
 And if requested, it will also export the filtering result to specific medium
 (e.g. email).

    [$messages] (array) Log messages to be processed. See
    '\yii\log\Logger::messages' for the structure of each message.
    [$final] (bool) Whether this method is called at the end of the current
    application


*yii/debug/LogTarget::gc*					protected
>
 gc($manifest)
<
return (void)

 Removes obsolete data files

    [$manifest] (array) 


*yii/debug/LogTarget::collectSummary*			protected
>
 collectSummary()
<
return (array) 

 Collects summary data of current request.


*yii/debug/LogTarget::getSqlTotalCount*			protected
>
 getSqlTotalCount()
<
return (int) 

 Returns total sql count executed in current request. If database panel is not
 configured returns 0.



 vim:tw=78:ts=8:ft=help:norl:
