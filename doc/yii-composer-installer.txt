
*yii/composer/Installer*   >> |Composer/Installer/LibraryInstaller|
========================



METHOD DETAILS
------------------------------------------------------------------------------

*yii/composer/Installer::supports*			public
>
 supports($packageType)
<
(void)

    [$packageType] () 


*yii/composer/Installer::install*				public
>
 install($repo, $package)
<
(void)

    [$repo] () 
    [$package] () 


*yii/composer/Installer::update*				public
>
 update($repo, $initial, $target)
<
(void)

    [$repo] () 
    [$initial] () 
    [$target] () 


*yii/composer/Installer::uninstall*			public
>
 uninstall($repo, $package)
<
(void)

    [$repo] () 
    [$package] () 


*yii/composer/Installer::addPackage*			protected
>
 addPackage($package)
<
(void)

    [$package] () 


*yii/composer/Installer::generateDefaultAlias*		protected
>
 generateDefaultAlias($package)
<
(void)

    [$package] () 


*yii/composer/Installer::removePackage*			protected
>
 removePackage($package)
<
(void)

    [$package] () 


*yii/composer/Installer::loadExtensions*			protected
>
 loadExtensions()
<
(void)



*yii/composer/Installer::saveExtensions*			protected
>
 saveExtensions($extensions)
<
(void)

    [$extensions] () 


*yii/composer/Installer::linkBaseYiiFiles*		protected
>
 linkBaseYiiFiles()
<
(void)



*yii/composer/Installer::removeBaseYiiFiles*		protected
>
 removeBaseYiiFiles()
<
(void)



*yii/composer/Installer::postCreateProject*		public
>
 postCreateProject($event)
<
(void)

    [$event] () 


*yii/composer/Installer::setPermission*			public
>
 setPermission($paths)
<
(void)

    [$paths] (array) The paths (keys) and the corresponding permission octal
    strings (values)


*yii/composer/Installer::generateCookieValidationKey*	public
>
 generateCookieValidationKey()
<
(void)

 You can provide one or multiple parameters as the configuration files which
 need to have validation key inserted.


*yii/composer/Installer::generateRandomString*		protected
>
 generateRandomString()
<
(void)




 vim:tw=78:ts=8:ft=help:norl:
