
*yii/composer/Installer*   >> |Composer/Installer/LibraryInstaller|
========================



METHOD DETAILS
------------------------------------------------------------------------------


*yii/composer/Installer::supports*			public
>
 supports($packageType)
<
return (void)

    [$packageType] () 


*yii/composer/Installer::install*				public
>
 install($repo, $package)
<
return (void)

    [$repo] () 
    [$package] () 


*yii/composer/Installer::update*				public
>
 update($repo, $initial, $target)
<
return (void)

    [$repo] () 
    [$initial] () 
    [$target] () 


*yii/composer/Installer::uninstall*			public
>
 uninstall($repo, $package)
<
return (void)

    [$repo] () 
    [$package] () 


*yii/composer/Installer::addPackage*			protected
>
 addPackage($package)
<
return (void)

    [$package] () 


*yii/composer/Installer::generateDefaultAlias*		protected
>
 generateDefaultAlias($package)
<
return (void)

    [$package] () 


*yii/composer/Installer::removePackage*			protected
>
 removePackage($package)
<
return (void)

    [$package] () 


*yii/composer/Installer::loadExtensions*			protected
>
 loadExtensions()
<
return (void)



*yii/composer/Installer::saveExtensions*			protected
>
 saveExtensions($extensions)
<
return (void)

    [$extensions] () 


*yii/composer/Installer::linkBaseYiiFiles*		protected
>
 linkBaseYiiFiles()
<
return (void)



*yii/composer/Installer::removeBaseYiiFiles*		protected
>
 removeBaseYiiFiles()
<
return (void)



*yii/composer/Installer::postCreateProject*		public
>
 postCreateProject($event)
<
return (void)

 Special method to run tasks defined in
 '[extra][yii\composer\Installer::postCreateProject]' key in 'composer.json'

    [$event] (\Composer\Script\Event) 


*yii/composer/Installer::postInstall*			public
>
 postInstall($event)
<
return (void)

 Special method to run tasks defined in
 '[extra][yii\composer\Installer::postInstall]' key in 'composer.json'

    [$event] (\Composer\Script\Event) 


*yii/composer/Installer::runCommands*			protected
>
 runCommands($event, $extraKey)
<
return (void)

 Special method to run tasks defined in '[extra][$extraKey]' key in
 'composer.json'

    [$event] (\Composer\Script\Event) 
    [$extraKey] (string) 


*yii/composer/Installer::setPermission*			public
>
 setPermission($paths)
<
return (void)

 Sets the correct permission for the files and directories listed in the extra
 section.

    [$paths] (array) The paths (keys) and the corresponding permission octal
    strings (values)


*yii/composer/Installer::generateCookieValidationKey*	public
>
 generateCookieValidationKey()
<
return (void)

 Generates a cookie validation key for every app config listed in "config" in
 extra section.

 You can provide one or multiple parameters as the configuration files which
 need to have validation key inserted.


*yii/composer/Installer::generateRandomString*		protected
>
 generateRandomString()
<
return (void)



*yii/composer/Installer::copyFiles*			public
>
 copyFiles($paths)
<
return (void)

 Copy files to specified locations.

    [$paths] (array) The source files paths (keys) and the corresponding
    target locations for copied files (values). Location can be specified as
    an array 
      - first element is target location, second defines whether file can be
    overwritten (by default method don't overwrite existing files).



 vim:tw=78:ts=8:ft=help:norl:
