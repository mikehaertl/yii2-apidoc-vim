
*yii/base/Widget*   >> |yii/base/Component|
=================

SUBCLASSES
------------------------------------------------------------------------------

|yii/grid/GridView|
|yii/captcha/Captcha|
|yii/widgets/ActiveForm|
|yii/widgets/Breadcrumbs|
|yii/widgets/Spaceless|
|yii/widgets/LinkPager|
|yii/widgets/Pjax|
|yii/widgets/ListView|
|yii/widgets/InputWidget|
|yii/widgets/Block|
|yii/widgets/FragmentCache|
|yii/widgets/Menu|
|yii/widgets/ContentDecorator|
|yii/widgets/LinkSorter|
|yii/widgets/BaseListView|
|yii/widgets/MaskedInput|
|yii/widgets/DetailView|
|yii/apidoc/templates/bootstrap/SideNavWidget|
|yii/authclient/widgets/GooglePlusButton|
|yii/authclient/widgets/AuthChoiceItem|
|yii/authclient/widgets/AuthChoice|
|yii/bootstrap/Progress|
|yii/bootstrap/ToggleButtonGroup|
|yii/bootstrap/ActiveForm|
|yii/bootstrap/Nav|
|yii/bootstrap/ButtonDropdown|
|yii/bootstrap/Carousel|
|yii/bootstrap/Alert|
|yii/bootstrap/Collapse|
|yii/bootstrap/InputWidget|
|yii/bootstrap/Tabs|
|yii/bootstrap/Button|
|yii/bootstrap/NavBar|
|yii/bootstrap/Dropdown|
|yii/bootstrap/Widget|
|yii/bootstrap/Modal|
|yii/bootstrap/ButtonGroup|
|yii/jui/Droppable|
|yii/jui/ProgressBar|
|yii/jui/DatePicker|
|yii/jui/AutoComplete|
|yii/jui/InputWidget|
|yii/jui/Tabs|
|yii/jui/Selectable|
|yii/jui/Menu|
|yii/jui/Spinner|
|yii/jui/Slider|
|yii/jui/Dialog|
|yii/jui/Accordion|
|yii/jui/Draggable|
|yii/jui/SliderInput|
|yii/jui/Sortable|
|yii/jui/Resizable|
|yii/jui/Widget|


PROPERTY DETAILS
------------------------------------------------------------------------------

$counter				*yii/base/Widget::$counter*

 (integer) A counter used to generate 'id' for widgets.

$autoIdPrefix				*yii/base/Widget::$autoIdPrefix*

 (string) The prefix to the automatically generated widget IDs.

$stack					*yii/base/Widget::$stack*

 (\yii\base\Widget[]) The widgets that are currently being rendered (not
 ended). This property is maintained by 'begin()' and 'end()' methods.

$behaviors				*yii/base/Widget::$behaviors*

 See |yii/base/Component::$behaviors|

$id					*yii/base/Widget::$id*

 (string) ID of the widget.

$view					*yii/base/Widget::$view*

 (\yii\web\View) The view object that can be used to render views or view
 files.

$viewPath				*yii/base/Widget::$viewPath*

 (string) The directory containing the view files for this widget.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/base/Widget::className*				public

 See |yii/base/Object::className|


*yii/base/Widget::__construct*				public

 See |yii/base/Object::__construct|


*yii/base/Widget::init*					public

 See |yii/base/Object::init|


*yii/base/Widget::__get*					public

 See |yii/base/Component::__get|


*yii/base/Widget::__set*					public

 See |yii/base/Component::__set|


*yii/base/Widget::__isset*				public

 See |yii/base/Component::__isset|


*yii/base/Widget::__unset*				public

 See |yii/base/Component::__unset|


*yii/base/Widget::__call*					public

 See |yii/base/Component::__call|


*yii/base/Widget::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/base/Widget::canGetProperty*				public

 See |yii/base/Component::canGetProperty|


*yii/base/Widget::canSetProperty*				public

 See |yii/base/Component::canSetProperty|


*yii/base/Widget::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/base/Widget::__clone*				public

 See |yii/base/Component::__clone|


*yii/base/Widget::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/base/Widget::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/base/Widget::on*					public

 See |yii/base/Component::on|


*yii/base/Widget::off*					public

 See |yii/base/Component::off|


*yii/base/Widget::trigger*				public

 See |yii/base/Component::trigger|


*yii/base/Widget::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/base/Widget::getBehaviors*				public

 See |yii/base/Component::getBehaviors|


*yii/base/Widget::attachBehavior*				public

 See |yii/base/Component::attachBehavior|


*yii/base/Widget::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/base/Widget::detachBehavior*				public

 See |yii/base/Component::detachBehavior|


*yii/base/Widget::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/base/Widget::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/base/Widget::begin*					public
>
 begin($config='[]')
<
return (static) The newly created widget instance

 This method creates an instance of the calling class. It will apply the
 configuration to the created instance. A matching 'end()' call should be
 called later. As some widgets may use output buffering, the 'end()' call
 should be made in the same view to avoid breaking the nesting of output
 buffers.

    [$config] (array) Name-value pairs that will be used to initialize the
    object properties


*yii/base/Widget::end*					public
>
 end()
<
return (static) The widget instance that is ended.

 Note that the rendering result of the widget is directly echoed out.


*yii/base/Widget::widget*					public
>
 widget($config='[]')
<
return (string) The rendering result of the widget.

 The widget rendering result is returned by this method.

    [$config] (array) Name-value pairs that will be used to initialize the
    object properties


*yii/base/Widget::getId*					public
>
 getId($autoGenerate='true')
<
return (string) ID of the widget.

    [$autoGenerate] (boolean) Whether to generate an ID if it is not set
    previously


*yii/base/Widget::setId*					public
>
 setId($value)
<
return (void)

    [$value] (string) Id of the widget.


*yii/base/Widget::getView*				public
>
 getView()
<
return (\yii\web\View) The view object that can be used to render views or view
files.

 The 'render()' and 'renderFile()' methods will use this view object to
 implement the actual view rendering. If not set, it will default to the
 "view" application component.


*yii/base/Widget::setView*				public
>
 setView($view)
<
return (void)

    [$view] (\yii\base\View) The view object that can be used to render views
    or view files.


*yii/base/Widget::run*					public
>
 run()
<
return (string) The result of widget execution to be outputted.



*yii/base/Widget::render*					public
>
 render($view, $params='[]')
<
return (string) The rendering result.

 The view to be rendered can be specified in one of the following formats:


   - path alias (e.g. "@app/views/site/index"); 
   - absolute path within application (e.g. "//site/index"): the view
   name starts with double slashes.   The actual view file will be looked for
 under the 'Application::viewPath|view path' of the application. 
   - absolute path within module (e.g. "/site/index"): the view name
   starts with a single slash.   The actual view file will be looked for under
 the 'Module::viewPath|view path' of the currently   active module. 
   - relative path (e.g. "index"): the actual view file will be looked
   for under 'viewPath'.

 If the view name does not contain a file extension, it will use the default
 one '.php'.

    [$view] (string) The view name.
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view.


*yii/base/Widget::renderFile*				public
>
 renderFile($file, $params='[]')
<
return (string) The rendering result.

    [$file] (string) The view file to be rendered. This can be either a file
    path or a path alias.
    [$params] (array) The parameters (name-value pairs) that should be made
    available in the view.


*yii/base/Widget::getViewPath*				public
>
 getViewPath()
<
return (string) The directory containing the view files for this widget.

 The default implementation returns the 'views' subdirectory under the
 directory containing the widget class file.



 vim:tw=78:ts=8:ft=help:norl:
