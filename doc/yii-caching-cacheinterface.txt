
*yii/caching/CacheInterface*  
============================

DESCRIPTION
------------------------------------------------------------------------------

 A data item can be stored in the cache by calling 'set()' and be retrieved
 back later (in the same or different request) by 'get()'. In both operations,
 a key identifying the data item is required. An expiration time and/or a
 'Dependency|dependency' can also be specified when calling 'set()'. If the
 data item expires or the dependency changes at the time of calling 'get()',
 the cache will return no data.

 A typical usage pattern of cache is like the following:

   $key = 'demo';
   $data = $cache->get($key);
   if ($data === false) {
       // ...generate $data here...
       $cache->set($key, $data, $duration, $dependency);
   }

 Because CacheInterface extends the '\ArrayAccess' interface, it can be used
 like an array. For example,

   $cache['foo'] = 'some data';
   echo $cache['foo'];

 For more details and usage information on Cache, see the [guide article on
 caching](guide:caching-overview).



METHOD DETAILS
------------------------------------------------------------------------------


*yii/caching/CacheInterface::buildKey*			public
>
 buildKey($key)
<
return (string) The generated cache key

 Builds a normalized cache key from a given key.

 If the given key is a string containing alphanumeric characters only and no
 more than 32 characters, then the key will be returned back prefixed with
 'keyPrefix'. Otherwise, a normalized key is generated by serializing the
 given key, applying MD5 hashing, and prefixing with 'keyPrefix'.

    [$key] (mixed) The key to be normalized


*yii/caching/CacheInterface::get*				public
>
 get($key)
<
return (mixed) The value stored in cache, false if the value is not in the cache,
expired, or the dependency associated with the cached data has changed.

 Retrieves a value from cache with a specified key.

    [$key] (mixed) A key identifying the cached value. This can be a simple
    string or a complex data structure consisting of factors representing the
    key.


*yii/caching/CacheInterface::exists*			public
>
 exists($key)
<
return (bool) True if a value exists in cache, false if the value is not in the cache
or expired.

 Checks whether a specified key exists in the cache.

 This can be faster than getting the value from the cache if the data is big.
 In case a cache does not support this feature natively, this method will try
 to simulate it but has no performance improvement over getting it. Note that
 this method does not check whether the dependency associated with the cached
 data, if there is any, has changed. So a call to 'get' may return false while
 exists returns true.

    [$key] (mixed) A key identifying the cached value. This can be a simple
    string or a complex data structure consisting of factors representing the
    key.


*yii/caching/CacheInterface::multiGet*			public
>
 multiGet($keys)
<
return (array) List of cached values corresponding to the specified keys. The array
is returned in terms of (key, value) pairs. If a value is not cached or
expired, the corresponding array value will be false.

 Retrieves multiple values from cache with the specified keys.

 Some caches (such as memcache, apc) allow retrieving multiple cached values
 at the same time, which may improve the performance. In case a cache does not
 support this feature natively, this method will try to simulate it.

    [$keys] (string[]) List of string keys identifying the cached values


*yii/caching/CacheInterface::set*				public
>
 set($key, $value, $duration=null, $dependency='null')
<
return (bool) Whether the value is successfully stored into cache

 Stores a value identified by a key into cache.

 If the cache already contains such a key, the existing value and expiration
 time will be replaced with the new ones, respectively.

    [$key] (mixed) A key identifying the value to be cached. This can be a
    simple string or a complex data structure consisting of factors
    representing the key.
    [$value] (mixed) The value to be cached
    [$duration] (int) Default duration in seconds before the cache will
    expire. If not set, default 'defaultDuration' value is used.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached item. If
    the dependency changes, the corresponding value in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/CacheInterface::multiSet*			public
>
 multiSet($items, $duration=0, $dependency='null')
<
return (array) Array of failed keys

 Stores multiple items in cache. Each item contains a value identified by a
 key.

 If the cache already contains such a key, the existing value and expiration
 time will be replaced with the new ones, respectively.

    [$items] (array) The items to be cached, as key-value pairs.
    [$duration] (int) Default number of seconds in which the cached values
    will expire. 0 means never expire.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached items. If
    the dependency changes, the corresponding values in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/CacheInterface::add*				public
>
 add($key, $value, $duration=0, $dependency='null')
<
return (bool) Whether the value is successfully stored into cache

 Stores a value identified by a key into cache if the cache does not contain
 this key.

 Nothing will be done if the cache already contains the key.

    [$key] (mixed) A key identifying the value to be cached. This can be a
    simple string or a complex data structure consisting of factors
    representing the key.
    [$value] (mixed) The value to be cached
    [$duration] (int) The number of seconds in which the cached value will
    expire. 0 means never expire.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached item. If
    the dependency changes, the corresponding value in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/CacheInterface::multiAdd*			public
>
 multiAdd($items, $duration=0, $dependency='null')
<
return (array) Array of failed keys

 Stores multiple items in cache. Each item contains a value identified by a
 key.

 If the cache already contains such a key, the existing value and expiration
 time will be preserved.

    [$items] (array) The items to be cached, as key-value pairs.
    [$duration] (int) Default number of seconds in which the cached values
    will expire. 0 means never expire.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached items. If
    the dependency changes, the corresponding values in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/CacheInterface::delete*			public
>
 delete($key)
<
return (bool) If no error happens during deletion

 Deletes a value with the specified key from cache.

    [$key] (mixed) A key identifying the value to be deleted from cache. This
    can be a simple string or a complex data structure consisting of factors
    representing the key.


*yii/caching/CacheInterface::flush*			public
>
 flush()
<
return (bool) Whether the flush operation was successful.

 Deletes all values from cache.

 Be careful of performing this operation if the cache is shared among multiple
 applications.


*yii/caching/CacheInterface::getOrSet*			public
>
 getOrSet($key, $callable, $duration=null, $dependency='null')
<
return (mixed) Result of $callable execution

 Method combines both 'set()' and 'get()' methods to retrieve value identified
 by a $key, or to store the result of $callable execution if there is no cache
 available for the $key.

 Usage example:

   public function getTopProducts($count = 10) {
       $cache = $this->cache; // Could be Yii::$app->cache
       return $cache->getOrSet(['top-n-products', 'n' => $count], function
 ($cache) use ($count) {
           return Products::find()->mostPopular()->limit($count)->all();
       }, 1000);
   }



    [$key] (mixed) A key identifying the value to be cached. This can be a
    simple string or a complex data structure consisting of factors
    representing the key.
    [$callable] (callable|\Closure) The callable or closure that will be used
    to generate a value to be cached. In case $callable returns 'false', the
    value will not be cached.
    [$duration] (int) Default duration in seconds before the cache will
    expire. If not set, 'defaultDuration' value will be used.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached item. If
    the dependency changes, the corresponding value in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is 'false'.



 vim:tw=78:ts=8:ft=help:norl:
