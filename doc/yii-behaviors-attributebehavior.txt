
*yii/behaviors/AttributeBehavior*   >> |yii/base/Behavior|
=================================

SUBCLASSES
------------------------------------------------------------------------------

|yii/behaviors/SluggableBehavior|
|yii/behaviors/BlameableBehavior|
|yii/behaviors/TimestampBehavior|

DESCRIPTION
------------------------------------------------------------------------------

 To use AttributeBehavior, configure the 'attributes' property which should
 specify the list of attributes that need to be updated and the corresponding
 events that should trigger the update. Then configure the 'value' property
 with a PHP callable whose return value will be used to assign to the current
 attribute(s). For example,

   use yii\behaviors\AttributeBehavior;

   public function behaviors()
   {
       return [
           [
               'class' => AttributeBehavior::className(),
               'attributes' => [
                   ActiveRecord::EVENT_BEFORE_INSERT => 'attribute1',
                   ActiveRecord::EVENT_BEFORE_UPDATE => 'attribute2',
               ],
               'value' => function ($event) {
                   return 'some value';
               },
           ],
       ];
   }

 Because attribute values will be set automatically by this behavior, they are
 usually not user input and should therefore not be validated, i.e. they
 should not appear in the '\yii\base\Model::rules()|rules()' method of the
 model.


PROPERTY DETAILS
------------------------------------------------------------------------------

$owner					*yii/behaviors/AttributeBehavior::$owner*

 See |yii/base/Behavior::$owner|

$attributes				*yii/behaviors/AttributeBehavior::$attributes*

 (array) List of attributes that are to be automatically filled with the value
 specified via 'value'. The array keys are the ActiveRecord events upon which
 the attributes are to be updated, and the array values are the corresponding
 attribute(s) to be updated. You can use a string to represent a single
 attribute, or an array to represent a list of attributes. For example,

   [
       ActiveRecord::EVENT_BEFORE_INSERT => ['attribute1', 'attribute2'],
       ActiveRecord::EVENT_BEFORE_UPDATE => 'attribute2',
   ]



$value					*yii/behaviors/AttributeBehavior::$value*

 (mixed) The value that will be assigned to the current attributes. This can
 be an anonymous function, callable in array format (e.g. '[$this,
 'methodName']'), an '\yii\db\Expression|Expression' object representing a DB
 expression (e.g. 'new Expression('NOW()')'), scalar, string or an arbitrary
 value. If the former, the return value of the function will be assigned to
 the attributes. The signature of the function should be as follows,

   function ($event)
   {
       // return value will be assigned to the attribute
   }



$skipUpdateOnClean			*yii/behaviors/AttributeBehavior::$skipUpdateOnClean*

 (bool) Whether to skip this behavior when the '$owner' has not been modified

$preserveNonEmptyValues			*yii/behaviors/AttributeBehavior::$preserveNonEmptyValues*

 (bool) Whether to preserve non-empty attribute values.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/behaviors/AttributeBehavior::className*		public

 See |yii/base/BaseObject::className|


*yii/behaviors/AttributeBehavior::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/behaviors/AttributeBehavior::init*			public

 See |yii/base/BaseObject::init|


*yii/behaviors/AttributeBehavior::__get*			public

 See |yii/base/BaseObject::__get|


*yii/behaviors/AttributeBehavior::__set*			public

 See |yii/base/BaseObject::__set|


*yii/behaviors/AttributeBehavior::__isset*		public

 See |yii/base/BaseObject::__isset|


*yii/behaviors/AttributeBehavior::__unset*		public

 See |yii/base/BaseObject::__unset|


*yii/behaviors/AttributeBehavior::__call*			public

 See |yii/base/BaseObject::__call|


*yii/behaviors/AttributeBehavior::hasProperty*		public

 See |yii/base/BaseObject::hasProperty|


*yii/behaviors/AttributeBehavior::canGetProperty*		public

 See |yii/base/BaseObject::canGetProperty|


*yii/behaviors/AttributeBehavior::canSetProperty*		public

 See |yii/base/BaseObject::canSetProperty|


*yii/behaviors/AttributeBehavior::hasMethod*		public

 See |yii/base/BaseObject::hasMethod|


*yii/behaviors/AttributeBehavior::events*			public
>
 events()
<
return (array) Events (array keys) and the corresponding event handler methods (array
values).

 Declares event handlers for the 'owner''s events.



 Child classes may override this method to declare what PHP callbacks should
 be attached to the events of the 'owner' component.

 The callbacks will be attached to the 'owner''s events when the behavior is
 attached to the owner; and they will be detached from the events when the
 behavior is detached from the component.

 The callbacks can be any of the following:


   - method in this behavior: ''handleClick'', equivalent to '[$this,
   'handleClick']' 
   - object method: '[$object, 'handleClick']' 
   - static method: '['Page', 'handleClick']' 
   - anonymous function: 'function ($event) { ... }'

 The following is an example:

   [
       Model::EVENT_BEFORE_VALIDATE => 'myBeforeValidate',
       Model::EVENT_AFTER_VALIDATE => 'myAfterValidate',
   ]




*yii/behaviors/AttributeBehavior::attach*			public

 See |yii/base/Behavior::attach|


*yii/behaviors/AttributeBehavior::detach*			public

 See |yii/base/Behavior::detach|


*yii/behaviors/AttributeBehavior::evaluateAttributes*	public
>
 evaluateAttributes($event)
<
return (void)

 Evaluates the attribute value and assigns it to the current attributes.

    [$event] (\yii\base\Event) 


*yii/behaviors/AttributeBehavior::getValue*		protected
>
 getValue($event)
<
return (mixed) The attribute value

 Returns the value for the current attributes.

 This method is called by 'evaluateAttributes()'. Its return value will be
 assigned to the attributes corresponding to the triggering event.

    [$event] (\yii\base\Event) The event that triggers the current attribute
    updating.



 vim:tw=78:ts=8:ft=help:norl:
