
*yii/validators/IpValidator*   >> |yii/validators/Validator|
============================

DESCRIPTION
------------------------------------------------------------------------------

 It also may change attribute's value if normalization of IPv6 expansion is
 enabled.

 The following are examples of validation rules using this validator:

   ['ip_address', 'ip'], // IPv4 or IPv6 address
   ['ip_address', 'ip', 'ipv6' => false], // IPv4 address (IPv6 is disabled)
   ['ip_address', 'ip', 'subnet' => true], // requires a CIDR prefix (like
 10.0.0.1/24) for the IP address
   ['ip_address', 'ip', 'subnet' => null], // CIDR prefix is optional
   ['ip_address', 'ip', 'subnet' => null, 'normalize' => true], // CIDR prefix
 is optional and will be added when missing
   ['ip_address', 'ip', 'ranges' => ['192.168.0.0/24']], // only IP addresses
 from the specified subnet are allowed
   ['ip_address', 'ip', 'ranges' => ['!192.168.0.0/24', 'any']], // any IP is
 allowed except IP in the specified subnet
   ['ip_address', 'ip', 'expandIPv6' => true], // expands IPv6 address to a
 full notation format




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/validators/Validator::$builtInValidators|
 |yii/validators/Validator::$attributes|
 |yii/validators/Validator::$on|
 |yii/validators/Validator::$except|
 |yii/validators/Validator::$skipOnError|
 |yii/validators/Validator::$skipOnEmpty|
 |yii/validators/Validator::$enableClientValidation|
 |yii/validators/Validator::$isEmpty|
 |yii/validators/Validator::$when|
 |yii/validators/Validator::$whenClient|


$message				*yii/validators/IpValidator::$message*

 (string) User-defined error message is used when validation fails due to the
 wrong IP address format.

 You may use the following placeholders in the message:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated

$networks				*yii/validators/IpValidator::$networks*

 (array) The network aliases, that can be used in 'ranges'.  
   - key - alias name  
   - value - array of strings. String can be an IP range, IP address or
   another alias. String can be    negated with 'NEGATION_CHAR' (independent
 of 'negation' option).

 The following aliases are defined by default:  
   - '*': 'any'  
   - 'any': '0.0.0.0/0, ::/0'  
   - 'private': '10.0.0.0/8, 172.16.0.0/12, 192.168.0.0/16, fd00::/8'  
   - 'multicast': '224.0.0.0/4, ff00::/8'  
   - 'linklocal': '169.254.0.0/16, fe80::/10'  
   - 'localhost': '127.0.0.0/8', ::1'  
   - 'documentation': '192.0.2.0/24, 198.51.100.0/24, 203.0.113.0/24,
   2001:db8::/32'  
   - 'system': 'multicast, linklocal, localhost, documentation'

$ipv6					*yii/validators/IpValidator::$ipv6*

 (bool) Whether the validating value can be an IPv6 address. Defaults to
 'true'.

$ipv4					*yii/validators/IpValidator::$ipv4*

 (bool) Whether the validating value can be an IPv4 address. Defaults to
 'true'.

$subnet					*yii/validators/IpValidator::$subnet*

 (bool) Whether the address can be an IP with CIDR subnet, like
 '192.168.10.0/24'. The following values are possible:


   - 'false' - the address must not have a subnet (default). 
   - 'true' - specifying a subnet is required. 
   - 'null' - specifying a subnet is optional.

$normalize				*yii/validators/IpValidator::$normalize*

 (bool) Whether to add the CIDR prefix with the smallest length (32 for IPv4
 and 128 for IPv6) to an address without it. Works only when 'subnet' is not
 'false'. For example:  
   - '10.0.1.5' will normalized to '10.0.1.5/32'  
   - '2008:db0::1' will be normalized to '2008:db0::1/128'    Defaults to
 'false'.

$negation				*yii/validators/IpValidator::$negation*

 (bool) Whether address may have a 'NEGATION_CHAR' character at the beginning.
 Defaults to 'false'.

$expandIPv6				*yii/validators/IpValidator::$expandIPv6*

 (bool) Whether to expand an IPv6 address to the full notation format.
 Defaults to 'false'.

$ipv4Pattern				*yii/validators/IpValidator::$ipv4Pattern*

 (string) Regexp-pattern to validate IPv4 address

$ipv6Pattern				*yii/validators/IpValidator::$ipv6Pattern*

 (string) Regexp-pattern to validate IPv6 address

$ipv6NotAllowed				*yii/validators/IpValidator::$ipv6NotAllowed*

 (string) User-defined error message is used when validation fails due to the
 disabled IPv6 validation.

 You may use the following placeholders in the message:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated

$ipv4NotAllowed				*yii/validators/IpValidator::$ipv4NotAllowed*

 (string) User-defined error message is used when validation fails due to the
 disabled IPv4 validation.

 You may use the following placeholders in the message:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated

$wrongCidr				*yii/validators/IpValidator::$wrongCidr*

 (string) User-defined error message is used when validation fails due to the
 wrong CIDR.

 You may use the following placeholders in the message:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated

$noSubnet				*yii/validators/IpValidator::$noSubnet*

 (string) User-defined error message is used when validation fails due to
 subnet 'subnet' set to 'only', but the CIDR prefix is not set.

 You may use the following placeholders in the message:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated

$hasSubnet				*yii/validators/IpValidator::$hasSubnet*

 (string) User-defined error message is used when validation fails due to
 'subnet' is false, but CIDR prefix is present.

 You may use the following placeholders in the message:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated

$notInRange				*yii/validators/IpValidator::$notInRange*

 (string) User-defined error message is used when validation fails due to IP
 address is not not allowed by 'ranges' check.

 You may use the following placeholders in the message:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/validators/Validator::createValidator|
 |yii/validators/Validator::validateAttributes|
 |yii/validators/Validator::validate|
 |yii/validators/Validator::isActive|
 |yii/validators/Validator::addError|
 |yii/validators/Validator::isEmpty|
 |yii/validators/Validator::formatMessage|
 |yii/validators/Validator::getAttributeNames|


*yii/validators/IpValidator::init*			public
>
 init()
<
return (void)

 {@inheritdoc}


*yii/validators/IpValidator::validateAttribute*		public
>
 validateAttribute($model, $attribute)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 


*yii/validators/IpValidator::validateValue*		protected
>
 validateValue($value)
<
return (void)

 {@inheritdoc}

    [$value] () 


*yii/validators/IpValidator::clientValidateAttribute*	public
>
 clientValidateAttribute($model, $attribute, $view)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 
    [$view] () 


*yii/validators/IpValidator::getClientOptions*		public
>
 getClientOptions($model, $attribute)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 


*yii/validators/IpValidator::setRanges*			public
>
 setRanges($ranges)
<
return (void)

 Set the IPv4 or IPv6 ranges that are allowed or forbidden.

 The following preparation tasks are performed:


   - Recursively substitutes aliases (described in 'networks') with
   their values. 
   - Removes duplicates

    [$ranges] (array) The IPv4 or IPv6 ranges that are allowed or forbidden.

    When the array is empty, or the option not set, all IP addresses are
    allowed.

    Otherwise, the rules are checked sequentially until the first match is
    found. An IP address is forbidden, when it has not matched any of the
    rules.

    Example:

      [
           'ranges' => [
               '192.168.10.128'
               '!192.168.10.0/24',
               'any' // allows any other IP addresses
           ]
      ]

    In this example, access is allowed for all the IPv4 and IPv6 addresses
    excluding the '192.168.10.0/24' subnet. IPv4 address '192.168.10.128' is
    also allowed, because it is listed before the restriction.


*yii/validators/IpValidator::getRanges*			public
>
 getRanges()
<
return (array) The IPv4 or IPv6 ranges that are allowed or forbidden.



*yii/validators/IpValidator::validateIPv4*		protected
>
 validateIPv4($value)
<
return (bool) 

 Validates IPv4 address.

    [$value] (string) 


*yii/validators/IpValidator::validateIPv6*		protected
>
 validateIPv6($value)
<
return (bool) 

 Validates IPv6 address.

    [$value] (string) 



 vim:tw=78:ts=8:ft=help:norl:
