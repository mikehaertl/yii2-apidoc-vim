
*yii/mongodb/Cache*   >> |yii/caching/Cache|
===================

DESCRIPTION
------------------------------------------------------------------------------

 By default, Cache stores session data in a MongoDB collection named 'cache'
 inside the default database. This collection is better to be pre-created with
 fields 'id' and 'expire' indexed. The collection name can be changed by
 setting 'cacheCollection'.

 Please refer to '\yii\caching\Cache' for common cache operations that are
 supported by Cache.

 The following example shows how you can configure the application to use
 Cache:

   'cache' => [
       'class' => 'yii\mongodb\Cache',
       // 'db' => 'mymongodb',
       // 'cacheCollection' => 'my_cache',
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/caching/Cache::$keyPrefix|
 |yii/caching/Cache::$serializer|
 |yii/caching/Cache::$defaultDuration|


$db					*yii/mongodb/Cache::$db*

 (\yii\mongodb\Connection|array|string) The MongoDB connection object or the
 application component ID of the MongoDB connection. After the Cache object is
 created, if you want to change this property, you should only assign it with
 a MongoDB connection object. Starting from version 2.0.2, this can also be a
 configuration array for creating the object.

$cacheCollection			*yii/mongodb/Cache::$cacheCollection*

 (string|array) The name of the MongoDB collection that stores the cache data.
 Please refer to 'Connection::getCollection()' on how to specify this
 parameter. This collection is better to be pre-created with fields 'id' and
 'expire' indexed.

$gcProbability				*yii/mongodb/Cache::$gcProbability*

 (int) The probability (parts per million) that garbage collection (GC) should
 be performed when storing a piece of data in the cache. Defaults to 100,
 meaning 0.01% chance. This number should be between 0 and 1000000. A value 0
 meaning no GC will be performed at all.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/caching/Cache::buildKey|
 |yii/caching/Cache::get|
 |yii/caching/Cache::exists|
 |yii/caching/Cache::mget|
 |yii/caching/Cache::multiGet|
 |yii/caching/Cache::set|
 |yii/caching/Cache::mset|
 |yii/caching/Cache::multiSet|
 |yii/caching/Cache::madd|
 |yii/caching/Cache::multiAdd|
 |yii/caching/Cache::add|
 |yii/caching/Cache::delete|
 |yii/caching/Cache::flush|
 |yii/caching/Cache::getValues|
 |yii/caching/Cache::setValues|
 |yii/caching/Cache::addValues|
 |yii/caching/Cache::offsetExists|
 |yii/caching/Cache::offsetGet|
 |yii/caching/Cache::offsetSet|
 |yii/caching/Cache::offsetUnset|
 |yii/caching/Cache::getOrSet|


*yii/mongodb/Cache::init*					public
>
 init()
<
return (void)

 Initializes the Cache component.

 This method will initialize the 'db' property to make sure it refers to a
 valid MongoDB connection.


*yii/mongodb/Cache::getValue*				protected
>
 getValue($key)
<
return (string|bool) The value stored in cache, false if the value is not in the
cache or expired.

 Retrieves a value from cache with a specified key.

 This method should be implemented by child classes to retrieve the data from
 specific cache storage.

    [$key] (string) A unique key identifying the cached value


*yii/mongodb/Cache::setValue*				protected
>
 setValue($key, $value, $expire)
<
return (bool) True if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key in cache.

 This method should be implemented by child classes to store the data in
 specific cache storage.

    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$expire] (int) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/mongodb/Cache::addValue*				protected
>
 addValue($key, $value, $expire)
<
return (bool) True if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key.

 This method should be implemented by child classes to store the data in
 specific cache storage.

    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$expire] (int) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/mongodb/Cache::deleteValue*				protected
>
 deleteValue($key)
<
return (bool) If no error happens during deletion

 Deletes a value with the specified key from cache This method should be
 implemented by child classes to delete the data from actual cache storage.

    [$key] (string) The key of the value to be deleted


*yii/mongodb/Cache::flushValues*				protected
>
 flushValues()
<
return (bool) Whether the flush operation was successful.

 Deletes all values from cache.

 Child classes may implement this method to realize the flush operation.


*yii/mongodb/Cache::gc*					public
>
 gc($force='false')
<
return (void)

 Removes the expired data values.

    [$force] (bool) Whether to enforce the garbage collection regardless of
    'gcProbability'. Defaults to false, meaning the actual deletion happens
    with the probability as specified by 'gcProbability'.



 vim:tw=78:ts=8:ft=help:norl:
