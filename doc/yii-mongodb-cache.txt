
*yii/mongodb/Cache*   >> |yii/caching/Cache|
===================

DESCRIPTION
------------------------------------------------------------------------------

 By default, Cache stores session data in a MongoDB collection named 'cache'
 inside the default database. This collection is better to be pre-created with
 fields 'id' and 'expire' indexed. The table name can be changed by setting
 'cacheCollection'.

 Please refer to '\yii\caching\Cache' for common cache operations that are
 supported by Cache.

 The following example shows how you can configure the application to use
 Cache:

   'cache' => [
       'class' => 'yii\mongodb\Cache',
       // 'db' => 'mymongodb',
       // 'cacheCollection' => 'my_cache',
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

$keyPrefix				*yii/mongodb/Cache::$keyPrefix*
 See |yii/caching/Cache::$keyPrefix|

$serializer				*yii/mongodb/Cache::$serializer*
 See |yii/caching/Cache::$serializer|

$db					*yii/mongodb/Cache::$db*
 (\yii\mongodb\Connection|string) The MongoDB connection object or the
 application component ID of the MongoDB connection. After the Cache object is
 created, if you want to change this property, you should only assign it with
 a MongoDB connection object.

$cacheCollection			*yii/mongodb/Cache::$cacheCollection*
 (string|array) The name of the MongoDB collection that stores the cache data.
 Please refer to 'Connection::getCollection()' on how to specify this
 parameter. This collection is better to be pre-created with fields 'id' and
 'expire' indexed.

$gcProbability				*yii/mongodb/Cache::$gcProbability*
 (integer) The probability (parts per million) that garbage collection (GC)
 should be performed when storing a piece of data in the cache. Defaults to
 100, meaning 0.01% chance. This number should be between 0 and 1000000. A
 value 0 meaning no GC will be performed at all.

$behaviors				*yii/mongodb/Cache::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component



METHOD DETAILS
------------------------------------------------------------------------------

*yii/mongodb/Cache::className*				public
 See |yii/base/Object::className|


*yii/mongodb/Cache::__construct*				public
 See |yii/base/Object::__construct|


*yii/mongodb/Cache::init*					public
>
 init()
<
(void)

 This method will initialize the 'db' property to make sure it refers to a
 valid MongoDB connection.


*yii/mongodb/Cache::__get*				public
 See |yii/base/Component::__get|


*yii/mongodb/Cache::__set*				public
 See |yii/base/Component::__set|


*yii/mongodb/Cache::__isset*				public
 See |yii/base/Component::__isset|


*yii/mongodb/Cache::__unset*				public
 See |yii/base/Component::__unset|


*yii/mongodb/Cache::__call*				public
 See |yii/base/Component::__call|


*yii/mongodb/Cache::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/mongodb/Cache::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/mongodb/Cache::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/mongodb/Cache::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/mongodb/Cache::__clone*				public
 See |yii/base/Component::__clone|


*yii/mongodb/Cache::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/mongodb/Cache::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/mongodb/Cache::on*					public
 See |yii/base/Component::on|


*yii/mongodb/Cache::off*					public
 See |yii/base/Component::off|


*yii/mongodb/Cache::trigger*				public
 See |yii/base/Component::trigger|


*yii/mongodb/Cache::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/mongodb/Cache::getBehaviors*				public
 See |yii/base/Component::getBehaviors|


*yii/mongodb/Cache::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/mongodb/Cache::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/mongodb/Cache::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/mongodb/Cache::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/mongodb/Cache::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/mongodb/Cache::buildKey*				protected
 See |yii/caching/Cache::buildKey|


*yii/mongodb/Cache::get*					public
 See |yii/caching/Cache::get|


*yii/mongodb/Cache::exists*				public
 See |yii/caching/Cache::exists|


*yii/mongodb/Cache::mget*					public
 See |yii/caching/Cache::mget|


*yii/mongodb/Cache::set*					public
 See |yii/caching/Cache::set|


*yii/mongodb/Cache::mset*					public
 See |yii/caching/Cache::mset|


*yii/mongodb/Cache::madd*					public
 See |yii/caching/Cache::madd|


*yii/mongodb/Cache::add*					public
 See |yii/caching/Cache::add|


*yii/mongodb/Cache::delete*				public
 See |yii/caching/Cache::delete|


*yii/mongodb/Cache::flush*				public
 See |yii/caching/Cache::flush|


*yii/mongodb/Cache::getValue*				protected
>
 getValue($key)
<
(string|boolean) The value stored in cache, false if the value is not in the
cache or expired.

 This method should be implemented by child classes to retrieve the data from
 specific cache storage.
    [$key] (string) A unique key identifying the cached value


*yii/mongodb/Cache::setValue*				protected
>
 setValue($key, $value, $expire)
<
(boolean) True if the value is successfully stored into cache, false otherwise

 This method should be implemented by child classes to store the data in
 specific cache storage.
    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$expire] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/mongodb/Cache::addValue*				protected
>
 addValue($key, $value, $expire)
<
(boolean) True if the value is successfully stored into cache, false otherwise

 This method should be implemented by child classes to store the data in
 specific cache storage.
    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$expire] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/mongodb/Cache::deleteValue*				protected
>
 deleteValue($key)
<
(boolean) If no error happens during deletion


    [$key] (string) The key of the value to be deleted


*yii/mongodb/Cache::flushValues*				protected
>
 flushValues()
<
(boolean) Whether the flush operation was successful.

 Child classes may implement this method to realize the flush operation.


*yii/mongodb/Cache::getValues*				protected
 See |yii/caching/Cache::getValues|


*yii/mongodb/Cache::setValues*				protected
 See |yii/caching/Cache::setValues|


*yii/mongodb/Cache::addValues*				protected
 See |yii/caching/Cache::addValues|


*yii/mongodb/Cache::offsetExists*				public
 See |yii/caching/Cache::offsetExists|


*yii/mongodb/Cache::offsetGet*				public
 See |yii/caching/Cache::offsetGet|


*yii/mongodb/Cache::offsetSet*				public
 See |yii/caching/Cache::offsetSet|


*yii/mongodb/Cache::offsetUnset*				public
 See |yii/caching/Cache::offsetUnset|


*yii/mongodb/Cache::gc*					public
>
 gc($force='false')
<
(void)


    [$force] (boolean) Whether to enforce the garbage collection regardless of
    'gcProbability'. Defaults to false, meaning the actual deletion happens
    with the probability as specified by 'gcProbability'.



 vim:tw=78:ts=8:ft=help:norl:
