
*yii/filters/RateLimiter*   >> |yii/base/ActionFilter|
=========================

DESCRIPTION
------------------------------------------------------------------------------

 You may use RateLimiter by attaching it as a behavior to a controller or
 module, like the following,

   public function behaviors()
   {
       return [
           'rateLimiter' => [
               'class' => \yii\filters\RateLimiter::className(),
           ],
       ];
   }

 When the user has exceeded his rate limit, RateLimiter will throw a
 'TooManyRequestsHttpException' exception.

 Note that RateLimiter requires 'user' to implement the 'RateLimitInterface'.
 RateLimiter will do nothing if 'user' is not set or does not implement
 'RateLimitInterface'.


PROPERTY DETAILS
------------------------------------------------------------------------------

$owner					*yii/filters/RateLimiter::$owner*

 See |yii/base/Behavior::$owner|

$only					*yii/filters/RateLimiter::$only*

 See |yii/base/ActionFilter::$only|

$except					*yii/filters/RateLimiter::$except*

 See |yii/base/ActionFilter::$except|

$enableRateLimitHeaders			*yii/filters/RateLimiter::$enableRateLimitHeaders*

 (bool) Whether to include rate limit headers in the response

$errorMessage				*yii/filters/RateLimiter::$errorMessage*

 (string) The message to be displayed when rate limit exceeds

$user					*yii/filters/RateLimiter::$user*

 (\yii\filters\RateLimitInterface) The user object that implements the
 RateLimitInterface. If not set, it will take the value of
 'Yii::$app->user->getIdentity(false)'.

$request				*yii/filters/RateLimiter::$request*

 (\yii\web\Request) The current request. If not set, the 'request' application
 component will be used.

$response				*yii/filters/RateLimiter::$response*

 (\yii\web\Response) The response to be sent. If not set, the 'response'
 application component will be used.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/filters/RateLimiter::className*			public

 See |yii/base/Object::className|


*yii/filters/RateLimiter::__construct*			public

 See |yii/base/Object::__construct|


*yii/filters/RateLimiter::init*				public

 See |yii/base/Object::init|


*yii/filters/RateLimiter::__get*				public

 See |yii/base/Object::__get|


*yii/filters/RateLimiter::__set*				public

 See |yii/base/Object::__set|


*yii/filters/RateLimiter::__isset*			public

 See |yii/base/Object::__isset|


*yii/filters/RateLimiter::__unset*			public

 See |yii/base/Object::__unset|


*yii/filters/RateLimiter::__call*				public

 See |yii/base/Object::__call|


*yii/filters/RateLimiter::hasProperty*			public

 See |yii/base/Object::hasProperty|


*yii/filters/RateLimiter::canGetProperty*			public

 See |yii/base/Object::canGetProperty|


*yii/filters/RateLimiter::canSetProperty*			public

 See |yii/base/Object::canSetProperty|


*yii/filters/RateLimiter::hasMethod*			public

 See |yii/base/Object::hasMethod|


*yii/filters/RateLimiter::events*				public

 See |yii/base/Behavior::events|


*yii/filters/RateLimiter::attach*				public

 See |yii/base/ActionFilter::attach|


*yii/filters/RateLimiter::detach*				public

 See |yii/base/ActionFilter::detach|


*yii/filters/RateLimiter::beforeFilter*			public

 See |yii/base/ActionFilter::beforeFilter|


*yii/filters/RateLimiter::afterFilter*			public

 See |yii/base/ActionFilter::afterFilter|


*yii/filters/RateLimiter::beforeAction*			public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to be executed.







    [$action] (\yii\base\Action) The action to be executed.


*yii/filters/RateLimiter::afterAction*			public

 See |yii/base/ActionFilter::afterAction|


*yii/filters/RateLimiter::getActionId*			protected

 See |yii/base/ActionFilter::getActionId|


*yii/filters/RateLimiter::isActive*			protected

 See |yii/base/ActionFilter::isActive|


*yii/filters/RateLimiter::checkRateLimit*			public
>
 checkRateLimit($user, $request, $response, $action)
<
return (void)

    [$user] (\yii\filters\RateLimitInterface) The current user
    [$request] (\yii\web\Request) 
    [$response] (\yii\web\Response) 
    [$action] (\yii\base\Action) The action to be executed


*yii/filters/RateLimiter::addRateLimitHeaders*		public
>
 addRateLimitHeaders($response, $limit, $remaining, $reset)
<
return (void)

    [$response] (\yii\web\Response) 
    [$limit] (int) The maximum number of allowed requests during a period
    [$remaining] (int) The remaining number of allowed requests within the
    current period
    [$reset] (int) The number of seconds to wait before having maximum number
    of allowed requests again



 vim:tw=78:ts=8:ft=help:norl:
