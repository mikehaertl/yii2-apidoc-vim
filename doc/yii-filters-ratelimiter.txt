
*yii/filters/RateLimiter*   >> |yii/base/ActionFilter|
=========================

DESCRIPTION
------------------------------------------------------------------------------

 You may use RateLimiter by attaching it as a behavior to a controller or
 module, like the following,

   public function behaviors()
   {
       return [
           'rateLimiter' => [
               'class' => \yii\filters\RateLimiter::className(),
           ],
       ];
   }

 When the user has exceeded his rate limit, RateLimiter will throw a
 'TooManyRequestsHttpException' exception.

 Note that RateLimiter requires 'user' to implement the 'RateLimitInterface'.
 RateLimiter will do nothing if 'user' is not set or does not implement
 'RateLimitInterface'.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Behavior::$owner|
 |yii/base/ActionFilter::$only|
 |yii/base/ActionFilter::$except|


$enableRateLimitHeaders			*yii/filters/RateLimiter::$enableRateLimitHeaders*

 (bool) Whether to include rate limit headers in the response

$errorMessage				*yii/filters/RateLimiter::$errorMessage*

 (string) The message to be displayed when rate limit exceeds

$user					*yii/filters/RateLimiter::$user*

 (\yii\filters\RateLimitInterface) The user object that implements the
 RateLimitInterface. If not set, it will take the value of
 'Yii::$app->user->getIdentity(false)'.

$request				*yii/filters/RateLimiter::$request*

 (\yii\web\Request) The current request. If not set, the 'request' application
 component will be used.

$response				*yii/filters/RateLimiter::$response*

 (\yii\web\Response) The response to be sent. If not set, the 'response'
 application component will be used.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Behavior::events|
 |yii/base/Behavior::attach|
 |yii/base/Behavior::detach|
 |yii/base/ActionFilter::beforeFilter|
 |yii/base/ActionFilter::afterFilter|
 |yii/base/ActionFilter::afterAction|
 |yii/base/ActionFilter::getActionId|
 |yii/base/ActionFilter::isActive|


*yii/filters/RateLimiter::init*				public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/filters/RateLimiter::beforeAction*			public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to be executed.

 This method is invoked right before an action is to be executed (after all
 possible filters.) You may override this method to do last-minute preparation
 for the action.







    [$action] (\yii\base\Action) The action to be executed.


*yii/filters/RateLimiter::checkRateLimit*			public
>
 checkRateLimit($user, $request, $response, $action)
<
return (void)

 Checks whether the rate limit exceeds.

    [$user] (\yii\filters\RateLimitInterface) The current user
    [$request] (\yii\web\Request) 
    [$response] (\yii\web\Response) 
    [$action] (\yii\base\Action) The action to be executed


*yii/filters/RateLimiter::addRateLimitHeaders*		public
>
 addRateLimitHeaders($response, $limit, $remaining, $reset)
<
return (void)

 Adds the rate limit headers to the response.

    [$response] (\yii\web\Response) 
    [$limit] (int) The maximum number of allowed requests during a period
    [$remaining] (int) The remaining number of allowed requests within the
    current period
    [$reset] (int) The number of seconds to wait before having maximum number
    of allowed requests again



 vim:tw=78:ts=8:ft=help:norl:
