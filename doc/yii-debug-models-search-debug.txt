
*yii/debug/models/search/Debug*   >> |yii/debug/models/search/Base|
===============================


PROPERTY DETAILS
------------------------------------------------------------------------------

$tag					*yii/debug/models/search/Debug::$tag*
 (string) Tag attribute input search value

$ip					*yii/debug/models/search/Debug::$ip*
 (string) Ip attribute input search value

$method					*yii/debug/models/search/Debug::$method*
 (string) Method attribute input search value

$ajax					*yii/debug/models/search/Debug::$ajax*
 (integer) Ajax attribute input search value

$url					*yii/debug/models/search/Debug::$url*
 (string) Url attribute input search value

$statusCode				*yii/debug/models/search/Debug::$statusCode*
 (string) Status code attribute input search value

$sqlCount				*yii/debug/models/search/Debug::$sqlCount*
 (integer) Sql count attribute input search value

$mailCount				*yii/debug/models/search/Debug::$mailCount*
 (integer) Total mail count attribute input search value

$criticalCodes				*yii/debug/models/search/Debug::$criticalCodes*
 (array) Critical codes, used to determine grid row options.

$behaviors				*yii/debug/models/search/Debug::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$validators				*yii/debug/models/search/Debug::$validators*
 (\ArrayObject|\yii\validators\Validator[]) All the validators declared in the
 model.

$activeValidators			*yii/debug/models/search/Debug::$activeValidators*
 (\yii\validators\Validator[]) The validators applicable to the current
 'scenario'.

$errors					*yii/debug/models/search/Debug::$errors*
 (array) Errors for all attributes or the specified attribute. Empty array is
 returned if no error. Note that when returning errors for all attributes, the
 result is a two-dimensional array, like the following:

   [
       'username' => [
           'Username is required.',
           'Username must contain only word characters.',
       ],
       'email' => [
           'Email address is invalid.',
       ]
   ]



$firstErrors				*yii/debug/models/search/Debug::$firstErrors*
 (array) The first errors. The array keys are the attribute names, and the
 array values are the corresponding error messages. An empty array will be
 returned if there is no error.

$attributes				*yii/debug/models/search/Debug::$attributes*
 (array) Attribute values (name => value).

$scenario				*yii/debug/models/search/Debug::$scenario*
 (string) The scenario that this model is in. Defaults to 'SCENARIO_DEFAULT'.

$iterator				*yii/debug/models/search/Debug::$iterator*
 (\ArrayIterator) An iterator for traversing the items in the list.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/debug/models/search/Debug::className*		public
 See |yii/base/Object::className|


*yii/debug/models/search/Debug::__construct*		public
 See |yii/base/Object::__construct|


*yii/debug/models/search/Debug::init*			public
 See |yii/base/Object::init|


*yii/debug/models/search/Debug::__get*			public
 See |yii/base/Component::__get|


*yii/debug/models/search/Debug::__set*			public
 See |yii/base/Component::__set|


*yii/debug/models/search/Debug::__isset*			public
 See |yii/base/Component::__isset|


*yii/debug/models/search/Debug::__unset*			public
 See |yii/base/Component::__unset|


*yii/debug/models/search/Debug::__call*			public
 See |yii/base/Component::__call|


*yii/debug/models/search/Debug::hasProperty*		public
 See |yii/base/Component::hasProperty|


*yii/debug/models/search/Debug::canGetProperty*		public
 See |yii/base/Component::canGetProperty|


*yii/debug/models/search/Debug::canSetProperty*		public
 See |yii/base/Component::canSetProperty|


*yii/debug/models/search/Debug::hasMethod*		public
 See |yii/base/Component::hasMethod|


*yii/debug/models/search/Debug::__clone*			public
 See |yii/base/Component::__clone|


*yii/debug/models/search/Debug::behaviors*		public
 See |yii/base/Component::behaviors|


*yii/debug/models/search/Debug::hasEventHandlers*		public
 See |yii/base/Component::hasEventHandlers|


*yii/debug/models/search/Debug::on*			public
 See |yii/base/Component::on|


*yii/debug/models/search/Debug::off*			public
 See |yii/base/Component::off|


*yii/debug/models/search/Debug::trigger*			public
 See |yii/base/Component::trigger|


*yii/debug/models/search/Debug::getBehavior*		public
 See |yii/base/Component::getBehavior|


*yii/debug/models/search/Debug::getBehaviors*		public
 See |yii/base/Component::getBehaviors|


*yii/debug/models/search/Debug::attachBehavior*		public
 See |yii/base/Component::attachBehavior|


*yii/debug/models/search/Debug::attachBehaviors*		public
 See |yii/base/Component::attachBehaviors|


*yii/debug/models/search/Debug::detachBehavior*		public
 See |yii/base/Component::detachBehavior|


*yii/debug/models/search/Debug::detachBehaviors*		public
 See |yii/base/Component::detachBehaviors|


*yii/debug/models/search/Debug::ensureBehaviors*		public
 See |yii/base/Component::ensureBehaviors|


*yii/debug/models/search/Debug::fields*			public
 See |yii/base/ArrayableTrait::fields|


*yii/debug/models/search/Debug::extraFields*		public
 See |yii/base/ArrayableTrait::extraFields|


*yii/debug/models/search/Debug::toArray*			public
 See |yii/base/ArrayableTrait::toArray|


*yii/debug/models/search/Debug::resolveFields*		protected
 See |yii/base/ArrayableTrait::resolveFields|


*yii/debug/models/search/Debug::rules*			public
>
 rules()
<
(array) Validation rules

 Validation rules are used by 'validate()' to check if attribute values are
 valid. Child classes may override this method to declare different validation
 rules.

 Each rule is an array with the following structure:

   [
       ['attribute1', 'attribute2'],
       'validator type',
       'on' => ['scenario1', 'scenario2'],
       ...other parameters...
   ]

 where

  
   - attribute list: required, specifies the attributes array to be
   validated, for single attribute you can pass string;  
   - validator type: required, specifies the validator to be used. It
   can be a built-in validator name,    a method name of the model class, an
 anonymous function, or a validator class name.  
   - on: optional, specifies the 'scenario|scenarios' array when the
   validation    rule can be applied. If this option is not set, the rule will
 apply to all scenarios.  
   - additional name-value pairs can be specified to initialize the
   corresponding validator properties.    Please refer to individual validator
 class API for possible properties.

 A validator can be either an object of a class extending 'Validator', or a
 model class method (called *inline validator*) that has the following
 signature:

   // $params refers to validation parameters given in the rule
   function validatorName($attribute, $params)

 In the above '$attribute' refers to currently validated attribute name while
 '$params' contains an array of validator configuration options such as 'max'
 in case of 'string' validator. Currently validate attribute value can be
 accessed as '$this->[$attribute]'.

 Yii also provides a set of 'Validator::builtInValidators|built-in
 validators'. They each has an alias name which can be used when specifying a
 validation rule.

 Below are some examples:

   [
       // built-in "required" validator
       [['username', 'password'], 'required'],
       // built-in "string" validator customized with "min" and "max"
 properties
       ['username', 'string', 'min' => 3, 'max' => 12],
       // built-in "compare" validator that is used in "register" scenario
 only
       ['password', 'compare', 'compareAttribute' => 'password2', 'on' =>
 'register'],
       // an inline validator defined via the "authenticate()" method in the
 model class
       ['password', 'authenticate', 'on' => 'login'],
       // a validator of class "DateRangeValidator"
       ['dateRange', 'DateRangeValidator'],
   ];

 Note, in order to inherit rules defined in the parent class, a child class
 needs to merge the parent rules with child rules using functions such as
 'array_merge()'.


*yii/debug/models/search/Debug::scenarios*		public
 See |yii/base/Model::scenarios|


*yii/debug/models/search/Debug::formName*			public
 See |yii/base/Model::formName|


*yii/debug/models/search/Debug::attributes*		public
 See |yii/base/Model::attributes|


*yii/debug/models/search/Debug::attributeLabels*		public
>
 attributeLabels()
<
(array) Attribute labels (name => label)

 Attribute labels are mainly used for display purpose. For example, given an
 attribute 'firstName', we can declare a label 'First Name' which is more
 user-friendly and can be displayed to end users.

 By default an attribute label is generated using 'generateAttributeLabel()'.
 This method allows you to explicitly specify attribute labels.

 Note, in order to inherit labels defined in the parent class, a child class
 needs to merge the parent labels with child labels using functions such as
 'array_merge()'.


*yii/debug/models/search/Debug::validate*			public
 See |yii/base/Model::validate|


*yii/debug/models/search/Debug::beforeValidate*		public
 See |yii/base/Model::beforeValidate|


*yii/debug/models/search/Debug::afterValidate*		public
 See |yii/base/Model::afterValidate|


*yii/debug/models/search/Debug::getValidators*		public
 See |yii/base/Model::getValidators|


*yii/debug/models/search/Debug::getActiveValidators*	public
 See |yii/base/Model::getActiveValidators|


*yii/debug/models/search/Debug::createValidators*		public
 See |yii/base/Model::createValidators|


*yii/debug/models/search/Debug::isAttributeRequired*	public
 See |yii/base/Model::isAttributeRequired|


*yii/debug/models/search/Debug::isAttributeSafe*		public
 See |yii/base/Model::isAttributeSafe|


*yii/debug/models/search/Debug::isAttributeActive*	public
 See |yii/base/Model::isAttributeActive|


*yii/debug/models/search/Debug::getAttributeLabel*	public
 See |yii/base/Model::getAttributeLabel|


*yii/debug/models/search/Debug::hasErrors*		public
 See |yii/base/Model::hasErrors|


*yii/debug/models/search/Debug::getErrors*		public
 See |yii/base/Model::getErrors|


*yii/debug/models/search/Debug::getFirstErrors*		public
 See |yii/base/Model::getFirstErrors|


*yii/debug/models/search/Debug::getFirstError*		public
 See |yii/base/Model::getFirstError|


*yii/debug/models/search/Debug::addError*			public
 See |yii/base/Model::addError|


*yii/debug/models/search/Debug::clearErrors*		public
 See |yii/base/Model::clearErrors|


*yii/debug/models/search/Debug::generateAttributeLabel*	public
 See |yii/base/Model::generateAttributeLabel|


*yii/debug/models/search/Debug::getAttributes*		public
 See |yii/base/Model::getAttributes|


*yii/debug/models/search/Debug::setAttributes*		public
 See |yii/base/Model::setAttributes|


*yii/debug/models/search/Debug::onUnsafeAttribute*	public
 See |yii/base/Model::onUnsafeAttribute|


*yii/debug/models/search/Debug::getScenario*		public
 See |yii/base/Model::getScenario|


*yii/debug/models/search/Debug::setScenario*		public
 See |yii/base/Model::setScenario|


*yii/debug/models/search/Debug::safeAttributes*		public
 See |yii/base/Model::safeAttributes|


*yii/debug/models/search/Debug::activeAttributes*		public
 See |yii/base/Model::activeAttributes|


*yii/debug/models/search/Debug::load*			public
 See |yii/base/Model::load|


*yii/debug/models/search/Debug::loadMultiple*		public
 See |yii/base/Model::loadMultiple|


*yii/debug/models/search/Debug::validateMultiple*		public
 See |yii/base/Model::validateMultiple|


*yii/debug/models/search/Debug::getIterator*		public
 See |yii/base/Model::getIterator|


*yii/debug/models/search/Debug::offsetExists*		public
 See |yii/base/Model::offsetExists|


*yii/debug/models/search/Debug::offsetGet*		public
 See |yii/base/Model::offsetGet|


*yii/debug/models/search/Debug::offsetSet*		public
 See |yii/base/Model::offsetSet|


*yii/debug/models/search/Debug::offsetUnset*		public
 See |yii/base/Model::offsetUnset|


*yii/debug/models/search/Debug::addCondition*		public
 See |yii/debug/models/search/Base::addCondition|


*yii/debug/models/search/Debug::search*			public
>
 search($params, $models)
<
(\yii\data\ArrayDataProvider) 

    [$params] (array) An array of parameter values indexed by parameter names
    [$models] (array) Data to return provider for


*yii/debug/models/search/Debug::isCodeCritical*		public
>
 isCodeCritical($code)
<
(boolean) 

    [$code] (integer) 



 vim:tw=78:ts=8:ft=help:norl:
