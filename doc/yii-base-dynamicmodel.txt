
*yii/base/DynamicModel*   >> |yii/base/Model|
=======================

DESCRIPTION
------------------------------------------------------------------------------

 The typical usage of DynamicModel is as follows,

   public function actionSearch($name, $email)
   {
       $model = DynamicModel::validateData(compact('name', 'email'), [
           [['name', 'email'], 'string', 'max' => 128],
           ['email', 'email'],
       ]);
       if ($model->hasErrors()) {
           // validation fails
       } else {
           // validation succeeds
       }
   }

 The above example shows how to validate '$name' and '$email' with the help of
 DynamicModel. The 'validateData()' method creates an instance of
 DynamicModel, defines the attributes using the given data ('name' and 'email'
 in this example), and then calls 'Model::validate()'.

 You can check the validation result by 'hasErrors()', like you do with a
 normal model. You may also access the dynamic attributes defined through the
 model instance, e.g., '$model->name' and '$model->email'.

 Alternatively, you may use the following more "classic" syntax to perform
 ad-hoc data validation:

   $model = new DynamicModel(compact('name', 'email'));
   $model->addRule(['name', 'email'], 'string', ['max' => 128])
       ->addRule('email', 'email')
       ->validate();

 DynamicModel implements the above ad-hoc data validation feature by
 supporting the so-called "dynamic attributes". It basically allows an
 attribute to be defined dynamically through its constructor or
 'defineAttribute()'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/StaticInstanceTrait::instance|
 |yii/base/ArrayableTrait::fields|
 |yii/base/ArrayableTrait::extraFields|
 |yii/base/ArrayableTrait::toArray|
 |yii/base/ArrayableTrait::extractRootFields|
 |yii/base/ArrayableTrait::extractFieldsFor|
 |yii/base/ArrayableTrait::resolveFields|
 |yii/base/Model::rules|
 |yii/base/Model::scenarios|
 |yii/base/Model::formName|
 |yii/base/Model::attributeLabels|
 |yii/base/Model::attributeHints|
 |yii/base/Model::validate|
 |yii/base/Model::beforeValidate|
 |yii/base/Model::afterValidate|
 |yii/base/Model::getValidators|
 |yii/base/Model::getActiveValidators|
 |yii/base/Model::createValidators|
 |yii/base/Model::isAttributeRequired|
 |yii/base/Model::isAttributeSafe|
 |yii/base/Model::isAttributeActive|
 |yii/base/Model::getAttributeLabel|
 |yii/base/Model::getAttributeHint|
 |yii/base/Model::hasErrors|
 |yii/base/Model::getErrors|
 |yii/base/Model::getFirstErrors|
 |yii/base/Model::getFirstError|
 |yii/base/Model::getErrorSummary|
 |yii/base/Model::addError|
 |yii/base/Model::addErrors|
 |yii/base/Model::clearErrors|
 |yii/base/Model::generateAttributeLabel|
 |yii/base/Model::getAttributes|
 |yii/base/Model::setAttributes|
 |yii/base/Model::onUnsafeAttribute|
 |yii/base/Model::getScenario|
 |yii/base/Model::setScenario|
 |yii/base/Model::safeAttributes|
 |yii/base/Model::activeAttributes|
 |yii/base/Model::load|
 |yii/base/Model::loadMultiple|
 |yii/base/Model::validateMultiple|
 |yii/base/Model::getIterator|
 |yii/base/Model::offsetExists|
 |yii/base/Model::offsetGet|
 |yii/base/Model::offsetSet|
 |yii/base/Model::offsetUnset|


*yii/base/DynamicModel::__construct*			public
>
 __construct($attributes='[]', $config='[]')
<
return (void)

 Constructors.

    [$attributes] (array) The dynamic attributes (name-value pairs, or names)
    being defined
    [$config] (array) The configuration array to be applied to this object.


*yii/base/DynamicModel::__get*				public
>
 __get($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/base/DynamicModel::__set*				public
>
 __set($name, $value)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$value] () 


*yii/base/DynamicModel::__isset*				public
>
 __isset($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/base/DynamicModel::__unset*				public
>
 __unset($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/base/DynamicModel::attributes*			public
>
 attributes()
<
return (void)

 {@inheritdoc}


*yii/base/DynamicModel::defineAttribute*			public
>
 defineAttribute($name, $value='null')
<
return (void)

 Defines an attribute.

    [$name] (string) The attribute name
    [$value] (mixed) The attribute value


*yii/base/DynamicModel::undefineAttribute*		public
>
 undefineAttribute($name)
<
return (void)

 Undefines an attribute.

    [$name] (string) The attribute name


*yii/base/DynamicModel::addRule*				public
>
 addRule($attributes, $validator, $options='[]')
<
return ($this) The model itself

 Adds a validation rule to this model.

 You can also directly manipulate 'validators' to add or remove validation
 rules. This method provides a shortcut.

    [$attributes] (string|array) The attribute(s) to be validated by the rule
    [$validator] (mixed) The validator for the rule.This can be a built-in
    validator name, a method name of the model class, an anonymous function,
    or a validator class name.
    [$options] (array) The options (name-value pairs) to be applied to the
    validator


*yii/base/DynamicModel::validateData*			public
>
 validateData($data, $rules='[]')
<
return (static) The model instance that contains the data being validated

 Validates the given data with the specified validation rules.

 This method will create a DynamicModel instance, populate it with the data to
 be validated, create the specified validation rules, and then validate the
 data using these rules.

    [$data] (array) The data (name-value pairs) to be validated
    [$rules] (array) The validation rules. Please refer to 'Model::rules()' on
    the format of this parameter.



 vim:tw=78:ts=8:ft=help:norl:
