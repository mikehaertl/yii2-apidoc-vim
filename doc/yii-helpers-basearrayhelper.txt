
*yii/helpers/BaseArrayHelper*  
=============================

SUBCLASSES
------------------------------------------------------------------------------

|yii/helpers/ArrayHelper|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseArrayHelper. Use 'ArrayHelper' instead.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/helpers/BaseArrayHelper::toArray*			public
>
 toArray($object, $properties='[]', $recursive='true')
<
return (array) The array representation of the object

    [$object] (object|array|string) The object to be converted into an array
    [$properties] (array) A mapping from object class names to the properties
    that need to put into the resulting arrays. The properties specified for
    each class is an array of the following format:

      [
          'app\models\Post' => [
              'id',
              'title',
              // the key name in array result => property name
              'createTime' => 'created_at',
              // the key name in array result => anonymous function
              'length' => function ($post) {
                  return strlen($post->content);
              },
          ],
      ]

    The result of 'ArrayHelper::toArray($post, $properties)' could be like the
    following:

      [
          'id' => 123,
          'title' => 'test',
          'createTime' => '2013-01-01 12:00AM',
          'length' => 301,
      ]


    [$recursive] (bool) Whether to recursively converts properties which are
    objects into arrays.


*yii/helpers/BaseArrayHelper::merge*			public
>
 merge($a, $b)
<
return (array) The merged array (the original arrays are not changed.)

 If each array has an element with the same string key value, the latter will
 overwrite the former (different from array_merge_recursive). Recursive
 merging will be conducted if both arrays have an element of array type and
 are having the same key. For integer-keyed elements, the elements from the
 latter array will be appended to the former array. You can use
 'UnsetArrayValue' object to unset value from previous array or
 'ReplaceArrayValue' to force replace former value instead of recursive
 merging.

    [$a] (array) Array to be merged to
    [$b] (array) Array to be merged from. You can specify additional arrays
    via third argument, fourth argument etc.


*yii/helpers/BaseArrayHelper::getValue*			public
>
 getValue($array, $key, $default='null')
<
return (mixed) The value of the element if found, default value otherwise

 If the key does not exist in the array or object, the default value will be
 returned instead.

 The key may be specified in a dot format to retrieve the value of a sub-array
 or the property of an embedded object. In particular, if the key is 'x.y.z',
 then the returned value would be '$array['x']['y']['z']' or '$array->x->y->z'
 (if '$array' is an object). If '$array['x']' or '$array->x' is neither an
 array nor an object, the default value will be returned. Note that if the
 array already has an element 'x.y.z', then its value will be returned instead
 of going through the sub-arrays. So it is better to be done specifying an
 array of key names like '['x', 'y', 'z']'.

 Below are some usage examples,

   // working with array
   $username = \yii\helpers\ArrayHelper::getValue($_POST, 'username');
   // working with object
   $username = \yii\helpers\ArrayHelper::getValue($user, 'username');
   // working with anonymous function
   $fullName = \yii\helpers\ArrayHelper::getValue($user, function ($user,
 $defaultValue) {
       return $user->firstName . ' ' . $user->lastName;
   });
   // using dot format to retrieve the property of embedded object
   $street = \yii\helpers\ArrayHelper::getValue($users, 'address.street');
   // using an array of keys to retrieve the value
   $value = \yii\helpers\ArrayHelper::getValue($versions, ['1.0', 'date']);



    [$array] (array|object) Array or object to extract value from
    [$key] (string|\Closure|array) Key name of the array element, an array of
    keys or property name of the object, or an anonymous function returning
    the value. The anonymous function signature should be: 'function($array,
    $defaultValue)'. The possibility to pass an array of keys is available
    since version 2.0.4.
    [$default] (mixed) The default value to be returned if the specified array
    key does not exist. Not used when getting value from an object.


*yii/helpers/BaseArrayHelper::remove*			public
>
 remove($array, $key, $default='null')
<
return (mixed|null) The value of the element if found, default value otherwise

 Usage examples,

   // $array = ['type' => 'A', 'options' => [1, 2]];
   // working with array
   $type = \yii\helpers\ArrayHelper::remove($array, 'type');
   // $array content
   // $array = ['options' => [1, 2]];



    [$array] (array) The array to extract value from
    [$key] (string) Key name of the array element
    [$default] (mixed) The default value to be returned if the specified key
    does not exist


*yii/helpers/BaseArrayHelper::removeValue*		public
>
 removeValue($array, $value)
<
return (array) The items that were removed from the array

 Example,

   $array = ['Bob' => 'Dylan', 'Michael' => 'Jackson', 'Mick' => 'Jagger',
 'Janet' => 'Jackson'];
   $removed = \yii\helpers\ArrayHelper::removeValue($array, 'Jackson');
   // result:
   // $array = ['Bob' => 'Dylan', 'Mick' => 'Jagger'];
   // $removed = ['Michael' => 'Jackson', 'Janet' => 'Jackson'];



    [$array] (array) The array where to look the value from
    [$value] (string) The value to remove from the array


*yii/helpers/BaseArrayHelper::index*			public
>
 index($array, $key, $groups='[]')
<
return (array) The indexed and/or grouped array

 The input should be either multidimensional array or an array of objects.

 The $key can be either a key name of the sub-array, a property name of
 object, or an anonymous function that must return the value that will be used
 as a key.

 $groups is an array of keys, that will be used to group the input array into
 one or more sub-arrays based on keys specified.

 If the '$key' is specified as 'null' or a value of an element corresponding
 to the key is 'null' in addition to '$groups' not specified then the element
 is discarded.

 For example:

   $array = [
       ['id' => '123', 'data' => 'abc', 'device' => 'laptop'],
       ['id' => '345', 'data' => 'def', 'device' => 'tablet'],
       ['id' => '345', 'data' => 'hgi', 'device' => 'smartphone'],
   ];
   $result = ArrayHelper::index($array, 'id');

 The result will be an associative array, where the key is the value of 'id'
 attribute

   [
       '123' => ['id' => '123', 'data' => 'abc', 'device' => 'laptop'],
       '345' => ['id' => '345', 'data' => 'hgi', 'device' => 'smartphone']
       // The second element of an original array is overwritten by the last
 element because of the same id
   ]

 An anonymous function can be used in the grouping array as well.

   $result = ArrayHelper::index($array, function ($element) {
       return $element['id'];
   });

 Passing 'id' as a third argument will group '$array' by 'id':

   $result = ArrayHelper::index($array, null, 'id');

 The result will be a multidimensional array grouped by 'id' on the first
 level, by 'device' on the second level and indexed by 'data' on the third
 level:

   [
       '123' => [
           ['id' => '123', 'data' => 'abc', 'device' => 'laptop']
       ],
       '345' => [ // all elements with this index are present in the result
 array
           ['id' => '345', 'data' => 'def', 'device' => 'tablet'],
           ['id' => '345', 'data' => 'hgi', 'device' => 'smartphone'],
       ]
   ]

 The anonymous function can be used in the array of grouping keys as well:

   $result = ArrayHelper::index($array, 'data', [function ($element) {
       return $element['id'];
   }, 'device']);

 The result will be a multidimensional array grouped by 'id' on the first
 level, by the 'device' on the second one and indexed by the 'data' on the
 third level:

   [
       '123' => [
           'laptop' => [
               'abc' => ['id' => '123', 'data' => 'abc', 'device' => 'laptop']
           ]
       ],
       '345' => [
           'tablet' => [
               'def' => ['id' => '345', 'data' => 'def', 'device' => 'tablet']
           ],
           'smartphone' => [
               'hgi' => ['id' => '345', 'data' => 'hgi', 'device' =>
 'smartphone']
           ]
       ]
   ]



    [$array] (array) The array that needs to be indexed or grouped
    [$key] (string|\Closure|null) The column name or anonymous function which
    result will be used to index the array
    [$groups] (string|string[]|\Closure[]|null) The array of keys, that will
    be used to group the input array by one or more keys. If the $key
    attribute or its value for the particular element is null and $groups is
    not defined, the array element will be discarded. Otherwise, if $groups is
    specified, array element will be added to the result array without any
    key. This parameter is available since version 2.0.8.


*yii/helpers/BaseArrayHelper::getColumn*			public
>
 getColumn($array, $name, $keepKeys='true')
<
return (array) The list of column values

 The input array should be multidimensional or an array of objects.

 For example,

   $array = [
       ['id' => '123', 'data' => 'abc'],
       ['id' => '345', 'data' => 'def'],
   ];
   $result = ArrayHelper::getColumn($array, 'id');
   // the result is: ['123', '345']

   // using anonymous function
   $result = ArrayHelper::getColumn($array, function ($element) {
       return $element['id'];
   });



    [$array] (array) 
    [$name] (string|\Closure) 
    [$keepKeys] (bool) Whether to maintain the array keys. If false, the
    resulting array will be re-indexed with integers.


*yii/helpers/BaseArrayHelper::map*			public
>
 map($array, $from, $to, $group='null')
<
return (array) 

 The '$from' and '$to' parameters specify the key names or property names to
 set up the map. Optionally, one can further group the map according to a
 grouping field '$group'.

 For example,

   $array = [
       ['id' => '123', 'name' => 'aaa', 'class' => 'x'],
       ['id' => '124', 'name' => 'bbb', 'class' => 'x'],
       ['id' => '345', 'name' => 'ccc', 'class' => 'y'],
   ];

   $result = ArrayHelper::map($array, 'id', 'name');
   // the result is:
   // [
   //     '123' => 'aaa',
   //     '124' => 'bbb',
   //     '345' => 'ccc',
   // ]

   $result = ArrayHelper::map($array, 'id', 'name', 'class');
   // the result is:
   // [
   //     'x' => [
   //         '123' => 'aaa',
   //         '124' => 'bbb',
   //     ],
   //     'y' => [
   //         '345' => 'ccc',
   //     ],
   // ]



    [$array] (array) 
    [$from] (string|\Closure) 
    [$to] (string|\Closure) 
    [$group] (string|\Closure) 


*yii/helpers/BaseArrayHelper::keyExists*			public
>
 keyExists($key, $array, $caseSensitive='true')
<
return (bool) Whether the array contains the specified key

 This method enhances the 'array_key_exists()' function by supporting
 case-insensitive key comparison.

    [$key] (string) The key to check
    [$array] (array) The array with keys to check
    [$caseSensitive] (bool) Whether the key comparison should be
    case-sensitive


*yii/helpers/BaseArrayHelper::multisort*			public
>
 multisort($array, $key, $direction='SORT_ASC', $sortFlag='SORT_REGULAR')
<
return (void)

    [$array] (array) The array to be sorted. The array will be modified after
    calling this method.
    [$key] (string|\Closure|array) The key(s) to be sorted by. This refers to
    a key name of the sub-array elements, a property name of the objects, or
    an anonymous function returning the values for comparison purpose. The
    anonymous function signature should be: 'function($item)'. To sort by
    multiple keys, provide an array of keys here.
    [$direction] (int|array) The sorting direction. It can be either
    'SORT_ASC' or 'SORT_DESC'. When sorting by multiple keys with different
    sorting directions, use an array of sorting directions.
    [$sortFlag] (int|array) The PHP sort flag. Valid values include
    'SORT_REGULAR', 'SORT_NUMERIC', 'SORT_STRING', 'SORT_LOCALE_STRING',
    'SORT_NATURAL' and 'SORT_FLAG_CASE'. Please refer to [PHP
    manual](http://php.net/manual/en/function.sort.php) for more details. When
    sorting by multiple keys with different sort flags, use an array of sort
    flags.


*yii/helpers/BaseArrayHelper::htmlEncode*			public
>
 htmlEncode($data, $valuesOnly='true', $charset='null')
<
return (array) The encoded data

 Only array values will be encoded by default. If a value is an array, this
 method will also encode it recursively. Only string values will be encoded.

    [$data] (array) Data to be encoded
    [$valuesOnly] (bool) Whether to encode array values only. If false, both
    the array keys and array values will be encoded.
    [$charset] (string) The charset that the data is using. If not set,
    '\yii\base\Application::charset' will be used.


*yii/helpers/BaseArrayHelper::htmlDecode*			public
>
 htmlDecode($data, $valuesOnly='true')
<
return (array) The decoded data

 Only array values will be decoded by default. If a value is an array, this
 method will also decode it recursively. Only string values will be decoded.

    [$data] (array) Data to be decoded
    [$valuesOnly] (bool) Whether to decode array values only. If false, both
    the array keys and array values will be decoded.


*yii/helpers/BaseArrayHelper::isAssociative*		public
>
 isAssociative($array, $allStrings='true')
<
return (bool) Whether the array is associative

 An array is associative if all its keys are strings. If '$allStrings' is
 false, then an array will be treated as associative if at least one of its
 keys is a string.

 Note that an empty array will NOT be considered associative.

    [$array] (array) The array being checked
    [$allStrings] (bool) Whether the array keys must be all strings in order
    for the array to be treated as associative.


*yii/helpers/BaseArrayHelper::isIndexed*			public
>
 isIndexed($array, $consecutive='false')
<
return (bool) Whether the array is associative

 An array is indexed if all its keys are integers. If '$consecutive' is true,
 then the array keys must be a consecutive sequence starting from 0.

 Note that an empty array will be considered indexed.

    [$array] (array) The array being checked
    [$consecutive] (bool) Whether the array keys must be a consecutive
    sequence in order for the array to be treated as indexed.


*yii/helpers/BaseArrayHelper::isIn*			public
>
 isIn($needle, $haystack, $strict='false')
<
return (bool) 'true' if '$needle' was found in '$haystack', 'false' otherwise.

 This method does the same as the PHP function
 [in_array()](http://php.net/manual/en/function.in-array.php) but additionally
 works for objects that implement the '\Traversable' interface.

    [$needle] (mixed) The value to look for.
    [$haystack] (array|\Traversable) The set of values to search.
    [$strict] (bool) Whether to enable strict ('===') comparison.


*yii/helpers/BaseArrayHelper::isTraversable*		public
>
 isTraversable($var)
<
return (bool) Whether $var is array-like

 This method does the same as the PHP function
 [is_array()](http://php.net/manual/en/function.is-array.php) but additionally
 works on objects that implement the '\Traversable' interface.

    [$var] (mixed) The variable being evaluated.


*yii/helpers/BaseArrayHelper::isSubset*			public
>
 isSubset($needles, $haystack, $strict='false')
<
return (bool) 'true' if '$needles' is a subset of '$haystack', 'false' otherwise.

 This method will return 'true', if all elements of '$needles' are contained
 in '$haystack'. If at least one element is missing, 'false' will be returned.

    [$needles] (array|\Traversable) The values that must **all** be in
    '$haystack'.
    [$haystack] (array|\Traversable) The set of value to search.
    [$strict] (bool) Whether to enable strict ('===') comparison.


*yii/helpers/BaseArrayHelper::filter*			public
>
 filter($array, $filters)
<
return (array) Filtered array

 For example:

   $array = [
       'A' => [1, 2],
       'B' => [
           'C' => 1,
           'D' => 2,
       ],
       'E' => 1,
   ];

   $result = \yii\helpers\ArrayHelper::filter($array, ['A']);
   // $result will be:
   // [
   //     'A' => [1, 2],
   // ]

   $result = \yii\helpers\ArrayHelper::filter($array, ['A', 'B.C']);
   // $result will be:
   // [
   //     'A' => [1, 2],
   //     'B' => ['C' => 1],
   // ]

   $result = \yii\helpers\ArrayHelper::filter($array, ['B', '!B.C']);
   // $result will be:
   // [
   //     'B' => ['D' => 2],
   // ]



    [$array] (array) Source array
    [$filters] (array) Rules that define array keys which should be left or
    removed from results. Each rule is: 
      - 'var' - '$array['var']' will be left in result. 
      - 'var.key' = only '$array['var']['key'] will be left in result. 
      - '!var.key' = '$array['var']['key'] will be removed from result.



 vim:tw=78:ts=8:ft=help:norl:
