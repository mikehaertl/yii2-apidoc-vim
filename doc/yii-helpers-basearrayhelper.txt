
*yii/helpers/BaseArrayHelper*  
=============================

SUBCLASSES
------------------------------------------------------------------------------

|yii/helpers/ArrayHelper|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseArrayHelper. Use 'ArrayHelper' instead.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/helpers/BaseArrayHelper::toArray*			public
>
 toArray($object, $properties='[]', $recursive='true')
<
(array) The array representation of the object


    [$object] (object|array) The object to be converted into an array
    [$properties] (array) A mapping from object class names to the properties
    that need to put into the resulting arrays. The properties specified for
    each class is an array of the following format:

      [
          'app\models\Post' => [
              'id',
              'title',
              // the key name in array result => property name
              'createTime' => 'created_at',
              // the key name in array result => anonymous function
              'length' => function ($post) {
                  return strlen($post->content);
              },
          ],
      ]

    The result of 'ArrayHelper::toArray($post, $properties)' could be like the
    following:

      [
          'id' => 123,
          'title' => 'test',
          'createTime' => '2013-01-01 12:00AM',
          'length' => 301,
      ]


    [$recursive] (boolean) Whether to recursively converts properties which
    are objects into arrays.


*yii/helpers/BaseArrayHelper::merge*			public
>
 merge($a, $b)
<
(array) The merged array (the original arrays are not changed.)

 If each array has an element with the same string key value, the latter will
 overwrite the former (different from array_merge_recursive). Recursive
 merging will be conducted if both arrays have an element of array type and
 are having the same key. For integer-keyed elements, the elements from the
 latter array will be appended to the former array.
    [$a] (array) Array to be merged to
    [$b] (array) Array to be merged from. You can specify additional arrays
    via third argument, fourth argument etc.


*yii/helpers/BaseArrayHelper::getValue*			public
>
 getValue($array, $key, $default='null')
<
(mixed) The value of the element if found, default value otherwise

 If the key does not exist in the array or object, the default value will be
 returned instead.

 The key may be specified in a dot format to retrieve the value of a sub-array
 or the property of an embedded object. In particular, if the key is 'x.y.z',
 then the returned value would be '$array['x']['y']['z']' or '$array->x->y->z'
 (if '$array' is an object). If '$array['x']' or '$array->x' is neither an
 array nor an object, the default value will be returned. Note that if the
 array already has an element 'x.y.z', then its value will be returned instead
 of going through the sub-arrays.

 Below are some usage examples,

   // working with array
   $username = \yii\helpers\ArrayHelper::getValue($_POST, 'username');
   // working with object
   $username = \yii\helpers\ArrayHelper::getValue($user, 'username');
   // working with anonymous function
   $fullName = \yii\helpers\ArrayHelper::getValue($user, function ($user,
 $defaultValue) {
       return $user->firstName . ' ' . $user->lastName;
   });
   // using dot format to retrieve the property of embedded object
   $street = \yii\helpers\ArrayHelper::getValue($users, 'address.street');


    [$array] (array|object) Array or object to extract value from
    [$key] (string|\Closure) Key name of the array element, or property name
    of the object, or an anonymous function returning the value. The anonymous
    function signature should be: 'function($array, $defaultValue)'.
    [$default] (mixed) The default value to be returned if the specified key
    does not exist


*yii/helpers/BaseArrayHelper::remove*			public
>
 remove($array, $key, $default='null')
<
(mixed|null) The value of the element if found, default value otherwise

 Usage examples,

   // $array = ['type' => 'A', 'options' => [1, 2]];
   // working with array
   $type = \yii\helpers\ArrayHelper::remove($array, 'type');
   // $array content
   // $array = ['options' => [1, 2]];


    [$array] (array) The array to extract value from
    [$key] (string) Key name of the array element
    [$default] (mixed) The default value to be returned if the specified key
    does not exist


*yii/helpers/BaseArrayHelper::index*			public
>
 index($array, $key)
<
(array) The indexed array

 The input array should be multidimensional or an array of objects.

 The key can be a key name of the sub-array, a property name of object, or an
 anonymous function which returns the key value given an array element.

 If a key value is null, the corresponding array element will be discarded and
 not put in the result.

 For example,

   $array = [
       ['id' => '123', 'data' => 'abc'],
       ['id' => '345', 'data' => 'def'],
   ];
   $result = ArrayHelper::index($array, 'id');
   // the result is:
   // [
   //     '123' => ['id' => '123', 'data' => 'abc'],
   //     '345' => ['id' => '345', 'data' => 'def'],
   // ]

   // using anonymous function
   $result = ArrayHelper::index($array, function ($element) {
       return $element['id'];
   });


    [$array] (array) The array that needs to be indexed
    [$key] (string|\Closure) The column name or anonymous function whose
    result will be used to index the array


*yii/helpers/BaseArrayHelper::getColumn*			public
>
 getColumn($array, $name, $keepKeys='true')
<
(array) The list of column values

 The input array should be multidimensional or an array of objects.

 For example,

   $array = [
       ['id' => '123', 'data' => 'abc'],
       ['id' => '345', 'data' => 'def'],
   ];
   $result = ArrayHelper::getColumn($array, 'id');
   // the result is: ['123', '345']

   // using anonymous function
   $result = ArrayHelper::getColumn($array, function ($element) {
       return $element['id'];
   });


    [$array] (array) 
    [$name] (string|\Closure) 
    [$keepKeys] (boolean) Whether to maintain the array keys. If false, the
    resulting array will be re-indexed with integers.


*yii/helpers/BaseArrayHelper::map*			public
>
 map($array, $from, $to, $group='null')
<
(array) 

 The '$from' and '$to' parameters specify the key names or property names to
 set up the map. Optionally, one can further group the map according to a
 grouping field '$group'.

 For example,

   $array = [
       ['id' => '123', 'name' => 'aaa', 'class' => 'x'],
       ['id' => '124', 'name' => 'bbb', 'class' => 'x'],
       ['id' => '345', 'name' => 'ccc', 'class' => 'y'],
   );

   $result = ArrayHelper::map($array, 'id', 'name');
   // the result is:
   // [
   //     '123' => 'aaa',
   //     '124' => 'bbb',
   //     '345' => 'ccc',
   // ]

   $result = ArrayHelper::map($array, 'id', 'name', 'class');
   // the result is:
   // [
   //     'x' => [
   //         '123' => 'aaa',
   //         '124' => 'bbb',
   //     ],
   //     'y' => [
   //         '345' => 'ccc',
   //     ],
   // ]


    [$array] (array) 
    [$from] (string|\Closure) 
    [$to] (string|\Closure) 
    [$group] (string|\Closure) 


*yii/helpers/BaseArrayHelper::keyExists*			public
>
 keyExists($key, $array, $caseSensitive='true')
<
(boolean) Whether the array contains the specified key

 This method enhances the 'array_key_exists()' function by supporting
 case-insensitive key comparison.
    [$key] (string) The key to check
    [$array] (array) The array with keys to check
    [$caseSensitive] (boolean) Whether the key comparison should be
    case-sensitive


*yii/helpers/BaseArrayHelper::multisort*			public
>
 multisort($array, $key, $direction='SORT_ASC', $sortFlag='SORT_REGULAR')
<
(void)


    [$array] (array) The array to be sorted. The array will be modified after
    calling this method.
    [$key] (string|\Closure|array) The key(s) to be sorted by. This refers to
    a key name of the sub-array elements, a property name of the objects, or
    an anonymous function returning the values for comparison purpose. The
    anonymous function signature should be: 'function($item)'. To sort by
    multiple keys, provide an array of keys here.
    [$direction] (integer|array) The sorting direction. It can be either
    'SORT_ASC' or 'SORT_DESC'. When sorting by multiple keys with different
    sorting directions, use an array of sorting directions.
    [$sortFlag] (integer|array) The PHP sort flag. Valid values include
    'SORT_REGULAR', 'SORT_NUMERIC', 'SORT_STRING', 'SORT_LOCALE_STRING',
    'SORT_NATURAL' and 'SORT_FLAG_CASE'. Please refer to [PHP
    manual](http://php.net/manual/en/function.sort.php) for more details. When
    sorting by multiple keys with different sort flags, use an array of sort
    flags.


*yii/helpers/BaseArrayHelper::htmlEncode*			public
>
 htmlEncode($data, $valuesOnly='true', $charset='null')
<
(array) The encoded data

 Both the array keys and values will be encoded. If a value is an array, this
 method will also encode it recursively.
    [$data] (array) Data to be encoded
    [$valuesOnly] (boolean) Whether to encode array values only. If false,
    both the array keys and array values will be encoded.
    [$charset] (string) The charset that the data is using. If not set,
    '\yii\base\Application::charset' will be used.


*yii/helpers/BaseArrayHelper::htmlDecode*			public
>
 htmlDecode($data, $valuesOnly='true')
<
(array) The decoded data

 Both the array keys and values will be decoded. If a value is an array, this
 method will also decode it recursively.
    [$data] (array) Data to be decoded
    [$valuesOnly] (boolean) Whether to decode array values only. If false,
    both the array keys and array values will be decoded.



 vim:tw=78:ts=8:ft=help:norl:
