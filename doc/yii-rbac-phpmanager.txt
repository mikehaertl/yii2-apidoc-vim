
*yii/rbac/PhpManager*   >> |yii/rbac/BaseManager|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 The authorization data will be saved to and loaded from three files specified
 by 'itemFile', 'assignmentFile' and 'ruleFile'.

 PhpManager is mainly suitable for authorization data that is not too big (for
 example, the authorization data for a personal blog system). Use 'DbManager'
 for more complex authorization data.

 Note that PhpManager is not compatible with facebooks
 [HHVM](http://hhvm.com/) because it relies on writing php files and including
 them afterwards which is not supported by HHVM.

 For more details and usage information on PhpManager, see the [guide article
 on security authorization](guide:security-authorization).


PROPERTY DETAILS
------------------------------------------------------------------------------

$defaultRoles				*yii/rbac/PhpManager::$defaultRoles*

 See |yii/rbac/BaseManager::$defaultRoles|

$itemFile				*yii/rbac/PhpManager::$itemFile*

 (string) The path of the PHP script that contains the authorization items.
 This can be either a file path or a [path alias](guide:concept-aliases) to
 the file. Make sure this file is writable by the Web server process if the
 authorization needs to be changed online.

$assignmentFile				*yii/rbac/PhpManager::$assignmentFile*

 (string) The path of the PHP script that contains the authorization
 assignments. This can be either a file path or a [path
 alias](guide:concept-aliases) to the file. Make sure this file is writable by
 the Web server process if the authorization needs to be changed online.

$ruleFile				*yii/rbac/PhpManager::$ruleFile*

 (string) The path of the PHP script that contains the authorization rules.
 This can be either a file path or a [path alias](guide:concept-aliases) to
 the file. Make sure this file is writable by the Web server process if the
 authorization needs to be changed online.

$items					*yii/rbac/PhpManager::$items*

 (\yii\rbac\Item[])

$children				*yii/rbac/PhpManager::$children*

 (array)

$assignments				*yii/rbac/PhpManager::$assignments*

 (array)

$rules					*yii/rbac/PhpManager::$rules*

 (\yii\rbac\Rule[])



METHOD DETAILS
------------------------------------------------------------------------------


*yii/rbac/PhpManager::className*				public

 See |yii/base/BaseObject::className|


*yii/rbac/PhpManager::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/rbac/PhpManager::init*				public
>
 init()
<
return (void)

 Initializes the application component.

 This method overrides parent implementation by loading the authorization data
 from PHP script.


*yii/rbac/PhpManager::__get*				public

 See |yii/base/Component::__get|


*yii/rbac/PhpManager::__set*				public

 See |yii/base/Component::__set|


*yii/rbac/PhpManager::__isset*				public

 See |yii/base/Component::__isset|


*yii/rbac/PhpManager::__unset*				public

 See |yii/base/Component::__unset|


*yii/rbac/PhpManager::__call*				public

 See |yii/base/Component::__call|


*yii/rbac/PhpManager::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/rbac/PhpManager::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/rbac/PhpManager::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/rbac/PhpManager::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/rbac/PhpManager::__clone*				public

 See |yii/base/Component::__clone|


*yii/rbac/PhpManager::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/rbac/PhpManager::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/rbac/PhpManager::on*					public

 See |yii/base/Component::on|


*yii/rbac/PhpManager::off*				public

 See |yii/base/Component::off|


*yii/rbac/PhpManager::trigger*				public

 See |yii/base/Component::trigger|


*yii/rbac/PhpManager::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/rbac/PhpManager::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/rbac/PhpManager::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/rbac/PhpManager::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/rbac/PhpManager::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/rbac/PhpManager::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/rbac/PhpManager::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/rbac/PhpManager::getItem*				public
>
 getItem($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/PhpManager::getItems*				public
>
 getItems($type)
<
return (void)

 {@inheritdoc}

    [$type] () 


*yii/rbac/PhpManager::addItem*				protected
>
 addItem($item)
<
return (void)

 {@inheritdoc}

    [$item] () 


*yii/rbac/PhpManager::addRule*				protected
>
 addRule($rule)
<
return (void)

 {@inheritdoc}

    [$rule] () 


*yii/rbac/PhpManager::removeItem*				public
>
 removeItem($item)
<
return (void)

 {@inheritdoc}

    [$item] () 


*yii/rbac/PhpManager::removeRule*				protected
>
 removeRule($rule)
<
return (void)

 {@inheritdoc}

    [$rule] () 


*yii/rbac/PhpManager::updateItem*				protected
>
 updateItem($name, $item)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$item] () 


*yii/rbac/PhpManager::updateRule*				public
>
 updateRule($name, $rule)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$rule] () 


*yii/rbac/PhpManager::createRole*				public

 See |yii/rbac/BaseManager::createRole|


*yii/rbac/PhpManager::createPermission*			public

 See |yii/rbac/BaseManager::createPermission|


*yii/rbac/PhpManager::add*				public

 See |yii/rbac/BaseManager::add|


*yii/rbac/PhpManager::remove*				public

 See |yii/rbac/BaseManager::remove|


*yii/rbac/PhpManager::update*				public

 See |yii/rbac/BaseManager::update|


*yii/rbac/PhpManager::getRole*				public

 See |yii/rbac/BaseManager::getRole|


*yii/rbac/PhpManager::getPermission*			public

 See |yii/rbac/BaseManager::getPermission|


*yii/rbac/PhpManager::getRoles*				public

 See |yii/rbac/BaseManager::getRoles|


*yii/rbac/PhpManager::setDefaultRoles*			public

 See |yii/rbac/BaseManager::setDefaultRoles|


*yii/rbac/PhpManager::getDefaultRoles*			public

 See |yii/rbac/BaseManager::getDefaultRoles|


*yii/rbac/PhpManager::getDefaultRoleInstances*		public

 See |yii/rbac/BaseManager::getDefaultRoleInstances|


*yii/rbac/PhpManager::getPermissions*			public

 See |yii/rbac/BaseManager::getPermissions|


*yii/rbac/PhpManager::executeRule*			protected

 See |yii/rbac/BaseManager::executeRule|


*yii/rbac/PhpManager::hasNoAssignments*			protected

 See |yii/rbac/BaseManager::hasNoAssignments|


*yii/rbac/PhpManager::getRolesByUser*			public
>
 getRolesByUser($userId)
<
return (void)

 {@inheritdoc} The roles returned by this method include the roles assigned
 via '$defaultRoles'.

    [$userId] () 


*yii/rbac/PhpManager::getChildRoles*			public
>
 getChildRoles($roleName)
<
return (void)

 {@inheritdoc}

    [$roleName] () 


*yii/rbac/PhpManager::getPermissionsByRole*		public
>
 getPermissionsByRole($roleName)
<
return (void)

 {@inheritdoc}

    [$roleName] () 


*yii/rbac/PhpManager::getPermissionsByUser*		public
>
 getPermissionsByUser($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/rbac/PhpManager::getRule*				public
>
 getRule($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/PhpManager::getRules*				public
>
 getRules()
<
return (void)

 {@inheritdoc}


*yii/rbac/PhpManager::canAddChild*			public
>
 canAddChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/rbac/PhpManager::addChild*				public
>
 addChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/rbac/PhpManager::removeChild*			public
>
 removeChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/rbac/PhpManager::removeChildren*			public
>
 removeChildren($parent)
<
return (void)

 {@inheritdoc}

    [$parent] () 


*yii/rbac/PhpManager::hasChild*				public
>
 hasChild($parent, $child)
<
return (void)

 {@inheritdoc}

    [$parent] () 
    [$child] () 


*yii/rbac/PhpManager::getChildren*			public
>
 getChildren($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/PhpManager::assign*				public
>
 assign($role, $userId)
<
return (void)

 {@inheritdoc}

    [$role] () 
    [$userId] () 


*yii/rbac/PhpManager::revoke*				public
>
 revoke($role, $userId)
<
return (void)

 {@inheritdoc}

    [$role] () 
    [$userId] () 


*yii/rbac/PhpManager::revokeAll*				public
>
 revokeAll($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/rbac/PhpManager::getAssignment*			public
>
 getAssignment($roleName, $userId)
<
return (void)

 {@inheritdoc}

    [$roleName] () 
    [$userId] () 


*yii/rbac/PhpManager::getAssignments*			public
>
 getAssignments($userId)
<
return (void)

 {@inheritdoc}

    [$userId] () 


*yii/rbac/PhpManager::getUserIdsByRole*			public
>
 getUserIdsByRole($roleName)
<
return (void)

 {@inheritdoc}

    [$roleName] () 


*yii/rbac/PhpManager::removeAll*				public
>
 removeAll()
<
return (void)

 {@inheritdoc}


*yii/rbac/PhpManager::removeAllPermissions*		public
>
 removeAllPermissions()
<
return (void)

 {@inheritdoc}


*yii/rbac/PhpManager::removeAllRoles*			public
>
 removeAllRoles()
<
return (void)

 {@inheritdoc}


*yii/rbac/PhpManager::removeAllRules*			public
>
 removeAllRules()
<
return (void)

 {@inheritdoc}


*yii/rbac/PhpManager::removeAllAssignments*		public
>
 removeAllAssignments()
<
return (void)

 {@inheritdoc}


*yii/rbac/PhpManager::checkAccess*			public
>
 checkAccess($userId, $permissionName, $params='[]')
<
return (void)

 {@inheritdoc}

    [$userId] () 
    [$permissionName] () 
    [$params] () 


*yii/rbac/PhpManager::checkAccessRecursive*		protected
>
 checkAccessRecursive($user, $itemName, $params, $assignments)
<
return (bool) Whether the operations can be performed by the user.

 Performs access check for the specified user.

 This method is internally called by 'checkAccess()'.

    [$user] (string|int) The user ID. This should can be either an integer or
    a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/rbac/PhpManager::detectLoop*				protected
>
 detectLoop($parent, $child)
<
return (bool) Whether a loop exists

 Checks whether there is a loop in the authorization item hierarchy.

    [$parent] (\yii\rbac\Item) Parent item
    [$child] (\yii\rbac\Item) The child item that is to be added to the
    hierarchy


*yii/rbac/PhpManager::getChildrenRecursive*		protected
>
 getChildrenRecursive($name, $result)
<
return (void)

 Recursively finds all children and grand children of the specified item.

    [$name] (string) The name of the item whose children are to be looked for.
    [$result] (array) The children and grand children (in array keys)


*yii/rbac/PhpManager::getDirectPermissionsByUser*		protected
>
 getDirectPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All direct permissions that the user has. The array
is indexed by the permission names.

 Returns all permissions that are directly assigned to user.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getInheritedPermissionsByUser*	protected
>
 getInheritedPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All inherited permissions that the user has. The
array is indexed by the permission names.

 Returns all permissions that the user inherits from the roles assigned to
 him.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::removeAllItems*			protected
>
 removeAllItems($type)
<
return (void)

 Removes all auth items of the specified type.

    [$type] (int) The auth item type (either Item::TYPE_PERMISSION or
    Item::TYPE_ROLE)


*yii/rbac/PhpManager::load*				protected
>
 load()
<
return (void)

 Loads authorization data from persistent storage.


*yii/rbac/PhpManager::save*				protected
>
 save()
<
return (void)

 Saves authorization data into persistent storage.


*yii/rbac/PhpManager::loadFromFile*			protected
>
 loadFromFile($file)
<
return (array) The authorization data

 Loads the authorization data from a PHP script file.

    [$file] (string) The file path.


*yii/rbac/PhpManager::saveToFile*				protected
>
 saveToFile($data, $file)
<
return (void)

 Saves the authorization data to a PHP script file.

    [$data] (array) The authorization data
    [$file] (string) The file path.


*yii/rbac/PhpManager::invalidateScriptCache*		protected
>
 invalidateScriptCache($file)
<
return (void)

 Invalidates precompiled script cache (such as OPCache or APC) for the given
 file.

    [$file] (string) The file path.


*yii/rbac/PhpManager::saveItems*				protected
>
 saveItems()
<
return (void)

 Saves items data into persistent storage.


*yii/rbac/PhpManager::saveAssignments*			protected
>
 saveAssignments()
<
return (void)

 Saves assignments data into persistent storage.


*yii/rbac/PhpManager::saveRules*				protected
>
 saveRules()
<
return (void)

 Saves rules data into persistent storage.



 vim:tw=78:ts=8:ft=help:norl:
