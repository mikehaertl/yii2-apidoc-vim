
*yii/rbac/PhpManager*   >> |yii/rbac/BaseManager|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 The authorization data will be saved to and loaded from three files specified
 by 'itemFile', 'assignmentFile' and 'ruleFile'.

 PhpManager is mainly suitable for authorization data that is not too big (for
 example, the authorization data for a personal blog system). Use 'DbManager'
 for more complex authorization data.

 Note that PhpManager is not compatible with facebooks
 [HHVM](http://hhvm.com/) because it relies on writing php files and including
 them afterwards which is not supported by HHVM.

 For more details and usage information on PhpManager, see the [guide article
 on security authorization](guide:security-authorization).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/rbac/BaseManager::$defaultRoles|
 |yii/base/Component::$behaviors|
 |yii/rbac/BaseManager::$roles|
 |yii/rbac/BaseManager::$defaultRoleInstances|
 |yii/rbac/BaseManager::$permissions|


$itemFile				*yii/rbac/PhpManager::$itemFile*

 (string) The path of the PHP script that contains the authorization items.
 This can be either a file path or a [path alias](guide:concept-aliases) to
 the file. Make sure this file is writable by the Web server process if the
 authorization needs to be changed online.

$assignmentFile				*yii/rbac/PhpManager::$assignmentFile*

 (string) The path of the PHP script that contains the authorization
 assignments. This can be either a file path or a [path
 alias](guide:concept-aliases) to the file. Make sure this file is writable by
 the Web server process if the authorization needs to be changed online.

$ruleFile				*yii/rbac/PhpManager::$ruleFile*

 (string) The path of the PHP script that contains the authorization rules.
 This can be either a file path or a [path alias](guide:concept-aliases) to
 the file. Make sure this file is writable by the Web server process if the
 authorization needs to be changed online.

$items					*yii/rbac/PhpManager::$items*

 (\yii\rbac\Item[])

$children				*yii/rbac/PhpManager::$children*

 (array)

$assignments				*yii/rbac/PhpManager::$assignments*

 (array)

$rules					*yii/rbac/PhpManager::$rules*

 (\yii\rbac\Rule[])



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/rbac/BaseManager::createRole|
 |yii/rbac/BaseManager::createPermission|
 |yii/rbac/BaseManager::add|
 |yii/rbac/BaseManager::remove|
 |yii/rbac/BaseManager::update|
 |yii/rbac/BaseManager::getRole|
 |yii/rbac/BaseManager::getPermission|
 |yii/rbac/BaseManager::getRoles|
 |yii/rbac/BaseManager::setDefaultRoles|
 |yii/rbac/BaseManager::getDefaultRoles|
 |yii/rbac/BaseManager::getDefaultRoleInstances|
 |yii/rbac/BaseManager::getPermissions|
 |yii/rbac/BaseManager::executeRule|
 |yii/rbac/BaseManager::hasNoAssignments|


*yii/rbac/PhpManager::init*				public
>
 init()
<
return (void)

 Initializes the application component.

 This method overrides parent implementation by loading the authorization data
 from PHP script.


*yii/rbac/PhpManager::getItem*				public
>
 getItem($name)
<
return (\yii\rbac\Item) The auth item corresponding to the specified name. Null is
returned if no such item.

 Returns the named auth item.







    [$name] (string) The auth item name.


*yii/rbac/PhpManager::getItems*				public
>
 getItems($type)
<
return (\yii\rbac\Item[]) The auth items of the specified type.

 Returns the items of the specified type.







    [$type] (int) The auth item type (either 'Item::TYPE_ROLE' or
    'Item::TYPE_PERMISSION'


*yii/rbac/PhpManager::addItem*				protected
>
 addItem($item)
<
return (bool) Whether the auth item is successfully added to the system

 Adds an auth item to the RBAC system.







    [$item] (\yii\rbac\Item) The item to add


*yii/rbac/PhpManager::addRule*				protected
>
 addRule($rule)
<
return (bool) Whether the rule is successfully added to the system

 Adds a rule to the RBAC system.







    [$rule] (\yii\rbac\Rule) The rule to add


*yii/rbac/PhpManager::removeItem*				public
>
 removeItem($item)
<
return (bool) Whether the role or permission is successfully removed

 Removes an auth item from the RBAC system.







    [$item] (\yii\rbac\Item) The item to remove


*yii/rbac/PhpManager::removeRule*				protected
>
 removeRule($rule)
<
return (bool) Whether the rule is successfully removed

 Removes a rule from the RBAC system.







    [$rule] (\yii\rbac\Rule) The rule to remove


*yii/rbac/PhpManager::updateItem*				protected
>
 updateItem($name, $item)
<
return (bool) Whether the auth item is successfully updated

 Updates an auth item in the RBAC system.







    [$name] (string) The name of the item being updated
    [$item] (\yii\rbac\Item) The updated item


*yii/rbac/PhpManager::updateRule*				public
>
 updateRule($name, $rule)
<
return (bool) Whether the rule is successfully updated

 Updates a rule to the RBAC system.







    [$name] (string) The name of the rule being updated
    [$rule] (\yii\rbac\Rule) The updated rule


*yii/rbac/PhpManager::getRolesByUser*			public
>
 getRolesByUser($userId)
<
return (void)

 {@inheritdoc} The roles returned by this method include the roles assigned
 via '$defaultRoles'.

    [$userId] () 


*yii/rbac/PhpManager::getChildRoles*			public
>
 getChildRoles($roleName)
<
return (\yii\rbac\Role[]) Child roles. The array is indexed by the role names. First
element is an instance of the parent Role itself.

 Returns child roles of the role specified. Depth isn't limited.







    [$roleName] (string) Name of the role to file child roles for


*yii/rbac/PhpManager::getPermissionsByRole*		public
>
 getPermissionsByRole($roleName)
<
return (\yii\rbac\Permission[]) All permissions that the role represents. The array
is indexed by the permission names.

 Returns all permissions that the specified role represents.







    [$roleName] (string) The role name


*yii/rbac/PhpManager::getPermissionsByUser*		public
>
 getPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All permissions that the user has. The array is
indexed by the permission names.

 Returns all permissions that the user has.







    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getRule*				public
>
 getRule($name)
<
return (null|\yii\rbac\Rule) The rule object, or null if the specified name does not
correspond to a rule.

 Returns the rule of the specified name.







    [$name] (string) The rule name


*yii/rbac/PhpManager::getRules*				public
>
 getRules()
<
return (\yii\rbac\Rule[]) The rules indexed by the rule names

 Returns all rules available in the system.








*yii/rbac/PhpManager::canAddChild*			public
>
 canAddChild($parent, $child)
<
return (bool) Possibility of adding

 Checks the possibility of adding a child to parent.







    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy


*yii/rbac/PhpManager::addChild*				public
>
 addChild($parent, $child)
<
return (bool) Whether the child successfully added

 Adds an item as a child of another item.







    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/PhpManager::removeChild*			public
>
 removeChild($parent, $child)
<
return (bool) Whether the removal is successful

 Removes a child from its parent.



 Note, the child item is not deleted. Only the parent-child relationship is
 removed.



    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/PhpManager::removeChildren*			public
>
 removeChildren($parent)
<
return (bool) Whether the removal is successful

 Removed all children form their parent.



 Note, the children items are not deleted. Only the parent-child relationships
 are removed.



    [$parent] (\yii\rbac\Item) 


*yii/rbac/PhpManager::hasChild*				public
>
 hasChild($parent, $child)
<
return (bool) Whether '$child' is already a child of '$parent'

 Returns a value indicating whether the child already exists for the parent.







    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/PhpManager::getChildren*			public
>
 getChildren($name)
<
return (\yii\rbac\Item[]) The child permissions and/or roles

 Returns the child permissions and/or roles.







    [$name] (string) The parent name


*yii/rbac/PhpManager::assign*				public
>
 assign($role, $userId)
<
return (\yii\rbac\Assignment) The role assignment information.

 Assigns a role to a user.







    [$role] (\yii\rbac\Role|\yii\rbac\Permission) 
    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::revoke*				public
>
 revoke($role, $userId)
<
return (bool) Whether the revoking is successful

 Revokes a role from a user.







    [$role] (\yii\rbac\Role|\yii\rbac\Permission) 
    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::revokeAll*				public
>
 revokeAll($userId)
<
return (bool) Whether the revoking is successful

 Revokes all roles from a user.







    [$userId] (mixed) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getAssignment*			public
>
 getAssignment($roleName, $userId)
<
return (null|\yii\rbac\Assignment) The assignment information. Null is returned if
the role is not assigned to the user.

 Returns the assignment information regarding a role and a user.







    [$roleName] (string) The role name
    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getAssignments*			public
>
 getAssignments($userId)
<
return (\yii\rbac\Assignment[]) The assignments indexed by role names. An empty array
will be returned if there is no role assigned to the user.

 Returns all role assignment information for the specified user.







    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getUserIdsByRole*			public
>
 getUserIdsByRole($roleName)
<
return (array) Array of user ID strings

 Returns all user IDs assigned to the role specified.







    [$roleName] (string) 


*yii/rbac/PhpManager::removeAll*				public
>
 removeAll()
<
return (void)

 Removes all authorization data, including roles, permissions, rules, and
 assignments.








*yii/rbac/PhpManager::removeAllPermissions*		public
>
 removeAllPermissions()
<
return (void)

 Removes all permissions.



 All parent child relations will be adjusted accordingly.




*yii/rbac/PhpManager::removeAllRoles*			public
>
 removeAllRoles()
<
return (void)

 Removes all roles.



 All parent child relations will be adjusted accordingly.




*yii/rbac/PhpManager::removeAllRules*			public
>
 removeAllRules()
<
return (void)

 Removes all rules.



 All roles and permissions which have rules will be adjusted accordingly.




*yii/rbac/PhpManager::removeAllAssignments*		public
>
 removeAllAssignments()
<
return (void)

 Removes all role assignments.








*yii/rbac/PhpManager::checkAccess*			public
>
 checkAccess($userId, $permissionName, $params='[]')
<
return (void)

    [$userId] () 
    [$permissionName] () 
    [$params] () 


*yii/rbac/PhpManager::checkAccessRecursive*		protected
>
 checkAccessRecursive($user, $itemName, $params, $assignments)
<
return (bool) Whether the operations can be performed by the user.

 Performs access check for the specified user.

 This method is internally called by 'checkAccess()'.

    [$user] (string|int) The user ID. This should can be either an integer or
    a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/rbac/PhpManager::detectLoop*				protected
>
 detectLoop($parent, $child)
<
return (bool) Whether a loop exists

 Checks whether there is a loop in the authorization item hierarchy.

    [$parent] (\yii\rbac\Item) Parent item
    [$child] (\yii\rbac\Item) The child item that is to be added to the
    hierarchy


*yii/rbac/PhpManager::getChildrenRecursive*		protected
>
 getChildrenRecursive($name, $result)
<
return (void)

 Recursively finds all children and grand children of the specified item.

    [$name] (string) The name of the item whose children are to be looked for.
    [$result] (array) The children and grand children (in array keys)


*yii/rbac/PhpManager::getDirectPermissionsByUser*		protected
>
 getDirectPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All direct permissions that the user has. The array
is indexed by the permission names.

 Returns all permissions that are directly assigned to user.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getInheritedPermissionsByUser*	protected
>
 getInheritedPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All inherited permissions that the user has. The
array is indexed by the permission names.

 Returns all permissions that the user inherits from the roles assigned to
 him.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::removeAllItems*			protected
>
 removeAllItems($type)
<
return (void)

 Removes all auth items of the specified type.

    [$type] (int) The auth item type (either Item::TYPE_PERMISSION or
    Item::TYPE_ROLE)


*yii/rbac/PhpManager::load*				protected
>
 load()
<
return (void)

 Loads authorization data from persistent storage.


*yii/rbac/PhpManager::save*				protected
>
 save()
<
return (void)

 Saves authorization data into persistent storage.


*yii/rbac/PhpManager::loadFromFile*			protected
>
 loadFromFile($file)
<
return (array) The authorization data

 Loads the authorization data from a PHP script file.

    [$file] (string) The file path.


*yii/rbac/PhpManager::saveToFile*				protected
>
 saveToFile($data, $file)
<
return (void)

 Saves the authorization data to a PHP script file.

    [$data] (array) The authorization data
    [$file] (string) The file path.


*yii/rbac/PhpManager::invalidateScriptCache*		protected
>
 invalidateScriptCache($file)
<
return (void)

 Invalidates precompiled script cache (such as OPCache or APC) for the given
 file.

    [$file] (string) The file path.


*yii/rbac/PhpManager::saveItems*				protected
>
 saveItems()
<
return (void)

 Saves items data into persistent storage.


*yii/rbac/PhpManager::saveAssignments*			protected
>
 saveAssignments()
<
return (void)

 Saves assignments data into persistent storage.


*yii/rbac/PhpManager::saveRules*				protected
>
 saveRules()
<
return (void)

 Saves rules data into persistent storage.



 vim:tw=78:ts=8:ft=help:norl:
