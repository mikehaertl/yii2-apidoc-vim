
*yii/rbac/PhpManager*   >> |yii/rbac/Manager|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 The authorization data will be saved to and loaded from a file specified by
 'authFile', which defaults to 'protected/data/rbac.php'.

 PhpManager is mainly suitable for authorization data that is not too big (for
 example, the authorization data for a personal blog system). Use 'DbManager'
 for more complex authorization data.


PROPERTY DETAILS
------------------------------------------------------------------------------

$showErrors				*yii/rbac/PhpManager::$showErrors*
 See |yii/rbac/Manager::$showErrors|

$defaultRoles				*yii/rbac/PhpManager::$defaultRoles*
 See |yii/rbac/Manager::$defaultRoles|

$authFile				*yii/rbac/PhpManager::$authFile*
 (string) The path of the PHP script that contains the authorization data.
 This can be either a file path or a path alias to the file. Make sure this
 file is writable by the Web server process if the authorization needs to be
 changed online.

$behaviors				*yii/rbac/PhpManager::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$roles					*yii/rbac/PhpManager::$roles*
 (\yii\rbac\Item[]) Roles (name => AuthItem)

$tasks					*yii/rbac/PhpManager::$tasks*
 (\yii\rbac\Item[]) Tasks (name => AuthItem)

$operations				*yii/rbac/PhpManager::$operations*
 (\yii\rbac\Item[]) Operations (name => AuthItem)

$items					*yii/rbac/PhpManager::$items*
 (\yii\rbac\Item[]) The authorization items of the specific type.



METHOD DETAILS
------------------------------------------------------------------------------

yii/rbac/PhpManager::className				       public
 See |yii/base/Object::className|


yii/rbac/PhpManager::__construct			       public
 See |yii/base/Object::__construct|


yii/rbac/PhpManager::init				       public
>
 init()
<
(void)

 This method overrides parent implementation by loading the authorization data
 from PHP script.


yii/rbac/PhpManager::__get				       public
 See |yii/base/Component::__get|


yii/rbac/PhpManager::__set				       public
 See |yii/base/Component::__set|


yii/rbac/PhpManager::__isset				       public
 See |yii/base/Component::__isset|


yii/rbac/PhpManager::__unset				       public
 See |yii/base/Component::__unset|


yii/rbac/PhpManager::__call				       public
 See |yii/base/Component::__call|


yii/rbac/PhpManager::hasProperty			       public
 See |yii/base/Component::hasProperty|


yii/rbac/PhpManager::canGetProperty			       public
 See |yii/base/Component::canGetProperty|


yii/rbac/PhpManager::canSetProperty			       public
 See |yii/base/Component::canSetProperty|


yii/rbac/PhpManager::hasMethod				       public
 See |yii/base/Component::hasMethod|


yii/rbac/PhpManager::__clone				       public
 See |yii/base/Component::__clone|


yii/rbac/PhpManager::behaviors				       public
 See |yii/base/Component::behaviors|


yii/rbac/PhpManager::hasEventHandlers			       public
 See |yii/base/Component::hasEventHandlers|


yii/rbac/PhpManager::on 				       public
 See |yii/base/Component::on|


yii/rbac/PhpManager::off				       public
 See |yii/base/Component::off|


yii/rbac/PhpManager::trigger				       public
 See |yii/base/Component::trigger|


yii/rbac/PhpManager::getBehavior			       public
 See |yii/base/Component::getBehavior|


yii/rbac/PhpManager::getBehaviors			       public
 See |yii/base/Component::getBehaviors|


yii/rbac/PhpManager::attachBehavior			       public
 See |yii/base/Component::attachBehavior|


yii/rbac/PhpManager::attachBehaviors			       public
 See |yii/base/Component::attachBehaviors|


yii/rbac/PhpManager::detachBehavior			       public
 See |yii/base/Component::detachBehavior|


yii/rbac/PhpManager::detachBehaviors			       public
 See |yii/base/Component::detachBehaviors|


yii/rbac/PhpManager::ensureBehaviors			       public
 See |yii/base/Component::ensureBehaviors|


yii/rbac/PhpManager::createRole 			       public
 See |yii/rbac/Manager::createRole|


yii/rbac/PhpManager::createTask 			       public
 See |yii/rbac/Manager::createTask|


yii/rbac/PhpManager::createOperation			       public
 See |yii/rbac/Manager::createOperation|


yii/rbac/PhpManager::getRoles				       public
 See |yii/rbac/Manager::getRoles|


yii/rbac/PhpManager::getTasks				       public
 See |yii/rbac/Manager::getTasks|


yii/rbac/PhpManager::getOperations			       public
 See |yii/rbac/Manager::getOperations|


yii/rbac/PhpManager::executeBizRule			       public
 See |yii/rbac/Manager::executeBizRule|


yii/rbac/PhpManager::checkItemChildType 		       protected
 See |yii/rbac/Manager::checkItemChildType|


yii/rbac/PhpManager::checkAccess			       public
>
 checkAccess($userId, $itemName, $params='[]')
<
(boolean) Whether the operations can be performed by the user.


    [$userId] (mixed) The user ID. This can be either an integer or a string
    representing
    [$itemName] (string) The name of the operation that need access check the
    unique identifier of a user. See '\yii\web\User::id'.
    [$params] (array) Name-value pairs that would be passed to biz rules
    associated with the tasks and roles assigned to the user. A param with
    name 'userId' is added to this array, which holds the value of '$userId'.


yii/rbac/PhpManager::createItem 			       public
>
 createItem($name, $type, $description='''', $bizRule='null', $data='null')
<
(\yii\rbac\Item) The authorization item

 An authorization item represents an action permission (e.g. creating a post).
 It has three types: operation, task and role. Authorization items form a
 hierarchy. Higher level items inheirt permissions representing by lower level
 items.
    [$name] (string) The item name. This must be a unique identifier.
    [$type] (integer) The item type (0: operation, 1: task, 2: role).
    [$description] (string) Description of the item
    [$bizRule] (string) Business rule associated with the item. This is a
    piece of PHP code that will be executed when 'checkAccess()' is called for
    the item.
    [$data] (mixed) Additional data associated with the item.


yii/rbac/PhpManager::removeItem 			       public
>
 removeItem($name)
<
(boolean) Whether the item exists in the storage and has been removed


    [$name] (string) The name of the item to be removed


yii/rbac/PhpManager::getItems				       public
>
 getItems($userId='null', $type=null)
<
(\yii\rbac\Item[]) The authorization items of the specific type.


    [$userId] (mixed) The user ID. Defaults to null, meaning returning all
    items even if they are not assigned to a user.
    [$type] (integer) The item type (0: operation, 1: task, 2: role). Defaults
    to null, meaning returning all items regardless of their type.


yii/rbac/PhpManager::getItem				       public
>
 getItem($name)
<
(\yii\rbac\Item) The authorization item. Null if the item cannot be found.


    [$name] (string) The name of the item


yii/rbac/PhpManager::saveItem				       public
>
 saveItem($item, $oldName='null')
<
(void)


    [$item] (\yii\rbac\Item) The item to be saved.
    [$oldName] (string) The old item name. If null, it means the item name is
    not changed.


yii/rbac/PhpManager::addItemChild			       public
>
 addItemChild($itemName, $childName)
<
(boolean) Whether the item is added successfully


    [$itemName] (string) The parent item name
    [$childName] (string) The child item name


yii/rbac/PhpManager::removeItemChild			       public
>
 removeItemChild($itemName, $childName)
<
(boolean) Whether the removal is successful

 Note, the child item is not deleted. Only the parent-child relationship is
 removed.
    [$itemName] (string) The parent item name
    [$childName] (string) The child item name


yii/rbac/PhpManager::hasItemChild			       public
>
 hasItemChild($itemName, $childName)
<
(boolean) Whether the child exists


    [$itemName] (string) The parent item name
    [$childName] (string) The child item name


yii/rbac/PhpManager::getItemChildren			       public
>
 getItemChildren($names)
<
(\yii\rbac\Item[]) All child items of the parent


    [$names] (string|array) The parent item name. This can be either a string
    or an array. The latter represents a list of item names.


yii/rbac/PhpManager::assign				       public
>
 assign($userId, $itemName, $bizRule='null', $data='null')
<
(\yii\rbac\Assignment) The authorization assignment information.


    [$userId] (mixed) The user ID (see '\yii\web\User::id')
    [$itemName] (string) The item name
    [$bizRule] (string) The business rule to be executed when 'checkAccess()'
    is called for this particular authorization item.
    [$data] (mixed) Additional data associated with this assignment


yii/rbac/PhpManager::revoke				       public
>
 revoke($userId, $itemName)
<
(boolean) Whether removal is successful


    [$userId] (mixed) The user ID (see '\yii\web\User::id')
    [$itemName] (string) The item name


yii/rbac/PhpManager::revokeAll				       public
>
 revokeAll($userId)
<
(boolean) Whether removal is successful


    [$userId] (mixed) The user ID (see '\yii\web\User::id')


yii/rbac/PhpManager::isAssigned 			       public
>
 isAssigned($userId, $itemName)
<
(boolean) Whether the item has been assigned to the user.


    [$userId] (mixed) The user ID (see '\yii\web\User::id')
    [$itemName] (string) The item name


yii/rbac/PhpManager::getAssignment			       public
>
 getAssignment($userId, $itemName)
<
(\yii\rbac\Assignment) The item assignment information. Null is returned if
the item is not assigned to the user.


    [$userId] (mixed) The user ID (see '\yii\web\User::id')
    [$itemName] (string) The item name


yii/rbac/PhpManager::getAssignments			       public
>
 getAssignments($userId)
<
(\yii\rbac\Assignment[]) The item assignment information for the user. An
empty array will be returned if there is no item assigned to the user.


    [$userId] (mixed) The user ID (see '\yii\web\User::id')


yii/rbac/PhpManager::saveAssignment			       public
>
 saveAssignment($assignment)
<
(void)


    [$assignment] (\yii\rbac\Assignment) The assignment that has been changed.


yii/rbac/PhpManager::clearAll				       public
>
 clearAll()
<
(void)




yii/rbac/PhpManager::clearAssignments			       public
>
 clearAssignments()
<
(void)




yii/rbac/PhpManager::save				       public
>
 save()
<
(void)

 If any change is made to the authorization data, please make sure you call
 this method to save the changed data into persistent storage.


yii/rbac/PhpManager::load				       public
>
 load()
<
(void)




yii/rbac/PhpManager::detectLoop 			       protected
>
 detectLoop($itemName, $childName)
<
(boolean) Whether a loop exists


    [$itemName] (string) Parent item name
    [$childName] (string) The name of the child item that is to be added to
    the hierarchy


yii/rbac/PhpManager::loadFromFile			       protected
>
 loadFromFile($file)
<
(array) The authorization data


    [$file] (string) The file path.


yii/rbac/PhpManager::saveToFile 			       protected
>
 saveToFile($data, $file)
<
(void)


    [$data] (array) The authorization data
    [$file] (string) The file path.



 vim:tw=78:ts=8:ft=help:norl:
