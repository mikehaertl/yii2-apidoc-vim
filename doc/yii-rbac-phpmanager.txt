
*yii/rbac/PhpManager*   >> |yii/rbac/BaseManager|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 The authorization data will be saved to and loaded from three files specified
 by 'itemFile', 'assignmentFile' and 'ruleFile'.

 PhpManager is mainly suitable for authorization data that is not too big (for
 example, the authorization data for a personal blog system). Use 'DbManager'
 for more complex authorization data.

 Note that PhpManager is not compatible with facebooks
 [HHVM](http://hhvm.com/) because it relies on writing php files and including
 them afterwards which is not supported by HHVM.


PROPERTY DETAILS
------------------------------------------------------------------------------

$defaultRoles				*yii/rbac/PhpManager::$defaultRoles*

 See |yii/rbac/BaseManager::$defaultRoles|

$itemFile				*yii/rbac/PhpManager::$itemFile*

 (string) The path of the PHP script that contains the authorization items.
 This can be either a file path or a path alias to the file. Make sure this
 file is writable by the Web server process if the authorization needs to be
 changed online.

$assignmentFile				*yii/rbac/PhpManager::$assignmentFile*

 (string) The path of the PHP script that contains the authorization
 assignments. This can be either a file path or a path alias to the file. Make
 sure this file is writable by the Web server process if the authorization
 needs to be changed online.

$ruleFile				*yii/rbac/PhpManager::$ruleFile*

 (string) The path of the PHP script that contains the authorization rules.
 This can be either a file path or a path alias to the file. Make sure this
 file is writable by the Web server process if the authorization needs to be
 changed online.

$items					*yii/rbac/PhpManager::$items*

 (\yii\rbac\Item[])

$children				*yii/rbac/PhpManager::$children*

 (array)

$assignments				*yii/rbac/PhpManager::$assignments*

 (array)

$rules					*yii/rbac/PhpManager::$rules*

 (\yii\rbac\Rule[])

$behaviors				*yii/rbac/PhpManager::$behaviors*

 See |yii/base/Component::$behaviors|

$roles					*yii/rbac/PhpManager::$roles*

 See |yii/rbac/BaseManager::$roles|

$permissions				*yii/rbac/PhpManager::$permissions*

 See |yii/rbac/BaseManager::$permissions|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/rbac/PhpManager::className*				public

 See |yii/base/Object::className|


*yii/rbac/PhpManager::__construct*			public

 See |yii/base/Object::__construct|


*yii/rbac/PhpManager::init*				public
>
 init()
<
return (void)

 This method overrides parent implementation by loading the authorization data
 from PHP script.


*yii/rbac/PhpManager::__get*				public

 See |yii/base/Component::__get|


*yii/rbac/PhpManager::__set*				public

 See |yii/base/Component::__set|


*yii/rbac/PhpManager::__isset*				public

 See |yii/base/Component::__isset|


*yii/rbac/PhpManager::__unset*				public

 See |yii/base/Component::__unset|


*yii/rbac/PhpManager::__call*				public

 See |yii/base/Component::__call|


*yii/rbac/PhpManager::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/rbac/PhpManager::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/rbac/PhpManager::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/rbac/PhpManager::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/rbac/PhpManager::__clone*				public

 See |yii/base/Component::__clone|


*yii/rbac/PhpManager::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/rbac/PhpManager::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/rbac/PhpManager::on*					public

 See |yii/base/Component::on|


*yii/rbac/PhpManager::off*				public

 See |yii/base/Component::off|


*yii/rbac/PhpManager::trigger*				public

 See |yii/base/Component::trigger|


*yii/rbac/PhpManager::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/rbac/PhpManager::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/rbac/PhpManager::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/rbac/PhpManager::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/rbac/PhpManager::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/rbac/PhpManager::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/rbac/PhpManager::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/rbac/PhpManager::getItem*				public
>
 getItem($name)
<
return (\yii\rbac\Item) The auth item corresponding to the specified name. Null is
returned if no such item.







    [$name] (string) The auth item name.


*yii/rbac/PhpManager::getItems*				public
>
 getItems($type)
<
return (\yii\rbac\Item[]) The auth items of the specified type.







    [$type] (integer) The auth item type (either 'Item::TYPE_ROLE' or
    'Item::TYPE_PERMISSION'


*yii/rbac/PhpManager::addItem*				protected
>
 addItem($item)
<
return (boolean) Whether the auth item is successfully added to the system







    [$item] (\yii\rbac\Item) The item to add


*yii/rbac/PhpManager::addRule*				protected
>
 addRule($rule)
<
return (boolean) Whether the rule is successfully added to the system







    [$rule] (\yii\rbac\Rule) The rule to add


*yii/rbac/PhpManager::removeItem*				public
>
 removeItem($item)
<
return (boolean) Whether the role or permission is successfully removed







    [$item] (\yii\rbac\Item) The item to remove


*yii/rbac/PhpManager::removeRule*				protected
>
 removeRule($rule)
<
return (boolean) Whether the rule is successfully removed







    [$rule] (\yii\rbac\Rule) The rule to remove


*yii/rbac/PhpManager::updateItem*				protected
>
 updateItem($name, $item)
<
return (boolean) Whether the auth item is successfully updated







    [$name] (string) The name of the item being updated
    [$item] (\yii\rbac\Item) The updated item


*yii/rbac/PhpManager::updateRule*				public
>
 updateRule($name, $rule)
<
return (boolean) Whether the rule is successfully updated







    [$name] (string) The name of the rule being updated
    [$rule] (\yii\rbac\Rule) The updated rule


*yii/rbac/PhpManager::createRole*				public

 See |yii/rbac/BaseManager::createRole|


*yii/rbac/PhpManager::createPermission*			public

 See |yii/rbac/BaseManager::createPermission|


*yii/rbac/PhpManager::add*				public

 See |yii/rbac/BaseManager::add|


*yii/rbac/PhpManager::remove*				public

 See |yii/rbac/BaseManager::remove|


*yii/rbac/PhpManager::update*				public

 See |yii/rbac/BaseManager::update|


*yii/rbac/PhpManager::getRole*				public

 See |yii/rbac/BaseManager::getRole|


*yii/rbac/PhpManager::getPermission*			public

 See |yii/rbac/BaseManager::getPermission|


*yii/rbac/PhpManager::getRoles*				public

 See |yii/rbac/BaseManager::getRoles|


*yii/rbac/PhpManager::getPermissions*			public

 See |yii/rbac/BaseManager::getPermissions|


*yii/rbac/PhpManager::executeRule*			protected

 See |yii/rbac/BaseManager::executeRule|


*yii/rbac/PhpManager::getRolesByUser*			public
>
 getRolesByUser($userId)
<
return (\yii\rbac\Role[]) All roles directly assigned to the user. The array is
indexed by the role names.



 Note that child roles that are not assigned directly to the user will not be
 returned.



    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getPermissionsByRole*		public
>
 getPermissionsByRole($roleName)
<
return (\yii\rbac\Permission[]) All permissions that the role represents. The array
is indexed by the permission names.







    [$roleName] (string) The role name


*yii/rbac/PhpManager::getPermissionsByUser*		public
>
 getPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All permissions that the user has. The array is
indexed by the permission names.







    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getRule*				public
>
 getRule($name)
<
return (null|\yii\rbac\Rule) The rule object, or null if the specified name does not
correspond to a rule.







    [$name] (string) The rule name


*yii/rbac/PhpManager::getRules*				public
>
 getRules()
<
return (\yii\rbac\Rule[]) The rules indexed by the rule names








*yii/rbac/PhpManager::canAddChild*			public
>
 canAddChild($parent, $child)
<
return (boolean) Possibility of adding







    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy


*yii/rbac/PhpManager::addChild*				public
>
 addChild($parent, $child)
<
return (boolean) Whether the child successfully added







    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/PhpManager::removeChild*			public
>
 removeChild($parent, $child)
<
return (boolean) Whether the removal is successful



 Note, the child item is not deleted. Only the parent-child relationship is
 removed.



    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/PhpManager::removeChildren*			public
>
 removeChildren($parent)
<
return (boolean) Whether the removal is successful



 Note, the children items are not deleted. Only the parent-child relationships
 are removed.



    [$parent] (\yii\rbac\Item) 


*yii/rbac/PhpManager::hasChild*				public
>
 hasChild($parent, $child)
<
return (boolean) Whether '$child' is already a child of '$parent'







    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/PhpManager::getChildren*			public
>
 getChildren($name)
<
return (\yii\rbac\Item[]) The child permissions and/or roles







    [$name] (string) The parent name


*yii/rbac/PhpManager::assign*				public
>
 assign($role, $userId)
<
return (\yii\rbac\Assignment) The role assignment information.







    [$role] (\yii\rbac\Role) 
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::revoke*				public
>
 revoke($role, $userId)
<
return (boolean) Whether the revoking is successful







    [$role] (\yii\rbac\Role) 
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::revokeAll*				public
>
 revokeAll($userId)
<
return (boolean) Whether the revoking is successful







    [$userId] (mixed) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getAssignment*			public
>
 getAssignment($roleName, $userId)
<
return (null|\yii\rbac\Assignment) The assignment information. Null is returned if
the role is not assigned to the user.







    [$roleName] (string) The role name
    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getAssignments*			public
>
 getAssignments($userId)
<
return (\yii\rbac\Assignment[]) The assignments indexed by role names. An empty array
will be returned if there is no role assigned to the user.







    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getUserIdsByRole*			public
>
 getUserIdsByRole($roleName)
<
return (array) Array of user ID strings







    [$roleName] (string) 


*yii/rbac/PhpManager::removeAll*				public
>
 removeAll()
<
return (void)








*yii/rbac/PhpManager::removeAllPermissions*		public
>
 removeAllPermissions()
<
return (void)



 All parent child relations will be adjusted accordingly.




*yii/rbac/PhpManager::removeAllRoles*			public
>
 removeAllRoles()
<
return (void)



 All parent child relations will be adjusted accordingly.




*yii/rbac/PhpManager::removeAllRules*			public
>
 removeAllRules()
<
return (void)



 All roles and permissions which have rules will be adjusted accordingly.




*yii/rbac/PhpManager::removeAllAssignments*		public
>
 removeAllAssignments()
<
return (void)








*yii/rbac/PhpManager::checkAccess*			public
>
 checkAccess($userId, $permissionName, $params='[]')
<
return (void)

    [$userId] () 
    [$permissionName] () 
    [$params] () 


*yii/rbac/PhpManager::checkAccessRecursive*		protected
>
 checkAccessRecursive($user, $itemName, $params, $assignments)
<
return (boolean) Whether the operations can be performed by the user.

 This method is internally called by 'checkAccess()'.

    [$user] (string|integer) The user ID. This should can be either an integer
    or a string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$itemName] (string) The name of the operation that need access check
    [$params] (array) Name-value pairs that would be passed to rules
    associated with the tasks and roles assigned to the user. A param with
    name 'user' is added to this array, which holds the value of '$userId'.
    [$assignments] (\yii\rbac\Assignment[]) The assignments to the specified
    user


*yii/rbac/PhpManager::detectLoop*				protected
>
 detectLoop($parent, $child)
<
return (boolean) Whether a loop exists

    [$parent] (\yii\rbac\Item) Parent item
    [$child] (\yii\rbac\Item) The child item that is to be added to the
    hierarchy


*yii/rbac/PhpManager::getChildrenRecursive*		protected
>
 getChildrenRecursive($name, $result)
<
return (void)

    [$name] (string) The name of the item whose children are to be looked for.
    [$result] (array) The children and grand children (in array keys)


*yii/rbac/PhpManager::getDirectPermissionsByUser*		protected
>
 getDirectPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All direct permissions that the user has. The array
is indexed by the permission names.

    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::getInheritedPermissionsByUser*	protected
>
 getInheritedPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All inherited permissions that the user has. The
array is indexed by the permission names.

    [$userId] (string|integer) The user ID (see '\yii\web\User::id')


*yii/rbac/PhpManager::removeAllItems*			protected
>
 removeAllItems($type)
<
return (void)

    [$type] (integer) The auth item type (either Item::TYPE_PERMISSION or
    Item::TYPE_ROLE)


*yii/rbac/PhpManager::load*				protected
>
 load()
<
return (void)



*yii/rbac/PhpManager::save*				protected
>
 save()
<
return (void)



*yii/rbac/PhpManager::loadFromFile*			protected
>
 loadFromFile($file)
<
return (array) The authorization data

    [$file] (string) The file path.


*yii/rbac/PhpManager::saveToFile*				protected
>
 saveToFile($data, $file)
<
return (void)

    [$data] (array) The authorization data
    [$file] (string) The file path.


*yii/rbac/PhpManager::invalidateScriptCache*		protected
>
 invalidateScriptCache($file)
<
return (void)

    [$file] (string) The file path.


*yii/rbac/PhpManager::saveItems*				protected
>
 saveItems()
<
return (void)



*yii/rbac/PhpManager::saveAssignments*			protected
>
 saveAssignments()
<
return (void)



*yii/rbac/PhpManager::saveRules*				protected
>
 saveRules()
<
return (void)




 vim:tw=78:ts=8:ft=help:norl:
