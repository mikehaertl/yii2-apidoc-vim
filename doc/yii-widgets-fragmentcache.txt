
*yii/widgets/FragmentCache*   >> |yii/base/Widget|
===========================


PROPERTY DETAILS
------------------------------------------------------------------------------

$counter				*yii/widgets/FragmentCache::$counter*

 See |yii/base/Widget::$counter|

$autoIdPrefix				*yii/widgets/FragmentCache::$autoIdPrefix*

 See |yii/base/Widget::$autoIdPrefix|

$stack					*yii/widgets/FragmentCache::$stack*

 See |yii/base/Widget::$stack|

$cache					*yii/widgets/FragmentCache::$cache*

 (\yii\caching\Cache|array|string) The cache object or the application
 component ID of the cache object. After the FragmentCache object is created,
 if you want to change this property, you should only assign it with a cache
 object. Starting from version 2.0.2, this can also be a configuration array
 for creating the object.

$duration				*yii/widgets/FragmentCache::$duration*

 (integer) Number of seconds that the data can remain valid in cache. Use 0 to
 indicate that the cached data will never expire.

$dependency				*yii/widgets/FragmentCache::$dependency*

 (array|\yii\caching\Dependency) The dependency that the cached content
 depends on. This can be either a 'Dependency' object or a configuration array
 for creating the dependency object. For example,

   [
       'class' => 'yii\caching\DbDependency',
       'sql' => 'SELECT MAX(updated_at) FROM post',
   ]

 would make the output cache depends on the last modified time of all posts.
 If any post has its modification time changed, the cached content would be
 invalidated.

$variations				*yii/widgets/FragmentCache::$variations*

 (array) List of factors that would cause the variation of the content being
 cached. Each factor is a string representing a variation (e.g. the language,
 a GET parameter). The following variation setting will cause the content to
 be cached in different versions according to the current application
 language:

   [
       Yii::$app->language,
   ]



$enabled				*yii/widgets/FragmentCache::$enabled*

 (boolean) Whether to enable the fragment cache. You may use this property to
 turn on and off the fragment cache according to specific setting (e.g. enable
 fragment cache only for GET requests).

$dynamicPlaceholders			*yii/widgets/FragmentCache::$dynamicPlaceholders*

 (array) A list of placeholders for embedding dynamic contents. This property
 is used internally to implement the content caching feature. Do not modify
 it.

$behaviors				*yii/widgets/FragmentCache::$behaviors*

 See |yii/base/Component::$behaviors|

$id					*yii/widgets/FragmentCache::$id*

 See |yii/base/Widget::$id|

$view					*yii/widgets/FragmentCache::$view*

 See |yii/base/Widget::$view|

$viewPath				*yii/widgets/FragmentCache::$viewPath*

 See |yii/base/Widget::$viewPath|

$cachedContent				*yii/widgets/FragmentCache::$cachedContent*

 (string|boolean) The cached content. False is returned if valid content is
 not found in the cache.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/widgets/FragmentCache::className*			public

 See |yii/base/Object::className|


*yii/widgets/FragmentCache::__construct*			public

 See |yii/base/Object::__construct|


*yii/widgets/FragmentCache::init*				public
>
 init()
<
return (void)



*yii/widgets/FragmentCache::__get*			public

 See |yii/base/Component::__get|


*yii/widgets/FragmentCache::__set*			public

 See |yii/base/Component::__set|


*yii/widgets/FragmentCache::__isset*			public

 See |yii/base/Component::__isset|


*yii/widgets/FragmentCache::__unset*			public

 See |yii/base/Component::__unset|


*yii/widgets/FragmentCache::__call*			public

 See |yii/base/Component::__call|


*yii/widgets/FragmentCache::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/widgets/FragmentCache::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/widgets/FragmentCache::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/widgets/FragmentCache::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/widgets/FragmentCache::__clone*			public

 See |yii/base/Component::__clone|


*yii/widgets/FragmentCache::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/widgets/FragmentCache::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/widgets/FragmentCache::on*				public

 See |yii/base/Component::on|


*yii/widgets/FragmentCache::off*				public

 See |yii/base/Component::off|


*yii/widgets/FragmentCache::trigger*			public

 See |yii/base/Component::trigger|


*yii/widgets/FragmentCache::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/widgets/FragmentCache::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/widgets/FragmentCache::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/widgets/FragmentCache::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/widgets/FragmentCache::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/widgets/FragmentCache::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/widgets/FragmentCache::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/widgets/FragmentCache::begin*			public

 See |yii/base/Widget::begin|


*yii/widgets/FragmentCache::end*				public

 See |yii/base/Widget::end|


*yii/widgets/FragmentCache::widget*			public

 See |yii/base/Widget::widget|


*yii/widgets/FragmentCache::getId*			public

 See |yii/base/Widget::getId|


*yii/widgets/FragmentCache::setId*			public

 See |yii/base/Widget::setId|


*yii/widgets/FragmentCache::getView*			public

 See |yii/base/Widget::getView|


*yii/widgets/FragmentCache::setView*			public

 See |yii/base/Widget::setView|


*yii/widgets/FragmentCache::run*				public
>
 run()
<
return (void)

 Content displayed before this method call and after 'init()' will be captured
 and saved in cache. This method does nothing if valid content is already
 found in cache.


*yii/widgets/FragmentCache::render*			public

 See |yii/base/Widget::render|


*yii/widgets/FragmentCache::renderFile*			public

 See |yii/base/Widget::renderFile|


*yii/widgets/FragmentCache::getViewPath*			public

 See |yii/base/Widget::getViewPath|


*yii/widgets/FragmentCache::getCachedContent*		public
>
 getCachedContent()
<
return (string|boolean) The cached content. False is returned if valid content is not
found in the cache.



*yii/widgets/FragmentCache::updateDynamicContent*		protected
>
 updateDynamicContent($content, $placeholders)
<
return (string) Final content

    [$content] (string) 
    [$placeholders] (array) 


*yii/widgets/FragmentCache::calculateKey*			protected
>
 calculateKey()
<
return (mixed) A valid cache key

 The key generated depends on both 'id' and 'variations'.



 vim:tw=78:ts=8:ft=help:norl:
