
*yii/web/AssetBundle*   >> |yii/base/BaseObject|
=====================

SUBCLASSES
------------------------------------------------------------------------------

|yii/apidoc/templates/bootstrap/assets/HighlightBundle|
|yii/apidoc/templates/bootstrap/assets/AssetBundle|
|yii/apidoc/templates/bootstrap/assets/JsSearchAsset|
|yii/authclient/widgets/AuthChoiceAsset|
|yii/authclient/widgets/AuthChoiceStyleAsset|
|yii/bootstrap/BootstrapAsset|
|yii/bootstrap/BootstrapThemeAsset|
|yii/bootstrap/BootstrapPluginAsset|
|yii/debug/DebugAsset|
|yii/debug/TimelineAsset|
|yii/debug/DbAsset|
|yii/debug/UserswitchAsset|
|yii/gii/GiiAsset|
|yii/jui/DatePickerLanguageAsset|
|yii/jui/JuiAsset|
|yii/web/YiiAsset|
|yii/web/JqueryAsset|
|yii/grid/GridViewAsset|
|yii/validators/PunycodeAsset|
|yii/validators/ValidationAsset|
|yii/widgets/MaskedInputAsset|
|yii/widgets/ActiveFormAsset|
|yii/widgets/PjaxAsset|
|yii/captcha/CaptchaAsset|

DESCRIPTION
------------------------------------------------------------------------------

 Each asset bundle has a unique name that globally identifies it among all
 asset bundles used in an application. The name is the [fully qualified class
 name](https://secure.php.net/manual/en/language.namespaces.rules.php) of the
 class representing it.

 An asset bundle can depend on other asset bundles. When registering an asset
 bundle with a view, all its dependent asset bundles will be automatically
 registered.

 For more details and usage information on AssetBundle, see the [guide article
 on assets](guide:structure-assets).


PROPERTY DETAILS
------------------------------------------------------------------------------


$sourcePath				*yii/web/AssetBundle::$sourcePath*

 (string) The directory that contains the source asset files for this asset
 bundle. A source asset file is a file that is part of your source code
 repository of your Web application.

 You must set this property if the directory containing the source asset files
 is not Web accessible. By setting this property, 'AssetManager' will publish
 the source asset files to a Web-accessible directory automatically when the
 asset bundle is registered on a page.

 If you do not set this property, it means the source asset files are located
 under 'basePath'.

 You can use either a directory or an alias of the directory.

$basePath				*yii/web/AssetBundle::$basePath*

 (string) The Web-accessible directory that contains the asset files in this
 bundle.

 If 'sourcePath' is set, this property will be *overwritten* by 'AssetManager'
 when it publishes the asset files from 'sourcePath'.

 You can use either a directory or an alias of the directory.

$baseUrl				*yii/web/AssetBundle::$baseUrl*

 (string) The base URL for the relative asset files listed in 'js' and 'css'.

 If 'sourcePath' is set, this property will be *overwritten* by 'AssetManager'
 when it publishes the asset files from 'sourcePath'.

 You can use either a URL or an alias of the URL.

$depends				*yii/web/AssetBundle::$depends*

 (array) List of bundle class names that this bundle depends on.

 For example:

   public $depends = [
      'yii\web\YiiAsset',
      'yii\bootstrap\BootstrapAsset',
   ];



$js					*yii/web/AssetBundle::$js*

 (array) List of JavaScript files that this bundle contains. Each JavaScript
 file can be specified in one of the following formats:


   - an absolute URL representing an external asset. For example,  
 'http://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js' or  
 '//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js'. 
   - a relative path representing a local asset (e.g. 'js/main.js').
   The actual file path of a local   asset can be determined by prefixing
 'basePath' to the relative path, and the actual URL   of the asset can be
 determined by prefixing 'baseUrl' to the relative path. 
   - an array, with the first entry being the URL or relative path as
   described before, and a list of key => value pairs   that will be used to
 overwrite 'jsOptions' settings for this entry.   This functionality is
 available since version 2.0.7.

 Note that only a forward slash "/" should be used as directory separator.

$css					*yii/web/AssetBundle::$css*

 (array) List of CSS files that this bundle contains. Each CSS file can be
 specified in one of the three formats as explained in 'js'.

 Note that only a forward slash "/" should be used as directory separator.

$jsOptions				*yii/web/AssetBundle::$jsOptions*

 (array) The options that will be passed to 'View::registerJsFile()' when
 registering the JS files in this bundle.

$cssOptions				*yii/web/AssetBundle::$cssOptions*

 (array) The options that will be passed to 'View::registerCssFile()' when
 registering the CSS files in this bundle.

$publishOptions				*yii/web/AssetBundle::$publishOptions*

 (array) The options to be passed to 'AssetManager::publish()' when the asset
 bundle is being published. This property is used only when 'sourcePath' is
 set.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|


*yii/web/AssetBundle::init*				public
>
 init()
<
return (void)

 Initializes the bundle.

 If you override this method, make sure you call the parent implementation in
 the last.


*yii/web/AssetBundle::register*				public
>
 register($view)
<
return (static) The registered asset bundle instance

 Registers this asset bundle with a view.

    [$view] (\yii\web\View) The view to be registered with


*yii/web/AssetBundle::registerAssetFiles*			public
>
 registerAssetFiles($view)
<
return (void)

 Registers the CSS and JS files with the given view.

    [$view] (\yii\web\View) The view that the asset files are to be registered
    with.


*yii/web/AssetBundle::publish*				public
>
 publish($am)
<
return (void)

 Publishes the asset bundle if its source code is not under Web-accessible
 directory.

 It will also try to convert non-CSS or JS files (e.g. LESS, Sass) into the
 corresponding CSS or JS files using 'AssetManager::converter|asset
 converter'.

    [$am] (\yii\web\AssetManager) The asset manager to perform the asset
    publishing



 vim:tw=78:ts=8:ft=help:norl:
