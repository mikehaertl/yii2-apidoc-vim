
*yii/caching/TagDependency*   >> |yii/caching/Dependency|
===========================

DESCRIPTION
------------------------------------------------------------------------------

 By calling 'invalidate()', you can invalidate all cached data items that are
 associated with the specified tag name(s).

   // setting multiple cache keys to store data forever and tagging them with
 "user-123"
   Yii::$app->cache->set('user_42_profile', '', 0, new TagDependency(['tags'
 => 'user-123']));
   Yii::$app->cache->set('user_42_stats', '', 0, new TagDependency(['tags' =>
 'user-123']));

   // invalidating all keys tagged with "user-123"
   TagDependency::invalidate(Yii::$app->cache, 'user-123');

 For more details and usage information on Cache, see the [guide article on
 caching](guide:caching-overview).


PROPERTY DETAILS
------------------------------------------------------------------------------

$data					*yii/caching/TagDependency::$data*

 See |yii/caching/Dependency::$data|

$reusable				*yii/caching/TagDependency::$reusable*

 See |yii/caching/Dependency::$reusable|

$tags					*yii/caching/TagDependency::$tags*

 (string|array) A list of tag names for this dependency. For a single tag, you
 may specify it as a string.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/caching/TagDependency::className*			public

 See |yii/base/Object::className|


*yii/caching/TagDependency::__construct*			public

 See |yii/base/Object::__construct|


*yii/caching/TagDependency::init*				public

 See |yii/base/Object::init|


*yii/caching/TagDependency::__get*			public

 See |yii/base/Object::__get|


*yii/caching/TagDependency::__set*			public

 See |yii/base/Object::__set|


*yii/caching/TagDependency::__isset*			public

 See |yii/base/Object::__isset|


*yii/caching/TagDependency::__unset*			public

 See |yii/base/Object::__unset|


*yii/caching/TagDependency::__call*			public

 See |yii/base/Object::__call|


*yii/caching/TagDependency::hasProperty*			public

 See |yii/base/Object::hasProperty|


*yii/caching/TagDependency::canGetProperty*		public

 See |yii/base/Object::canGetProperty|


*yii/caching/TagDependency::canSetProperty*		public

 See |yii/base/Object::canSetProperty|


*yii/caching/TagDependency::hasMethod*			public

 See |yii/base/Object::hasMethod|


*yii/caching/TagDependency::evaluateDependency*		public

 See |yii/caching/Dependency::evaluateDependency|


*yii/caching/TagDependency::getHasChanged*		public

 See |yii/caching/Dependency::getHasChanged|


*yii/caching/TagDependency::isChanged*			public
>
 isChanged($cache)
<
return (bool) Whether the dependency has changed.







    [$cache] (\yii\caching\Cache) The cache component that is currently
    evaluating this dependency


*yii/caching/TagDependency::resetReusableData*		public

 See |yii/caching/Dependency::resetReusableData|


*yii/caching/TagDependency::generateReusableHash*		protected

 See |yii/caching/Dependency::generateReusableHash|


*yii/caching/TagDependency::generateDependencyData*	protected
>
 generateDependencyData($cache)
<
return (mixed) The data needed to determine if dependency has been changed.

 This method does nothing in this class.

    [$cache] (\yii\caching\Cache) The cache component that is currently
    evaluating this dependency


*yii/caching/TagDependency::invalidate*			public
>
 invalidate($cache, $tags)
<
return (void)

    [$cache] (\yii\caching\Cache) The cache component that caches the data
    items
    [$tags] (string|array) 


*yii/caching/TagDependency::touchKeys*			protected
>
 touchKeys($cache, $keys)
<
return (array) The timestamp indexed by cache keys

    [$cache] (\yii\caching\Cache) 
    [$keys] (string[]) 


*yii/caching/TagDependency::getTimestamps*		protected
>
 getTimestamps($cache, $tags)
<
return (array) The timestamps indexed by the specified tags.

    [$cache] (\yii\caching\Cache) 
    [$tags] (string[]) 



 vim:tw=78:ts=8:ft=help:norl:
