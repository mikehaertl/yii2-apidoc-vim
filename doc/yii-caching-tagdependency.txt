
*yii/caching/TagDependency*   >> |yii/caching/Dependency|
===========================

DESCRIPTION
------------------------------------------------------------------------------

 By calling 'invalidate()', you can invalidate all cached data items that are
 associated with the specified tag name(s).

   // setting multiple cache keys to store data forever and tagging them with
 "user-123"
   Yii::$app->cache->set('user_42_profile', '', 0, new TagDependency(['tags'
 => 'user-123']));
   Yii::$app->cache->set('user_42_stats', '', 0, new TagDependency(['tags' =>
 'user-123']));

   // invalidating all keys tagged with "user-123"
   TagDependency::invalidate(Yii::$app->cache, 'user-123');

 For more details and usage information on Cache, see the [guide article on
 caching](guide:caching-overview).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/caching/Dependency::$data|
 |yii/caching/Dependency::$reusable|


$tags					*yii/caching/TagDependency::$tags*

 (string|array) A list of tag names for this dependency. For a single tag, you
 may specify it as a string.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/caching/Dependency::evaluateDependency|
 |yii/caching/Dependency::getHasChanged|
 |yii/caching/Dependency::resetReusableData|
 |yii/caching/Dependency::generateReusableHash|


*yii/caching/TagDependency::isChanged*			public
>
 isChanged($cache)
<
return (void)

 {@inheritdoc}

    [$cache] () 


*yii/caching/TagDependency::generateDependencyData*	protected
>
 generateDependencyData($cache)
<
return (mixed) The data needed to determine if dependency has been changed.

 Generates the data needed to determine if dependency has been changed.

 This method does nothing in this class.

    [$cache] (\yii\caching\CacheInterface) The cache component that is
    currently evaluating this dependency


*yii/caching/TagDependency::invalidate*			public
>
 invalidate($cache, $tags)
<
return (void)

 Invalidates all of the cached data items that are associated with any of the
 specified 'tags'.

    [$cache] (\yii\caching\CacheInterface) The cache component that caches the
    data items
    [$tags] (string|array) 


*yii/caching/TagDependency::touchKeys*			protected
>
 touchKeys($cache, $keys)
<
return (array) The timestamp indexed by cache keys

 Generates the timestamp for the specified cache keys.

    [$cache] (\yii\caching\CacheInterface) 
    [$keys] (string[]) 


*yii/caching/TagDependency::getTimestamps*		protected
>
 getTimestamps($cache, $tags)
<
return (array) The timestamps indexed by the specified tags.

 Returns the timestamps for the specified tags.

    [$cache] (\yii\caching\CacheInterface) 
    [$tags] (string[]) 



 vim:tw=78:ts=8:ft=help:norl:
