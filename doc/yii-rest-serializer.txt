
*yii/rest/Serializer*   >> |yii/base/Component|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 Serializer is mainly used by REST controllers to convert different objects
 into array representation so that they can be further turned into different
 formats, such as JSON, XML, by response formatters.

 The default implementation handles resources as 'Model' objects and
 collections as objects implementing 'DataProviderInterface'. You may override
 'serialize()' to handle more types.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|


$fieldsParam				*yii/rest/Serializer::$fieldsParam*

 (string) The name of the query parameter containing the information about
 which fields should be returned for a 'Model' object. If the parameter is not
 provided or empty, the default set of fields as defined by 'Model::fields()'
 will be returned.

$expandParam				*yii/rest/Serializer::$expandParam*

 (string) The name of the query parameter containing the information about
 which fields should be returned in addition to those listed in 'fieldsParam'
 for a resource object.

$totalCountHeader			*yii/rest/Serializer::$totalCountHeader*

 (string) The name of the HTTP header containing the information about total
 number of data items. This is used when serving a resource collection with
 pagination.

$pageCountHeader			*yii/rest/Serializer::$pageCountHeader*

 (string) The name of the HTTP header containing the information about total
 number of pages of data. This is used when serving a resource collection with
 pagination.

$currentPageHeader			*yii/rest/Serializer::$currentPageHeader*

 (string) The name of the HTTP header containing the information about the
 current page number (1-based). This is used when serving a resource
 collection with pagination.

$perPageHeader				*yii/rest/Serializer::$perPageHeader*

 (string) The name of the HTTP header containing the information about the
 number of data items in each page. This is used when serving a resource
 collection with pagination.

$collectionEnvelope			*yii/rest/Serializer::$collectionEnvelope*

 (string) The name of the envelope (e.g. 'items') for returning the resource
 objects in a collection. This is used when serving a resource collection.
 When this is set and pagination is enabled, the serializer will return a
 collection in the following format:

   [
       'items' => [...],  // assuming collectionEnvelope is "items"
       '_links' => {  // pagination links as returned by
 Pagination::getLinks()
           'self' => '...',
           'next' => '...',
           'last' => '...',
       },
       '_meta' => {  // meta information as returned by Pagination::toArray()
           'totalCount' => 100,
           'pageCount' => 5,
           'currentPage' => 1,
           'perPage' => 20,
       },
   ]

 If this property is not set, the resource arrays will be directly returned
 without using envelope. The pagination information as shown in '_links' and
 '_meta' can be accessed from the response HTTP headers.

$linksEnvelope				*yii/rest/Serializer::$linksEnvelope*

 (string) The name of the envelope (e.g. '_links') for returning the links
 objects. It takes effect only, if 'collectionEnvelope' is set.

$metaEnvelope				*yii/rest/Serializer::$metaEnvelope*

 (string) The name of the envelope (e.g. '_meta') for returning the pagination
 object. It takes effect only, if 'collectionEnvelope' is set.

$request				*yii/rest/Serializer::$request*

 (\yii\web\Request) The current request. If not set, the 'request' application
 component will be used.

$response				*yii/rest/Serializer::$response*

 (\yii\web\Response) The response to be sent. If not set, the 'response'
 application component will be used.

$preserveKeys				*yii/rest/Serializer::$preserveKeys*

 (bool) Whether to preserve array keys when serializing collection data. Set
 this to 'true' to allow serialization of a collection as a JSON object where
 array keys are used to index the model objects. The default is to serialize
 all collections as array, regardless of how the array is indexed.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/rest/Serializer::init*				public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/rest/Serializer::serialize*				public
>
 serialize($data)
<
return (mixed) The converted data.

 Serializes the given data into a format that can be easily turned into other
 formats.

 This method mainly converts the objects of recognized types into array
 representation. It will not do conversion for unknown object types or
 non-object data. The default implementation will handle 'Model' and
 'DataProviderInterface'. You may override this method to support more object
 types.

    [$data] (mixed) The data to be serialized.


*yii/rest/Serializer::getRequestedFields*			protected
>
 getRequestedFields()
<
return (array) The names of the requested fields. The first element is an array
representing the list of default fields requested, while the second element is
an array of the extra fields requested in addition to the default fields.



*yii/rest/Serializer::serializeDataProvider*		protected
>
 serializeDataProvider($dataProvider)
<
return (array) The array representation of the data provider.

 Serializes a data provider.

    [$dataProvider] (\yii\data\DataProviderInterface) 


*yii/rest/Serializer::serializePagination*		protected
>
 serializePagination($pagination)
<
return (array) The array representation of the pagination

 Serializes a pagination into an array.

    [$pagination] (\yii\data\Pagination) 


*yii/rest/Serializer::addPaginationHeaders*		protected
>
 addPaginationHeaders($pagination)
<
return (void)

 Adds HTTP headers about the pagination to the response.

    [$pagination] (\yii\data\Pagination) 


*yii/rest/Serializer::serializeModel*			protected
>
 serializeModel($model)
<
return (array) The array representation of the model

 Serializes a model object.

    [$model] (\yii\base\Arrayable) 


*yii/rest/Serializer::serializeModelErrors*		protected
>
 serializeModelErrors($model)
<
return (array) The array representation of the errors

 Serializes the validation errors in a model.

    [$model] (\yii\base\Model) 


*yii/rest/Serializer::serializeModels*			protected
>
 serializeModels($models)
<
return (array) The array representation of the models

 Serializes a set of models.

    [$models] (array) 



 vim:tw=78:ts=8:ft=help:norl:
