
*yii/db/BaseActiveRecord*   >> |yii/base/Model|
=========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/db/ActiveRecord|
|yii/elasticsearch/ActiveRecord|
|yii/mongodb/file/ActiveRecord|
|yii/mongodb/ActiveRecord|
|yii/redis/ActiveRecord|
|yii/sphinx/ActiveRecord|

DESCRIPTION
------------------------------------------------------------------------------

 See '\yii\db\ActiveRecord' for a concrete implementation.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/StaticInstanceTrait::instance|
 |yii/base/ArrayableTrait::toArray|
 |yii/base/ArrayableTrait::extractRootFields|
 |yii/base/ArrayableTrait::extractFieldsFor|
 |yii/base/ArrayableTrait::resolveFields|
 |yii/base/Model::rules|
 |yii/base/Model::scenarios|
 |yii/base/Model::formName|
 |yii/db/ActiveRecordInterface::attributes|
 |yii/base/Model::attributeLabels|
 |yii/base/Model::attributeHints|
 |yii/base/Model::validate|
 |yii/base/Model::beforeValidate|
 |yii/base/Model::afterValidate|
 |yii/base/Model::getValidators|
 |yii/base/Model::getActiveValidators|
 |yii/base/Model::createValidators|
 |yii/base/Model::isAttributeRequired|
 |yii/base/Model::isAttributeSafe|
 |yii/base/Model::isAttributeActive|
 |yii/base/Model::hasErrors|
 |yii/base/Model::getErrors|
 |yii/base/Model::getFirstErrors|
 |yii/base/Model::getFirstError|
 |yii/base/Model::getErrorSummary|
 |yii/base/Model::addError|
 |yii/base/Model::addErrors|
 |yii/base/Model::clearErrors|
 |yii/base/Model::generateAttributeLabel|
 |yii/base/Model::getAttributes|
 |yii/base/Model::setAttributes|
 |yii/base/Model::onUnsafeAttribute|
 |yii/base/Model::getScenario|
 |yii/base/Model::setScenario|
 |yii/base/Model::safeAttributes|
 |yii/base/Model::activeAttributes|
 |yii/base/Model::load|
 |yii/base/Model::loadMultiple|
 |yii/base/Model::validateMultiple|
 |yii/base/Model::getIterator|
 |yii/base/Model::offsetGet|
 |yii/base/Model::offsetSet|
 |yii/db/ActiveRecordInterface::primaryKey|
 |yii/db/ActiveRecordInterface::find|
 |yii/db/ActiveRecordInterface::insert|
 |yii/db/ActiveRecordInterface::getDb|


*yii/db/BaseActiveRecord::init*				public
>
 init()
<
return (void)

 Initializes the object.

 This method is called at the end of the constructor. The default
 implementation will trigger an 'EVENT_INIT' event.


*yii/db/BaseActiveRecord::__get*				public
>
 __get($name)
<
return (mixed) Property value

 PHP getter magic method.

 This method is overridden so that attributes and related objects can be
 accessed like properties.

    [$name] (string) Property name


*yii/db/BaseActiveRecord::__set*				public
>
 __set($name, $value)
<
return (void)

 PHP setter magic method.

 This method is overridden so that AR attributes can be accessed like
 properties.

    [$name] (string) Property name
    [$value] (mixed) Property value


*yii/db/BaseActiveRecord::__isset*			public
>
 __isset($name)
<
return (bool) Whether the property value is null

 Checks if a property value is null.

 This method overrides the parent implementation by checking if the named
 attribute is 'null' or not.

    [$name] (string) The property name or the event name


*yii/db/BaseActiveRecord::__unset*			public
>
 __unset($name)
<
return (void)

 Sets a component property to be null.

 This method overrides the parent implementation by clearing the specified
 attribute value.

    [$name] (string) The property name or the event name


*yii/db/BaseActiveRecord::canGetProperty*			public
>
 canGetProperty($name, $checkVars='true', $checkBehaviors='true')
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$checkVars] () 
    [$checkBehaviors] () 


*yii/db/BaseActiveRecord::canSetProperty*			public
>
 canSetProperty($name, $checkVars='true', $checkBehaviors='true')
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$checkVars] () 
    [$checkBehaviors] () 


*yii/db/BaseActiveRecord::fields*				public
>
 fields()
<
return (void)

 {@inheritdoc}

 The default implementation returns the names of the columns whose values have
 been populated into this record.


*yii/db/BaseActiveRecord::extraFields*			public
>
 extraFields()
<
return (void)

 {@inheritdoc}

 The default implementation returns the names of the relations that have been
 populated into this record.


*yii/db/BaseActiveRecord::getAttributeLabel*		public
>
 getAttributeLabel($attribute)
<
return (string) The attribute label

 Returns the text label for the specified attribute.

 If the attribute looks like 'relatedModel.attribute', then the attribute will
 be received from the related model.

    [$attribute] (string) The attribute name


*yii/db/BaseActiveRecord::getAttributeHint*		public
>
 getAttributeHint($attribute)
<
return (string) The attribute hint

 Returns the text hint for the specified attribute.

 If the attribute looks like 'relatedModel.attribute', then the attribute will
 be received from the related model.

    [$attribute] (string) The attribute name


*yii/db/BaseActiveRecord::offsetExists*			public
>
 offsetExists($offset)
<
return (bool) Whether there is an element at the specified offset.

 Returns whether there is an element at the specified offset.

 This method is required by the interface '\ArrayAccess'.

    [$offset] (mixed) The offset to check on


*yii/db/BaseActiveRecord::offsetUnset*			public
>
 offsetUnset($offset)
<
return (void)

 Sets the element value at the specified offset to null.

 This method is required by the SPL interface '\ArrayAccess'. It is implicitly
 called when you use something like 'unset($model[$offset])'.

    [$offset] (mixed) The offset to unset element


*yii/db/BaseActiveRecord::findOne*			public
>
 findOne($condition)
<
return (static|null) ActiveRecord instance matching the condition, or 'null' if
nothing matches.

 {@inheritdoc}

    [$condition] () 


*yii/db/BaseActiveRecord::findAll*			public
>
 findAll($condition)
<
return (static[]) An array of ActiveRecord instances, or an empty array if nothing
matches.

 {@inheritdoc}

    [$condition] () 


*yii/db/BaseActiveRecord::findByCondition*		protected
>
 findByCondition($condition)
<
return (\yii\db\ActiveQueryInterface) The newly created
'ActiveQueryInterface|ActiveQuery' instance.

 Finds ActiveRecord instance(s) by the given condition.

 This method is internally called by 'findOne()' and 'findAll()'.

    [$condition] (mixed) Please refer to 'findOne()' for the explanation of
    this parameter


*yii/db/BaseActiveRecord::updateAll*			public
>
 updateAll($attributes, $condition='\'\'')
<
return (int) The number of rows updated

 Updates the whole table using the provided attribute values and conditions.

 For example, to change the status to be 1 for all customers whose status is
 2:

   Customer::updateAll(['status' => 1], 'status = 2');



    [$attributes] (array) Attribute values (name-value pairs) to be saved into
    the table
    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the UPDATE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.


*yii/db/BaseActiveRecord::updateAllCounters*		public
>
 updateAllCounters($counters, $condition='\'\'')
<
return (int) The number of rows updated

 Updates the whole table using the provided counter changes and conditions.

 For example, to increment all customers' age by 1,

   Customer::updateAllCounters(['age' => 1]);



    [$counters] (array) The counters to be updated (attribute name =>
    increment value). Use negative values if you want to decrement the
    counters.
    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the UPDATE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.


*yii/db/BaseActiveRecord::deleteAll*			public
>
 deleteAll($condition='null')
<
return (int) The number of rows deleted

 Deletes rows in the table using the provided conditions.

 WARNING: If you do not specify any condition, this method will delete ALL
 rows in the table.

 For example, to delete all customers whose status is 3:

   Customer::deleteAll('status = 3');



    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the DELETE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.


*yii/db/BaseActiveRecord::optimisticLock*			public
>
 optimisticLock()
<
return (string) The column name that stores the lock version of a table row. If
'null' is returned (default implemented), optimistic locking will not be
supported.

 Returns the name of the column that stores the lock version for implementing
 optimistic locking.

 Optimistic locking allows multiple users to access the same record for edits
 and avoids potential conflicts. In case when a user attempts to save the
 record upon some staled data (because another user has modified the data), a
 'StaleObjectException' exception will be thrown, and the update or deletion
 is skipped.

 Optimistic locking is only supported by 'update()' and 'delete()'.

 To use Optimistic locking:

 1. Create a column to store the version number of each row. The column type
 should be 'BIGINT DEFAULT 0'.    Override this method to return the name of
 this column. 2. Add a 'required' validation rule for the version column to
 ensure the version value is submitted. 3. In the Web form that collects the
 user input, add a hidden field that stores    the lock version of the
 recording being updated. 4. In the controller action that does the data
 updating, try to catch the 'StaleObjectException'    and implement necessary
 business logic (e.g. merging the changes, prompting stated data)    to
 resolve the conflict.


*yii/db/BaseActiveRecord::hasOne*				public
>
 hasOne($class, $link)
<
return (\yii\db\ActiveQueryInterface) The relational query object.

 Declares a 'has-one' relation.

 The declaration is returned in terms of a relational 'ActiveQuery' instance
 through which the related record can be queried and retrieved back.

 A 'has-one' relation means that there is at most one related record matching
 the criteria set by this relation, e.g., a customer has one country.

 For example, to declare the 'country' relation for 'Customer' class, we can
 write the following code in the 'Customer' class:

   public function getCountry()
   {
       return $this->hasOne(Country::className(), ['id' => 'country_id']);
   }

 Note that in the above, the 'id' key in the '$link' parameter refers to an
 attribute name in the related class 'Country', while the 'country_id' value
 refers to an attribute name in the current AR class.

 Call methods declared in 'ActiveQuery' to further customize the relation.

    [$class] (string) The class name of the related record
    [$link] (array) The primary-foreign key constraint. The keys of the array
    refer to the attributes of the record associated with the '$class' model,
    while the values of the array refer to the corresponding attributes in
    **this** AR class.


*yii/db/BaseActiveRecord::hasMany*			public
>
 hasMany($class, $link)
<
return (\yii\db\ActiveQueryInterface) The relational query object.

 Declares a 'has-many' relation.

 The declaration is returned in terms of a relational 'ActiveQuery' instance
 through which the related record can be queried and retrieved back.

 A 'has-many' relation means that there are multiple related records matching
 the criteria set by this relation, e.g., a customer has many orders.

 For example, to declare the 'orders' relation for 'Customer' class, we can
 write the following code in the 'Customer' class:

   public function getOrders()
   {
       return $this->hasMany(Order::className(), ['customer_id' => 'id']);
   }

 Note that in the above, the 'customer_id' key in the '$link' parameter refers
 to an attribute name in the related class 'Order', while the 'id' value
 refers to an attribute name in the current AR class.

 Call methods declared in 'ActiveQuery' to further customize the relation.

    [$class] (string) The class name of the related record
    [$link] (array) The primary-foreign key constraint. The keys of the array
    refer to the attributes of the record associated with the '$class' model,
    while the values of the array refer to the corresponding attributes in
    **this** AR class.


*yii/db/BaseActiveRecord::createRelationQuery*		protected
>
 createRelationQuery($class, $link, $multiple)
<
return (\yii\db\ActiveQueryInterface) The relational query object.

 Creates a query instance for 'has-one' or 'has-many' relation.

    [$class] (string) The class name of the related record.
    [$link] (array) The primary-foreign key constraint.
    [$multiple] (bool) Whether this query represents a relation to more than
    one record.


*yii/db/BaseActiveRecord::populateRelation*		public
>
 populateRelation($name, $records)
<
return (void)

 Populates the named relation with the related records.

 Note that this method does not check if the relation exists or not.

    [$name] (string) The relation name, e.g. 'orders' for a relation defined
    via 'getOrders()' method (case-sensitive).
    [$records] (\yii\db\ActiveRecordInterface|array|null) The related records
    to be populated into the relation.


*yii/db/BaseActiveRecord::isRelationPopulated*		public
>
 isRelationPopulated($name)
<
return (bool) Whether relation has been populated with records.

 Check whether the named relation has been populated with records.

    [$name] (string) The relation name, e.g. 'orders' for a relation defined
    via 'getOrders()' method (case-sensitive).


*yii/db/BaseActiveRecord::getRelatedRecords*		public
>
 getRelatedRecords()
<
return (array) An array of related records indexed by relation names.

 Returns all populated related records.


*yii/db/BaseActiveRecord::hasAttribute*			public
>
 hasAttribute($name)
<
return (bool) Whether the model has an attribute with the specified name.

 Returns a value indicating whether the model has an attribute with the
 specified name.

    [$name] (string) The name of the attribute


*yii/db/BaseActiveRecord::getAttribute*			public
>
 getAttribute($name)
<
return (mixed) The attribute value. 'null' if the attribute is not set or does not
exist.

 Returns the named attribute value.

 If this record is the result of a query and the attribute is not loaded,
 'null' will be returned.

    [$name] (string) The attribute name


*yii/db/BaseActiveRecord::setAttribute*			public
>
 setAttribute($name, $value)
<
return (void)

 Sets the named attribute value.

    [$name] (string) The attribute name
    [$value] (mixed) The attribute value.


*yii/db/BaseActiveRecord::getOldAttributes*		public
>
 getOldAttributes()
<
return (array) The old attribute values (name-value pairs)

 Returns the old attribute values.


*yii/db/BaseActiveRecord::setOldAttributes*		public
>
 setOldAttributes($values)
<
return (void)

 Sets the old attribute values.

 All existing old attribute values will be discarded.

    [$values] (array|null) Old attribute values to be set. If set to 'null'
    this record is considered to be 'isNewRecord|new'.


*yii/db/BaseActiveRecord::getOldAttribute*		public
>
 getOldAttribute($name)
<
return (mixed) The old attribute value. 'null' if the attribute is not loaded before
or does not exist.

 Returns the old value of the named attribute.

 If this record is the result of a query and the attribute is not loaded,
 'null' will be returned.

    [$name] (string) The attribute name


*yii/db/BaseActiveRecord::setOldAttribute*		public
>
 setOldAttribute($name, $value)
<
return (void)

 Sets the old value of the named attribute.

    [$name] (string) The attribute name
    [$value] (mixed) The old attribute value.


*yii/db/BaseActiveRecord::markAttributeDirty*		public
>
 markAttributeDirty($name)
<
return (void)

 Marks an attribute dirty.

 This method may be called to force updating a record when calling 'update()',
 even if there is no change being made to the record.

    [$name] (string) The attribute name


*yii/db/BaseActiveRecord::isAttributeChanged*		public
>
 isAttributeChanged($name, $identical='true')
<
return (bool) Whether the attribute has been changed

 Returns a value indicating whether the named attribute has been changed.

    [$name] (string) The name of the attribute.
    [$identical] (bool) Whether the comparison of new and old value is made
    for identical values using '===', defaults to 'true'. Otherwise '==' is
    used for comparison. This parameter is available since version 2.0.4.


*yii/db/BaseActiveRecord::getDirtyAttributes*		public
>
 getDirtyAttributes($names='null')
<
return (array) The changed attribute values (name-value pairs)

 Returns the attribute values that have been modified since they are loaded or
 saved most recently.

 The comparison of new and old values is made for identical values using
 '==='.

    [$names] (string[]|null) The names of the attributes whose values may be
    returned if they are changed recently. If null, 'attributes()' will be
    used.


*yii/db/BaseActiveRecord::save*				public
>
 save($runValidation='true', $attributeNames='null')
<
return (bool) Whether the saving succeeded (i.e. no validation errors occurred).

 Saves the current record.

 This method will call 'insert()' when 'isNewRecord' is 'true', or 'update()'
 when 'isNewRecord' is 'false'.

 For example, to save a customer record:

   $customer = new Customer; // or $customer = Customer::findOne($id);
   $customer->name = $name;
   $customer->email = $email;
   $customer->save();



    [$runValidation] (bool) Whether to perform validation (calling
    'validate()') before saving the record. Defaults to 'true'. If the
    validation fails, the record will not be saved to the database and this
    method will return 'false'.
    [$attributeNames] (array) List of attribute names that need to be saved.
    Defaults to null, meaning all attributes that are loaded from DB will be
    saved.


*yii/db/BaseActiveRecord::update*				public
>
 update($runValidation='true', $attributeNames='null')
<
return (int|false) The number of rows affected, or 'false' if validation fails or
'beforeSave()' stops the updating process.

 Saves the changes to this active record into the associated database table.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is 'true'. If
 'beforeValidate()'    returns 'false', the rest of the steps will be skipped;
 2. call 'afterValidate()' when '$runValidation' is 'true'. If validation   
 failed, the rest of the steps will be skipped; 3. call 'beforeSave()'. If
 'beforeSave()' returns 'false',    the rest of the steps will be skipped; 4.
 save the record into database. If this fails, it will skip the rest of the
 steps; 5. call 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_AFTER_VALIDATE', 'EVENT_BEFORE_UPDATE', and 'EVENT_AFTER_UPDATE' will
 be raised by the corresponding methods.

 Only the 'dirtyAttributes|changed attribute values' will be saved into
 database.

 For example, to update a customer record:

   $customer = Customer::findOne($id);
   $customer->name = $name;
   $customer->email = $email;
   $customer->update();

 Note that it is possible the update does not affect any row in the table. In
 this case, this method will return 0. For this reason, you should use the
 following code to check if update() is successful or not:

   if ($customer->update() !== false) {
       // update successful
   } else {
       // update failed
   }



    [$runValidation] (bool) Whether to perform validation (calling
    'validate()') before saving the record. Defaults to 'true'. If the
    validation fails, the record will not be saved to the database and this
    method will return 'false'.
    [$attributeNames] (array) List of attribute names that need to be saved.
    Defaults to null, meaning all attributes that are loaded from DB will be
    saved.


*yii/db/BaseActiveRecord::updateAttributes*		public
>
 updateAttributes($attributes)
<
return (int) The number of rows affected.

 Updates the specified attributes.

 This method is a shortcut to 'update()' when data validation is not needed
 and only a small set attributes need to be updated.

 You may specify the attributes to be updated as name list or name-value
 pairs. If the latter, the corresponding attribute values will be modified
 accordingly. The method will then save the specified attributes into
 database.

 Note that this method will **not** perform data validation and will **not**
 trigger events.

    [$attributes] (array) The attributes (names or name-value pairs) to be
    updated


*yii/db/BaseActiveRecord::updateInternal*			protected
>
 updateInternal($attributes='null')
<
return (int|false) The number of rows affected, or false if 'beforeSave()' stops the
updating process.

    [$attributes] (array) Attributes to update


*yii/db/BaseActiveRecord::updateCounters*			public
>
 updateCounters($counters)
<
return (bool) Whether the saving is successful

 Updates one or several counter columns for the current AR object.

 Note that this method differs from 'updateAllCounters()' in that it only
 saves counters for the current AR object.

 An example usage is as follows:

   $post = Post::findOne($id);
   $post->updateCounters(['view_count' => 1]);



    [$counters] (array) The counters to be updated (attribute name =>
    increment value) Use negative values if you want to decrement the
    counters.


*yii/db/BaseActiveRecord::delete*				public
>
 delete()
<
return (int|false) The number of rows deleted, or 'false' if the deletion is
unsuccessful for some reason. Note that it is possible the number of rows
deleted is 0, even though the deletion execution is successful.

 Deletes the table row corresponding to this active record.

 This method performs the following steps in order:

 1. call 'beforeDelete()'. If the method returns 'false', it will skip the   
 rest of the steps; 2. delete the record from the database; 3. call
 'afterDelete()'.

 In the above step 1 and 3, events named 'EVENT_BEFORE_DELETE' and
 'EVENT_AFTER_DELETE' will be raised by the corresponding methods.


*yii/db/BaseActiveRecord::getIsNewRecord*			public
>
 getIsNewRecord()
<
return (bool) Whether the record is new and should be inserted when calling 'save()'.

 Returns a value indicating whether the current record is new.


*yii/db/BaseActiveRecord::setIsNewRecord*			public
>
 setIsNewRecord($value)
<
return (void)

 Sets the value indicating whether the record is new.

    [$value] (bool) Whether the record is new and should be inserted when
    calling 'save()'.


*yii/db/BaseActiveRecord::afterFind*			public
>
 afterFind()
<
return (void)

 This method is called when the AR object is created and populated with the
 query result.

 The default implementation will trigger an 'EVENT_AFTER_FIND' event. When
 overriding this method, make sure you call the parent implementation to
 ensure the event is triggered.


*yii/db/BaseActiveRecord::beforeSave*			public
>
 beforeSave($insert)
<
return (bool) Whether the insertion or updating should continue. If 'false', the
insertion or updating will be cancelled.

 This method is called at the beginning of inserting or updating a record.

 The default implementation will trigger an 'EVENT_BEFORE_INSERT' event when
 '$insert' is 'true', or an 'EVENT_BEFORE_UPDATE' event if '$insert' is
 'false'. When overriding this method, make sure you call the parent
 implementation like the following:

   public function beforeSave($insert)
   {
       if (!parent::beforeSave($insert)) {
           return false;
       }

       // ...custom code here...
       return true;
   }



    [$insert] (bool) Whether this method called while inserting a record. If
    'false', it means the method is called while updating a record.


*yii/db/BaseActiveRecord::afterSave*			public
>
 afterSave($insert, $changedAttributes)
<
return (void)

 This method is called at the end of inserting or updating a record.

 The default implementation will trigger an 'EVENT_AFTER_INSERT' event when
 '$insert' is 'true', or an 'EVENT_AFTER_UPDATE' event if '$insert' is
 'false'. The event class used is 'AfterSaveEvent'. When overriding this
 method, make sure you call the parent implementation so that the event is
 triggered.

    [$insert] (bool) Whether this method called while inserting a record. If
    'false', it means the method is called while updating a record.
    [$changedAttributes] (array) The old values of attributes that had changed
    and were saved. You can use this parameter to take action based on the
    changes made for example send an email when the password had changed or
    implement audit trail that tracks all the changes. '$changedAttributes'
    gives you the old attribute values while the active record ('$this') has
    already the new, updated values.

    Note that no automatic type conversion performed by default. You may use
    '\yii\behaviors\AttributeTypecastBehavior' to facilitate attribute
    typecasting. See
    http://www.yiiframework.com/doc-2.0/guide-db-active-record.html#attributes-typecasting.


*yii/db/BaseActiveRecord::beforeDelete*			public
>
 beforeDelete()
<
return (bool) Whether the record should be deleted. Defaults to 'true'.

 This method is invoked before deleting a record.

 The default implementation raises the 'EVENT_BEFORE_DELETE' event. When
 overriding this method, make sure you call the parent implementation like the
 following:

   public function beforeDelete()
   {
       if (!parent::beforeDelete()) {
           return false;
       }

       // ...custom code here...
       return true;
   }




*yii/db/BaseActiveRecord::afterDelete*			public
>
 afterDelete()
<
return (void)

 This method is invoked after deleting a record.

 The default implementation raises the 'EVENT_AFTER_DELETE' event. You may
 override this method to do postprocessing after the record is deleted. Make
 sure you call the parent implementation so that the event is raised properly.


*yii/db/BaseActiveRecord::refresh*			public
>
 refresh()
<
return (bool) Whether the row still exists in the database. If 'true', the latest
data will be populated to this active record. Otherwise, this record will
remain unchanged.

 Repopulates this active record with the latest data.

 If the refresh is successful, an 'EVENT_AFTER_REFRESH' event will be
 triggered. This event is available since version 2.0.8.


*yii/db/BaseActiveRecord::refreshInternal*		protected
>
 refreshInternal($record)
<
return (bool) Whether refresh was successful.

 Repopulates this active record with the latest data from a newly fetched
 instance.

    [$record] (\yii\db\BaseActiveRecord) The record to take attributes from.


*yii/db/BaseActiveRecord::afterRefresh*			public
>
 afterRefresh()
<
return (void)

 This method is called when the AR object is refreshed.

 The default implementation will trigger an 'EVENT_AFTER_REFRESH' event. When
 overriding this method, make sure you call the parent implementation to
 ensure the event is triggered.


*yii/db/BaseActiveRecord::equals*				public
>
 equals($record)
<
return (bool) Whether the two active records refer to the same row in the same
database table.

 Returns a value indicating whether the given active record is the same as the
 current one.

 The comparison is made by comparing the table names and the primary key
 values of the two active records. If one of the records 'isNewRecord|is new'
 they are also considered not equal.

    [$record] (\yii\db\ActiveRecordInterface) Record to compare to


*yii/db/BaseActiveRecord::getPrimaryKey*			public
>
 getPrimaryKey($asArray='false')
<
return (mixed) The primary key value. An array (column name => column value) is
returned if the primary key is composite or '$asArray' is 'true'. A string is
returned otherwise (null will be returned if the key value is null).

 Returns the primary key value(s).

    [$asArray] (bool) Whether to return the primary key value as an array. If
    'true', the return value will be an array with column names as keys and
    column values as values. Note that for composite primary keys, an array
    will always be returned regardless of this parameter value.


*yii/db/BaseActiveRecord::getOldPrimaryKey*		public
>
 getOldPrimaryKey($asArray='false')
<
return (mixed) The old primary key value. An array (column name => column value) is
returned if the primary key is composite or '$asArray' is 'true'. A string is
returned otherwise (null will be returned if the key value is null).

 Returns the old primary key value(s).

 This refers to the primary key value that is populated into the record after
 executing a find method (e.g. find(), findOne()). The value remains unchanged
 even if the primary key attribute is manually assigned with a different
 value.

    [$asArray] (bool) Whether to return the primary key value as an array. If
    'true', the return value will be an array with column name as key and
    column value as value. If this is 'false' (default), a scalar value will
    be returned for non-composite primary key.


*yii/db/BaseActiveRecord::populateRecord*			public
>
 populateRecord($record, $row)
<
return (void)

 Populates an active record object using a row of data from the
 database/storage.

 This is an internal method meant to be called to create active record objects
 after fetching data from the database. It is mainly used by 'ActiveQuery' to
 populate the query results into active records.

 When calling this method manually you should call 'afterFind()' on the
 created record to trigger the 'EVENT_AFTER_FIND|afterFind Event'.

    [$record] (\yii\db\BaseActiveRecord) The record to be populated. In most
    cases this will be an instance created by 'instantiate()' beforehand.
    [$row] (array) Attribute values (name => value)


*yii/db/BaseActiveRecord::instantiate*			public
>
 instantiate($row)
<
return (static) The newly created active record

 Creates an active record instance.

 This method is called together with 'populateRecord()' by 'ActiveQuery'. It
 is not meant to be used for creating new records directly.

 You may override this method if the instance being created depends on the row
 data to be populated into the record. For example, by creating a record based
 on the value of a column, you may implement the so-called single-table
 inheritance mapping.

    [$row] (array) Row data to be populated into the record.


*yii/db/BaseActiveRecord::getRelation*			public
>
 getRelation($name, $throwException='true')
<
return (\yii\db\ActiveQueryInterface|\yii\db\ActiveQuery) The relational query
object. If the relation does not exist and '$throwException' is 'false',
'null' will be returned.

 Returns the relation object with the specified name.

 A relation is defined by a getter method which returns an
 'ActiveQueryInterface' object. It can be declared in either the Active Record
 class itself or one of its behaviors.

    [$name] (string) The relation name, e.g. 'orders' for a relation defined
    via 'getOrders()' method (case-sensitive).
    [$throwException] (bool) Whether to throw exception if the relation does
    not exist.


*yii/db/BaseActiveRecord::link*				public
>
 link($name, $model, $extraColumns='[]')
<
return (void)

 Establishes the relationship between two models.

 The relationship is established by setting the foreign key value(s) in one
 model to be the corresponding primary key value(s) in the other model. The
 model with the foreign key will be saved into database without performing
 validation.

 If the relationship involves a junction table, a new row will be inserted
 into the junction table which contains the primary key values from both
 models.

 Note that this method requires that the primary key value is not null.

    [$name] (string) The case sensitive name of the relationship, e.g.
    'orders' for a relation defined via 'getOrders()' method.
    [$model] (\yii\db\ActiveRecordInterface) The model to be linked with the
    current one.
    [$extraColumns] (array) Additional column values to be saved into the
    junction table. This parameter is only meaningful for a relationship
    involving a junction table (i.e., a relation set with
    'ActiveRelationTrait::via()' or 'ActiveQuery::viaTable()'.)


*yii/db/BaseActiveRecord::unlink*				public
>
 unlink($name, $model, $delete='false')
<
return (void)

 Destroys the relationship between two models.

 The model with the foreign key of the relationship will be deleted if
 '$delete' is 'true'. Otherwise, the foreign key will be set 'null' and the
 model will be saved without validation.

    [$name] (string) The case sensitive name of the relationship, e.g.
    'orders' for a relation defined via 'getOrders()' method.
    [$model] (\yii\db\ActiveRecordInterface) The model to be unlinked from the
    current one. You have to make sure that the model is really related with
    the current model as this method does not check this.
    [$delete] (bool) Whether to delete the model that contains the foreign
    key. If 'false', the model's foreign key will be set 'null' and saved. If
    'true', the model containing the foreign key will be deleted.


*yii/db/BaseActiveRecord::unlinkAll*			public
>
 unlinkAll($name, $delete='false')
<
return (void)

 Destroys the relationship in current model.

 The model with the foreign key of the relationship will be deleted if
 '$delete' is 'true'. Otherwise, the foreign key will be set 'null' and the
 model will be saved without validation.

 Note that to destroy the relationship without removing records make sure your
 keys can be set to null

    [$name] (string) The case sensitive name of the relationship, e.g.
    'orders' for a relation defined via 'getOrders()' method.
    [$delete] (bool) Whether to delete the model that contains the foreign
    key.

    Note that the deletion will be performed using 'deleteAll()', which will
    not trigger any events on the related models. If you need
    'EVENT_BEFORE_DELETE' or 'EVENT_AFTER_DELETE' to be triggered, you need to
    'find()|find' the models first and then call 'delete()' on each of them.


*yii/db/BaseActiveRecord::isPrimaryKey*			public
>
 isPrimaryKey($keys)
<
return (bool) Whether the given set of attributes represents the primary key for this
model

 Returns a value indicating whether the given set of attributes represents the
 primary key for this model.

    [$keys] (array) The set of attributes to check



 vim:tw=78:ts=8:ft=help:norl:
