
*yii/db/BaseActiveRecord*   >> |yii/base/Model|
=========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/db/ActiveRecord|
|yii/sphinx/ActiveRecord|
|yii/redis/ActiveRecord|
|yii/elasticsearch/ActiveRecord|
|yii/mongodb/file/ActiveRecord|
|yii/mongodb/ActiveRecord|

DESCRIPTION
------------------------------------------------------------------------------

 See '\yii\db\ActiveRecord' for a concrete implementation.


PROPERTY DETAILS
------------------------------------------------------------------------------

$behaviors				*yii/db/BaseActiveRecord::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$validators				*yii/db/BaseActiveRecord::$validators*
 (\ArrayObject|\yii\validators\Validator[]) All the validators declared in the
 model.

$activeValidators			*yii/db/BaseActiveRecord::$activeValidators*
 (\yii\validators\Validator[]) The validators applicable to the current
 'scenario'.

$errors					*yii/db/BaseActiveRecord::$errors*
 (array) Errors for all attributes or the specified attribute. Empty array is
 returned if no error. Note that when returning errors for all attributes, the
 result is a two-dimensional array, like the following:

   [
       'username' => [
           'Username is required.',
           'Username must contain only word characters.',
       ],
       'email' => [
           'Email address is invalid.',
       ]
   ]



$firstErrors				*yii/db/BaseActiveRecord::$firstErrors*
 (array) The first errors. The array keys are the attribute names, and the
 array values are the corresponding error messages. An empty array will be
 returned if there is no error.

$attributes				*yii/db/BaseActiveRecord::$attributes*
 (array) Attribute values (name => value).

$scenario				*yii/db/BaseActiveRecord::$scenario*
 (string) The scenario that this model is in. Defaults to 'SCENARIO_DEFAULT'.

$iterator				*yii/db/BaseActiveRecord::$iterator*
 (\ArrayIterator) An iterator for traversing the items in the list.

$relatedRecords				*yii/db/BaseActiveRecord::$relatedRecords*
 (array) An array of related records indexed by relation names.

$oldAttributes				*yii/db/BaseActiveRecord::$oldAttributes*
 (array) The old attribute values (name-value pairs)

$dirtyAttributes			*yii/db/BaseActiveRecord::$dirtyAttributes*
 (array) The changed attribute values (name-value pairs)

$isNewRecord				*yii/db/BaseActiveRecord::$isNewRecord*
 (boolean) Whether the record is new and should be inserted when calling
 'save()'.

$primaryKey				*yii/db/BaseActiveRecord::$primaryKey*
 (mixed) The primary key value. An array (column name => column value) is
 returned if the primary key is composite or '$asArray' is true. A string is
 returned otherwise (null will be returned if the key value is null).

$oldPrimaryKey				*yii/db/BaseActiveRecord::$oldPrimaryKey*
 (mixed) The old primary key value. An array (column name => column value) is
 returned if the primary key is composite or '$asArray' is true. A string is
 returned otherwise (null will be returned if the key value is null).



METHOD DETAILS
------------------------------------------------------------------------------

*yii/db/BaseActiveRecord::className*			public
 See |yii/base/Object::className|


*yii/db/BaseActiveRecord::__construct*			public
 See |yii/base/Object::__construct|


*yii/db/BaseActiveRecord::init*				public
>
 init()
<
(void)

 This method is called at the end of the constructor. The default
 implementation will trigger an 'EVENT_INIT' event. If you override this
 method, make sure you call the parent implementation at the end to ensure
 triggering of the event.


*yii/db/BaseActiveRecord::__get*				public
>
 __get($name)
<
(mixed) Property value

 This method is overridden so that attributes and related objects can be
 accessed like properties.
    [$name] (string) Property name


*yii/db/BaseActiveRecord::__set*				public
>
 __set($name, $value)
<
(void)

 This method is overridden so that AR attributes can be accessed like
 properties.
    [$name] (string) Property name
    [$value] (mixed) Property value


*yii/db/BaseActiveRecord::__isset*			public
>
 __isset($name)
<
(boolean) Whether the property value is null

 This method overrides the parent implementation by checking if the named
 attribute is null or not.
    [$name] (string) The property name or the event name


*yii/db/BaseActiveRecord::__unset*			public
>
 __unset($name)
<
(void)

 This method overrides the parent implementation by clearing the specified
 attribute value.
    [$name] (string) The property name or the event name


*yii/db/BaseActiveRecord::__call*				public
 See |yii/base/Component::__call|


*yii/db/BaseActiveRecord::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/db/BaseActiveRecord::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/db/BaseActiveRecord::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/db/BaseActiveRecord::hasMethod*			public
 See |yii/base/Component::hasMethod|


*yii/db/BaseActiveRecord::__clone*			public
 See |yii/base/Component::__clone|


*yii/db/BaseActiveRecord::behaviors*			public
 See |yii/base/Component::behaviors|


*yii/db/BaseActiveRecord::hasEventHandlers*		public
 See |yii/base/Component::hasEventHandlers|


*yii/db/BaseActiveRecord::on*				public
 See |yii/base/Component::on|


*yii/db/BaseActiveRecord::off*				public
 See |yii/base/Component::off|


*yii/db/BaseActiveRecord::trigger*			public
 See |yii/base/Component::trigger|


*yii/db/BaseActiveRecord::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/db/BaseActiveRecord::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/db/BaseActiveRecord::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/db/BaseActiveRecord::attachBehaviors*		public
 See |yii/base/Component::attachBehaviors|


*yii/db/BaseActiveRecord::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/db/BaseActiveRecord::detachBehaviors*		public
 See |yii/base/Component::detachBehaviors|


*yii/db/BaseActiveRecord::ensureBehaviors*		public
 See |yii/base/Component::ensureBehaviors|


*yii/db/BaseActiveRecord::fields*				public
>
 fields()
<
(array) The list of field names or field definitions.

 A field is a named element in the returned array by 'toArray()'.

 This method should return an array of field names or field definitions. If
 the former, the field name will be treated as an object property name whose
 value will be used as the field value. If the latter, the array key should be
 the field name while the array value should be the corresponding field
 definition which can be either an object property name or a PHP callable
 returning the corresponding field value. The signature of the callable should
 be:

   function ($field, $model) {
       // return field value
   }

 For example, the following code declares four fields:


   - 'email': the field name is the same as the property name 'email'; 
   - 'firstName' and 'lastName': the field names are 'firstName' and
   'lastName', and their   values are obtained from the 'first_name' and
 'last_name' properties; 
   - 'fullName': the field name is 'fullName'. Its value is obtained by
   concatenating 'first_name'   and 'last_name'.

   return [
       'email',
       'firstName' => 'first_name',
       'lastName' => 'last_name',
       'fullName' => function () {
           return $this->first_name . ' ' . $this->last_name;
       },
   ];

 In this method, you may also want to return different lists of fields based
 on some context information. For example, depending on 'scenario' or the
 privilege of the current application user, you may return different sets of
 visible fields or filter out some fields.

 The default implementation of this method returns 'attributes()' indexed by
 the same attribute names.


*yii/db/BaseActiveRecord::extraFields*			public
>
 extraFields()
<
(array) The list of expandable field names or field definitions. Please refer
to 'fields()' on the format of the return value.

 This method is similar to 'fields()' except that the list of fields returned
 by this method are not returned by default by 'toArray()'. Only when field
 names to be expanded are explicitly specified when calling 'toArray()', will
 their values be exported.

 The default implementation returns an empty array.

 You may override this method to return a list of expandable fields based on
 some context information (e.g. the current application user).


*yii/db/BaseActiveRecord::toArray*			public
 See |yii/base/ArrayableTrait::toArray|


*yii/db/BaseActiveRecord::resolveFields*			protected
 See |yii/base/ArrayableTrait::resolveFields|


*yii/db/BaseActiveRecord::rules*				public
 See |yii/base/Model::rules|


*yii/db/BaseActiveRecord::scenarios*			public
 See |yii/base/Model::scenarios|


*yii/db/BaseActiveRecord::formName*			public
 See |yii/base/Model::formName|


*yii/db/BaseActiveRecord::attributes*			public
 See |yii/db/ActiveRecordInterface::attributes|


*yii/db/BaseActiveRecord::attributeLabels*		public
 See |yii/base/Model::attributeLabels|


*yii/db/BaseActiveRecord::validate*			public
 See |yii/base/Model::validate|


*yii/db/BaseActiveRecord::beforeValidate*			public
 See |yii/base/Model::beforeValidate|


*yii/db/BaseActiveRecord::afterValidate*			public
 See |yii/base/Model::afterValidate|


*yii/db/BaseActiveRecord::getValidators*			public
 See |yii/base/Model::getValidators|


*yii/db/BaseActiveRecord::getActiveValidators*		public
 See |yii/base/Model::getActiveValidators|


*yii/db/BaseActiveRecord::createValidators*		public
 See |yii/base/Model::createValidators|


*yii/db/BaseActiveRecord::isAttributeRequired*		public
 See |yii/base/Model::isAttributeRequired|


*yii/db/BaseActiveRecord::isAttributeSafe*		public
 See |yii/base/Model::isAttributeSafe|


*yii/db/BaseActiveRecord::isAttributeActive*		public
 See |yii/base/Model::isAttributeActive|


*yii/db/BaseActiveRecord::getAttributeLabel*		public
>
 getAttributeLabel($attribute)
<
(string) The attribute label

 If the attribute looks like 'relatedModel.attribute', then the attribute will
 be received from the related model.
    [$attribute] (string) The attribute name


*yii/db/BaseActiveRecord::hasErrors*			public
 See |yii/base/Model::hasErrors|


*yii/db/BaseActiveRecord::getErrors*			public
 See |yii/base/Model::getErrors|


*yii/db/BaseActiveRecord::getFirstErrors*			public
 See |yii/base/Model::getFirstErrors|


*yii/db/BaseActiveRecord::getFirstError*			public
 See |yii/base/Model::getFirstError|


*yii/db/BaseActiveRecord::addError*			public
 See |yii/base/Model::addError|


*yii/db/BaseActiveRecord::clearErrors*			public
 See |yii/base/Model::clearErrors|


*yii/db/BaseActiveRecord::generateAttributeLabel*		public
 See |yii/base/Model::generateAttributeLabel|


*yii/db/BaseActiveRecord::getAttributes*			public
 See |yii/base/Model::getAttributes|


*yii/db/BaseActiveRecord::setAttributes*			public
 See |yii/base/Model::setAttributes|


*yii/db/BaseActiveRecord::onUnsafeAttribute*		public
 See |yii/base/Model::onUnsafeAttribute|


*yii/db/BaseActiveRecord::getScenario*			public
 See |yii/base/Model::getScenario|


*yii/db/BaseActiveRecord::setScenario*			public
 See |yii/base/Model::setScenario|


*yii/db/BaseActiveRecord::safeAttributes*			public
 See |yii/base/Model::safeAttributes|


*yii/db/BaseActiveRecord::activeAttributes*		public
 See |yii/base/Model::activeAttributes|


*yii/db/BaseActiveRecord::load*				public
 See |yii/base/Model::load|


*yii/db/BaseActiveRecord::loadMultiple*			public
 See |yii/base/Model::loadMultiple|


*yii/db/BaseActiveRecord::validateMultiple*		public
 See |yii/base/Model::validateMultiple|


*yii/db/BaseActiveRecord::getIterator*			public
 See |yii/base/Model::getIterator|


*yii/db/BaseActiveRecord::offsetExists*			public
>
 offsetExists($offset)
<
(boolean) Whether there is an element at the specified offset.

 This method is required by the interface ArrayAccess.
    [$offset] (mixed) The offset to check on


*yii/db/BaseActiveRecord::offsetGet*			public
 See |yii/base/Model::offsetGet|


*yii/db/BaseActiveRecord::offsetSet*			public
 See |yii/base/Model::offsetSet|


*yii/db/BaseActiveRecord::offsetUnset*			public
>
 offsetUnset($offset)
<
(void)

 This method is required by the SPL interface 'ArrayAccess'. It is implicitly
 called when you use something like 'unset($model[$offset])'.
    [$offset] (mixed) The offset to unset element


*yii/db/BaseActiveRecord::findOne*			public
>
 findOne($condition)
<
(static) ActiveRecord instance matching the condition, or 'null' if nothing
matches.

 The method accepts:

  
   - a scalar value (integer or string): query by a single primary key
   value and return the    corresponding record (or null if not found).  
   - an array of name-value pairs: query by a set of attribute values
   and return a single record    matching all of them (or null if not found).

 Note that this method will automatically call the 'one()' method and return
 an 'ActiveRecordInterface|ActiveRecord' instance. For example,

   // find a single customer whose primary key value is 10
   $customer = Customer::findOne(10);

   // the above code is equivalent to:
   $customer = Customer::find()->where(['id' => 10])->one();

   // find the first customer whose age is 30 and whose status is 1
   $customer = Customer::findOne(['age' => 30, 'status' => 1]);

   // the above code is equivalent to:
   $customer = Customer::find()->where(['age' => 30, 'status' => 1])->one();


    [$condition] (mixed) Primary key value or a set of column values


*yii/db/BaseActiveRecord::findAll*			public
>
 findAll($condition)
<
(static[]) An array of ActiveRecord instances, or an empty array if nothing
matches.

 The method accepts:

  
   - a scalar value (integer or string): query by a single primary key
   value and return an array containing the    corresponding record (or an
 empty array if not found).  
   - an array of scalar values (integer or string): query by a list of
   primary key values and return the    corresponding records (or an empty
 array if none was found).    Note that an empty condition will result in an
 empty result as it will be interpreted as a search for    primary keys and
 not an empty 'WHERE' condition.  
   - an array of name-value pairs: query by a set of attribute values
   and return an array of records    matching all of them (or an empty array
 if none was found).

 Note that this method will automatically call the 'all()' method and return
 an array of 'ActiveRecordInterface|ActiveRecord' instances. For example,

   // find the customers whose primary key value is 10
   $customers = Customer::findAll(10);

   // the above code is equivalent to:
   $customers = Customer::find()->where(['id' => 10])->all();

   // find the customers whose primary key value is 10, 11 or 12.
   $customers = Customer::findAll([10, 11, 12]);

   // the above code is equivalent to:
   $customers = Customer::find()->where(['id' => [10, 11, 12]])->all();

   // find customers whose age is 30 and whose status is 1
   $customers = Customer::findAll(['age' => 30, 'status' => 1]);

   // the above code is equivalent to:
   $customers = Customer::find()->where(['age' => 30, 'status' => 1])->all();


    [$condition] (mixed) Primary key value or a set of column values


*yii/db/BaseActiveRecord::findByCondition*		protected
>
 findByCondition($condition, $one)
<
(static|static[]) 

 This method is internally called by 'findOne()' and 'findAll()'.
    [$condition] (mixed) Please refer to 'findOne()' for the explanation of
    this parameter
    [$one] (boolean) Whether this method is called by 'findOne()' or
    'findAll()'


*yii/db/BaseActiveRecord::updateAll*			public
>
 updateAll($attributes, $condition='\'\'')
<
(integer) The number of rows updated

 For example, to change the status to be 1 for all customers whose status is
 2:

   Customer::updateAll(['status' => 1], 'status = 2');


    [$attributes] (array) Attribute values (name-value pairs) to be saved into
    the table
    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the UPDATE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.


*yii/db/BaseActiveRecord::updateAllCounters*		public
>
 updateAllCounters($counters, $condition='\'\'')
<
(integer) The number of rows updated

 For example, to increment all customers' age by 1,

   Customer::updateAllCounters(['age' => 1]);


    [$counters] (array) The counters to be updated (attribute name =>
    increment value). Use negative values if you want to decrement the
    counters.
    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the UPDATE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.


*yii/db/BaseActiveRecord::deleteAll*			public
>
 deleteAll($condition='\'\'', $params='[]')
<
(integer) The number of rows deleted

 WARNING: If you do not specify any condition, this method will delete ALL
 rows in the table.

 For example, to delete all customers whose status is 3:

   Customer::deleteAll('status = 3');


    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the DELETE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/BaseActiveRecord::optimisticLock*			public
>
 optimisticLock()
<
(string) The column name that stores the lock version of a table row. If null
is returned (default implemented), optimistic locking will not be supported.

 Optimistic locking allows multiple users to access the same record for edits
 and avoids potential conflicts. In case when a user attempts to save the
 record upon some staled data (because another user has modified the data), a
 'StaleObjectException' exception will be thrown, and the update or deletion
 is skipped.

 Optimistic locking is only supported by 'update()' and 'delete()'.

 To use Optimistic locking:

 1. Create a column to store the version number of each row. The column type
 should be 'BIGINT DEFAULT 0'.    Override this method to return the name of
 this column. 2. In the Web form that collects the user input, add a hidden
 field that stores    the lock version of the recording being updated. 3. In
 the controller action that does the data updating, try to catch the
 'StaleObjectException'    and implement necessary business logic (e.g.
 merging the changes, prompting stated data)    to resolve the conflict.


*yii/db/BaseActiveRecord::hasOne*				public
>
 hasOne($class, $link)
<
(\yii\db\ActiveQueryInterface) The relational query object.

 The declaration is returned in terms of a relational 'ActiveQuery' instance
 through which the related record can be queried and retrieved back.

 A 'has-one' relation means that there is at most one related record matching
 the criteria set by this relation, e.g., a customer has one country.

 For example, to declare the 'country' relation for 'Customer' class, we can
 write the following code in the 'Customer' class:

   public function getCountry()
   {
       return $this->hasOne(Country::className(), ['id' => 'country_id']);
   }

 Note that in the above, the 'id' key in the '$link' parameter refers to an
 attribute name in the related class 'Country', while the 'country_id' value
 refers to an attribute name in the current AR class.

 Call methods declared in 'ActiveQuery' to further customize the relation.
    [$class] (string) The class name of the related record
    [$link] (array) The primary-foreign key constraint. The keys of the array
    refer to the attributes of the record associated with the '$class' model,
    while the values of the array refer to the corresponding attributes in
    **this** AR class.


*yii/db/BaseActiveRecord::hasMany*			public
>
 hasMany($class, $link)
<
(\yii\db\ActiveQueryInterface) The relational query object.

 The declaration is returned in terms of a relational 'ActiveQuery' instance
 through which the related record can be queried and retrieved back.

 A 'has-many' relation means that there are multiple related records matching
 the criteria set by this relation, e.g., a customer has many orders.

 For example, to declare the 'orders' relation for 'Customer' class, we can
 write the following code in the 'Customer' class:

   public function getOrders()
   {
       return $this->hasMany(Order::className(), ['customer_id' => 'id']);
   }

 Note that in the above, the 'customer_id' key in the '$link' parameter refers
 to an attribute name in the related class 'Order', while the 'id' value
 refers to an attribute name in the current AR class.

 Call methods declared in 'ActiveQuery' to further customize the relation.
    [$class] (string) The class name of the related record
    [$link] (array) The primary-foreign key constraint. The keys of the array
    refer to the attributes of the record associated with the '$class' model,
    while the values of the array refer to the corresponding attributes in
    **this** AR class.


*yii/db/BaseActiveRecord::populateRelation*		public
>
 populateRelation($name, $records)
<
(void)

 Note that this method does not check if the relation exists or not.
    [$name] (string) The relation name (case-sensitive)
    [$records] (\yii\db\ActiveRecordInterface|array|null) The related records
    to be populated into the relation.


*yii/db/BaseActiveRecord::isRelationPopulated*		public
>
 isRelationPopulated($name)
<
(boolean) Whether relation has been populated with records.

    [$name] (string) The relation name (case-sensitive)


*yii/db/BaseActiveRecord::getRelatedRecords*		public
>
 getRelatedRecords()
<
(array) An array of related records indexed by relation names.



*yii/db/BaseActiveRecord::hasAttribute*			public
>
 hasAttribute($name)
<
(boolean) Whether the model has an attribute with the specified name.

    [$name] (string) The name of the attribute


*yii/db/BaseActiveRecord::getAttribute*			public
>
 getAttribute($name)
<
(mixed) The attribute value. Null if the attribute is not set or does not
exist.

 If this record is the result of a query and the attribute is not loaded, null
 will be returned.
    [$name] (string) The attribute name


*yii/db/BaseActiveRecord::setAttribute*			public
>
 setAttribute($name, $value)
<
(void)

    [$name] (string) The attribute name
    [$value] (mixed) The attribute value.


*yii/db/BaseActiveRecord::getOldAttributes*		public
>
 getOldAttributes()
<
(array) The old attribute values (name-value pairs)



*yii/db/BaseActiveRecord::setOldAttributes*		public
>
 setOldAttributes($values)
<
(void)

 All existing old attribute values will be discarded.
    [$values] (array|null) Old attribute values to be set. If set to 'null'
    this record is considered to be 'isNewRecord|new'.


*yii/db/BaseActiveRecord::getOldAttribute*		public
>
 getOldAttribute($name)
<
(mixed) The old attribute value. Null if the attribute is not loaded before or
does not exist.

 If this record is the result of a query and the attribute is not loaded, null
 will be returned.
    [$name] (string) The attribute name


*yii/db/BaseActiveRecord::setOldAttribute*		public
>
 setOldAttribute($name, $value)
<
(void)

    [$name] (string) The attribute name
    [$value] (mixed) The old attribute value.


*yii/db/BaseActiveRecord::markAttributeDirty*		public
>
 markAttributeDirty($name)
<
(void)

 This method may be called to force updating a record when calling 'update()',
 even if there is no change being made to the record.
    [$name] (string) The attribute name


*yii/db/BaseActiveRecord::isAttributeChanged*		public
>
 isAttributeChanged($name)
<
(boolean) Whether the attribute has been changed

    [$name] (string) The name of the attribute


*yii/db/BaseActiveRecord::getDirtyAttributes*		public
>
 getDirtyAttributes($names='null')
<
(array) The changed attribute values (name-value pairs)

    [$names] (string[]|null) The names of the attributes whose values may be
    returned if they are changed recently. If null, 'attributes()' will be
    used.


*yii/db/BaseActiveRecord::save*				public
>
 save($runValidation='true', $attributeNames='null')
<
(boolean) Whether the saving succeeds

 This method will call 'insert()' when 'isNewRecord' is true, or 'update()'
 when 'isNewRecord' is false.

 For example, to save a customer record:

   $customer = new Customer;  // or $customer = Customer::findOne($id);
   $customer->name = $name;
   $customer->email = $email;
   $customer->save();


    [$runValidation] (boolean) Whether to perform validation before saving the
    record. If the validation fails, the record will not be saved to database.
    [$attributeNames] (array) List of attribute names that need to be saved.
    Defaults to null, meaning all attributes that are loaded from DB will be
    saved.


*yii/db/BaseActiveRecord::update*				public
>
 update($runValidation='true', $attributeNames='null')
<
(integer|boolean) The number of rows affected, or false if validation fails or
'beforeSave()' stops the updating process.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is true. If validation   
 fails, it will skip the rest of the steps; 2. call 'afterValidate()' when
 '$runValidation' is true. 3. call 'beforeSave()'. If the method returns
 false, it will skip the    rest of the steps; 4. save the record into
 database. If this fails, it will skip the rest of the steps; 5. call
 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_BEFORE_UPDATE', 'EVENT_AFTER_UPDATE' and 'EVENT_AFTER_VALIDATE' will
 be raised by the corresponding methods.

 Only the 'dirtyAttributes|changed attribute values' will be saved into
 database.

 For example, to update a customer record:

   $customer = Customer::findOne($id);
   $customer->name = $name;
   $customer->email = $email;
   $customer->update();

 Note that it is possible the update does not affect any row in the table. In
 this case, this method will return 0. For this reason, you should use the
 following code to check if update() is successful or not:

   if ($this->update() !== false) {
       // update successful
   } else {
       // update failed
   }


    [$runValidation] (boolean) Whether to perform validation before saving the
    record. If the validation fails, the record will not be inserted into the
    database.
    [$attributeNames] (array) List of attribute names that need to be saved.
    Defaults to null, meaning all attributes that are loaded from DB will be
    saved.


*yii/db/BaseActiveRecord::updateAttributes*		public
>
 updateAttributes($attributes)
<
(integer) The number of rows affected.

 This method is a shortcut to 'update()' when data validation is not needed
 and only a small set attributes need to be updated.

 You may specify the attributes to be updated as name list or name-value
 pairs. If the latter, the corresponding attribute values will be modified
 accordingly. The method will then save the specified attributes into
 database.

 Note that this method will **not** perform data validation and will **not**
 trigger events.
    [$attributes] (array) The attributes (names or name-value pairs) to be
    updated


*yii/db/BaseActiveRecord::updateInternal*			protected
>
 updateInternal($attributes='null')
<
(integer) Number of rows updated

    [$attributes] (array) Attributes to update


*yii/db/BaseActiveRecord::updateCounters*			public
>
 updateCounters($counters)
<
(boolean) Whether the saving is successful

 Note that this method differs from 'updateAllCounters()' in that it only
 saves counters for the current AR object.

 An example usage is as follows:

   $post = Post::findOne($id);
   $post->updateCounters(['view_count' => 1]);


    [$counters] (array) The counters to be updated (attribute name =>
    increment value) Use negative values if you want to decrement the
    counters.


*yii/db/BaseActiveRecord::delete*				public
>
 delete()
<
(integer|boolean) The number of rows deleted, or false if the deletion is
unsuccessful for some reason. Note that it is possible the number of rows
deleted is 0, even though the deletion execution is successful.

 This method performs the following steps in order:

 1. call 'beforeDelete()'. If the method returns false, it will skip the   
 rest of the steps; 2. delete the record from the database; 3. call
 'afterDelete()'.

 In the above step 1 and 3, events named 'EVENT_BEFORE_DELETE' and
 'EVENT_AFTER_DELETE' will be raised by the corresponding methods.


*yii/db/BaseActiveRecord::getIsNewRecord*			public
>
 getIsNewRecord()
<
(boolean) Whether the record is new and should be inserted when calling
'save()'.



*yii/db/BaseActiveRecord::setIsNewRecord*			public
>
 setIsNewRecord($value)
<
(void)

    [$value] (boolean) Whether the record is new and should be inserted when
    calling 'save()'.


*yii/db/BaseActiveRecord::afterFind*			public
>
 afterFind()
<
(void)

 The default implementation will trigger an 'EVENT_AFTER_FIND' event. When
 overriding this method, make sure you call the parent implementation to
 ensure the event is triggered.


*yii/db/BaseActiveRecord::beforeSave*			public
>
 beforeSave($insert)
<
(boolean) Whether the insertion or updating should continue. If false, the
insertion or updating will be cancelled.

 The default implementation will trigger an 'EVENT_BEFORE_INSERT' event when
 '$insert' is true, or an 'EVENT_BEFORE_UPDATE' event if '$insert' is false.
 When overriding this method, make sure you call the parent implementation
 like the following:

   public function beforeSave($insert)
   {
       if (parent::beforeSave($insert)) {
           // ...custom code here...
           return true;
       } else {
           return false;
       }
   }


    [$insert] (boolean) Whether this method called while inserting a record.
    If false, it means the method is called while updating a record.


*yii/db/BaseActiveRecord::afterSave*			public
>
 afterSave($insert, $changedAttributes)
<
(void)

 The default implementation will trigger an 'EVENT_AFTER_INSERT' event when
 '$insert' is true, or an 'EVENT_AFTER_UPDATE' event if '$insert' is false.
 The event class used is 'AfterSaveEvent'. When overriding this method, make
 sure you call the parent implementation so that the event is triggered.
    [$insert] (boolean) Whether this method called while inserting a record.
    If false, it means the method is called while updating a record.
    [$changedAttributes] (array) The old values of attributes that had changed
    and were saved. You can use this parameter to take action based on the
    changes made for example send an email when the password had changed or
    implement audit trail that tracks all the changes. '$changedAttributes'
    gives you the old attribute values while the active record ('$this') has
    already the new, updated values.


*yii/db/BaseActiveRecord::beforeDelete*			public
>
 beforeDelete()
<
(boolean) Whether the record should be deleted. Defaults to true.

 The default implementation raises the 'EVENT_BEFORE_DELETE' event. When
 overriding this method, make sure you call the parent implementation like the
 following:

   public function beforeDelete()
   {
       if (parent::beforeDelete()) {
           // ...custom code here...
           return true;
       } else {
           return false;
       }
   }




*yii/db/BaseActiveRecord::afterDelete*			public
>
 afterDelete()
<
(void)

 The default implementation raises the 'EVENT_AFTER_DELETE' event. You may
 override this method to do postprocessing after the record is deleted. Make
 sure you call the parent implementation so that the event is raised properly.


*yii/db/BaseActiveRecord::refresh*			public
>
 refresh()
<
(boolean) Whether the row still exists in the database. If true, the latest
data will be populated to this active record. Otherwise, this record will
remain unchanged.



*yii/db/BaseActiveRecord::equals*				public
>
 equals($record)
<
(boolean) Whether the two active records refer to the same row in the same
database table.

 The comparison is made by comparing the table names and the primary key
 values of the two active records. If one of the records 'isNewRecord|is new'
 they are also considered not equal.
    [$record] (\yii\db\ActiveRecordInterface) Record to compare to


*yii/db/BaseActiveRecord::getPrimaryKey*			public
>
 getPrimaryKey($asArray='false')
<
(mixed) The primary key value. An array (column name => column value) is
returned if the primary key is composite or '$asArray' is true. A string is
returned otherwise (null will be returned if the key value is null).

    [$asArray] (boolean) Whether to return the primary key value as an array.
    If true, the return value will be an array with column names as keys and
    column values as values. Note that for composite primary keys, an array
    will always be returned regardless of this parameter value.


*yii/db/BaseActiveRecord::getOldPrimaryKey*		public
>
 getOldPrimaryKey($asArray='false')
<
(mixed) The old primary key value. An array (column name => column value) is
returned if the primary key is composite or '$asArray' is true. A string is
returned otherwise (null will be returned if the key value is null).

 This refers to the primary key value that is populated into the record after
 executing a find method (e.g. find(), findOne()). The value remains unchanged
 even if the primary key attribute is manually assigned with a different
 value.
    [$asArray] (boolean) Whether to return the primary key value as an array.
    If true, the return value will be an array with column name as key and
    column value as value. If this is false (default), a scalar value will be
    returned for non-composite primary key.


*yii/db/BaseActiveRecord::populateRecord*			public
>
 populateRecord($record, $row)
<
(void)

 This is an internal method meant to be called to create active record objects
 after fetching data from the database. It is mainly used by 'ActiveQuery' to
 populate the query results into active records.

 When calling this method manually you should call 'afterFind()' on the
 created record to trigger the 'EVENT_AFTER_FIND|afterFind Event'.
    [$record] (\yii\db\BaseActiveRecord) The record to be populated. In most
    cases this will be an instance created by 'instantiate()' beforehand.
    [$row] (array) Attribute values (name => value)


*yii/db/BaseActiveRecord::instantiate*			public
>
 instantiate($row)
<
(static) The newly created active record

 This method is called together with 'populateRecord()' by 'ActiveQuery'. It
 is not meant to be used for creating new records directly.

 You may override this method if the instance being created depends on the row
 data to be populated into the record. For example, by creating a record based
 on the value of a column, you may implement the so-called single-table
 inheritance mapping.
    [$row] (array) Row data to be populated into the record.


*yii/db/BaseActiveRecord::getRelation*			public
>
 getRelation($name, $throwException='true')
<
(\yii\db\ActiveQueryInterface|\yii\db\ActiveQuery) The relational query
object. If the relation does not exist and '$throwException' is false, null
will be returned.

 A relation is defined by a getter method which returns an
 'ActiveQueryInterface' object. It can be declared in either the Active Record
 class itself or one of its behaviors.
    [$name] (string) The relation name
    [$throwException] (boolean) Whether to throw exception if the relation
    does not exist.


*yii/db/BaseActiveRecord::link*				public
>
 link($name, $model, $extraColumns='[]')
<
(void)

 The relationship is established by setting the foreign key value(s) in one
 model to be the corresponding primary key value(s) in the other model. The
 model with the foreign key will be saved into database without performing
 validation.

 If the relationship involves a pivot table, a new row will be inserted into
 the pivot table which contains the primary key values from both models.

 Note that this method requires that the primary key value is not null.
    [$name] (string) The case sensitive name of the relationship
    [$model] (\yii\db\ActiveRecordInterface) The model to be linked with the
    current one.
    [$extraColumns] (array) Additional column values to be saved into the
    pivot table. This parameter is only meaningful for a relationship
    involving a pivot table (i.e., a relation set with
    'ActiveRelationTrait::via()' or ''ActiveQuery::viaTable()''.)


*yii/db/BaseActiveRecord::unlink*				public
>
 unlink($name, $model, $delete='false')
<
(void)

 The model with the foreign key of the relationship will be deleted if
 '$delete' is true. Otherwise, the foreign key will be set null and the model
 will be saved without validation.
    [$name] (string) The case sensitive name of the relationship.
    [$model] (\yii\db\ActiveRecordInterface) The model to be unlinked from the
    current one.
    [$delete] (boolean) Whether to delete the model that contains the foreign
    key. If false, the model's foreign key will be set null and saved. If
    true, the model containing the foreign key will be deleted.


*yii/db/BaseActiveRecord::unlinkAll*			public
>
 unlinkAll($name, $delete='false')
<
(void)

 The model with the foreign key of the relationship will be deleted if
 '$delete' is true. Otherwise, the foreign key will be set null and the model
 will be saved without validation.

 Note that to destroy the relationship without removing records make sure your
 keys can be set to null
    [$name] (string) The case sensitive name of the relationship.
    [$delete] (boolean) Whether to delete the model that contains the foreign
    key.


*yii/db/BaseActiveRecord::isPrimaryKey*			public
>
 isPrimaryKey($keys)
<
(boolean) Whether the given set of attributes represents the primary key for
this model

    [$keys] (array) The set of attributes to check


*yii/db/BaseActiveRecord::primaryKey*			public
 See |yii/db/ActiveRecordInterface::primaryKey|


*yii/db/BaseActiveRecord::find*				public
 See |yii/db/ActiveRecordInterface::find|


*yii/db/BaseActiveRecord::insert*				public
 See |yii/db/ActiveRecordInterface::insert|


*yii/db/BaseActiveRecord::getDb*				public
 See |yii/db/ActiveRecordInterface::getDb|



 vim:tw=78:ts=8:ft=help:norl:
