
*yii/bootstrap/Dropdown*   >> |yii/bootstrap/Widget|
========================

DESCRIPTION
------------------------------------------------------------------------------

 For example,

   <div class="dropdown">
       <a href="#" data-toggle="dropdown" class="dropdown-toggle">Label <b
 class="caret"></b></a>
       <?php
           echo Dropdown::widget([
               'items' => [
                   ['label' => 'DropdownA', 'url' => '/'],
                   ['label' => 'DropdownB', 'url' => '#'],
               ],
           ]);
       ?>
   </div>




PROPERTY DETAILS
------------------------------------------------------------------------------

$counter				*yii/bootstrap/Dropdown::$counter*
 See |yii/base/Widget::$counter|

$autoIdPrefix				*yii/bootstrap/Dropdown::$autoIdPrefix*
 See |yii/base/Widget::$autoIdPrefix|

$stack					*yii/bootstrap/Dropdown::$stack*
 See |yii/base/Widget::$stack|

$options				*yii/bootstrap/Dropdown::$options*
 See |yii/bootstrap/Widget::$options|

$clientOptions				*yii/bootstrap/Dropdown::$clientOptions*
 See |yii/bootstrap/Widget::$clientOptions|

$clientEvents				*yii/bootstrap/Dropdown::$clientEvents*
 See |yii/bootstrap/Widget::$clientEvents|

$items					*yii/bootstrap/Dropdown::$items*
 (array) List of menu items in the dropdown. Each array element can be either
 an HTML string, or an array representing a single menu with the following
 structure:


   - label: string, required, the label of the item link 
   - url: string|array, optional, the url of the item link. This will
   be processed by 'Url::to()'.   If not set, the item will be treated as a
 menu header when the item has no sub-menu. 
   - visible: boolean, optional, whether this menu item is visible.
   Defaults to true. 
   - linkOptions: array, optional, the HTML attributes of the item
   link. 
   - options: array, optional, the HTML attributes of the item. 
   - items: array, optional, the submenu items. The structure is the
   same as this property.   Note that Bootstrap doesn't support dropdown
 submenu. You have to add your own CSS styles to support it. 
   - submenuOptions: array, optional, the HTML attributes for sub-menu
   container tag. If specified it will be   merged with 'submenuOptions'.

 To insert divider use '<li role="presentation" class="divider"></li>'.

$encodeLabels				*yii/bootstrap/Dropdown::$encodeLabels*
 (boolean) Whether the labels for header items should be HTML-encoded.

$submenuOptions				*yii/bootstrap/Dropdown::$submenuOptions*
 (array|null) The HTML attributes for sub-menu container tags. If not set 
   - 'options' value will be used for it.

$behaviors				*yii/bootstrap/Dropdown::$behaviors*
 See |yii/base/Component::$behaviors|

$id					*yii/bootstrap/Dropdown::$id*
 See |yii/base/Widget::$id|

$view					*yii/bootstrap/Dropdown::$view*
 See |yii/base/Widget::$view|

$viewPath				*yii/bootstrap/Dropdown::$viewPath*
 See |yii/base/Widget::$viewPath|



METHOD DETAILS
------------------------------------------------------------------------------

*yii/bootstrap/Dropdown::className*			public
 See |yii/base/Object::className|


*yii/bootstrap/Dropdown::__construct*			public
 See |yii/base/Object::__construct|


*yii/bootstrap/Dropdown::init*				public
>
 init()
<
(void)

 If you override this method, make sure you call the parent implementation
 first.


*yii/bootstrap/Dropdown::__get*				public
 See |yii/base/Component::__get|


*yii/bootstrap/Dropdown::__set*				public
 See |yii/base/Component::__set|


*yii/bootstrap/Dropdown::__isset*				public
 See |yii/base/Component::__isset|


*yii/bootstrap/Dropdown::__unset*				public
 See |yii/base/Component::__unset|


*yii/bootstrap/Dropdown::__call*				public
 See |yii/base/Component::__call|


*yii/bootstrap/Dropdown::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/bootstrap/Dropdown::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/bootstrap/Dropdown::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/bootstrap/Dropdown::hasMethod*			public
 See |yii/base/Component::hasMethod|


*yii/bootstrap/Dropdown::__clone*				public
 See |yii/base/Component::__clone|


*yii/bootstrap/Dropdown::behaviors*			public
 See |yii/base/Component::behaviors|


*yii/bootstrap/Dropdown::hasEventHandlers*		public
 See |yii/base/Component::hasEventHandlers|


*yii/bootstrap/Dropdown::on*				public
 See |yii/base/Component::on|


*yii/bootstrap/Dropdown::off*				public
 See |yii/base/Component::off|


*yii/bootstrap/Dropdown::trigger*				public
 See |yii/base/Component::trigger|


*yii/bootstrap/Dropdown::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/bootstrap/Dropdown::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/bootstrap/Dropdown::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/bootstrap/Dropdown::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/bootstrap/Dropdown::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/bootstrap/Dropdown::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/bootstrap/Dropdown::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/bootstrap/Dropdown::begin*				public
 See |yii/base/Widget::begin|


*yii/bootstrap/Dropdown::end*				public
 See |yii/base/Widget::end|


*yii/bootstrap/Dropdown::widget*				public
 See |yii/base/Widget::widget|


*yii/bootstrap/Dropdown::getId*				public
 See |yii/base/Widget::getId|


*yii/bootstrap/Dropdown::setId*				public
 See |yii/base/Widget::setId|


*yii/bootstrap/Dropdown::getView*				public
 See |yii/base/Widget::getView|


*yii/bootstrap/Dropdown::setView*				public
 See |yii/base/Widget::setView|


*yii/bootstrap/Dropdown::run*				public
>
 run()
<
(void)



*yii/bootstrap/Dropdown::render*				public
 See |yii/base/Widget::render|


*yii/bootstrap/Dropdown::renderFile*			public
 See |yii/base/Widget::renderFile|


*yii/bootstrap/Dropdown::getViewPath*			public
 See |yii/base/Widget::getViewPath|


*yii/bootstrap/Dropdown::registerPlugin*			protected
 See |yii/bootstrap/Widget::registerPlugin|


*yii/bootstrap/Dropdown::registerClientEvents*		protected
 See |yii/bootstrap/Widget::registerClientEvents|


*yii/bootstrap/Dropdown::renderItems*			protected
>
 renderItems($items, $options='[]')
<
(string) The rendering result.

    [$items] (array) The menu items to be rendered
    [$options] (array) The container HTML attributes



 vim:tw=78:ts=8:ft=help:norl:
