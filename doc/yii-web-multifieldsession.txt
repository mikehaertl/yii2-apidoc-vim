
*yii/web/MultiFieldSession*   >> |yii/web/Session|
===========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/mongodb/Session|
|yii/web/DbSession|

DESCRIPTION
------------------------------------------------------------------------------

 With multi-field data storage, session data can be split between several
 fields in the storage record. Using such a storage allows saving particular
 session data into separated field, which then can be used to manipulate
 sessions in the way plain PHP does not allow.

 For example the ID of the authenticated user can be saved as separated column
 in the MySQL 'session' table, which allows to query all active sessions for a
 particular user or terminate them at will.

 Customizing of the session writing is performed via 'writeCallback', reading
 via 'readCallback'.

 While extending this class you should use 'composeFields()' method 
   - while writing the session data into the storage and 'extractData()' 
   - while reading session data from the storage.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/web/Session::$flashParam|
 |yii/web/Session::$handler|
 |yii/base/Component::$behaviors|
 |yii/web/Session::$isActive|
 |yii/web/Session::$hasSessionId|
 |yii/web/Session::$id|
 |yii/web/Session::$name|
 |yii/web/Session::$savePath|
 |yii/web/Session::$cookieParams|
 |yii/web/Session::$useCookies|
 |yii/web/Session::$gCProbability|
 |yii/web/Session::$useTransparentSessionID|
 |yii/web/Session::$timeout|
 |yii/web/Session::$iterator|
 |yii/web/Session::$count|
 |yii/web/Session::$allFlashes|
 |yii/web/Session::$flash|
 |yii/web/Session::$cacheLimiter|


$readCallback				*yii/web/MultiFieldSession::$readCallback*

 (callable) A callback that will be called during session data reading. The
 signature of the callback should be as follows:

 ''' function ($fields) '''

 where '$fields' is the storage field set for read session and '$session' is
 this session instance. If callback returns an array, it will be merged into
 the session data.

 For example:

   function ($fields) {
       return [
           'expireDate' => Yii::$app->formatter->asDate($fields['expire']),
       ];
   }



$writeCallback				*yii/web/MultiFieldSession::$writeCallback*

 (callable) A callback that will be called during session data writing. The
 signature of the callback should be as follows:

 ''' function ($session) '''

 where '$session' is this session instance, this variable can be used to
 retrieve session data. Callback should return the actual fields set, which
 should be saved into the session storage.

 For example:

   function ($session) {
       return [
           'user_id' => Yii::$app->user->id,
           'ip' => $_SERVER['REMOTE_ADDR'],
           'is_trusted' => $session->get('is_trusted', false),
       ];
   }



$useCustomStorage			*yii/web/MultiFieldSession::$useCustomStorage*

 (bool) Whether to use custom storage.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/web/Session::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/web/Session::open|
 |yii/web/Session::registerSessionHandler|
 |yii/web/Session::close|
 |yii/web/Session::destroy|
 |yii/web/Session::getIsActive|
 |yii/web/Session::getHasSessionId|
 |yii/web/Session::setHasSessionId|
 |yii/web/Session::getId|
 |yii/web/Session::setId|
 |yii/web/Session::regenerateID|
 |yii/web/Session::getName|
 |yii/web/Session::setName|
 |yii/web/Session::getSavePath|
 |yii/web/Session::setSavePath|
 |yii/web/Session::getCookieParams|
 |yii/web/Session::setCookieParams|
 |yii/web/Session::getUseCookies|
 |yii/web/Session::setUseCookies|
 |yii/web/Session::getGCProbability|
 |yii/web/Session::setGCProbability|
 |yii/web/Session::getUseTransparentSessionID|
 |yii/web/Session::setUseTransparentSessionID|
 |yii/web/Session::getTimeout|
 |yii/web/Session::setTimeout|
 |yii/web/Session::openSession|
 |yii/web/Session::closeSession|
 |yii/web/Session::readSession|
 |yii/web/Session::writeSession|
 |yii/web/Session::destroySession|
 |yii/web/Session::gcSession|
 |yii/web/Session::getIterator|
 |yii/web/Session::getCount|
 |yii/web/Session::count|
 |yii/web/Session::get|
 |yii/web/Session::set|
 |yii/web/Session::remove|
 |yii/web/Session::removeAll|
 |yii/web/Session::has|
 |yii/web/Session::updateFlashCounters|
 |yii/web/Session::getFlash|
 |yii/web/Session::getAllFlashes|
 |yii/web/Session::setFlash|
 |yii/web/Session::addFlash|
 |yii/web/Session::removeFlash|
 |yii/web/Session::removeAllFlashes|
 |yii/web/Session::hasFlash|
 |yii/web/Session::offsetExists|
 |yii/web/Session::offsetGet|
 |yii/web/Session::offsetSet|
 |yii/web/Session::offsetUnset|
 |yii/web/Session::freeze|
 |yii/web/Session::unfreeze|
 |yii/web/Session::setCacheLimiter|
 |yii/web/Session::getCacheLimiter|


*yii/web/MultiFieldSession::getUseCustomStorage*		public
>
 getUseCustomStorage()
<
return (bool) Whether to use custom storage.

 Returns a value indicating whether to use custom session storage.

 This method overrides the parent implementation and always returns true.


*yii/web/MultiFieldSession::composeFields*		protected
>
 composeFields($id='null', $data='null')
<
return (array) Storage fields

 Composes storage field set for session writing.

    [$id] (string) Optional session id
    [$data] (string) Optional session data


*yii/web/MultiFieldSession::extractData*			protected
>
 extractData($fields)
<
return (string) Session data.

 Extracts session data from storage field set.

    [$fields] (array) Storage fields.



 vim:tw=78:ts=8:ft=help:norl:
