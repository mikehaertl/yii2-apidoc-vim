
*yii/mongodb/Session*   >> |yii/web/MultiFieldSession|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 By default, Session stores session data in a collection named 'session'
 inside the default database. This collection is better to be pre-created with
 fields 'id' and 'expire' indexed. The collection name can be changed by
 setting 'sessionCollection'.

 The following example shows how you can configure the application to use
 Session: Add the following to your application config under 'components':

   'session' => [
       'class' => 'yii\mongodb\Session',
       // 'db' => 'mymongodb',
       // 'sessionCollection' => 'my_session',
   ]

 Session extends 'MultiFieldSession', thus it allows saving extra fields into
 the 'sessionCollection'. Refer to 'MultiFieldSession' for more details.

 Tip: you can use MongoDB [TTL
 index](https://docs.mongodb.com/manual/tutorial/expire-data/) for the session
 garbage collection for performance saving, in this case you should set
 'Session::gCProbability' to '0'.


PROPERTY DETAILS
------------------------------------------------------------------------------


$db					*yii/mongodb/Session::$db*

 (\yii\mongodb\Connection|array|string) The MongoDB connection object or the
 application component ID of the MongoDB connection. After the Session object
 is created, if you want to change this property, you should only assign it
 with a MongoDB connection object. Starting from version 2.0.2, this can also
 be a configuration array for creating the object.

$sessionCollection			*yii/mongodb/Session::$sessionCollection*

 (string|array) The name of the MongoDB collection that stores the session
 data. Please refer to 'Connection::getCollection()' on how to specify this
 parameter. This collection is better to be pre-created with fields 'id' and
 'expire' indexed.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/mongodb/Session::init*				public
>
 init()
<
return (void)

 Initializes the Session component.

 This method will initialize the 'db' property to make sure it refers to a
 valid MongoDB connection.


*yii/mongodb/Session::regenerateID*			public
>
 regenerateID($deleteOldSession='false')
<
return (void)

 Updates the current session ID with a newly generated one.

 Please refer to <http://php.net/session_regenerate_id> for more details.

    [$deleteOldSession] (bool) Whether to delete the old associated session
    file or not.


*yii/mongodb/Session::readSession*			public
>
 readSession($id)
<
return (string) The session data

 Session read handler.

 Do not call this method directly.

    [$id] (string) Session ID


*yii/mongodb/Session::writeSession*			public
>
 writeSession($id, $data)
<
return (bool) Whether session write is successful

 Session write handler.

 Do not call this method directly.

    [$id] (string) Session ID
    [$data] (string) Session data


*yii/mongodb/Session::destroySession*			public
>
 destroySession($id)
<
return (bool) Whether session is destroyed successfully

 Session destroy handler.

 Do not call this method directly.

    [$id] (string) Session ID


*yii/mongodb/Session::gcSession*				public
>
 gcSession($maxLifetime)
<
return (bool) Whether session is GCed successfully

 Session GC (garbage collection) handler.

 Do not call this method directly.

    [$maxLifetime] (int) The number of seconds after which data will be seen
    as 'garbage' and cleaned up.



 vim:tw=78:ts=8:ft=help:norl:
