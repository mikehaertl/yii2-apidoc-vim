
*yii/widgets/ActiveForm*   >> |yii/base/Widget|
========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/bootstrap/ActiveForm|


PROPERTY DETAILS
------------------------------------------------------------------------------

$counter				*yii/widgets/ActiveForm::$counter*

 See |yii/base/Widget::$counter|

$autoIdPrefix				*yii/widgets/ActiveForm::$autoIdPrefix*

 See |yii/base/Widget::$autoIdPrefix|

$stack					*yii/widgets/ActiveForm::$stack*

 See |yii/base/Widget::$stack|

$action					*yii/widgets/ActiveForm::$action*

 (array|string) The form action URL. This parameter will be processed by
 '\yii\helpers\Url::to()'.

$method					*yii/widgets/ActiveForm::$method*

 (string) The form submission method. This should be either 'post' or 'get'.
 Defaults to 'post'.

 When you set this to 'get' you may see the url parameters repeated on each
 request. This is because the default value of 'action' is set to be the
 current request url and each submit will add new parameters instead of
 replacing existing ones. You may set 'action' explicitly to avoid this:

   $form = ActiveForm::begin([
       'method' => 'get',
       'action' => ['controller/action'],
   ]);



$options				*yii/widgets/ActiveForm::$options*

 (array) The HTML attributes (name-value pairs) for the form tag.

$fieldClass				*yii/widgets/ActiveForm::$fieldClass*

 (string) The default field class name when calling 'field()' to create a new
 field.

$fieldConfig				*yii/widgets/ActiveForm::$fieldConfig*

 (array|\Closure) The default configuration used by 'field()' when creating a
 new field object. This can be either a configuration array or an anonymous
 function returning a configuration array. If the latter, the signature should
 be as follows:

   function ($model, $attribute)

 The value of this property will be merged recursively with the '$options'
 parameter passed to 'field()'.

$encodeErrorSummary			*yii/widgets/ActiveForm::$encodeErrorSummary*

 (boolean) Whether to perform encoding on the error summary.

$errorSummaryCssClass			*yii/widgets/ActiveForm::$errorSummaryCssClass*

 (string) The default CSS class for the error summary container.

$requiredCssClass			*yii/widgets/ActiveForm::$requiredCssClass*

 (string) The CSS class that is added to a field container when the associated
 attribute is required.

$errorCssClass				*yii/widgets/ActiveForm::$errorCssClass*

 (string) The CSS class that is added to a field container when the associated
 attribute has validation error.

$successCssClass			*yii/widgets/ActiveForm::$successCssClass*

 (string) The CSS class that is added to a field container when the associated
 attribute is successfully validated.

$validatingCssClass			*yii/widgets/ActiveForm::$validatingCssClass*

 (string) The CSS class that is added to a field container when the associated
 attribute is being validated.

$enableClientValidation			*yii/widgets/ActiveForm::$enableClientValidation*

 (boolean) Whether to enable client-side data validation. If
 'ActiveField::enableClientValidation' is set, its value will take precedence
 for that input field.

$enableAjaxValidation			*yii/widgets/ActiveForm::$enableAjaxValidation*

 (boolean) Whether to enable AJAX-based data validation. If
 'ActiveField::enableAjaxValidation' is set, its value will take precedence
 for that input field.

$enableClientScript			*yii/widgets/ActiveForm::$enableClientScript*

 (boolean) Whether to hook up 'yii.activeForm' JavaScript plugin. This
 property must be set 'true' if you want to support client validation and/or
 AJAX validation, or if you want to take advantage of the 'yii.activeForm'
 plugin. When this is 'false', the form will not generate any JavaScript.

$validationUrl				*yii/widgets/ActiveForm::$validationUrl*

 (array|string) The URL for performing AJAX-based validation. This property
 will be processed by 'Url::to()'. Please refer to 'Url::to()' for more
 details on how to configure this property. If this property is not set, it
 will take the value of the form's action attribute.

$validateOnSubmit			*yii/widgets/ActiveForm::$validateOnSubmit*

 (boolean) Whether to perform validation when the form is submitted.

$validateOnChange			*yii/widgets/ActiveForm::$validateOnChange*

 (boolean) Whether to perform validation when the value of an input field is
 changed. If 'ActiveField::validateOnChange' is set, its value will take
 precedence for that input field.

$validateOnBlur				*yii/widgets/ActiveForm::$validateOnBlur*

 (boolean) Whether to perform validation when an input field loses focus. If
 'ActiveField::$validateOnBlur' is set, its value will take precedence for
 that input field.

$validateOnType				*yii/widgets/ActiveForm::$validateOnType*

 (boolean) Whether to perform validation while the user is typing in an input
 field. If 'ActiveField::validateOnType' is set, its value will take
 precedence for that input field.

$validationDelay			*yii/widgets/ActiveForm::$validationDelay*

 (integer) Number of milliseconds that the validation should be delayed when
 the user types in the field and 'validateOnType' is set 'true'. If
 'ActiveField::validationDelay' is set, its value will take precedence for
 that input field.

$ajaxParam				*yii/widgets/ActiveForm::$ajaxParam*

 (string) The name of the GET parameter indicating the validation request is
 an AJAX request.

$ajaxDataType				*yii/widgets/ActiveForm::$ajaxDataType*

 (string) The type of data that you're expecting back from the server.

$scrollToError				*yii/widgets/ActiveForm::$scrollToError*

 (boolean) Whether to scroll to the first error after validation.

$attributes				*yii/widgets/ActiveForm::$attributes*

 (array) The client validation options for individual attributes. Each element
 of the array represents the validation options for a particular attribute.

$behaviors				*yii/widgets/ActiveForm::$behaviors*

 See |yii/base/Component::$behaviors|

$id					*yii/widgets/ActiveForm::$id*

 See |yii/base/Widget::$id|

$view					*yii/widgets/ActiveForm::$view*

 See |yii/base/Widget::$view|

$viewPath				*yii/widgets/ActiveForm::$viewPath*

 See |yii/base/Widget::$viewPath|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/widgets/ActiveForm::className*			public

 See |yii/base/Object::className|


*yii/widgets/ActiveForm::__construct*			public

 See |yii/base/Object::__construct|


*yii/widgets/ActiveForm::init*				public
>
 init()
<
return (void)

 This renders the form open tag.


*yii/widgets/ActiveForm::__get*				public

 See |yii/base/Component::__get|


*yii/widgets/ActiveForm::__set*				public

 See |yii/base/Component::__set|


*yii/widgets/ActiveForm::__isset*				public

 See |yii/base/Component::__isset|


*yii/widgets/ActiveForm::__unset*				public

 See |yii/base/Component::__unset|


*yii/widgets/ActiveForm::__call*				public

 See |yii/base/Component::__call|


*yii/widgets/ActiveForm::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/widgets/ActiveForm::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/widgets/ActiveForm::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/widgets/ActiveForm::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/widgets/ActiveForm::__clone*				public

 See |yii/base/Component::__clone|


*yii/widgets/ActiveForm::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/widgets/ActiveForm::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/widgets/ActiveForm::on*				public

 See |yii/base/Component::on|


*yii/widgets/ActiveForm::off*				public

 See |yii/base/Component::off|


*yii/widgets/ActiveForm::trigger*				public

 See |yii/base/Component::trigger|


*yii/widgets/ActiveForm::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/widgets/ActiveForm::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/widgets/ActiveForm::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/widgets/ActiveForm::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/widgets/ActiveForm::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/widgets/ActiveForm::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/widgets/ActiveForm::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/widgets/ActiveForm::begin*				public

 See |yii/base/Widget::begin|


*yii/widgets/ActiveForm::end*				public

 See |yii/base/Widget::end|


*yii/widgets/ActiveForm::widget*				public

 See |yii/base/Widget::widget|


*yii/widgets/ActiveForm::getId*				public

 See |yii/base/Widget::getId|


*yii/widgets/ActiveForm::setId*				public

 See |yii/base/Widget::setId|


*yii/widgets/ActiveForm::getView*				public

 See |yii/base/Widget::getView|


*yii/widgets/ActiveForm::setView*				public

 See |yii/base/Widget::setView|


*yii/widgets/ActiveForm::run*				public
>
 run()
<
return (void)

 This registers the necessary JavaScript code and renders the form close tag.


*yii/widgets/ActiveForm::render*				public

 See |yii/base/Widget::render|


*yii/widgets/ActiveForm::renderFile*			public

 See |yii/base/Widget::renderFile|


*yii/widgets/ActiveForm::getViewPath*			public

 See |yii/base/Widget::getViewPath|


*yii/widgets/ActiveForm::getClientOptions*		protected
>
 getClientOptions()
<
return (array) The options.



*yii/widgets/ActiveForm::errorSummary*			public
>
 errorSummary($models, $options='[]')
<
return (string) The generated error summary.

 If there is no validation error, an empty error summary markup will still be
 generated, but it will be hidden.

    [$models] (\yii\base\Model|\yii\base\Model[]) The model(s) associated with
    this form.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - 'header': string, the header HTML for the error summary. If not
      set, a default prompt string will be used. 
      - 'footer': string, the footer HTML for the error summary.

    The rest of the options will be rendered as the attributes of the
    container tag. The values will be HTML-encoded using
    '\yii\helpers\Html::encode()'. If a value is 'null', the corresponding
    attribute will not be rendered.


*yii/widgets/ActiveForm::field*				public
>
 field($model, $attribute, $options='[]')
<
return (\yii\widgets\ActiveField) The created ActiveField object.

 A form field is associated with a model and an attribute. It contains a
 label, an input and an error message and use them to interact with end users
 to collect their inputs for the attribute.

    [$model] (\yii\base\Model) The data model.
    [$attribute] (string) The attribute name or expression. See
    'Html::getAttributeName()' for the format about attribute expression.
    [$options] (array) The additional configurations for the field object.
    These are properties of 'ActiveField' or a subclass, depending on the
    value of 'fieldClass'.


*yii/widgets/ActiveForm::beginField*			public
>
 beginField($model, $attribute, $options='[]')
<
return (string) The opening tag.

 This method will create a new form field and returns its opening tag. You
 should call 'endField()' afterwards.

    [$model] (\yii\base\Model) The data model.
    [$attribute] (string) The attribute name or expression. See
    'Html::getAttributeName()' for the format about attribute expression.
    [$options] (array) The additional configurations for the field object.


*yii/widgets/ActiveForm::endField*			public
>
 endField()
<
return (string) The closing tag of the form field.

 This method will return the closing tag of an active form field started by
 'beginField()'.


*yii/widgets/ActiveForm::validate*			public
>
 validate($model, $attributes='null')
<
return (array) The error message array indexed by the attribute IDs.

 This is a helper method that simplifies the way of writing AJAX validation
 code.

 For example, you may use the following code in a controller action to respond
 to an AJAX validation request:

   $model = new Post;
   $model->load(Yii::$app->request->post());
   if (Yii::$app->request->isAjax) {
       Yii::$app->response->format = Response::FORMAT_JSON;
       return ActiveForm::validate($model);
   }
   // ... respond to non-AJAX request ...

 To validate multiple models, simply pass each model as a parameter to this
 method, like the following:

   ActiveForm::validate($model1, $model2, ...);



    [$model] (\yii\base\Model) The model to be validated.
    [$attributes] (mixed) List of attributes that should be validated. If this
    parameter is empty, it means any attribute listed in the applicable
    validation rules should be validated.

    When this method is used to validate multiple models, this parameter will
    be interpreted as a model.


*yii/widgets/ActiveForm::validateMultiple*		public
>
 validateMultiple($models, $attributes='null')
<
return (array) The error message array indexed by the attribute IDs.

 This is a helper method that simplifies the way of writing AJAX validation
 code for tabular input.

 For example, you may use the following code in a controller action to respond
 to an AJAX validation request:

   // ... load $models ...
   if (Yii::$app->request->isAjax) {
       Yii::$app->response->format = Response::FORMAT_JSON;
       return ActiveForm::validateMultiple($models);
   }
   // ... respond to non-AJAX request ...



    [$models] (array) An array of models to be validated.
    [$attributes] (mixed) List of attributes that should be validated. If this
    parameter is empty, it means any attribute listed in the applicable
    validation rules should be validated.



 vim:tw=78:ts=8:ft=help:norl:
