
*yii/debug/Module*   >> |yii/base/Module|
==================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Module::$params|
 |yii/base/Module::$id|
 |yii/base/Module::$module|
 |yii/base/Module::$layout|
 |yii/base/Module::$controllerMap|
 |yii/base/Module::$defaultRoute|
 |yii/base/Component::$behaviors|
 |yii/di/ServiceLocator::$components|
 |yii/base/Module::$uniqueId|
 |yii/base/Module::$basePath|
 |yii/base/Module::$controllerPath|
 |yii/base/Module::$viewPath|
 |yii/base/Module::$layoutPath|
 |yii/base/Module::$version|
 |yii/base/Module::$aliases|
 |yii/base/Module::$modules|


$controllerNamespace			*yii/debug/Module::$controllerNamespace*

 (string) 

 The namespace that controller classes are in. This namespace will be used to
 load controller classes by prepending it to the controller class name.

 If not set, it will use the 'controllers' sub-namespace under the namespace
 of this module. For example, if the namespace of this module is 'foo\bar',
 then the default controller namespace would be 'foo\bar\controllers'.

 See also the [guide section on autoloading](guide:concept-autoloading) to
 learn more about defining namespaces and how classes are loaded.



$allowedIPs				*yii/debug/Module::$allowedIPs*

 (array) The list of IPs that are allowed to access this module. Each array
 element represents a single IP filter which can be either an IP address or an
 address with wildcard (e.g. 192.168.0.*) to represent a network segment. The
 default value is '['127.0.0.1', '::1']', which means the module can only be
 accessed by localhost.

$allowedHosts				*yii/debug/Module::$allowedHosts*

 (array) The list of hosts that are allowed to access this module. Each array
 element is a hostname that will be resolved to an IP address that is compared
 with the IP address of the user. A use case is to use a dynamic DNS (DDNS) to
 allow access. The default value is '[]'.

$checkAccessCallback			*yii/debug/Module::$checkAccessCallback*

 (callable) A valid PHP callback that returns true if user is allowed to use
 web shell and false otherwise

 The signature is the following:

 function (Action|null $action) The action can be null when called from a non
 action context (like set debug header)

$logTarget				*yii/debug/Module::$logTarget*

 (\yii\debug\LogTarget)

$panels					*yii/debug/Module::$panels*

 (array|\yii\debug\Panel[]) List of debug panels. The array keys are the panel
 IDs, and values are the corresponding panel class names or configuration
 arrays. This will be merged with 'corePanels()'. You may reconfigure a core
 panel via this property by using the same panel ID. You may also disable a
 core panel by setting it to be false in this property.

$defaultPanel				*yii/debug/Module::$defaultPanel*

 (string) The name of the panel that should be visible when opening the debug
 panel. The default value is 'log'.

$dataPath				*yii/debug/Module::$dataPath*

 (string) The directory storing the debugger data files. This can be specified
 using a path alias.

$fileMode				*yii/debug/Module::$fileMode*

 (int) The permission to be set for newly created debugger data files. This
 value will be used by PHP 'chmod()' function. No umask will be applied. If
 not set, the permission will be determined by the current environment.

$dirMode				*yii/debug/Module::$dirMode*

 (int) The permission to be set for newly created directories. This value will
 be used by PHP 'chmod()' function. No umask will be applied. Defaults to
 0775, meaning the directory is read-writable by owner and group, but
 read-only for other users.

$historySize				*yii/debug/Module::$historySize*

 (int) The maximum number of debug data files to keep. If there are more files
 generated, the oldest ones will be removed.

$enableDebugLogs			*yii/debug/Module::$enableDebugLogs*

 (bool) Whether to enable message logging for the requests about debug module
 actions. You normally do not want to keep these logs because they may
 distract you from the logs about your applications. You may want to enable
 the debug logs if you want to investigate how the debug module itself works.

$disableIpRestrictionWarning		*yii/debug/Module::$disableIpRestrictionWarning*

 (bool) Whether to disable IP address restriction warning triggered by
 checkAccess function

$disableCallbackRestrictionWarning	*yii/debug/Module::$disableCallbackRestrictionWarning*

 (bool) Whether to disable access callback restriction warning triggered by
 checkAccess function

$traceLine				*yii/debug/Module::$traceLine*

 (mixed) The string with placeholders to be be substituted or an anonymous
 function that returns the trace line string. The placeholders are {file},
 {line} and {text} and the string should be as follows:

 'File: {file} 
   - Line: {line} - Text: {text}'

 The signature of the anonymous function should be as follows:

   function($trace, $panel) {
       // compute line string
       return $line;
   }



$debugHeaders				*yii/debug/Module::$debugHeaders*

 (\yii\base\Event)

$toolbarHtml				*yii/debug/Module::$toolbarHtml*

 ()



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Module::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Module::has|
 |yii/base/Module::get|
 |yii/di/ServiceLocator::set|
 |yii/di/ServiceLocator::clear|
 |yii/di/ServiceLocator::getComponents|
 |yii/di/ServiceLocator::setComponents|
 |yii/base/Module::getInstance|
 |yii/base/Module::setInstance|
 |yii/base/Module::getUniqueId|
 |yii/base/Module::getBasePath|
 |yii/base/Module::setBasePath|
 |yii/base/Module::getControllerPath|
 |yii/base/Module::getViewPath|
 |yii/base/Module::setViewPath|
 |yii/base/Module::getLayoutPath|
 |yii/base/Module::setLayoutPath|
 |yii/base/Module::getVersion|
 |yii/base/Module::setVersion|
 |yii/base/Module::setAliases|
 |yii/base/Module::hasModule|
 |yii/base/Module::getModule|
 |yii/base/Module::setModule|
 |yii/base/Module::getModules|
 |yii/base/Module::setModules|
 |yii/base/Module::runAction|
 |yii/base/Module::createController|
 |yii/base/Module::createControllerByID|
 |yii/base/Module::afterAction|


*yii/debug/Module::init*					public
>
 init()
<
return (void)

 Initializes the module.



 This method is called after the module is created and initialized with
 property values given in configuration. The default implementation will
 initialize 'controllerNamespace' if it is not set.

 If you override this method, please make sure you call the parent
 implementation.




*yii/debug/Module::defaultVersion*			protected
>
 defaultVersion()
<
return (string) The version of this module.

 Returns default module version.



 Child class may override this method to provide more specific version
 detection.




*yii/debug/Module::beforeAction*				public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to be executed.

 This method is invoked right before an action within this module is executed.



 The method will trigger the 'EVENT_BEFORE_ACTION' event. The return value of
 the method will determine whether the action should continue to run.

 In case the action should not run, the request should be handled inside of
 the 'beforeAction' code by either providing the necessary output or
 redirecting the request. Otherwise the response will be empty.

 If you override this method, your code should look like the following:

   public function beforeAction($action)
   {
       if (!parent::beforeAction($action)) {
           return false;
       }

       // your custom code here

       return true; // or false to not run the action
   }



    [$action] (\yii\base\Action) The action to be executed.


*yii/debug/Module::getYiiLogo*				public
>
 getYiiLogo()
<
return (string) The logo URL

 Returns the logo URL to be used in '<img src="'


*yii/debug/Module::setYiiLogo*				public
>
 setYiiLogo($logo)
<
return (void)

 Sets the logo URL to be used in '<img src="'

    [$logo] (string) The logo URL


*yii/debug/Module::initPanels*				protected
>
 initPanels()
<
return (void)

 Initializes panels.


*yii/debug/Module::bootstrap*				public
>
 bootstrap($app)
<
return (void)

 Bootstrap method to be called during application bootstrap stage.







    [$app] (\yii\base\Application) The application currently running


*yii/debug/Module::setDebugHeaders*			public
>
 setDebugHeaders($event)
<
return (void)

 Setting headers to transfer debug data in AJAX requests without interfering
 with the request itself.

    [$event] (\yii\base\Event) 


*yii/debug/Module::resetGlobalSettings*			protected
>
 resetGlobalSettings()
<
return (void)

 Resets potentially incompatible global settings done in app config.


*yii/debug/Module::getToolbarHtml*			public
>
 getToolbarHtml()
<
return (void)

 Gets toolbar HTML


*yii/debug/Module::renderToolbar*				public
>
 renderToolbar($event)
<
return (void)

 Renders mini-toolbar at the end of page body.

    [$event] (\yii\base\Event) 


*yii/debug/Module::checkAccess*				protected
>
 checkAccess($action='null')
<
return (bool) If access is granted

 Checks if current user is allowed to access the module

    [$action] (\yii\base\Action|null) The action to be executed. May be 'null'
    when called from a non action context


*yii/debug/Module::corePanels*				protected
>
 corePanels()
<
return (array) Default set of panels




 vim:tw=78:ts=8:ft=help:norl:
