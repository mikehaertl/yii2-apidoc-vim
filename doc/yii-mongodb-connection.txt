
*yii/mongodb/Connection*   >> |yii/base/Component|
========================

DESCRIPTION
------------------------------------------------------------------------------

 Connection works together with 'Database' and 'Collection' to provide data
 access to the Mongo database. They are wrappers of the 'MongoDB PHP
 extension'(http://us1.php.net/manual/en/book.mongo.php).

 To establish a DB connection, set 'dsn' and then call 'open()' to be true.

 The following example shows how to create a Connection instance and establish
 the DB connection:

   $connection = new \yii\mongodb\Connection([
       'dsn' => $dsn,
   ]);
   $connection->open();

 After the Mongo connection is established, one can access Mongo databases and
 collections:

   $database = $connection->getDatabase('my_mongo_db');
   $collection = $database->getCollection('customer');
   $collection->insert(['name' => 'John Smith', 'status' => 1]);

 You can work with several different databases at the same server using this
 class. However, while it is unlikely your application will actually need it,
 the Connection class provides ability to use 'defaultDatabaseName' as well as
 a shortcut method 'getCollection()' to retrieve a particular collection
 instance:

   // get collection 'customer' from default database:
   $collection = $connection->getCollection('customer');
   // get collection 'customer' from database 'mydatabase':
   $collection = $connection->getCollection(['mydatabase', 'customer']);

 Connection is often used as an application component and configured in the
 application configuration like the following:

   [
        'components' => [
            'mongodb' => [
                'class' => '\yii\mongodb\Connection',
                'dsn' =>
 'mongodb://developer:password@localhost:27017/mydatabase',
            ],
        ],
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|


$dsn					*yii/mongodb/Connection::$dsn*

 (string) Host:port

 Correct syntax is:
 mongodb://[username:password@]host1[:port1][,host2[:port2:],...][/dbname] For
 example: mongodb://localhost:27017
 mongodb://developer:password@localhost:27017
 mongodb://developer:password@localhost:27017/mydatabase

$options				*yii/mongodb/Connection::$options*

 (array) Connection options. For example:

   [
       'socketTimeoutMS' => 1000, // how long a send or receive on a socket
 can take before timing out
       'ssl' => true // initiate the connection with TLS/SSL
   ]



$driverOptions				*yii/mongodb/Connection::$driverOptions*

 (array) Options for the MongoDB driver. Any driver-specific options not
 included in MongoDB connection string specification.

$manager				*yii/mongodb/Connection::$manager*

 (\MongoDB\Driver\Manager) MongoDB driver manager.

$typeMap				*yii/mongodb/Connection::$typeMap*

 (array) Type map to use for BSON unserialization. Note: default type map will
 be automatically merged into this field, possibly overriding user-defined
 values.

$enableLogging				*yii/mongodb/Connection::$enableLogging*

 (bool) Whether to log command and query executions. When enabled this option
 may reduce performance. MongoDB commands may contain large data, consuming
 both CPU and memory. It makes sense to disable this option in the production
 environment.

$enableProfiling			*yii/mongodb/Connection::$enableProfiling*

 (bool) Whether to enable profiling the commands and queries being executed.
 This option will have no effect in case 'enableLogging' is disabled.

$fileStreamProtocol			*yii/mongodb/Connection::$fileStreamProtocol*

 (string) Name of the protocol, which should be used for the GridFS stream
 wrapper. Only alphanumeric values are allowed: do not use any URL special
 characters, such as '/', '&', ':' etc.

$fileStreamWrapperClass			*yii/mongodb/Connection::$fileStreamWrapperClass*

 (string) Name of the class, which should serve as a stream wrapper for
 'fileStreamProtocol' protocol.

$defaultDatabaseName			*yii/mongodb/Connection::$defaultDatabaseName*

 (string) Default database name.

$queryBuilder				*yii/mongodb/Connection::$queryBuilder*

 (\yii\mongodb\QueryBuilder) The query builder for the this MongoDB
 connection.

$logBuilder				*yii/mongodb/Connection::$logBuilder*

 (\yii\mongodb\LogBuilder) The log builder for this connection.

$database				*yii/mongodb/Connection::$database*

 (\yii\mongodb\Database) Database instance.

$fileCollection				*yii/mongodb/Connection::$fileCollection*

 (\yii\mongodb\file\Collection) Mongo GridFS collection instance.

$isActive				*yii/mongodb/Connection::$isActive*

 (bool) Whether the Mongo connection is established



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/mongodb/Connection::setDefaultDatabaseName*		public
>
 setDefaultDatabaseName($name)
<
return (void)

 Sets default database name.

    [$name] (string) Default database name.


*yii/mongodb/Connection::getDefaultDatabaseName*		public
>
 getDefaultDatabaseName()
<
return (string) Default database name

 Returns default database name, if it is not set, attempts to determine it
 from 'dsn' value.


*yii/mongodb/Connection::getQueryBuilder*			public
>
 getQueryBuilder()
<
return (\yii\mongodb\QueryBuilder) The query builder for the this MongoDB connection.

 Returns the query builder for the this MongoDB connection.


*yii/mongodb/Connection::setQueryBuilder*			public
>
 setQueryBuilder($queryBuilder)
<
return (void)

 Sets the query builder for the this MongoDB connection.

    [$queryBuilder] (\yii\mongodb\QueryBuilder|array|string|null) The query
    builder for this MongoDB connection.


*yii/mongodb/Connection::getLogBuilder*			public
>
 getLogBuilder()
<
return (\yii\mongodb\LogBuilder) The log builder for this connection.

 Returns log builder for this connection.


*yii/mongodb/Connection::setLogBuilder*			public
>
 setLogBuilder($logBuilder)
<
return (void)

 Sets log builder used for this connection.

    [$logBuilder] (array|string|\yii\mongodb\LogBuilder) The log builder for
    this connection.


*yii/mongodb/Connection::getDatabase*			public
>
 getDatabase($name='null', $refresh='false')
<
return (\yii\mongodb\Database) Database instance.

 Returns the MongoDB database with the given name.

    [$name] (string|null) Database name, if null default one will be used.
    [$refresh] (bool) Whether to reestablish the database connection even, if
    it is found in the cache.


*yii/mongodb/Connection::selectDatabase*			protected
>
 selectDatabase($name)
<
return (\yii\mongodb\Database) Database instance.

 Selects the database with given name.

    [$name] (string) Database name.


*yii/mongodb/Connection::getCollection*			public
>
 getCollection($name, $refresh='false')
<
return (\yii\mongodb\Collection) Mongo collection instance.

 Returns the MongoDB collection with the given name.

    [$name] (string|array) Collection name. If string considered as the name
    of the collection inside the default database. If array 
      - first element considered as the name of the database, second 
      - as name of collection inside that database
    [$refresh] (bool) Whether to reload the collection instance even if it is
    found in the cache.


*yii/mongodb/Connection::getFileCollection*		public
>
 getFileCollection($prefix='\'fs\'', $refresh='false')
<
return (\yii\mongodb\file\Collection) Mongo GridFS collection instance.

 Returns the MongoDB GridFS collection.

    [$prefix] (string|array) Collection prefix. If string considered as the
    prefix of the GridFS collection inside the default database. If array 
      - first element considered as the name of the database, second 
      - as prefix of the GridFS collection inside that database, if no
      second element present default "fs" prefix will be used.
    [$refresh] (bool) Whether to reload the collection instance even if it is
    found in the cache.


*yii/mongodb/Connection::getIsActive*			public
>
 getIsActive()
<
return (bool) Whether the Mongo connection is established

 Returns a value indicating whether the Mongo connection is established.


*yii/mongodb/Connection::open*				public
>
 open()
<
return (void)

 Establishes a Mongo connection.

 It does nothing if a MongoDB connection has already been established.


*yii/mongodb/Connection::close*				public
>
 close()
<
return (void)

 Closes the currently active DB connection.

 It does nothing if the connection is already closed.


*yii/mongodb/Connection::initConnection*			protected
>
 initConnection()
<
return (void)

 Initializes the DB connection.

 This method is invoked right after the DB connection is established. The
 default implementation triggers an 'EVENT_AFTER_OPEN' event.


*yii/mongodb/Connection::createCommand*			public
>
 createCommand($document='[]', $databaseName='null')
<
return (\yii\mongodb\Command) Command instance.

 Creates MongoDB command.

    [$document] (array) Command document contents.
    [$databaseName] (string|null) Database name, if not set
    'defaultDatabaseName' will be used.


*yii/mongodb/Connection::registerFileStreamWrapper*	public
>
 registerFileStreamWrapper($force='false')
<
return (string) Registered stream protocol name.

 Registers GridFS stream wrapper for the 'fileStreamProtocol' protocol.

    [$force] (bool) Whether to enforce registration even wrapper has been
    already registered.



 vim:tw=78:ts=8:ft=help:norl:
