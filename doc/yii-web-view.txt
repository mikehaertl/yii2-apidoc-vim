
*yii/web/View*   >> |yii/base/View|
==============

DESCRIPTION
------------------------------------------------------------------------------

 View provides a set of methods (e.g. 'render()') for rendering purpose.

 View is configured as an application component in '\yii\base\Application' by
 default. You can access that instance via 'Yii::$app->view'.

 You can modify its configuration by adding an array to your application
 config under 'components' as it is shown in the following example:

   'view' => [
       'theme' => 'app\themes\MyTheme',
       'renderers' => [
           // you may add Smarty or Twig renderer here
       ]
       // ...
   ]

 For more details and usage information on View, see the [guide article on
 views](guide:structure-views).


PROPERTY DETAILS
------------------------------------------------------------------------------

$context				*yii/web/View::$context*

 See |yii/base/View::$context|

$params					*yii/web/View::$params*

 See |yii/base/View::$params|

$renderers				*yii/web/View::$renderers*

 See |yii/base/View::$renderers|

$defaultExtension			*yii/web/View::$defaultExtension*

 See |yii/base/View::$defaultExtension|

$theme					*yii/web/View::$theme*

 See |yii/base/View::$theme|

$blocks					*yii/web/View::$blocks*

 See |yii/base/View::$blocks|

$cacheStack				*yii/web/View::$cacheStack*

 See |yii/base/View::$cacheStack|

$dynamicPlaceholders			*yii/web/View::$dynamicPlaceholders*

 See |yii/base/View::$dynamicPlaceholders|

$assetBundles				*yii/web/View::$assetBundles*

 (\yii\web\AssetBundle[]) List of the registered asset bundles. The keys are
 the bundle names, and the values are the registered 'AssetBundle' objects.

$title					*yii/web/View::$title*

 (string) The page title

$metaTags				*yii/web/View::$metaTags*

 (array) The registered meta tags.

$linkTags				*yii/web/View::$linkTags*

 (array) The registered link tags.

$css					*yii/web/View::$css*

 (array) The registered CSS code blocks.

$cssFiles				*yii/web/View::$cssFiles*

 (array) The registered CSS files.

$js					*yii/web/View::$js*

 (array) The registered JS code blocks

$jsFiles				*yii/web/View::$jsFiles*

 (array) The registered JS files.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/web/View::className*					public

 See |yii/base/BaseObject::className|


*yii/web/View::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/web/View::init*					public

 See |yii/base/View::init|


*yii/web/View::__get*					public

 See |yii/base/Component::__get|


*yii/web/View::__set*					public

 See |yii/base/Component::__set|


*yii/web/View::__isset*					public

 See |yii/base/Component::__isset|


*yii/web/View::__unset*					public

 See |yii/base/Component::__unset|


*yii/web/View::__call*					public

 See |yii/base/Component::__call|


*yii/web/View::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/web/View::canGetProperty*				public

 See |yii/base/Component::canGetProperty|


*yii/web/View::canSetProperty*				public

 See |yii/base/Component::canSetProperty|


*yii/web/View::hasMethod*					public

 See |yii/base/Component::hasMethod|


*yii/web/View::__clone*					public

 See |yii/base/Component::__clone|


*yii/web/View::behaviors*					public

 See |yii/base/Component::behaviors|


*yii/web/View::hasEventHandlers*				public

 See |yii/base/Component::hasEventHandlers|


*yii/web/View::on*					public

 See |yii/base/Component::on|


*yii/web/View::off*					public

 See |yii/base/Component::off|


*yii/web/View::trigger*					public

 See |yii/base/Component::trigger|


*yii/web/View::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/web/View::getBehaviors*				public

 See |yii/base/Component::getBehaviors|


*yii/web/View::attachBehavior*				public

 See |yii/base/Component::attachBehavior|


*yii/web/View::attachBehaviors*				public

 See |yii/base/Component::attachBehaviors|


*yii/web/View::detachBehavior*				public

 See |yii/base/Component::detachBehavior|


*yii/web/View::detachBehaviors*				public

 See |yii/base/Component::detachBehaviors|


*yii/web/View::ensureBehaviors*				public

 See |yii/base/Component::ensureBehaviors|


*yii/web/View::render*					public

 See |yii/base/View::render|


*yii/web/View::findViewFile*				protected

 See |yii/base/View::findViewFile|


*yii/web/View::renderFile*				public

 See |yii/base/View::renderFile|


*yii/web/View::getViewFile*				public

 See |yii/base/View::getViewFile|


*yii/web/View::beforeRender*				public

 See |yii/base/View::beforeRender|


*yii/web/View::afterRender*				public

 See |yii/base/View::afterRender|


*yii/web/View::renderPhpFile*				public

 See |yii/base/View::renderPhpFile|


*yii/web/View::renderDynamic*				public

 See |yii/base/View::renderDynamic|


*yii/web/View::addDynamicPlaceholder*			public

 See |yii/base/View::addDynamicPlaceholder|


*yii/web/View::evaluateDynamicContent*			public

 See |yii/base/View::evaluateDynamicContent|


*yii/web/View::beginBlock*				public

 See |yii/base/View::beginBlock|


*yii/web/View::endBlock*					public

 See |yii/base/View::endBlock|


*yii/web/View::beginContent*				public

 See |yii/base/View::beginContent|


*yii/web/View::endContent*				public

 See |yii/base/View::endContent|


*yii/web/View::beginCache*				public

 See |yii/base/View::beginCache|


*yii/web/View::endCache*					public

 See |yii/base/View::endCache|


*yii/web/View::beginPage*					public

 See |yii/base/View::beginPage|


*yii/web/View::endPage*					public
>
 endPage($ajaxMode='false')
<
return (void)

 Marks the ending of an HTML page.

    [$ajaxMode] (bool) Whether the view is rendering in AJAX mode. If true,
    the JS scripts registered at 'POS_READY' and 'POS_LOAD' positions will be
    rendered at the end of the view like normal scripts.


*yii/web/View::head*					public
>
 head()
<
return (void)

 Marks the position of an HTML head section.


*yii/web/View::beginBody*					public
>
 beginBody()
<
return (void)

 Marks the beginning of an HTML body section.


*yii/web/View::endBody*					public
>
 endBody()
<
return (void)

 Marks the ending of an HTML body section.


*yii/web/View::renderAjax*				public
>
 renderAjax($view, $params='[]', $context='null')
<
return (string) The rendering result

 Renders a view in response to an AJAX request.

 This method is similar to 'render()' except that it will surround the view
 being rendered with the calls of 'beginPage()', 'head()', 'beginBody()',
 'endBody()' and 'endPage()'. By doing so, the method is able to inject into
 the rendering result with JS/CSS scripts and files that are registered with
 the view.

    [$view] (string) The view name. Please refer to 'render()' on how to
    specify this parameter.
    [$params] (array) The parameters (name-value pairs) that will be extracted
    and made available in the view file.
    [$context] (object) The context that the view should use for rendering the
    view. If null, existing 'context' will be used.


*yii/web/View::getAssetManager*				public
>
 getAssetManager()
<
return (\yii\web\AssetManager) The asset manager. Defaults to the "assetManager"
application component.

 Registers the asset manager being used by this view object.


*yii/web/View::setAssetManager*				public
>
 setAssetManager($value)
<
return (void)

 Sets the asset manager.

    [$value] (\yii\web\AssetManager) The asset manager


*yii/web/View::clear*					public
>
 clear()
<
return (void)

 Clears up the registered meta tags, link tags, css/js scripts and files.


*yii/web/View::registerAssetFiles*			protected
>
 registerAssetFiles($name)
<
return (void)

 Registers all files provided by an asset bundle including depending bundles
 files.

 Removes a bundle from 'assetBundles' once files are registered.

    [$name] (string) Name of the bundle to register


*yii/web/View::registerAssetBundle*			public
>
 registerAssetBundle($name, $position='null')
<
return (\yii\web\AssetBundle) The registered asset bundle instance

 Registers the named asset bundle.

 All dependent asset bundles will be registered.

    [$name] (string) The class name of the asset bundle (without the leading
    backslash)
    [$position] (int|null) If set, this forces a minimum position for
    javascript files. This will adjust depending assets javascript file
    position or fail if requirement can not be met. If this is null, asset
    bundles position settings will not be changed. See 'registerJsFile' for
    more details on javascript position.


*yii/web/View::registerMetaTag*				public
>
 registerMetaTag($options, $key='null')
<
return (void)

 Registers a meta tag.

 For example, a description meta tag can be added like the following:

   $view->registerMetaTag([
       'name' => 'description',
       'content' => 'This website is about funny raccoons.'
   ]);

 will result in the meta tag '<meta name="description" content="This website
 is about funny raccoons.">'.

    [$options] (array) The HTML attributes for the meta tag.
    [$key] (string) The key that identifies the meta tag. If two meta tags are
    registered with the same key, the latter will overwrite the former. If
    this is null, the new meta tag will be appended to the existing ones.


*yii/web/View::registerCsrfMetaTags*			public
>
 registerCsrfMetaTags()
<
return (void)

 Registers CSRF meta tags.

 They are rendered dynamically to retrieve a new CSRF token for each request.

   $view->registerCsrfMetaTags();

 The above code will result in '<meta name="csrf-param"
 content="[yii\web\Request::$csrfParam]">' and '<meta name="csrf-token"
 content="tTNpWKpdy-bx8ZmIq9R72...K1y8IP3XGkzZA==">' added to the page.

 Note: Hidden CSRF input of ActiveForm will be automatically refreshed by
 calling 'window.yii.refreshCsrfToken()' from 'yii.js'.


*yii/web/View::registerLinkTag*				public
>
 registerLinkTag($options, $key='null')
<
return (void)

 Registers a link tag.

 For example, a link tag for a custom
 [favicon](http://www.w3.org/2005/10/howto-favicon) can be added like the
 following:

   $view->registerLinkTag(['rel' => 'icon', 'type' => 'image/png', 'href' =>
 '/myicon.png']);

 which will result in the following HTML: '<link rel="icon" type="image/png"
 href="/myicon.png">'.

 **Note:** To register link tags for CSS stylesheets, use 'registerCssFile()'
 instead, which has more options for this kind of link tag.

    [$options] (array) The HTML attributes for the link tag.
    [$key] (string) The key that identifies the link tag. If two link tags are
    registered with the same key, the latter will overwrite the former. If
    this is null, the new link tag will be appended to the existing ones.


*yii/web/View::registerCss*				public
>
 registerCss($css, $options='[]', $key='null')
<
return (void)

 Registers a CSS code block.

    [$css] (string) The content of the CSS code block to be registered
    [$options] (array) The HTML attributes for the '<style>'-tag.
    [$key] (string) The key that identifies the CSS code block. If null, it
    will use $css as the key. If two CSS code blocks are registered with the
    same key, the latter will overwrite the former.


*yii/web/View::registerCssFile*				public
>
 registerCssFile($url, $options='[]', $key='null')
<
return (void)

 Registers a CSS file.

 This method should be used for simple registration of CSS files. If you want
 to use features of 'AssetManager' like appending timestamps to the URL and
 file publishing options, use 'AssetBundle' and 'registerAssetBundle()'
 instead.

    [$url] (string) The CSS file to be registered.
    [$options] (array) The HTML attributes for the link tag. Please refer to
    'Html::cssFile()' for the supported options. The following options are
    specially handled and are not treated as HTML attributes:


      - 'depends': array, specifies the names of the asset bundles that
      this CSS file depends on.
    [$key] (string) The key that identifies the CSS script file. If null, it
    will use $url as the key. If two CSS files are registered with the same
    key, the latter will overwrite the former.


*yii/web/View::registerJs*				public
>
 registerJs($js, $position=self::POS_READY, $key='null')
<
return (void)

 Registers a JS code block.

    [$js] (string) The JS code block to be registered
    [$position] (int) The position at which the JS script tag should be
    inserted in a page. The possible values are:


      - 'POS_HEAD': in the head section 
      - 'POS_BEGIN': at the beginning of the body section 
      - 'POS_END': at the end of the body section 
      - 'POS_LOAD': enclosed within jQuery(window).load().   Note that by
    using this position, the method will automatically register the jQuery js
    file. 
      - 'POS_READY': enclosed within jQuery(document).ready(). This is the
      default value.   Note that by using this position, the method will
    automatically register the jQuery js file.
    [$key] (string) The key that identifies the JS code block. If null, it
    will use $js as the key. If two JS code blocks are registered with the
    same key, the latter will overwrite the former.


*yii/web/View::registerJsFile*				public
>
 registerJsFile($url, $options='[]', $key='null')
<
return (void)

 Registers a JS file.

 This method should be used for simple registration of JS files. If you want
 to use features of 'AssetManager' like appending timestamps to the URL and
 file publishing options, use 'AssetBundle' and 'registerAssetBundle()'
 instead.

    [$url] (string) The JS file to be registered.
    [$options] (array) The HTML attributes for the script tag. The following
    options are specially handled and are not treated as HTML attributes:


      - 'depends': array, specifies the names of the asset bundles that
      this JS file depends on. 
      - 'position': specifies where the JS script tag should be inserted
      in a page. The possible values are:     * 'POS_HEAD': in the head
    section     * 'POS_BEGIN': at the beginning of the body section     *
    'POS_END': at the end of the body section. This is the default value.

    Please refer to 'Html::jsFile()' for other supported options.
    [$key] (string) The key that identifies the JS script file. If null, it
    will use $url as the key. If two JS files are registered with the same key
    at the same position, the latter will overwrite the former. Note that
    position option takes precedence, thus files registered with the same key,
    but different position option will not override each other.


*yii/web/View::renderHeadHtml*				protected
>
 renderHeadHtml()
<
return (string) The rendered content

 Renders the content to be inserted in the head section.

 The content is rendered using the registered meta tags, link tags, CSS/JS
 code blocks and files.


*yii/web/View::renderBodyBeginHtml*			protected
>
 renderBodyBeginHtml()
<
return (string) The rendered content

 Renders the content to be inserted at the beginning of the body section.

 The content is rendered using the registered JS code blocks and files.


*yii/web/View::renderBodyEndHtml*				protected
>
 renderBodyEndHtml($ajaxMode)
<
return (string) The rendered content

 Renders the content to be inserted at the end of the body section.

 The content is rendered using the registered JS code blocks and files.

    [$ajaxMode] (bool) Whether the view is rendering in AJAX mode. If true,
    the JS scripts registered at 'POS_READY' and 'POS_LOAD' positions will be
    rendered at the end of the view like normal scripts.



 vim:tw=78:ts=8:ft=help:norl:
