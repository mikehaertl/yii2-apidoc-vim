
*yii/mongodb/Database*   >> |yii/base/Object|
======================


PROPERTY DETAILS
------------------------------------------------------------------------------

$connection				*yii/mongodb/Database::$connection*

 (\yii\mongodb\Connection) MongoDB connection.

$name					*yii/mongodb/Database::$name*

 (string) Name of this database.

$fileCollection				*yii/mongodb/Database::$fileCollection*

 (\yii\mongodb\file\Collection) Mongo GridFS collection.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/mongodb/Database::className*				public

 See |yii/base/Object::className|


*yii/mongodb/Database::__construct*			public

 See |yii/base/Object::__construct|


*yii/mongodb/Database::init*				public

 See |yii/base/Object::init|


*yii/mongodb/Database::__get*				public

 See |yii/base/Object::__get|


*yii/mongodb/Database::__set*				public

 See |yii/base/Object::__set|


*yii/mongodb/Database::__isset*				public

 See |yii/base/Object::__isset|


*yii/mongodb/Database::__unset*				public

 See |yii/base/Object::__unset|


*yii/mongodb/Database::__call*				public

 See |yii/base/Object::__call|


*yii/mongodb/Database::hasProperty*			public

 See |yii/base/Object::hasProperty|


*yii/mongodb/Database::canGetProperty*			public

 See |yii/base/Object::canGetProperty|


*yii/mongodb/Database::canSetProperty*			public

 See |yii/base/Object::canSetProperty|


*yii/mongodb/Database::hasMethod*				public

 See |yii/base/Object::hasMethod|


*yii/mongodb/Database::getCollection*			public
>
 getCollection($name, $refresh='false')
<
return (\yii\mongodb\Collection) Mongo collection instance.

    [$name] (string) Collection name
    [$refresh] (bool) Whether to reload the collection instance even if it is
    found in the cache.


*yii/mongodb/Database::getFileCollection*			public
>
 getFileCollection($prefix=''fs'', $refresh='false')
<
return (\yii\mongodb\file\Collection) Mongo GridFS collection.

    [$prefix] (string) Collection prefix.
    [$refresh] (bool) Whether to reload the collection instance even if it is
    found in the cache.


*yii/mongodb/Database::selectCollection*			protected
>
 selectCollection($name)
<
return (\yii\mongodb\Collection) Collection instance.

    [$name] (string) Collection name.


*yii/mongodb/Database::selectFileCollection*		protected
>
 selectFileCollection($prefix)
<
return (\yii\mongodb\file\Collection) File collection instance.

    [$prefix] (string) File collection prefix.


*yii/mongodb/Database::createCommand*			public
>
 createCommand($document='[]')
<
return (\yii\mongodb\Command) Command instance.

    [$document] (array) Command document contents.


*yii/mongodb/Database::createCollection*			public
>
 createCollection($name, $options='[]')
<
return (bool) Whether operation was successful.

 Note: Mongo creates new collections automatically on the first demand, this
 method makes sense only for the migration script or for the case you need to
 create collection with the specific options.

    [$name] (string) Name of the collection
    [$options] (array) Collection options in format: "name" => "value"


*yii/mongodb/Database::dropCollection*			public
>
 dropCollection($name)
<
return (bool) Whether operation was successful.

    [$name] (string) Name of the collection


*yii/mongodb/Database::listCollections*			public
>
 listCollections($condition='[]', $options='[]')
<
return (array) Collections information.

    [$condition] (array) Filter condition.
    [$options] (array) Options list.


*yii/mongodb/Database::clearCollections*			public
>
 clearCollections()
<
return (void)

 This method can be used to break cycle references between 'Database' and
 'Collection' instances.



 vim:tw=78:ts=8:ft=help:norl:
