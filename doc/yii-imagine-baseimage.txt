
*yii/imagine/BaseImage*  
=======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/imagine/Image|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseImage. Use 'Image' instead.


PROPERTY DETAILS
------------------------------------------------------------------------------

$driver					*yii/imagine/BaseImage::$driver*

 (array|string) The driver to use. This can be either a single driver name or
 an array of driver names. If the latter, the first available driver will be
 used.

$thumbnailBackgroundColor		*yii/imagine/BaseImage::$thumbnailBackgroundColor*

 (string) Background color to use when creating thumbnails in
 'ImageInterface::THUMBNAIL_INSET' mode with both width and height specified.
 Default is white.

$thumbnailBackgroundAlpha		*yii/imagine/BaseImage::$thumbnailBackgroundAlpha*

 (string) Background alpha (transparency) to use when creating thumbnails in
 'ImageInterface::THUMBNAIL_INSET' mode with both width and height specified.
 Default is solid.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/imagine/BaseImage::getImagine*			public
>
 getImagine()
<
return (\Imagine\Image\ImagineInterface) The 'Imagine' object

 Returns the 'Imagine' object that supports various image manipulations.


*yii/imagine/BaseImage::setImagine*			public
>
 setImagine($imagine)
<
return (void)

    [$imagine] (\Imagine\Image\ImagineInterface) The 'Imagine' object.


*yii/imagine/BaseImage::createImagine*			protected
>
 createImagine()
<
return (\Imagine\Image\ImagineInterface) The new 'Imagine' object

 Creates an 'Imagine' object based on the specified 'driver'.


*yii/imagine/BaseImage::ensureImageInterfaceInstance*	protected
>
 ensureImageInterfaceInstance($image)
<
return (\Imagine\Image\ImageInterface) 

 Takes either file path or ImageInterface. In case of file path, creates an
 instance of ImageInterface from it.

    [$image] (string|resource|\Imagine\Image\ImageInterface) 


*yii/imagine/BaseImage::crop*				public
>
 crop($image, $width, $height, $start='[0,0]')
<
return (\Imagine\Image\ImageInterface) 

 Crops an image.

 For example:

   $obj->crop('path\to\image.jpg', 200, 200, [5, 5]);

   $point = new \Imagine\Image\Point(5, 5);
   $obj->crop('path\to\image.jpg', 200, 200, $point);



    [$image] (string|resource|\Imagine\Image\ImageInterface) Either
    ImageInterface, resource or a string containing file path
    [$width] (int) The crop width
    [$height] (int) The crop height
    [$start] (array) The starting point. This must be an array with two
    elements representing 'x' and 'y' coordinates.


*yii/imagine/BaseImage::autorotate*			public
>
 autorotate($image, $color=''000000'')
<
return (\Imagine\Image\ImageInterface) 

 Rotates an image automatically based on EXIF information.

    [$image] (string|resource|\Imagine\Image\ImageInterface) Either
    ImageInterface, resource or a string containing file path
    [$color] (string) 


*yii/imagine/BaseImage::thumbnail*			public
>
 thumbnail($image, $width, $height, $mode='\Imagine\Image\ManipulatorInterface::THUMBNAIL_OUTBOUND')
<
return (\Imagine\Image\ImageInterface) 

 Creates a thumbnail image.

 If one of thumbnail dimensions is set to 'null', another one is calculated
 automatically based on aspect ratio of original image. Note that calculated
 thumbnail dimension may vary depending on the source image in this case.

 If both dimensions are specified, resulting thumbnail would be exactly the
 width and height specified. How it's achieved depends on the mode.

 If 'ImageInterface::THUMBNAIL_OUTBOUND' mode is used, which is default, then
 the thumbnail is scaled so that its smallest side equals the length of the
 corresponding side in the original image. Any excess outside of the scaled
 thumbnailâ€™s area will be cropped, and the returned thumbnail will have the
 exact width and height specified.

 If thumbnail mode is 'ImageInterface::THUMBNAIL_INSET', the original image is
 scaled down so it is fully contained within the thumbnail dimensions. The
 rest is filled with background that could be configured via
 'Image::$thumbnailBackgroundColor' and 'Image::$thumbnailBackgroundAlpha'.

    [$image] (string|resource|\Imagine\Image\ImageInterface) Either
    ImageInterface, resource or a string containing file path
    [$width] (int) The width in pixels to create the thumbnail
    [$height] (int) The height in pixels to create the thumbnail
    [$mode] (string) Mode of resizing original image to use in case both width
    and height specified


*yii/imagine/BaseImage::resize*				public
>
 resize($image, $width, $height, $keepAspectRatio='true', $allowUpscaling='false')
<
return (\Imagine\Image\ImageInterface) 

 Resizes an image.

 If one of the dimensions is set to 'null', another one is calculated
 automatically based on aspect ratio of original image.

 If both of the dimensions are set then new dimensions are calculated so that
 image keeps aspect ratio.

 You can set $keepAspectRatio to false if you want to force fixed width and
 height.

    [$image] (string|resource|\Imagine\Image\ImageInterface) Either
    ImageInterface, resource or a string containing file path
    [$width] (int) The width in pixels
    [$height] (int) The height in pixels
    [$keepAspectRatio] (bool) Should the image keep aspect ratio
    [$allowUpscaling] (bool) Should the image be upscaled if needed


*yii/imagine/BaseImage::watermark*			public
>
 watermark($image, $watermarkImage, $start='[0,0]')
<
return (\Imagine\Image\ImageInterface) 

 Adds a watermark to an existing image.

    [$image] (string|resource|\Imagine\Image\ImageInterface) Either
    ImageInterface, resource or a string containing file path
    [$watermarkImage] (string|resource|\Imagine\Image\ImageInterface) Either
    ImageInterface, resource or a string containing watermark file path
    [$start] (array) The starting point. This must be an array with two
    elements representing 'x' and 'y' coordinates.


*yii/imagine/BaseImage::text*				public
>
 text($image, $text, $fontFile, $start='[0,0]', $fontOptions='[]')
<
return (\Imagine\Image\ImageInterface) 

 Draws a text string on an existing image.

    [$image] (string|resource|\Imagine\Image\ImageInterface) Either
    ImageInterface, resource or a string containing file path
    [$text] (string) The text to write to the image
    [$fontFile] (string) The file path or path alias
    [$start] (array) The starting position of the text. This must be an array
    with two elements representing 'x' and 'y' coordinates.
    [$fontOptions] (array) The font options. The following options may be
    specified:


      - color: The font color. Defaults to "fff". 
      - size: The font size. Defaults to 12. 
      - angle: The angle to use to write the text. Defaults to 0.


*yii/imagine/BaseImage::frame*				public
>
 frame($image, $margin=20, $color=''666'', $alpha=100)
<
return (\Imagine\Image\ImageInterface) 

 Adds a frame around of the image. Please note that the image size will
 increase by '$margin' x 2.

    [$image] (string|resource|\Imagine\Image\ImageInterface) Either
    ImageInterface, resource or a string containing file path
    [$margin] (int) The frame size to add around the image
    [$color] (string) The frame color
    [$alpha] (int) The alpha value of the frame.


*yii/imagine/BaseImage::getThumbnailBox*			protected
>
 getThumbnailBox($sourceBox, $width, $height)
<
return (\Imagine\Image\BoxInterface) Thumbnail box

 Returns box for a thumbnail to be created. If one of the dimensions is set to
 'null', another one is calculated automatically based on width to height
 ratio of original image box.

    [$sourceBox] (\Imagine\Image\BoxInterface) Original image box
    [$width] (int) Thumbnail width
    [$height] (int) Thumbnail height


*yii/imagine/BaseImage::getBox*				protected
>
 getBox($sourceBox, $width, $height, $keepAspectRatio='true')
<
return (\Imagine\Image\BoxInterface) New image box

 Returns box for an image to be created.

 If one of the dimensions is set to 'null', another one is calculated
 automatically based on width to height ratio of original image box.

 If both of the dimensions are set then new dimensions are calculated so that
 image keeps aspect ratio.

 You can set $keepAspectRatio to false if you want to force fixed width and
 height.

    [$sourceBox] (\Imagine\Image\BoxInterface) Original image box
    [$width] (int) New image width
    [$height] (int) New image height
    [$keepAspectRatio] (bool) Should we keep aspect ratio even if both with
    and height are set


*yii/imagine/BaseImage::isUpscaling*			protected
>
 isUpscaling($sourceBox, $destinationBox)
<
return (bool) 

 Checks if upscaling is going to happen

    [$sourceBox] (\Imagine\Image\BoxInterface) 
    [$destinationBox] (\Imagine\Image\BoxInterface) 



 vim:tw=78:ts=8:ft=help:norl:
