
*yii/imagine/BaseImage*  
=======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/imagine/Image|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseImage. Use 'Image' instead.


PROPERTY DETAILS
------------------------------------------------------------------------------

$driver					*yii/imagine/BaseImage::$driver*

 (array|string) The driver to use. This can be either a single driver name or
 an array of driver names. If the latter, the first available driver will be
 used.

$thumbnailBackgroundColor		*yii/imagine/BaseImage::$thumbnailBackgroundColor*

 (string) Background color to use when creating thumbnails in
 'ImageInterface::THUMBNAIL_INSET' mode with both width and height specified.
 Default is white.

$thumbnailBackgroundAlpha		*yii/imagine/BaseImage::$thumbnailBackgroundAlpha*

 (string) Background alpha (transparency) to use when creating thumbnails in
 'ImageInterface::THUMBNAIL_INSET' mode with both width and height specified.
 Default is solid.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/imagine/BaseImage::getImagine*			public
>
 getImagine()
<
return (\Imagine\Image\ImagineInterface) The 'Imagine' object



*yii/imagine/BaseImage::setImagine*			public
>
 setImagine($imagine)
<
return (void)

    [$imagine] (\Imagine\Image\ImagineInterface) The 'Imagine' object.


*yii/imagine/BaseImage::createImagine*			protected
>
 createImagine()
<
return (\Imagine\Image\ImagineInterface) The new 'Imagine' object



*yii/imagine/BaseImage::crop*				public
>
 crop($filename, $width, $height, $start='[0,0]')
<
return (\Imagine\Image\ImageInterface) 

 For example,

   $obj->crop('path\to\image.jpg', 200, 200, [5, 5]);

   $point = new \Imagine\Image\Point(5, 5);
   $obj->crop('path\to\image.jpg', 200, 200, $point);



    [$filename] (string) The image file path or path alias.
    [$width] (integer) The crop width
    [$height] (integer) The crop height
    [$start] (array) The starting point. This must be an array with two
    elements representing 'x' and 'y' coordinates.


*yii/imagine/BaseImage::thumbnail*			public
>
 thumbnail($filename, $width, $height, $mode='\Imagine\Image\ManipulatorInterface::THUMBNAIL_OUTBOUND')
<
return (\Imagine\Image\ImageInterface) 

 If one of thumbnail dimensions is set to 'null', another one is calculated
 automatically based on aspect ratio of original image. Note that calculated
 thumbnail dimension may vary depending on the source image in this case.

 If both dimensions are specified, resulting thumbnail would be exactly the
 width and height specified. How it's achieved depends on the mode.

 If 'ImageInterface::THUMBNAIL_OUTBOUND' mode is used, which is default, then
 the thumbnail is scaled so that its smallest side equals the length of the
 corresponding side in the original image. Any excess outside of the scaled
 thumbnailâ€™s area will be cropped, and the returned thumbnail will have the
 exact width and height specified.

 If thumbnail mode is 'ImageInterface::THUMBNAIL_INSET', the original image is
 scaled down so it is fully contained within the thumbnail dimensions. The
 rest is filled with background that could be configured via
 'Image::$thumbnailBackgroundColor' and 'Image::$thumbnailBackgroundAlpha'.

    [$filename] (string) The image file path or path alias.
    [$width] (integer) The width in pixels to create the thumbnail
    [$height] (integer) The height in pixels to create the thumbnail
    [$mode] (string) Mode of resizing original image to use in case both width
    and height specified


*yii/imagine/BaseImage::watermark*			public
>
 watermark($filename, $watermarkFilename, $start='[0,0]')
<
return (\Imagine\Image\ImageInterface) 

    [$filename] (string) The image file path or path alias.
    [$watermarkFilename] (string) The file path or path alias of the watermark
    image.
    [$start] (array) The starting point. This must be an array with two
    elements representing 'x' and 'y' coordinates.


*yii/imagine/BaseImage::text*				public
>
 text($filename, $text, $fontFile, $start='[0,0]', $fontOptions='[]')
<
return (\Imagine\Image\ImageInterface) 

    [$filename] (string) The image file path or path alias.
    [$text] (string) The text to write to the image
    [$fontFile] (string) The file path or path alias
    [$start] (array) The starting position of the text. This must be an array
    with two elements representing 'x' and 'y' coordinates.
    [$fontOptions] (array) The font options. The following options may be
    specified:


      - color: The font color. Defaults to "fff". 
      - size: The font size. Defaults to 12. 
      - angle: The angle to use to write the text. Defaults to 0.


*yii/imagine/BaseImage::frame*				public
>
 frame($filename, $margin=20, $color=''666'', $alpha=100)
<
return (\Imagine\Image\ImageInterface) 

    [$filename] (string) The full path to the image file
    [$margin] (integer) The frame size to add around the image
    [$color] (string) The frame color
    [$alpha] (integer) The alpha value of the frame.


*yii/imagine/BaseImage::getThumbnailBox*			protected
>
 getThumbnailBox($sourceBox, $width, $height)
<
return (\Imagine\Image\BoxInterface) Thumbnail box

    [$sourceBox] (\Imagine\Image\BoxInterface) Original image box
    [$width] (integer) Thumbnail width
    [$height] (integer) Thumbnail height



 vim:tw=78:ts=8:ft=help:norl:
