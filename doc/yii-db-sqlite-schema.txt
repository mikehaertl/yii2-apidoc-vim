
*yii/db/sqlite/Schema*   >> |yii/db/Schema|
======================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/Schema::$db|
 |yii/db/Schema::$defaultSchema|
 |yii/db/Schema::$exceptionMap|
 |yii/db/Schema::$columnSchemaClass|
 |yii/db/Schema::$tableSchemas|
 |yii/db/Schema::$schemaNames|
 |yii/db/Schema::$tableNames|
 |yii/db/Schema::$queryBuilder|
 |yii/db/Schema::$lastInsertID|
 |yii/db/Schema::$serverVersion|
 |yii/db/ConstraintFinderTrait::$schemaPrimaryKeys|
 |yii/db/ConstraintFinderTrait::$schemaForeignKeys|
 |yii/db/ConstraintFinderTrait::$schemaIndexes|
 |yii/db/ConstraintFinderTrait::$schemaUniques|
 |yii/db/ConstraintFinderTrait::$schemaChecks|
 |yii/db/ConstraintFinderTrait::$schemaDefaultValues|


$tableQuoteCharacter			*yii/db/sqlite/Schema::$tableQuoteCharacter*

 (string|string[]) 

 Character used to quote schema, table, etc. names. An array of 2 characters
 can be used in case starting and ending characters are different.



$columnQuoteCharacter			*yii/db/sqlite/Schema::$columnQuoteCharacter*

 (string|string[]) 

 Character used to quote column names. An array of 2 characters can be used in
 case starting and ending characters are different.



$typeMap				*yii/db/sqlite/Schema::$typeMap*

 (array) Mapping from physical column types (keys) to abstract column types
 (values)

$transactionIsolationLevel		*yii/db/sqlite/Schema::$transactionIsolationLevel*

 (string) The transaction isolation level to use for this transaction. This
 can be either 'Transaction::READ_UNCOMMITTED' or 'Transaction::SERIALIZABLE'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/db/Schema::resolveTableName|
 |yii/db/Schema::findSchemaNames|
 |yii/db/Schema::createColumnSchema|
 |yii/db/Schema::getTableSchema|
 |yii/db/Schema::getTableSchemas|
 |yii/db/Schema::getSchemaNames|
 |yii/db/Schema::getTableNames|
 |yii/db/Schema::getQueryBuilder|
 |yii/db/Schema::getPdoType|
 |yii/db/Schema::refresh|
 |yii/db/Schema::refreshTableSchema|
 |yii/db/Schema::getLastInsertID|
 |yii/db/Schema::supportsSavepoint|
 |yii/db/Schema::createSavepoint|
 |yii/db/Schema::releaseSavepoint|
 |yii/db/Schema::rollBackSavepoint|
 |yii/db/Schema::insert|
 |yii/db/Schema::quoteValue|
 |yii/db/Schema::quoteTableName|
 |yii/db/Schema::getTableNameParts|
 |yii/db/Schema::quoteColumnName|
 |yii/db/Schema::quoteSimpleTableName|
 |yii/db/Schema::quoteSimpleColumnName|
 |yii/db/Schema::unquoteSimpleTableName|
 |yii/db/Schema::unquoteSimpleColumnName|
 |yii/db/Schema::getRawTableName|
 |yii/db/Schema::getColumnPhpType|
 |yii/db/Schema::convertException|
 |yii/db/Schema::isReadQuery|
 |yii/db/Schema::getServerVersion|
 |yii/db/Schema::getCacheKey|
 |yii/db/Schema::getCacheTag|
 |yii/db/ConstraintFinderTrait::getTableMetadata|
 |yii/db/ConstraintFinderTrait::getSchemaMetadata|
 |yii/db/Schema::setTableMetadata|
 |yii/db/Schema::normalizePdoRowKeyCase|
 |yii/db/ConstraintFinderTrait::getTablePrimaryKey|
 |yii/db/ConstraintFinderTrait::getSchemaPrimaryKeys|
 |yii/db/ConstraintFinderTrait::getTableForeignKeys|
 |yii/db/ConstraintFinderTrait::getSchemaForeignKeys|
 |yii/db/ConstraintFinderTrait::getTableIndexes|
 |yii/db/ConstraintFinderTrait::getSchemaIndexes|
 |yii/db/ConstraintFinderTrait::getTableUniques|
 |yii/db/ConstraintFinderTrait::getSchemaUniques|
 |yii/db/ConstraintFinderTrait::getTableChecks|
 |yii/db/ConstraintFinderTrait::getSchemaChecks|
 |yii/db/ConstraintFinderTrait::getTableDefaultValues|
 |yii/db/ConstraintFinderTrait::getSchemaDefaultValues|


*yii/db/sqlite/Schema::findTableNames*			protected
>
 findTableNames($schema='''')
<
return (array) All table names in the database. The names have NO schema name prefix.

 Returns all table names in the database.



 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception.



    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema.


*yii/db/sqlite/Schema::loadTableSchema*			protected
>
 loadTableSchema($name)
<
return (\yii\db\TableSchema|null) DBMS-dependent table metadata, 'null' if the table
does not exist.

 Loads the metadata for the specified table.







    [$name] (string) Table name


*yii/db/sqlite/Schema::createQueryBuilder*		public
>
 createQueryBuilder()
<
return (\yii\db\sqlite\QueryBuilder) Query builder instance

 Creates a query builder for the MySQL database.

 This method may be overridden by child classes to create a DBMS-specific
 query builder.


*yii/db/sqlite/Schema::createColumnSchemaBuilder*		public
>
 createColumnSchemaBuilder($type, $length='null')
<
return (\yii\db\sqlite\ColumnSchemaBuilder) Column schema builder instance

 Create a column schema builder instance giving the type and value precision.



 This method may be overridden by child classes to create a DBMS-specific
 column schema builder.



    [$type] (string) Type of the column. See 'ColumnSchemaBuilder::$type'.
    [$length] (int|string|array) Length or precision of the column. See
    'ColumnSchemaBuilder::$length'.


*yii/db/sqlite/Schema::findUniqueIndexes*			public
>
 findUniqueIndexes($table)
<
return (array) All unique indexes for the given table.

 Returns all unique indexes for the given table.

 Each array element is of the following structure:

   [
       'IndexName1' => ['col1' [, ...]],
       'IndexName2' => ['col2' [, ...]],
   ]



    [$table] (\yii\db\TableSchema) The table metadata


*yii/db/sqlite/Schema::setTransactionIsolationLevel*	public
>
 setTransactionIsolationLevel($level)
<
return (void)

 Sets the isolation level of the current transaction.

    [$level] (string) The transaction isolation level to use for this
    transaction. This can be either 'Transaction::READ_UNCOMMITTED' or
    'Transaction::SERIALIZABLE'.


*yii/db/sqlite/Schema::loadTablePrimaryKey*		protected
>
 loadTablePrimaryKey($tableName)
<
return (void)

    [$tableName] () 


*yii/db/sqlite/Schema::loadTableForeignKeys*		protected
>
 loadTableForeignKeys($tableName)
<
return (void)

    [$tableName] () 


*yii/db/sqlite/Schema::loadTableIndexes*			protected
>
 loadTableIndexes($tableName)
<
return (void)

    [$tableName] () 


*yii/db/sqlite/Schema::loadTableUniques*			protected
>
 loadTableUniques($tableName)
<
return (void)

    [$tableName] () 


*yii/db/sqlite/Schema::loadTableChecks*			protected
>
 loadTableChecks($tableName)
<
return (void)

    [$tableName] () 


*yii/db/sqlite/Schema::loadTableDefaultValues*		protected
>
 loadTableDefaultValues($tableName)
<
return (void)

    [$tableName] () 


*yii/db/sqlite/Schema::findColumns*			protected
>
 findColumns($table)
<
return (bool) Whether the table exists in the database

 Collects the table column metadata.

    [$table] (\yii\db\TableSchema) The table metadata


*yii/db/sqlite/Schema::findConstraints*			protected
>
 findConstraints($table)
<
return (void)

 Collects the foreign key column details for the given table.

    [$table] (\yii\db\TableSchema) The table metadata


*yii/db/sqlite/Schema::loadColumnSchema*			protected
>
 loadColumnSchema($info)
<
return (\yii\db\ColumnSchema) The column schema object

 Loads the column information into a 'ColumnSchema' object.

    [$info] (array) Column information



 vim:tw=78:ts=8:ft=help:norl:
