
*yii/elasticsearch/Query*   >> |yii/base/Component|
=========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/elasticsearch/ActiveQuery|

DESCRIPTION
------------------------------------------------------------------------------

 Query provides a set of methods to facilitate the specification of different
 parameters of the query. These methods can be chained together.

 By calling 'createCommand()', we can get a 'Command' instance which can be
 further used to perform/execute the DB query against a database.

 For example,

   $query = new Query;
   $query->fields('id, name')
       ->from('myindex', 'users')
       ->limit(10);
   // build and execute the query
   $command = $query->createCommand();
   $rows = $command->search(); // this way you get the raw output of
 elasticsearch.

 You would normally call '$query->search()' instead of creating a command as
 this method adds the 'indexBy()' feature and also removes some
 inconsistencies from the response.

 Query also provides some methods to easier get some parts of the result only:


   - 'one()': returns a single record populated with the first row of
   data. 
   - 'all()': returns all records based on the query results. 
   - 'count()': returns the number of records. 
   - 'scalar()': returns the value of the first column in the first row
   of the query result. 
   - 'column()': returns the value of the first column in the query
   result. 
   - 'exists()': returns a value indicating whether the query result
   has data or not.

 NOTE: elasticsearch limits the number of records returned to 10 records by
 default. If you expect to get more records you should specify limit
 explicitly.


PROPERTY DETAILS
------------------------------------------------------------------------------

$where					*yii/elasticsearch/Query::$where*
 See |yii/db/QueryTrait::$where|

$limit					*yii/elasticsearch/Query::$limit*
 See |yii/db/QueryTrait::$limit|

$offset					*yii/elasticsearch/Query::$offset*
 See |yii/db/QueryTrait::$offset|

$orderBy				*yii/elasticsearch/Query::$orderBy*
 See |yii/db/QueryTrait::$orderBy|

$indexBy				*yii/elasticsearch/Query::$indexBy*
 See |yii/db/QueryTrait::$indexBy|

$fields					*yii/elasticsearch/Query::$fields*
 (array) The fields being retrieved from the documents. For example, '['id',
 'name']'. If not set, this option will not be applied to the query and no
 fields will be returned. In this case the '_source' field will be returned by
 default which can be configured using 'source'. Setting this to an empty
 array will result in no fields being retrieved, which means that only the
 primaryKey of a record will be available in the result.

 For each field you may also add an array representing a [script field].
 Example:

   $query->fields = [
       'id',
       'name',
       'value_times_two' => [
           'script' => "doc['my_field_name'].value * 2",
       ],
       'value_times_factor' => [
           'script' => "doc['my_field_name'].value * factor",
           'params' => [
               'factor' => 2.0
           ],
       ],
   ]

 > Note: Field values are [always returned as arrays] even if they only have
 one value.

 [always returned as arrays]:
 http://www.elasticsearch.org/guide/en/elasticsearch/reference/1.x/_return_values.html#_return_values
 [script field]:
 http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-script-fields.html

$source					*yii/elasticsearch/Query::$source*
 (array) This option controls how the '_source' field is returned from the
 documents. For example, '['id', 'name']' means that only the 'id' and 'name'
 field should be returned from '_source'. If not set, it means retrieving the
 full '_source' field unless 'fields' are specified. Setting this option to
 'false' will disable return of the '_source' field, this means that only the
 primaryKey of a record will be available in the result.

$index					*yii/elasticsearch/Query::$index*
 (string|array) The index to retrieve data from. This can be a string
 representing a single index or a an array of multiple indexes. If this is not
 set, indexes are being queried.

$type					*yii/elasticsearch/Query::$type*
 (string|array) The type to retrieve data from. This can be a string
 representing a single type or a an array of multiple types. If this is not
 set, all types are being queried.

$timeout				*yii/elasticsearch/Query::$timeout*
 (integer) A search timeout, bounding the search request to be executed within
 the specified time value and bail with the hits accumulated up to that point
 when expired. Defaults to no timeout.

$query					*yii/elasticsearch/Query::$query*
 (array|string) The query part of this search query. This is an array or json
 string that follows the format of the elasticsearch [Query
 DSL](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html).

$filter					*yii/elasticsearch/Query::$filter*
 (array|string) The filter part of this search query. This is an array or json
 string that follows the format of the elasticsearch [Query
 DSL](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/query-dsl.html).

$highlight				*yii/elasticsearch/Query::$highlight*
 (array) The highlight part of this search query. This is an array that allows
 to highlight search results on one or more fields.

$aggregations				*yii/elasticsearch/Query::$aggregations*
 (array) List of aggregations to add to this query.

$stats					*yii/elasticsearch/Query::$stats*
 (array) The 'stats' part of the query. An array of groups to maintain a
 statistics aggregation for.

$suggest				*yii/elasticsearch/Query::$suggest*
 (array) List of suggesters to add to this query.

$behaviors				*yii/elasticsearch/Query::$behaviors*
 See |yii/base/Component::$behaviors|



METHOD DETAILS
------------------------------------------------------------------------------

*yii/elasticsearch/Query::className*			public
 See |yii/base/Object::className|


*yii/elasticsearch/Query::__construct*			public
 See |yii/base/Object::__construct|


*yii/elasticsearch/Query::init*				public
>
 init()
<
(void)

 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.


*yii/elasticsearch/Query::__get*				public
 See |yii/base/Component::__get|


*yii/elasticsearch/Query::__set*				public
 See |yii/base/Component::__set|


*yii/elasticsearch/Query::__isset*			public
 See |yii/base/Component::__isset|


*yii/elasticsearch/Query::__unset*			public
 See |yii/base/Component::__unset|


*yii/elasticsearch/Query::__call*				public
 See |yii/base/Component::__call|


*yii/elasticsearch/Query::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/elasticsearch/Query::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/elasticsearch/Query::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/elasticsearch/Query::hasMethod*			public
 See |yii/base/Component::hasMethod|


*yii/elasticsearch/Query::__clone*			public
 See |yii/base/Component::__clone|


*yii/elasticsearch/Query::behaviors*			public
 See |yii/base/Component::behaviors|


*yii/elasticsearch/Query::hasEventHandlers*		public
 See |yii/base/Component::hasEventHandlers|


*yii/elasticsearch/Query::on*				public
 See |yii/base/Component::on|


*yii/elasticsearch/Query::off*				public
 See |yii/base/Component::off|


*yii/elasticsearch/Query::trigger*			public
 See |yii/base/Component::trigger|


*yii/elasticsearch/Query::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/elasticsearch/Query::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/elasticsearch/Query::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/elasticsearch/Query::attachBehaviors*		public
 See |yii/base/Component::attachBehaviors|


*yii/elasticsearch/Query::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/elasticsearch/Query::detachBehaviors*		public
 See |yii/base/Component::detachBehaviors|


*yii/elasticsearch/Query::ensureBehaviors*		public
 See |yii/base/Component::ensureBehaviors|


*yii/elasticsearch/Query::indexBy*			public
 See |yii/db/QueryTrait::indexBy|


*yii/elasticsearch/Query::where*				public
 See |yii/db/QueryTrait::where|


*yii/elasticsearch/Query::andWhere*			public
 See |yii/db/QueryTrait::andWhere|


*yii/elasticsearch/Query::orWhere*			public
 See |yii/db/QueryTrait::orWhere|


*yii/elasticsearch/Query::filterWhere*			public
 See |yii/db/QueryTrait::filterWhere|


*yii/elasticsearch/Query::andFilterWhere*			public
 See |yii/db/QueryTrait::andFilterWhere|


*yii/elasticsearch/Query::orFilterWhere*			public
 See |yii/db/QueryTrait::orFilterWhere|


*yii/elasticsearch/Query::filterCondition*		protected
 See |yii/db/QueryTrait::filterCondition|


*yii/elasticsearch/Query::isEmpty*			protected
 See |yii/db/QueryTrait::isEmpty|


*yii/elasticsearch/Query::orderBy*			public
 See |yii/db/QueryTrait::orderBy|


*yii/elasticsearch/Query::addOrderBy*			public
 See |yii/db/QueryTrait::addOrderBy|


*yii/elasticsearch/Query::normalizeOrderBy*		protected
 See |yii/db/QueryTrait::normalizeOrderBy|


*yii/elasticsearch/Query::limit*				public
 See |yii/db/QueryTrait::limit|


*yii/elasticsearch/Query::offset*				public
 See |yii/db/QueryTrait::offset|


*yii/elasticsearch/Query::createCommand*			public
>
 createCommand($db='null')
<
(\yii\elasticsearch\Command) The created DB command instance.

    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.


*yii/elasticsearch/Query::all*				public
>
 all($db='null')
<
(array) The query results. If the query results in nothing, an empty array
will be returned.

    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.


*yii/elasticsearch/Query::one*				public
>
 one($db='null')
<
(array|boolean) The first row (in terms of an array) of the query result.
False is returned if the query results in nothing.

    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.


*yii/elasticsearch/Query::search*				public
>
 search($db='null', $options='[]')
<
(array) The query results.

    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.
    [$options] (array) The options given with this query. Possible options
    are:

     
      -
     
    [routing](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search.html#search-routing)
     
      -
     
    [search_type](http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/search-request-search-type.html)


*yii/elasticsearch/Query::delete*				public
>
 delete($db='null', $options='[]')
<
(array) The query results.

 Everything except query and filter will be ignored.
    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.
    [$options] (array) The options given with this query.


*yii/elasticsearch/Query::scalar*				public
>
 scalar($field, $db='null')
<
(string) The value of the specified attribute in the first record of the query
result. Null is returned if the query result is empty or the field does not
exist.

 The value returned will be the specified field in the first document of the
 query results.
    [$field] (string) Name of the attribute to select
    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.


*yii/elasticsearch/Query::column*				public
>
 column($field, $db='null')
<
(array) The first column of the query result. An empty array is returned if
the query results in nothing.

    [$field] (string) The field to query over
    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.


*yii/elasticsearch/Query::count*				public
>
 count($q=''*'', $db='null')
<
(integer) Number of records

    [$q] (string) The COUNT expression. This parameter is ignored by this
    implementation.
    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.


*yii/elasticsearch/Query::exists*				public
>
 exists($db='null')
<
(boolean) Whether the query result contains any row of data.

    [$db] (\yii\elasticsearch\Connection) The database connection used to
    execute the query. If this parameter is not given, the 'elasticsearch'
    application component will be used.


*yii/elasticsearch/Query::stats*				public
>
 stats($groups)
<
(static) The query object itself

    [$groups] (array) An array of groups to maintain a statistics aggregation
    for.


*yii/elasticsearch/Query::highlight*			public
>
 highlight($highlight)
<
(static) The query object itself

    [$highlight] (array) Array of parameters to highlight results.


*yii/elasticsearch/Query::addAggregation*			public
>
 addAggregation($name, $type, $options)
<
(static) The query object itself

    [$name] (string) The name of the aggregation
    [$type] (string) The aggregation type. e.g. 'terms', 'range',
    'histogram'...
    [$options] (string|array) The configuration options for this aggregation.
    Can be an array or a json string.


*yii/elasticsearch/Query::addAgg*				public
>
 addAgg($name, $type, $options)
<
(static) The query object itself

 This is an alias for 'addAggregation'.
    [$name] (string) The name of the aggregation
    [$type] (string) The aggregation type. e.g. 'terms', 'range',
    'histogram'...
    [$options] (string|array) The configuration options for this aggregation.
    Can be an array or a json string.


*yii/elasticsearch/Query::addSuggester*			public
>
 addSuggester($name, $definition)
<
(static) The query object itself

    [$name] (string) The name of the suggester
    [$definition] (string|array) The configuration options for this suggester.
    Can be an array or a json string.


*yii/elasticsearch/Query::query*				public
>
 query($query)
<
(static) The query object itself

    [$query] (string) 


*yii/elasticsearch/Query::filter*				public
>
 filter($filter)
<
(static) The query object itself

    [$filter] (string) 


*yii/elasticsearch/Query::from*				public
>
 from($index, $type='null')
<
(static) The query object itself

    [$index] (string|array) The index to retrieve data from. This can be a
    string representing a single index or a an array of multiple indexes. If
    this is 'null' it means that all indexes are being queried.
    [$type] (string|array) The type to retrieve data from. This can be a
    string representing a single type or a an array of multiple types. If this
    is 'null' it means that all types are being queried.


*yii/elasticsearch/Query::fields*				public
>
 fields($fields)
<
(static) The query object itself

    [$fields] (array) The fields to be selected.


*yii/elasticsearch/Query::source*				public
>
 source($source)
<
(static) The query object itself

    [$source] (array) The source patterns to be selected.


*yii/elasticsearch/Query::timeout*			public
>
 timeout($timeout)
<
(static) The query object itself

    [$timeout] (integer) A search timeout, bounding the search request to be
    executed within the specified time value and bail with the hits
    accumulated up to that point when expired. Defaults to no timeout.



 vim:tw=78:ts=8:ft=help:norl:
