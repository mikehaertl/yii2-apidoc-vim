
*yii/db/oci/Schema*   >> |yii/db/Schema|
===================


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/oci/Schema::$db*

 See |yii/db/Schema::$db|

$defaultSchema				*yii/db/oci/Schema::$defaultSchema*

 See |yii/db/Schema::$defaultSchema|

$exceptionMap				*yii/db/oci/Schema::$exceptionMap*

 (array) Map of DB errors and corresponding exceptions If left part is found
 in DB error message exception class from the right part is used.

$columnSchemaClass			*yii/db/oci/Schema::$columnSchemaClass*

 See |yii/db/Schema::$columnSchemaClass|

$tableQuoteCharacter			*yii/db/oci/Schema::$tableQuoteCharacter*

 ()

$columnQuoteCharacter			*yii/db/oci/Schema::$columnQuoteCharacter*

 See |yii/db/Schema::$columnQuoteCharacter|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/oci/Schema::className*				public

 See |yii/base/BaseObject::className|


*yii/db/oci/Schema::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/db/oci/Schema::init*					public
>
 init()
<
return (void)

 {@inheritdoc}


*yii/db/oci/Schema::__get*				public

 See |yii/base/BaseObject::__get|


*yii/db/oci/Schema::__set*				public

 See |yii/base/BaseObject::__set|


*yii/db/oci/Schema::__isset*				public

 See |yii/base/BaseObject::__isset|


*yii/db/oci/Schema::__unset*				public

 See |yii/base/BaseObject::__unset|


*yii/db/oci/Schema::__call*				public

 See |yii/base/BaseObject::__call|


*yii/db/oci/Schema::hasProperty*				public

 See |yii/base/BaseObject::hasProperty|


*yii/db/oci/Schema::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/db/oci/Schema::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/db/oci/Schema::hasMethod*				public

 See |yii/base/BaseObject::hasMethod|


*yii/db/oci/Schema::resolveTableName*			protected
>
 resolveTableName($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/db/oci/Schema::findSchemaNames*			protected
>
 findSchemaNames()
<
return (void)

 {@inheritdoc}


*yii/db/oci/Schema::findTableNames*			protected
>
 findTableNames($schema='\'\'')
<
return (void)

 {@inheritdoc}

    [$schema] () 


*yii/db/oci/Schema::loadTableSchema*			protected
>
 loadTableSchema($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/db/oci/Schema::createColumnSchema*			protected

 See |yii/db/Schema::createColumnSchema|


*yii/db/oci/Schema::getTableSchema*			public

 See |yii/db/Schema::getTableSchema|


*yii/db/oci/Schema::getTableSchemas*			public

 See |yii/db/Schema::getTableSchemas|


*yii/db/oci/Schema::getSchemaNames*			public

 See |yii/db/Schema::getSchemaNames|


*yii/db/oci/Schema::getTableNames*			public

 See |yii/db/Schema::getTableNames|


*yii/db/oci/Schema::getQueryBuilder*			public

 See |yii/db/Schema::getQueryBuilder|


*yii/db/oci/Schema::getPdoType*				public

 See |yii/db/Schema::getPdoType|


*yii/db/oci/Schema::refresh*				public

 See |yii/db/Schema::refresh|


*yii/db/oci/Schema::refreshTableSchema*			public

 See |yii/db/Schema::refreshTableSchema|


*yii/db/oci/Schema::createQueryBuilder*			public
>
 createQueryBuilder()
<
return (void)

 {@inheritdoc}


*yii/db/oci/Schema::createColumnSchemaBuilder*		public
>
 createColumnSchemaBuilder($type, $length='null')
<
return (void)

 {@inheritdoc}

    [$type] () 
    [$length] () 


*yii/db/oci/Schema::findUniqueIndexes*			public
>
 findUniqueIndexes($table)
<
return (array) All unique indexes for the given table.

 Returns all unique indexes for the given table.

 Each array element is of the following structure:.

   [
       'IndexName1' => ['col1' [, ...]],
       'IndexName2' => ['col2' [, ...]],
   ]



    [$table] (\yii\db\TableSchema) The table metadata


*yii/db/oci/Schema::getLastInsertID*			public
>
 getLastInsertID($sequenceName='''')
<
return (string) The row ID of the last row inserted, or the last value retrieved from
the sequence object

    [$sequenceName] (string) Name of the sequence object (required by some
    DBMS)


*yii/db/oci/Schema::supportsSavepoint*			public

 See |yii/db/Schema::supportsSavepoint|


*yii/db/oci/Schema::createSavepoint*			public

 See |yii/db/Schema::createSavepoint|


*yii/db/oci/Schema::releaseSavepoint*			public
>
 releaseSavepoint($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/db/oci/Schema::rollBackSavepoint*			public

 See |yii/db/Schema::rollBackSavepoint|


*yii/db/oci/Schema::setTransactionIsolationLevel*		public

 See |yii/db/Schema::setTransactionIsolationLevel|


*yii/db/oci/Schema::insert*				public
>
 insert($table, $columns)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$columns] () 


*yii/db/oci/Schema::quoteValue*				public

 See |yii/db/Schema::quoteValue|


*yii/db/oci/Schema::quoteTableName*			public

 See |yii/db/Schema::quoteTableName|


*yii/db/oci/Schema::quoteColumnName*			public

 See |yii/db/Schema::quoteColumnName|


*yii/db/oci/Schema::quoteSimpleTableName*			public
>
 quoteSimpleTableName($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/db/oci/Schema::quoteSimpleColumnName*		public

 See |yii/db/Schema::quoteSimpleColumnName|


*yii/db/oci/Schema::unquoteSimpleTableName*		public

 See |yii/db/Schema::unquoteSimpleTableName|


*yii/db/oci/Schema::unquoteSimpleColumnName*		public

 See |yii/db/Schema::unquoteSimpleColumnName|


*yii/db/oci/Schema::getRawTableName*			public

 See |yii/db/Schema::getRawTableName|


*yii/db/oci/Schema::getColumnPhpType*			protected

 See |yii/db/Schema::getColumnPhpType|


*yii/db/oci/Schema::convertException*			public

 See |yii/db/Schema::convertException|


*yii/db/oci/Schema::isReadQuery*				public

 See |yii/db/Schema::isReadQuery|


*yii/db/oci/Schema::getServerVersion*			public

 See |yii/db/Schema::getServerVersion|


*yii/db/oci/Schema::getCacheKey*				protected

 See |yii/db/Schema::getCacheKey|


*yii/db/oci/Schema::getCacheTag*				protected

 See |yii/db/Schema::getCacheTag|


*yii/db/oci/Schema::getTableMetadata*			protected

 See |yii/db/ConstraintFinderTrait::getTableMetadata|


*yii/db/oci/Schema::getSchemaMetadata*			protected

 See |yii/db/ConstraintFinderTrait::getSchemaMetadata|


*yii/db/oci/Schema::setTableMetadata*			protected

 See |yii/db/Schema::setTableMetadata|


*yii/db/oci/Schema::normalizePdoRowKeyCase*		protected

 See |yii/db/Schema::normalizePdoRowKeyCase|


*yii/db/oci/Schema::loadTablePrimaryKey*			protected
>
 loadTablePrimaryKey($tableName)
<
return (void)

 {@inheritdoc}

    [$tableName] () 


*yii/db/oci/Schema::loadTableForeignKeys*			protected
>
 loadTableForeignKeys($tableName)
<
return (void)

 {@inheritdoc}

    [$tableName] () 


*yii/db/oci/Schema::loadTableIndexes*			protected
>
 loadTableIndexes($tableName)
<
return (void)

 {@inheritdoc}

    [$tableName] () 


*yii/db/oci/Schema::loadTableUniques*			protected
>
 loadTableUniques($tableName)
<
return (void)

 {@inheritdoc}

    [$tableName] () 


*yii/db/oci/Schema::loadTableChecks*			protected
>
 loadTableChecks($tableName)
<
return (void)

 {@inheritdoc}

    [$tableName] () 


*yii/db/oci/Schema::loadTableDefaultValues*		protected
>
 loadTableDefaultValues($tableName)
<
return (void)

 {@inheritdoc}

    [$tableName] () 


*yii/db/oci/Schema::getTablePrimaryKey*			public

 See |yii/db/ConstraintFinderTrait::getTablePrimaryKey|


*yii/db/oci/Schema::getSchemaPrimaryKeys*			public

 See |yii/db/ConstraintFinderTrait::getSchemaPrimaryKeys|


*yii/db/oci/Schema::getTableForeignKeys*			public

 See |yii/db/ConstraintFinderTrait::getTableForeignKeys|


*yii/db/oci/Schema::getSchemaForeignKeys*			public

 See |yii/db/ConstraintFinderTrait::getSchemaForeignKeys|


*yii/db/oci/Schema::getTableIndexes*			public

 See |yii/db/ConstraintFinderTrait::getTableIndexes|


*yii/db/oci/Schema::getSchemaIndexes*			public

 See |yii/db/ConstraintFinderTrait::getSchemaIndexes|


*yii/db/oci/Schema::getTableUniques*			public

 See |yii/db/ConstraintFinderTrait::getTableUniques|


*yii/db/oci/Schema::getSchemaUniques*			public

 See |yii/db/ConstraintFinderTrait::getSchemaUniques|


*yii/db/oci/Schema::getTableChecks*			public

 See |yii/db/ConstraintFinderTrait::getTableChecks|


*yii/db/oci/Schema::getSchemaChecks*			public

 See |yii/db/ConstraintFinderTrait::getSchemaChecks|


*yii/db/oci/Schema::getTableDefaultValues*		public

 See |yii/db/ConstraintFinderTrait::getTableDefaultValues|


*yii/db/oci/Schema::getSchemaDefaultValues*		public

 See |yii/db/ConstraintFinderTrait::getSchemaDefaultValues|


*yii/db/oci/Schema::resolveTableNames*			protected
>
 resolveTableNames($table, $name)
<
return (void)

 Resolves the table name and schema name (if any).

    [$table] (\yii\db\TableSchema) The table metadata object
    [$name] (string) The table name


*yii/db/oci/Schema::findColumns*				protected
>
 findColumns($table)
<
return (bool) Whether the table exists

 Collects the table column metadata.

    [$table] (\yii\db\TableSchema) The table schema


*yii/db/oci/Schema::getTableSequenceName*			protected
>
 getTableSequenceName($tableName)
<
return (string|null) Whether the sequence exists

 Sequence name of table.

    [$tableName] (string) 


*yii/db/oci/Schema::createColumn*				protected
>
 createColumn($column)
<
return (\yii\db\ColumnSchema) 

 Creates ColumnSchema instance.

    [$column] (array) 


*yii/db/oci/Schema::findConstraints*			protected
>
 findConstraints($table)
<
return (void)

 Finds constraints and fills them into TableSchema object passed.

    [$table] (\yii\db\TableSchema) 


*yii/db/oci/Schema::extractColumnType*			protected
>
 extractColumnType($column, $dbType, $precision, $scale, $length)
<
return (void)

 Extracts the data types for the given column.

    [$column] (\yii\db\ColumnSchema) 
    [$dbType] (string) DB type
    [$precision] (string) Total number of digits. This parameter is available
    since version 2.0.4.
    [$scale] (string) Number of digits on the right of the decimal separator.
    This parameter is available since version 2.0.4.
    [$length] (string) Length for character types. This parameter is available
    since version 2.0.4.


*yii/db/oci/Schema::extractColumnSize*			protected
>
 extractColumnSize($column, $dbType, $precision, $scale, $length)
<
return (void)

 Extracts size, precision and scale information from column's DB type.

    [$column] (\yii\db\ColumnSchema) 
    [$dbType] (string) The column's DB type
    [$precision] (string) Total number of digits. This parameter is available
    since version 2.0.4.
    [$scale] (string) Number of digits on the right of the decimal separator.
    This parameter is available since version 2.0.4.
    [$length] (string) Length for character types. This parameter is available
    since version 2.0.4.



 vim:tw=78:ts=8:ft=help:norl:
