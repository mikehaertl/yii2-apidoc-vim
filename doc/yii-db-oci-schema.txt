
*yii/db/oci/Schema*   >> |yii/db/Schema|
===================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/Schema::$db|
 |yii/db/Schema::$defaultSchema|
 |yii/db/Schema::$columnSchemaClass|
 |yii/db/Schema::$columnQuoteCharacter|
 |yii/db/Schema::$tableSchemas|
 |yii/db/Schema::$schemaNames|
 |yii/db/Schema::$tableNames|
 |yii/db/Schema::$queryBuilder|
 |yii/db/Schema::$transactionIsolationLevel|
 |yii/db/Schema::$serverVersion|
 |yii/db/ConstraintFinderTrait::$schemaPrimaryKeys|
 |yii/db/ConstraintFinderTrait::$schemaForeignKeys|
 |yii/db/ConstraintFinderTrait::$schemaIndexes|
 |yii/db/ConstraintFinderTrait::$schemaUniques|
 |yii/db/ConstraintFinderTrait::$schemaChecks|
 |yii/db/ConstraintFinderTrait::$schemaDefaultValues|


$exceptionMap				*yii/db/oci/Schema::$exceptionMap*

 (array) Map of DB errors and corresponding exceptions If left part is found
 in DB error message exception class from the right part is used.

$tableQuoteCharacter			*yii/db/oci/Schema::$tableQuoteCharacter*

 (string|string[]) 

 Character used to quote schema, table, etc. names. An array of 2 characters
 can be used in case starting and ending characters are different.



$lastInsertID				*yii/db/oci/Schema::$lastInsertID*

 (string) The row ID of the last row inserted, or the last value retrieved
 from the sequence object



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/db/Schema::createColumnSchema|
 |yii/db/Schema::getTableSchema|
 |yii/db/Schema::getTableSchemas|
 |yii/db/Schema::getSchemaNames|
 |yii/db/Schema::getTableNames|
 |yii/db/Schema::getQueryBuilder|
 |yii/db/Schema::getPdoType|
 |yii/db/Schema::refresh|
 |yii/db/Schema::refreshTableSchema|
 |yii/db/Schema::supportsSavepoint|
 |yii/db/Schema::createSavepoint|
 |yii/db/Schema::rollBackSavepoint|
 |yii/db/Schema::setTransactionIsolationLevel|
 |yii/db/Schema::quoteValue|
 |yii/db/Schema::quoteTableName|
 |yii/db/Schema::getTableNameParts|
 |yii/db/Schema::quoteColumnName|
 |yii/db/Schema::quoteSimpleColumnName|
 |yii/db/Schema::unquoteSimpleTableName|
 |yii/db/Schema::unquoteSimpleColumnName|
 |yii/db/Schema::getRawTableName|
 |yii/db/Schema::getColumnPhpType|
 |yii/db/Schema::convertException|
 |yii/db/Schema::isReadQuery|
 |yii/db/Schema::getServerVersion|
 |yii/db/Schema::getCacheKey|
 |yii/db/Schema::getCacheTag|
 |yii/db/ConstraintFinderTrait::getTableMetadata|
 |yii/db/ConstraintFinderTrait::getSchemaMetadata|
 |yii/db/Schema::setTableMetadata|
 |yii/db/Schema::normalizePdoRowKeyCase|
 |yii/db/ConstraintFinderTrait::getTablePrimaryKey|
 |yii/db/ConstraintFinderTrait::getSchemaPrimaryKeys|
 |yii/db/ConstraintFinderTrait::getTableForeignKeys|
 |yii/db/ConstraintFinderTrait::getSchemaForeignKeys|
 |yii/db/ConstraintFinderTrait::getTableIndexes|
 |yii/db/ConstraintFinderTrait::getSchemaIndexes|
 |yii/db/ConstraintFinderTrait::getTableUniques|
 |yii/db/ConstraintFinderTrait::getSchemaUniques|
 |yii/db/ConstraintFinderTrait::getTableChecks|
 |yii/db/ConstraintFinderTrait::getSchemaChecks|
 |yii/db/ConstraintFinderTrait::getTableDefaultValues|
 |yii/db/ConstraintFinderTrait::getSchemaDefaultValues|


*yii/db/oci/Schema::init*					public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/db/oci/Schema::resolveTableName*			protected
>
 resolveTableName($name)
<
return (\yii\db\TableSchema) 'TableSchema' with resolved table, schema, etc. names.

 Resolves the table name and schema name (if any).







    [$name] (string) The table name


*yii/db/oci/Schema::findSchemaNames*			protected
>
 findSchemaNames()
<
return (array) All schema names in the database, except system schemas.

 Returns all schema names in the database, including the default one but not
 system schemas.



 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception.




*yii/db/oci/Schema::findTableNames*			protected
>
 findTableNames($schema='''')
<
return (array) All table names in the database. The names have NO schema name prefix.

 Returns all table names in the database.



 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception.



    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema.


*yii/db/oci/Schema::loadTableSchema*			protected
>
 loadTableSchema($name)
<
return (\yii\db\TableSchema|null) DBMS-dependent table metadata, 'null' if the table
does not exist.

 Loads the metadata for the specified table.







    [$name] (string) Table name


*yii/db/oci/Schema::createQueryBuilder*			public
>
 createQueryBuilder()
<
return (\yii\db\QueryBuilder) Query builder instance

 Creates a query builder for the database.



 This method may be overridden by child classes to create a DBMS-specific
 query builder.




*yii/db/oci/Schema::createColumnSchemaBuilder*		public
>
 createColumnSchemaBuilder($type, $length='null')
<
return (\yii\db\ColumnSchemaBuilder) Column schema builder instance

 Create a column schema builder instance giving the type and value precision.



 This method may be overridden by child classes to create a DBMS-specific
 column schema builder.



    [$type] (string) Type of the column. See 'ColumnSchemaBuilder::$type'.
    [$length] (int|string|array) Length or precision of the column. See
    'ColumnSchemaBuilder::$length'.


*yii/db/oci/Schema::findUniqueIndexes*			public
>
 findUniqueIndexes($table)
<
return (array) All unique indexes for the given table.

 Returns all unique indexes for the given table.

 Each array element is of the following structure:.

   [
       'IndexName1' => ['col1' [, ...]],
       'IndexName2' => ['col2' [, ...]],
   ]



    [$table] (\yii\db\TableSchema) The table metadata


*yii/db/oci/Schema::getLastInsertID*			public
>
 getLastInsertID($sequenceName='''')
<
return (string) The row ID of the last row inserted, or the last value retrieved from
the sequence object

    [$sequenceName] (string) Name of the sequence object (required by some
    DBMS)


*yii/db/oci/Schema::releaseSavepoint*			public
>
 releaseSavepoint($name)
<
return (void)

 Releases an existing savepoint.







    [$name] (string) The savepoint name


*yii/db/oci/Schema::insert*				public
>
 insert($table, $columns)
<
return (array|false) Primary key values or false if the command fails

 Executes the INSERT command, returning primary key values.







    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column data (name => value) to be inserted into the
    table.


*yii/db/oci/Schema::quoteSimpleTableName*			public
>
 quoteSimpleTableName($name)
<
return (string) The properly quoted table name

 Quotes a simple table name for use in a query.



 A simple table name should contain the table name only without any schema
 prefix. If the table name is already quoted, this method will do nothing.



    [$name] (string) Table name


*yii/db/oci/Schema::loadTablePrimaryKey*			protected
>
 loadTablePrimaryKey($tableName)
<
return (void)

    [$tableName] () 


*yii/db/oci/Schema::loadTableForeignKeys*			protected
>
 loadTableForeignKeys($tableName)
<
return (void)

    [$tableName] () 


*yii/db/oci/Schema::loadTableIndexes*			protected
>
 loadTableIndexes($tableName)
<
return (void)

    [$tableName] () 


*yii/db/oci/Schema::loadTableUniques*			protected
>
 loadTableUniques($tableName)
<
return (void)

    [$tableName] () 


*yii/db/oci/Schema::loadTableChecks*			protected
>
 loadTableChecks($tableName)
<
return (void)

    [$tableName] () 


*yii/db/oci/Schema::loadTableDefaultValues*		protected
>
 loadTableDefaultValues($tableName)
<
return (void)

    [$tableName] () 


*yii/db/oci/Schema::resolveTableNames*			protected
>
 resolveTableNames($table, $name)
<
return (void)

 Resolves the table name and schema name (if any).

    [$table] (\yii\db\TableSchema) The table metadata object
    [$name] (string) The table name


*yii/db/oci/Schema::findColumns*				protected
>
 findColumns($table)
<
return (bool) Whether the table exists

 Collects the table column metadata.

    [$table] (\yii\db\TableSchema) The table schema


*yii/db/oci/Schema::getTableSequenceName*			protected
>
 getTableSequenceName($tableName)
<
return (string|null) Whether the sequence exists

 Sequence name of table.

    [$tableName] (string) 


*yii/db/oci/Schema::createColumn*				protected
>
 createColumn($column)
<
return (\yii\db\ColumnSchema) 

 Creates ColumnSchema instance.

    [$column] (array) 


*yii/db/oci/Schema::findConstraints*			protected
>
 findConstraints($table)
<
return (void)

 Finds constraints and fills them into TableSchema object passed.

    [$table] (\yii\db\TableSchema) 


*yii/db/oci/Schema::extractColumnType*			protected
>
 extractColumnType($column, $dbType, $precision, $scale, $length)
<
return (void)

 Extracts the data types for the given column.

    [$column] (\yii\db\ColumnSchema) 
    [$dbType] (string) DB type
    [$precision] (string) Total number of digits. This parameter is available
    since version 2.0.4.
    [$scale] (string) Number of digits on the right of the decimal separator.
    This parameter is available since version 2.0.4.
    [$length] (string) Length for character types. This parameter is available
    since version 2.0.4.


*yii/db/oci/Schema::extractColumnSize*			protected
>
 extractColumnSize($column, $dbType, $precision, $scale, $length)
<
return (void)

 Extracts size, precision and scale information from column's DB type.

    [$column] (\yii\db\ColumnSchema) 
    [$dbType] (string) The column's DB type
    [$precision] (string) Total number of digits. This parameter is available
    since version 2.0.4.
    [$scale] (string) Number of digits on the right of the decimal separator.
    This parameter is available since version 2.0.4.
    [$length] (string) Length for character types. This parameter is available
    since version 2.0.4.



 vim:tw=78:ts=8:ft=help:norl:
