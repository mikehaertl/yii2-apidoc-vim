
*yii/authclient/OAuth2*   >> |yii/authclient/BaseOAuth|
=======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/authclient/OpenIdConnect|
|yii/authclient/clients/LinkedIn|
|yii/authclient/clients/Google|
|yii/authclient/clients/VKontakte|
|yii/authclient/clients/GoogleHybrid|
|yii/authclient/clients/Yandex|
|yii/authclient/clients/TwitterOAuth2|
|yii/authclient/clients/GitHub|
|yii/authclient/clients/Live|
|yii/authclient/clients/Facebook|

DESCRIPTION
------------------------------------------------------------------------------

 In oder to acquire access token perform following sequence:

   use yii\authclient\OAuth2;

   // assuming class MyAuthClient extends OAuth2
   $oauthClient = new MyAuthClient();
   $url = $oauthClient->buildAuthUrl(); // Build authorization URL
   Yii::$app->getResponse()->redirect($url); // Redirect to authorization URL.
   // After user returns at our site:
   $code = Yii::$app->getRequest()->get('code');
   $accessToken = $oauthClient->fetchAccessToken($code); // Get access token




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/authclient/BaseOAuth::$apiBaseUrl|
 |yii/authclient/BaseOAuth::$authUrl|
 |yii/authclient/BaseOAuth::$scope|
 |yii/authclient/BaseOAuth::$autoRefreshAccessToken|


$version				*yii/authclient/OAuth2::$version*

 (string) Protocol version.

$clientId				*yii/authclient/OAuth2::$clientId*

 (string) OAuth client ID.

$clientSecret				*yii/authclient/OAuth2::$clientSecret*

 (string) OAuth client secret.

$tokenUrl				*yii/authclient/OAuth2::$tokenUrl*

 (string) Token request URL endpoint.

$validateAuthState			*yii/authclient/OAuth2::$validateAuthState*

 (bool) Whether to use and validate auth 'state' parameter in authentication
 flow. If enabled 
   - the opaque value will be generated and applied to auth URL to
   maintain state between the request and callback. The authorization server
 includes this value, when redirecting the user-agent back to the client. The
 option is used for preventing cross-site request forgery.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/authclient/ClientInterface::setId|
 |yii/authclient/ClientInterface::getId|
 |yii/authclient/ClientInterface::setName|
 |yii/authclient/ClientInterface::getName|
 |yii/authclient/ClientInterface::setTitle|
 |yii/authclient/ClientInterface::getTitle|
 |yii/authclient/BaseClient::setUserAttributes|
 |yii/authclient/ClientInterface::getUserAttributes|
 |yii/authclient/BaseClient::setNormalizeUserAttributeMap|
 |yii/authclient/BaseClient::getNormalizeUserAttributeMap|
 |yii/authclient/BaseClient::setViewOptions|
 |yii/authclient/ClientInterface::getViewOptions|
 |yii/authclient/BaseClient::getHttpClient|
 |yii/authclient/BaseOAuth::setHttpClient|
 |yii/authclient/BaseClient::setRequestOptions|
 |yii/authclient/BaseClient::getRequestOptions|
 |yii/authclient/BaseClient::getStateStorage|
 |yii/authclient/BaseClient::setStateStorage|
 |yii/authclient/BaseClient::defaultName|
 |yii/authclient/BaseClient::defaultTitle|
 |yii/authclient/BaseClient::initUserAttributes|
 |yii/authclient/BaseClient::defaultNormalizeUserAttributeMap|
 |yii/authclient/BaseClient::defaultViewOptions|
 |yii/authclient/BaseOAuth::createHttpClient|
 |yii/authclient/BaseClient::normalizeUserAttributes|
 |yii/authclient/BaseClient::createRequest|
 |yii/authclient/BaseOAuth::defaultRequestOptions|
 |yii/authclient/BaseClient::setState|
 |yii/authclient/BaseClient::getState|
 |yii/authclient/BaseClient::removeState|
 |yii/authclient/BaseClient::getStateKeyPrefix|
 |yii/authclient/BaseOAuth::setReturnUrl|
 |yii/authclient/BaseOAuth::getReturnUrl|
 |yii/authclient/BaseOAuth::setAccessToken|
 |yii/authclient/BaseOAuth::getAccessToken|
 |yii/authclient/BaseOAuth::setSignatureMethod|
 |yii/authclient/BaseOAuth::getSignatureMethod|
 |yii/authclient/BaseOAuth::createSignatureMethod|
 |yii/authclient/BaseOAuth::sendRequest|
 |yii/authclient/BaseOAuth::composeUrl|
 |yii/authclient/BaseOAuth::saveAccessToken|
 |yii/authclient/BaseOAuth::restoreAccessToken|
 |yii/authclient/BaseOAuth::createApiRequest|
 |yii/authclient/BaseOAuth::beforeApiRequestSend|
 |yii/authclient/BaseOAuth::api|


*yii/authclient/OAuth2::defaultReturnUrl*			protected
>
 defaultReturnUrl()
<
return (string) Return URL.

 Composes default 'returnUrl' value.


*yii/authclient/OAuth2::createToken*			protected
>
 createToken($tokenConfig='[]')
<
return (\yii\authclient\OAuthToken) Token instance.

 Creates token from its configuration.

    [$tokenConfig] (array) Token configuration.


*yii/authclient/OAuth2::refreshAccessToken*		public
>
 refreshAccessToken($token)
<
return (\yii\authclient\OAuthToken) New auth token.

 Gets new auth token to replace expired one.

    [$token] (\yii\authclient\OAuthToken) Expired auth token.


*yii/authclient/OAuth2::applyAccessTokenToRequest*	public
>
 applyAccessTokenToRequest($request, $accessToken)
<
return (void)

 Applies access token to the HTTP request instance.







    [$request] (\yii\httpclient\Request) HTTP request instance.
    [$accessToken] (\yii\authclient\OAuthToken) Access token instance.


*yii/authclient/OAuth2::buildAuthUrl*			public
>
 buildAuthUrl($params='[]')
<
return (string) Authorization URL.

 Composes user authorization URL.

    [$params] (array) Additional auth GET params.


*yii/authclient/OAuth2::fetchAccessToken*			public
>
 fetchAccessToken($authCode, $params='[]')
<
return (\yii\authclient\OAuthToken) Access token.

 Fetches access token from authorization code.

    [$authCode] (string) Authorization code, usually comes at GET parameter
    'code'.
    [$params] (array) Additional request params.


*yii/authclient/OAuth2::applyClientCredentialsToRequest*	protected
>
 applyClientCredentialsToRequest($request)
<
return (void)

 Applies client credentials (e.g. 'clientId' and 'clientSecret') to the HTTP
 request instance.

 This method should be invoked before sending any HTTP request, which requires
 client credentials.

    [$request] (\yii\httpclient\Request) HTTP request instance.


*yii/authclient/OAuth2::generateAuthState*		protected
>
 generateAuthState()
<
return (string) Auth state value.

 Generates the auth state value.


*yii/authclient/OAuth2::authenticateClient*		public
>
 authenticateClient($params='[]')
<
return (\yii\authclient\OAuthToken) Access token.

 Authenticate OAuth client directly at the provider without third party (user)
 involved, using 'client_credentials' grant type.

    [$params] (array) Additional request params.


*yii/authclient/OAuth2::authenticateUser*			public
>
 authenticateUser($username, $password, $params='[]')
<
return (\yii\authclient\OAuthToken) Access token.

 Authenticates user directly by 'username/password' pair, using 'password'
 grant type.

    [$username] (string) User name.
    [$password] (string) User password.
    [$params] (array) Additional request params.


*yii/authclient/OAuth2::authenticateUserJwt*		public
>
 authenticateUserJwt($username, $signature='null', $options='[]', $params='[]')
<
return (\yii\authclient\OAuthToken) Access token.

 Authenticates user directly using JSON Web Token (JWT).

    [$username] (string) 
    [$signature] (\yii\authclient\signature\BaseMethod|array) Signature method
    or its array configuration. If empty 
      - 'signatureMethod' will be used.
    [$options] (array) Additional options. Valid options are:


      - header: array, additional JWS header parameters. 
      - payload: array, additional JWS payload (message or claim-set)
      parameters. 
      - signatureKey: string, signature key to be used, if not set -
      'clientSecret' will be used.
    [$params] (array) Additional request params.



 vim:tw=78:ts=8:ft=help:norl:
