
*yii/helpers/BaseJson*  
======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/helpers/Json|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseJson. Use 'Json' instead.


PROPERTY DETAILS
------------------------------------------------------------------------------


$jsonErrorMessages			*yii/helpers/BaseJson::$jsonErrorMessages*

 (array)



METHOD DETAILS
------------------------------------------------------------------------------


*yii/helpers/BaseJson::encode*				public
>
 encode($value, $options=320)
<
return (string) The encoding result.

 Encodes the given value into a JSON string.

 The method enhances 'json_encode()' by supporting JavaScript expressions. In
 particular, the method will not encode a JavaScript expression that is
 represented in terms of a 'JsExpression' object.

 Note that data encoded as JSON must be UTF-8 encoded according to the JSON
 specification. You must ensure strings passed to this method have proper
 encoding before passing them.

    [$value] (mixed) The data to be encoded.
    [$options] (int) The encoding options. For more details please refer to
    <http://www.php.net/manual/en/function.json-encode.php>. Default is
    'JSON_UNESCAPED_SLASHES | JSON_UNESCAPED_UNICODE'.


*yii/helpers/BaseJson::htmlEncode*			public
>
 htmlEncode($value)
<
return (string) The encoding result

 Encodes the given value into a JSON string HTML-escaping entities so it is
 safe to be embedded in HTML code.

 The method enhances 'json_encode()' by supporting JavaScript expressions. In
 particular, the method will not encode a JavaScript expression that is
 represented in terms of a 'JsExpression' object.

 Note that data encoded as JSON must be UTF-8 encoded according to the JSON
 specification. You must ensure strings passed to this method have proper
 encoding before passing them.

    [$value] (mixed) The data to be encoded


*yii/helpers/BaseJson::decode*				public
>
 decode($json, $asArray='true')
<
return (mixed) The PHP data

 Decodes the given JSON string into a PHP data structure.

    [$json] (string) The JSON string to be decoded
    [$asArray] (bool) Whether to return objects in terms of associative
    arrays.


*yii/helpers/BaseJson::handleJsonError*			protected
>
 handleJsonError($lastError)
<
return (void)

 Handles 'encode()' and 'decode()' errors by throwing exceptions with the
 respective error message.

    [$lastError] (int) Error code from
    [json_last_error()](http://php.net/manual/en/function.json-last-error.php).


*yii/helpers/BaseJson::processData*			protected
>
 processData($data, $expressions, $expPrefix)
<
return (mixed) The processed data

 Pre-processes the data before sending it to 'json_encode()'.

    [$data] (mixed) The data to be processed
    [$expressions] (array) Collection of JavaScript expressions
    [$expPrefix] (string) A prefix internally used to handle JS expressions


*yii/helpers/BaseJson::errorSummary*			public
>
 errorSummary($models, $options='[]')
<
return (string) The generated error summary

 Generates a summary of the validation errors.

    [$models] (\yii\base\Model|\yii\base\Model[]) The model(s) whose
    validation errors are to be displayed.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - showAllErrors: boolean, if set to true every error message for
      each attribute will be shown otherwise   only the first error message
    for each attribute will be shown. Defaults to 'false'.



 vim:tw=78:ts=8:ft=help:norl:
