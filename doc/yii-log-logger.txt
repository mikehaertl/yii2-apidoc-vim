
*yii/log/Logger*   >> |yii/base/Component|
================

DESCRIPTION
------------------------------------------------------------------------------

 A Logger instance can be accessed via 'Yii::getLogger()'. You can call the
 method 'log()' to record a single log message. For convenience, a set of
 shortcut methods are provided for logging messages of various severity levels
 via the 'Yii' class:


   - 'Yii::trace()' 
   - 'Yii::error()' 
   - 'Yii::warning()' 
   - 'Yii::info()' 
   - 'Yii::beginProfile()' 
   - 'Yii::endProfile()'

 For more details and usage information on Logger, see the [guide article on
 logging](guide:runtime-logging).

 When the application ends or 'flushInterval' is reached, Logger will call
 'flush()' to send logged messages to different log targets, such as
 'FileTarget|file', 'EmailTarget|email', or 'DbTarget|database', with the help
 of the 'dispatcher'.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|


$messages				*yii/log/Logger::$messages*

 (array) Logged messages. This property is managed by 'log()' and 'flush()'.
 Each log message is of the following structure:

 ''' [   [0] => message (mixed, can be a string or some complex data, such as
 an exception object)   [1] => level (integer)   [2] => category (string)  
 [3] => timestamp (float, obtained by microtime(true))   [4] => traces (array,
 debug backtrace, contains the application code call stacks)   [5] => memory
 usage in bytes (int, obtained by memory_get_usage()), available since version
 2.0.11. ] '''

$flushInterval				*yii/log/Logger::$flushInterval*

 (int) How many messages should be logged before they are flushed from memory
 and sent to targets. Defaults to 1000, meaning the 'flush' method will be
 invoked once every 1000 messages logged. Set this property to be 0 if you
 don't want to flush messages until the application terminates. This property
 mainly affects how much memory will be taken by the logged messages. A
 smaller value means less memory, but will increase the execution time due to
 the overhead of 'flush()'.

$traceLevel				*yii/log/Logger::$traceLevel*

 (int) How much call stack information (file name and line number) should be
 logged for each message. If it is greater than 0, at most that number of call
 stacks will be logged. Note that only application call stacks are counted.

$dispatcher				*yii/log/Logger::$dispatcher*

 (\yii\log\Dispatcher) The message dispatcher

$elapsedTime				*yii/log/Logger::$elapsedTime*

 (float) The total elapsed time in seconds for current request.

$profiling				*yii/log/Logger::$profiling*

 (array) The profiling results. Each element is an array consisting of these
 elements: 'info', 'category', 'timestamp', 'trace', 'level', 'duration',
 'memory', 'memoryDiff'. The 'memory' and 'memoryDiff' values are available
 since version 2.0.11.

$dbProfiling				*yii/log/Logger::$dbProfiling*

 (array) The first element indicates the number of SQL statements executed,
 and the second element the total time spent in SQL execution.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/log/Logger::init*					public
>
 init()
<
return (void)

 Initializes the logger by registering 'flush()' as a shutdown function.


*yii/log/Logger::log*					public
>
 log($message, $level, $category=''application'')
<
return (void)

 Logs a message with the given type and category.

 If 'traceLevel' is greater than 0, additional call stack information about
 the application code will be logged as well.

    [$message] (string|array) The message to be logged. This can be a simple
    string or a more complex data structure that will be handled by a
    'Target|log target'.
    [$level] (int) The level of the message. This must be one of the
    following: 'Logger::LEVEL_ERROR', 'Logger::LEVEL_WARNING',
    'Logger::LEVEL_INFO', 'Logger::LEVEL_TRACE',
    'Logger::LEVEL_PROFILE_BEGIN', 'Logger::LEVEL_PROFILE_END'.
    [$category] (string) The category of the message.


*yii/log/Logger::flush*					public
>
 flush($final='false')
<
return (void)

 Flushes log messages from memory to targets.

    [$final] (bool) Whether this is a final call during a request.


*yii/log/Logger::getElapsedTime*				public
>
 getElapsedTime()
<
return (float) The total elapsed time in seconds for current request.

 Returns the total elapsed time since the start of the current request.

 This method calculates the difference between now and the timestamp defined
 by constant 'YII_BEGIN_TIME' which is evaluated at the beginning of
 '\yii\BaseYii' class file.


*yii/log/Logger::getProfiling*				public
>
 getProfiling($categories='[]', $excludeCategories='[]')
<
return (array) The profiling results. Each element is an array consisting of these
elements: 'info', 'category', 'timestamp', 'trace', 'level', 'duration',
'memory', 'memoryDiff'. The 'memory' and 'memoryDiff' values are available
since version 2.0.11.

 Returns the profiling results.

 By default, all profiling results will be returned. You may provide
 '$categories' and '$excludeCategories' as parameters to retrieve the results
 that you are interested in.

    [$categories] (array) List of categories that you are interested in. You
    can use an asterisk at the end of a category to do a prefix match. For
    example, 'yii\db\*' will match categories starting with 'yii\db\', such as
    'yii\db\Connection'.
    [$excludeCategories] (array) List of categories that you want to exclude


*yii/log/Logger::getDbProfiling*				public
>
 getDbProfiling()
<
return (array) The first element indicates the number of SQL statements executed, and
the second element the total time spent in SQL execution.

 Returns the statistical results of DB queries.

 The results returned include the number of SQL statements executed and the
 total time spent.


*yii/log/Logger::calculateTimings*			public
>
 calculateTimings($messages)
<
return (array) Timings. Each element is an array consisting of these elements:
'info', 'category', 'timestamp', 'trace', 'level', 'duration', 'memory',
'memoryDiff'. The 'memory' and 'memoryDiff' values are available since version
2.0.11.

 Calculates the elapsed time for the given log messages.

    [$messages] (array) The log messages obtained from profiling


*yii/log/Logger::getLevelName*				public
>
 getLevelName($level)
<
return (string) The text display of the level

 Returns the text display of the specified level.

    [$level] (int) The message level, e.g. 'LEVEL_ERROR', 'LEVEL_WARNING'.



 vim:tw=78:ts=8:ft=help:norl:
