
*yii\log\Logger*   >> yii\base\Component
================

 Logger can be accessed via 'Yii::getLogger()'. You can call the method
 [[log()]] to record a single log message. For convenience, a set of shortcut
 methods are provided for logging messages of various severity levels via the
 [[Yii]] class:

 - [[Yii::trace()]] - [[Yii::error()]] - [[Yii::warning()]] - [[Yii::info()]]
 - [[Yii::beginProfile()]] - [[Yii::endProfile()]]

 When the application ends or [[flushInterval]] is reached, Logger will call
 [[flush()]] to send logged messages to different log targets, such as file,
 email, Web, with the help of [[dispatcher]].


PROPERTY DETAILS
------------------------------------------------------------------------------

<$messages>				*yii.log.Logger::$messages*
 (array) Logged messages. This property is managed by [[log()]] and
 [[flush()]]. Each log message is of the following structure:

   [
     [0] => message (mixed, can be a string or some complex data, such as an
 exception object)
     [1] => level (integer)
     [2] => category (string)
     [3] => timestamp (float, obtained by microtime(true))
     [4] => traces (array, debug backtrace, contains the application code call
 stacks)
   ]



<$flushInterval>			*yii.log.Logger::$flushInterval*
 (integer) How many messages should be logged before they are flushed from
 memory and sent to targets. Defaults to 1000, meaning the [[flush]] method
 will be invoked once every 1000 messages logged. Set this property to be 0 if
 you don't want to flush messages until the application terminates. This
 property mainly affects how much memory will be taken by the logged messages.
 A smaller value means less memory, but will increase the execution time due
 to the overhead of [[flush()]].

<$traceLevel>				*yii.log.Logger::$traceLevel*
 (integer) How much call stack information (file name and line number) should
 be logged for each message. If it is greater than 0, at most that number of
 call stacks will be logged. Note that only application call stacks are
 counted.

<$dispatcher>				*yii.log.Logger::$dispatcher*
 (\yii\log\Dispatcher) The message dispatcher

<$behaviors>				*yii.log.Logger::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

<$elapsedTime>				*yii.log.Logger::$elapsedTime*
 (float) The total elapsed time in seconds for current request.

<$profiling>				*yii.log.Logger::$profiling*
 (array) The profiling results. Each element is an array consisting of these
 elements: 'info', 'category', 'timestamp', 'trace', 'level', 'duration'.

<$dbProfiling>				*yii.log.Logger::$dbProfiling*
 (array) The first element indicates the number of SQL statements executed,
 and the second element the total time spent in SQL execution.



METHOD DETAILS
------------------------------------------------------------------------------

*yii.log.Logger::className*					 public
 See |yii.base.Object::className|


*yii.log.Logger::__construct*					 public
 See |yii.base.Object::__construct|


*yii.log.Logger::init*						 public
>
 init()
<
(void)




*yii.log.Logger::__get* 					 public
 See |yii.base.Component::__get|


*yii.log.Logger::__set* 					 public
 See |yii.base.Component::__set|


*yii.log.Logger::__isset*					 public
 See |yii.base.Component::__isset|


*yii.log.Logger::__unset*					 public
 See |yii.base.Component::__unset|


*yii.log.Logger::__call*					 public
 See |yii.base.Component::__call|


*yii.log.Logger::hasProperty*					 public
 See |yii.base.Component::hasProperty|


*yii.log.Logger::canGetProperty*				 public
 See |yii.base.Component::canGetProperty|


*yii.log.Logger::canSetProperty*				 public
 See |yii.base.Component::canSetProperty|


*yii.log.Logger::hasMethod*					 public
 See |yii.base.Component::hasMethod|


*yii.log.Logger::__clone*					 public
 See |yii.base.Component::__clone|


*yii.log.Logger::behaviors*					 public
 See |yii.base.Component::behaviors|


*yii.log.Logger::hasEventHandlers*				 public
 See |yii.base.Component::hasEventHandlers|


*yii.log.Logger::on*						 public
 See |yii.base.Component::on|


*yii.log.Logger::off*						 public
 See |yii.base.Component::off|


*yii.log.Logger::trigger*					 public
 See |yii.base.Component::trigger|


*yii.log.Logger::getBehavior*					 public
 See |yii.base.Component::getBehavior|


*yii.log.Logger::getBehaviors*					 public
 See |yii.base.Component::getBehaviors|


*yii.log.Logger::attachBehavior*				 public
 See |yii.base.Component::attachBehavior|


*yii.log.Logger::attachBehaviors*				 public
 See |yii.base.Component::attachBehaviors|


*yii.log.Logger::detachBehavior*				 public
 See |yii.base.Component::detachBehavior|


*yii.log.Logger::detachBehaviors*				 public
 See |yii.base.Component::detachBehaviors|


*yii.log.Logger::ensureBehaviors*				 public
 See |yii.base.Component::ensureBehaviors|


*yii.log.Logger::log*						 public
>
 log($message, $level, $category=''application'')
<
(void)

 If [[traceLevel]] is greater than 0, additional call stack information about
 the application code will be logged as well.
    [$message] (string) The message to be logged.
    [$level] (integer) The level of the message. This must be one of the
    following: 'Logger::LEVEL_ERROR', 'Logger::LEVEL_WARNING',
    'Logger::LEVEL_INFO', 'Logger::LEVEL_TRACE',
    'Logger::LEVEL_PROFILE_BEGIN', 'Logger::LEVEL_PROFILE_END'.
    [$category] (string) The category of the message.


*yii.log.Logger::flush* 					 public
>
 flush($final='false')
<
(void)


    [$final] (boolean) Whether this is a final call during a request.


*yii.log.Logger::getElapsedTime*				 public
>
 getElapsedTime()
<
(float) The total elapsed time in seconds for current request.

 This method calculates the difference between now and the timestamp defined
 by constant 'YII_BEGIN_TIME' which is evaluated at the beginning of
 [[\yii\BaseYii]] class file.


*yii.log.Logger::getProfiling*					 public
>
 getProfiling($categories='[]', $excludeCategories='[]')
<
(array) The profiling results. Each element is an array consisting of these
elements: 'info', 'category', 'timestamp', 'trace', 'level', 'duration'.

 By default, all profiling results will be returned. You may provide
 '$categories' and '$excludeCategories' as parameters to retrieve the results
 that you are interested in.
    [$categories] (array) List of categories that you are interested in. You
    can use an asterisk at the end of a category to do a prefix match. For
    example, 'yii\db\*' will match categories starting with 'yii\db\', such as
    'yii\db\Connection'.
    [$excludeCategories] (array) List of categories that you want to exclude


*yii.log.Logger::getDbProfiling*				 public
>
 getDbProfiling()
<
(array) The first element indicates the number of SQL statements executed, and
the second element the total time spent in SQL execution.

 The results returned include the number of SQL statements executed and the
 total time spent.


*yii.log.Logger::calculateTimings*				 public
>
 calculateTimings($messages)
<
(array) Timings. Each element is an array consisting of these elements:
'info', 'category', 'timestamp', 'trace', 'level', 'duration'.


    [$messages] (array) The log messages obtained from profiling


*yii.log.Logger::getLevelName*					 public
>
 getLevelName($level)
<
(string) The text display of the level


    [$level] (integer) The message level, e.g. [[LEVEL_ERROR]],
    [[LEVEL_WARNING]].



 vim:tw=78:ts=8:ft=help:norl:
