
*yii/queue/cli/Command*   >> |yii/console/Controller|
=======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/queue/gearman/Command|
|yii/queue/db/Command|
|yii/queue/redis/Command|
|yii/queue/file/Command|
|yii/queue/sqs/Command|
|yii/queue/amqp_interop/Command|
|yii/queue/amqp/Command|
|yii/queue/beanstalk/Command|


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Controller::$id|
 |yii/base/Controller::$module|
 |yii/base/Controller::$defaultAction|
 |yii/base/Controller::$layout|
 |yii/base/Controller::$action|
 |yii/console/Controller::$interactive|
 |yii/console/Controller::$color|
 |yii/console/Controller::$help|
 |yii/base/Component::$behaviors|
 |yii/base/Controller::$modules|
 |yii/base/Controller::$uniqueId|
 |yii/base/Controller::$route|
 |yii/base/Controller::$view|
 |yii/base/ViewContextInterface::$viewPath|
 |yii/console/Controller::$passedOptions|
 |yii/console/Controller::$passedOptionValues|
 |yii/console/Controller::$helpSummary|


$queue					*yii/queue/cli/Command::$queue*

 (\yii\queue\cli\Queue)

$verbose				*yii/queue/cli/Command::$verbose*

 (bool) Verbose mode of a job execute. If enabled, execute result of each job
 will be printed.

$verboseConfig				*yii/queue/cli/Command::$verboseConfig*

 (array) Additional options to the verbose behavior.

$isolate				*yii/queue/cli/Command::$isolate*

 (bool) Isolate mode. It executes a job in a child process.

$phpBinary				*yii/queue/cli/Command::$phpBinary*

 (string) Path to php interpreter that uses to run child processes. If it is
 undefined, PHP_BINARY will be used.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Controller::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Controller::actions|
 |yii/base/Controller::runAction|
 |yii/base/Controller::run|
 |yii/base/Controller::bindActionParams|
 |yii/base/Controller::createAction|
 |yii/base/Controller::afterAction|
 |yii/base/Controller::getModules|
 |yii/base/Controller::getUniqueId|
 |yii/base/Controller::getRoute|
 |yii/base/Controller::render|
 |yii/base/Controller::renderContent|
 |yii/base/Controller::renderPartial|
 |yii/base/Controller::renderFile|
 |yii/base/Controller::getView|
 |yii/base/Controller::setView|
 |yii/base/ViewContextInterface::getViewPath|
 |yii/base/Controller::setViewPath|
 |yii/base/Controller::findLayoutFile|
 |yii/console/Controller::isColorEnabled|
 |yii/console/Controller::ansiFormat|
 |yii/console/Controller::stdout|
 |yii/console/Controller::stderr|
 |yii/console/Controller::prompt|
 |yii/console/Controller::confirm|
 |yii/console/Controller::select|
 |yii/console/Controller::getOptionValues|
 |yii/console/Controller::getPassedOptions|
 |yii/console/Controller::getPassedOptionValues|
 |yii/console/Controller::getHelpSummary|
 |yii/console/Controller::getHelp|
 |yii/console/Controller::getActionHelpSummary|
 |yii/console/Controller::getActionHelp|
 |yii/console/Controller::getActionArgsHelp|
 |yii/console/Controller::getActionOptionsHelp|
 |yii/console/Controller::getActionMethodReflection|
 |yii/console/Controller::parseDocCommentTags|
 |yii/console/Controller::parseDocCommentSummary|
 |yii/console/Controller::parseDocCommentDetail|


*yii/queue/cli/Command::beforeAction*			public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to run.

 This method is invoked right before an action is executed.



 The method will trigger the 'EVENT_BEFORE_ACTION' event. The return value of
 the method will determine whether the action should continue to run.

 In case the action should not run, the request should be handled inside of
 the 'beforeAction' code by either providing the necessary output or
 redirecting the request. Otherwise the response will be empty.

 If you override this method, your code should look like the following:

   public function beforeAction($action)
   {
       // your custom code here, if you want the code to run before action
 filters,
       // which are triggered on the [[EVENT_BEFORE_ACTION]] event, e.g.
 PageCache or AccessControl

       if (!parent::beforeAction($action)) {
           return false;
       }

       // other custom code here

       return true; // or false to not run the action
   }



    [$action] (\yii\base\Action) The action to be executed.


*yii/queue/cli/Command::options*				public
>
 options($actionID)
<
return (string[]) The names of the options valid for the action

 Returns the names of valid options for the action (id) An option requires the
 existence of a public member variable whose name is the option name.



 Child classes may override this method to specify possible options.

 Note that the values setting via options are not available until
 'beforeAction()' is being called.



    [$actionID] (string) The action id of the current request


*yii/queue/cli/Command::optionAliases*			public
>
 optionAliases()
<
return (array) The options alias names valid for the action where the keys is alias
name for option and value is option name.

 Returns option alias names.



 Child classes may override this method to specify alias options.




*yii/queue/cli/Command::isWorkerAction*			protected
>
 isWorkerAction($actionID)
<
return (bool) 

    [$actionID] (string) 


*yii/queue/cli/Command::canVerbose*			protected
>
 canVerbose($actionID)
<
return (bool) 

    [$actionID] (string) 


*yii/queue/cli/Command::canIsolate*			protected
>
 canIsolate($actionID)
<
return (bool) 

    [$actionID] (string) 


*yii/queue/cli/Command::actionExec*			public
>
 actionExec($id, $ttr, $attempt, $pid)
<
return (int) Exit code

 Executes a job.

 The command is internal, and used to isolate a job execution. Manual usage is
 not provided.

    [$id] (string|null) Of a message
    [$ttr] (int) Time to reserve
    [$attempt] (int) Number
    [$pid] (int) Of a worker


*yii/queue/cli/Command::handleMessage*			protected
>
 handleMessage($id, $message, $ttr, $attempt)
<
return (bool) 

 Handles message using child process.

    [$id] (string|null) Of a message
    [$message] (string) 
    [$ttr] (int) Time to reserve
    [$attempt] (int) Number



 vim:tw=78:ts=8:ft=help:norl:
