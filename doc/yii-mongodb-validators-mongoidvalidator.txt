
*yii/mongodb/validators/MongoIdValidator*   >> |yii/validators/Validator|
=========================================

DESCRIPTION
------------------------------------------------------------------------------

 Attribute will be considered as valid, if it is an instance of '\MongoId' or
 a its string value.

 Usage example:

   class Customer extends yii\mongodb\ActiveRecord
   {
       ...
       public function rules()
       {
           return [
               ['_id', 'yii\mongodb\validators\MongoIdValidator']
           ];
       }
   }

 This validator may also serve as a filter, allowing conversion of Mongo ID
 value either to the plain string or to '\MongoId' instance. You can enable
 this feature via 'forceFormat'.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/validators/Validator::$builtInValidators|
 |yii/validators/Validator::$attributes|
 |yii/validators/Validator::$message|
 |yii/validators/Validator::$on|
 |yii/validators/Validator::$except|
 |yii/validators/Validator::$skipOnError|
 |yii/validators/Validator::$skipOnEmpty|
 |yii/validators/Validator::$enableClientValidation|
 |yii/validators/Validator::$isEmpty|
 |yii/validators/Validator::$when|
 |yii/validators/Validator::$whenClient|
 |yii/base/Component::$behaviors|
 |yii/validators/Validator::$validationAttributes|
 |yii/validators/Validator::$attributeNames|


$forceFormat				*yii/mongodb/validators/MongoIdValidator::$forceFormat*

 (string|null) Specifies the format, which validated attribute value should be
 converted to in case validation was successful. valid values are: 
   - 'string' - enforce value converted to plain string. 
   - 'object' - enforce value converted to '\MongoId' instance.   If not set 
   - no conversion will be performed, leaving attribute value intact.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/validators/Validator::createValidator|
 |yii/validators/Validator::validateAttributes|
 |yii/validators/Validator::getValidationAttributes|
 |yii/validators/Validator::validate|
 |yii/validators/Validator::clientValidateAttribute|
 |yii/validators/Validator::getClientOptions|
 |yii/validators/Validator::isActive|
 |yii/validators/Validator::addError|
 |yii/validators/Validator::isEmpty|
 |yii/validators/Validator::formatMessage|
 |yii/validators/Validator::getAttributeNames|


*yii/mongodb/validators/MongoIdValidator::init*		public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/mongodb/validators/MongoIdValidator::validateAttribute*public
>
 validateAttribute($model, $attribute)
<
return (void)

 Validates a single attribute.



 Child classes must implement this method to provide the actual validation
 logic.



    [$model] (\yii\base\Model) The data model to be validated
    [$attribute] (string) The name of the attribute to be validated.


*yii/mongodb/validators/MongoIdValidator::validateValue*	protected
>
 validateValue($value)
<
return (array|null) The error message and the array of parameters to be inserted into
the error message.

  if (!$valid) {
      return [$this->message, [
          'param1' => $this->param1,
          'formattedLimit' =>
Yii::$app->formatter->asShortSize($this->getSizeLimit()),
          'mimeTypes' => implode(', ', $this->mimeTypes),
          'param4' => 'etc...',
      ]];
  }

  return null;

for this example 'message' template can contain '{param1}',
'{formattedLimit}', '{mimeTypes}', '{param4}'

Null should be returned if the data is valid.

 Validates a value.



 A validator class can implement this method to support data validation out of
 the context of a data model.



    [$value] (mixed) The data value to be validated.



 vim:tw=78:ts=8:ft=help:norl:
