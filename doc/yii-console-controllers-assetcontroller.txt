
*yii/console/controllers/AssetController*   >> |yii/console/Controller|
=========================================

DESCRIPTION
------------------------------------------------------------------------------

 Usage:

 1. Create a configuration file using the 'template' action:

    yii asset/template /path/to/myapp/config.php

 2. Edit the created config file, adjusting it for your web application needs.
 3. Run the 'compress' action, using created config:

    yii asset /path/to/myapp/config.php
 /path/to/myapp/config/assets_compressed.php

 4. Adjust your web application config to use compressed assets.

 Note: in the console environment some [path aliases](guide:concept-aliases)
 like '@webroot' and '@web' may not exist, so corresponding paths inside the
 configuration should be specified directly.

 Note: by default this command relies on an external tools to perform actual
 files compression, check 'jsCompressor' and 'cssCompressor' for more details.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Controller::$id|
 |yii/base/Controller::$module|
 |yii/base/Controller::$layout|
 |yii/base/Controller::$action|
 |yii/console/Controller::$interactive|
 |yii/console/Controller::$color|
 |yii/console/Controller::$help|


$defaultAction				*yii/console/controllers/AssetController::$defaultAction*

 (string) Controller default action ID.

$bundles				*yii/console/controllers/AssetController::$bundles*

 (array) List of asset bundles to be compressed.

$targets				*yii/console/controllers/AssetController::$targets*

 (array) List of asset bundles, which represents output compressed files. You
 can specify the name of the output compressed file using 'css' and 'js' keys:
 For example:

   'app\config\AllAsset' => [
       'js' => 'js/all-{hash}.js',
       'css' => 'css/all-{hash}.css',
       'depends' => [ ... ],
   ]

 File names can contain placeholder "{hash}", which will be filled by the hash
 of the resulting file.

 You may specify several target bundles in order to compress different groups
 of assets. In this case you should use 'depends' key to specify, which
 bundles should be covered with particular target bundle. You may leave
 'depends' to be empty for single bundle, which will compress all remaining
 bundles in this case. For example:

   'allShared' => [
       'js' => 'js/all-shared-{hash}.js',
       'css' => 'css/all-shared-{hash}.css',
       'depends' => [
           // Include all assets shared between 'backend' and 'frontend'
           'yii\web\YiiAsset',
           'app\assets\SharedAsset',
       ],
   ],
   'allBackEnd' => [
       'js' => 'js/all-{hash}.js',
       'css' => 'css/all-{hash}.css',
       'depends' => [
           // Include only 'backend' assets:
           'app\assets\AdminAsset'
       ],
   ],
   'allFrontEnd' => [
       'js' => 'js/all-{hash}.js',
       'css' => 'css/all-{hash}.css',
       'depends' => [], // Include all remaining assets
   ],



$jsCompressor				*yii/console/controllers/AssetController::$jsCompressor*

 (string|callable) JavaScript file compressor. If a string, it is treated as
 shell command template, which should contain placeholders {from} 
   - source file name - and {to} - output file name. Otherwise, it is treated
 as PHP callback, which should perform the compression.

 Default value relies on usage of "Closure Compiler"

$cssCompressor				*yii/console/controllers/AssetController::$cssCompressor*

 (string|callable) CSS file compressor. If a string, it is treated as shell
 command template, which should contain placeholders {from} 
   - source file name - and {to} - output file name. Otherwise, it is treated
 as PHP callback, which should perform the compression.

 Default value relies on usage of "YUI Compressor"

$deleteSource				*yii/console/controllers/AssetController::$deleteSource*

 (bool) Whether to delete asset source files after compression. This option
 affects only those bundles, which have '\yii\web\AssetBundle::sourcePath' is
 set.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Controller::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Controller::actions|
 |yii/console/Controller::runAction|
 |yii/base/Controller::run|
 |yii/console/Controller::bindActionParams|
 |yii/base/Controller::createAction|
 |yii/base/Controller::beforeAction|
 |yii/base/Controller::afterAction|
 |yii/base/Controller::getModules|
 |yii/base/Controller::getUniqueId|
 |yii/base/Controller::getRoute|
 |yii/base/Controller::render|
 |yii/base/Controller::renderContent|
 |yii/base/Controller::renderPartial|
 |yii/base/Controller::renderFile|
 |yii/base/Controller::getView|
 |yii/base/Controller::setView|
 |yii/base/Controller::getViewPath|
 |yii/base/Controller::setViewPath|
 |yii/base/Controller::findLayoutFile|
 |yii/console/Controller::isColorEnabled|
 |yii/console/Controller::ansiFormat|
 |yii/console/Controller::stdout|
 |yii/console/Controller::stderr|
 |yii/console/Controller::prompt|
 |yii/console/Controller::confirm|
 |yii/console/Controller::select|
 |yii/console/Controller::options|
 |yii/console/Controller::optionAliases|
 |yii/console/Controller::getOptionValues|
 |yii/console/Controller::getPassedOptions|
 |yii/console/Controller::getPassedOptionValues|
 |yii/console/Controller::getHelpSummary|
 |yii/console/Controller::getHelp|
 |yii/console/Controller::getActionHelpSummary|
 |yii/console/Controller::getActionHelp|
 |yii/console/Controller::getActionArgsHelp|
 |yii/console/Controller::getActionOptionsHelp|
 |yii/console/Controller::getActionMethodReflection|
 |yii/console/Controller::parseDocCommentTags|
 |yii/console/Controller::parseDocCommentSummary|
 |yii/console/Controller::parseDocCommentDetail|


*yii/console/controllers/AssetController::getAssetManager*public
>
 getAssetManager()
<
return (\yii\web\AssetManager) Asset manager instance.

 Returns the asset manager instance.


*yii/console/controllers/AssetController::setAssetManager*public
>
 setAssetManager($assetManager)
<
return (void)

 Sets asset manager instance or configuration.

    [$assetManager] (\yii\web\AssetManager|array) Asset manager instance or
    its array configuration.


*yii/console/controllers/AssetController::actionCompress*	public
>
 actionCompress($configFile, $bundleFile)
<
return (void)

 Combines and compresses the asset files according to the given configuration.

 During the process new asset bundle configuration file will be created. You
 should replace your original asset bundle configuration with this file in
 order to use compressed files.

    [$configFile] (string) Configuration file name.
    [$bundleFile] (string) Output asset bundles configuration file name.


*yii/console/controllers/AssetController::loadConfiguration*protected
>
 loadConfiguration($configFile)
<
return (void)

 Applies configuration from the given file to self instance.

    [$configFile] (string) Configuration file name.


*yii/console/controllers/AssetController::loadBundles*	protected
>
 loadBundles($bundles)
<
return (\yii\web\AssetBundle[]) List of source asset bundles.

 Creates full list of source asset bundles.

    [$bundles] (string[]) List of asset bundle names


*yii/console/controllers/AssetController::loadDependency*	protected
>
 loadDependency($bundle, $result)
<
return (void)

 Loads asset bundle dependencies recursively.

    [$bundle] (\yii\web\AssetBundle) Bundle instance
    [$result] (array) Already loaded bundles list.


*yii/console/controllers/AssetController::loadTargets*	protected
>
 loadTargets($targets, $bundles)
<
return (\yii\web\AssetBundle[]) List of output asset bundles.

 Creates full list of output asset bundles.

    [$targets] (array) Output asset bundles configuration.
    [$bundles] (\yii\web\AssetBundle[]) List of source asset bundles.


*yii/console/controllers/AssetController::buildTarget*	protected
>
 buildTarget($target, $type, $bundles)
<
return (void)

 Builds output asset bundle.

    [$target] (\yii\web\AssetBundle) Output asset bundle
    [$type] (string) Either 'js' or 'css'.
    [$bundles] (\yii\web\AssetBundle[]) Source asset bundles.


*yii/console/controllers/AssetController::adjustDependency*protected
>
 adjustDependency($targets, $bundles)
<
return (\yii\web\AssetBundle[]) Output asset bundles.

 Adjust dependencies between asset bundles in the way source bundles begin to
 depend on output ones.

    [$targets] (\yii\web\AssetBundle[]) Output asset bundles.
    [$bundles] (\yii\web\AssetBundle[]) Source asset bundles.


*yii/console/controllers/AssetController::registerBundle*	protected
>
 registerBundle($bundles, $name, $registered)
<
return (void)

 Registers asset bundles including their dependencies.

    [$bundles] (\yii\web\AssetBundle[]) Asset bundles list.
    [$name] (string) Bundle name.
    [$registered] (array) Stores already registered names.


*yii/console/controllers/AssetController::saveTargets*	protected
>
 saveTargets($targets, $bundleFile)
<
return (void)

 Saves new asset bundles configuration.

    [$targets] (\yii\web\AssetBundle[]) List of asset bundles to be saved.
    [$bundleFile] (string) Output file name.


*yii/console/controllers/AssetController::compressJsFiles*protected
>
 compressJsFiles($inputFiles, $outputFile)
<
return (void)

 Compresses given JavaScript files and combines them into the single one.

    [$inputFiles] (array) List of source file names.
    [$outputFile] (string) Output file name.


*yii/console/controllers/AssetController::compressCssFiles*protected
>
 compressCssFiles($inputFiles, $outputFile)
<
return (void)

 Compresses given CSS files and combines them into the single one.

    [$inputFiles] (array) List of source file names.
    [$outputFile] (string) Output file name.


*yii/console/controllers/AssetController::combineJsFiles*	public
>
 combineJsFiles($inputFiles, $outputFile)
<
return (void)

 Combines JavaScript files into a single one.

    [$inputFiles] (array) Source file names.
    [$outputFile] (string) Output file name.


*yii/console/controllers/AssetController::combineCssFiles*public
>
 combineCssFiles($inputFiles, $outputFile)
<
return (void)

 Combines CSS files into a single one.

    [$inputFiles] (array) Source file names.
    [$outputFile] (string) Output file name.


*yii/console/controllers/AssetController::adjustCssUrl*	protected
>
 adjustCssUrl($cssContent, $inputFilePath, $outputFilePath)
<
return (string) Adjusted CSS content.

 Adjusts CSS content allowing URL references pointing to the original
 resources.

    [$cssContent] (string) Source CSS content.
    [$inputFilePath] (string) Input CSS file name.
    [$outputFilePath] (string) Output CSS file name.


*yii/console/controllers/AssetController::actionTemplate*	public
>
 actionTemplate($configFile)
<
return (int) CLI exit code

 Creates template of configuration file for 'actionCompress'.

    [$configFile] (string) Output file name.



 vim:tw=78:ts=8:ft=help:norl:
