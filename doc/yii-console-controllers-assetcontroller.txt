
*yii/console/controllers/AssetController*   >> |yii/console/Controller|
=========================================

DESCRIPTION
------------------------------------------------------------------------------

 Usage:

 1. Create a configuration file using the 'template' action:

    yii asset/template /path/to/myapp/config.php

 2. Edit the created config file, adjusting it for your web application needs.
 3. Run the 'compress' action, using created config:

    yii asset /path/to/myapp/config.php
 /path/to/myapp/config/assets_compressed.php

 4. Adjust your web application config to use compressed assets.

 Note: in the console environment some path aliases like '@webroot' and '@web'
 may not exist, so corresponding paths inside the configuration should be
 specified directly.

 Note: by default this command relies on an external tools to perform actual
 files compression, check 'jsCompressor' and 'cssCompressor' for more details.


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/console/controllers/AssetController::$id*

 See |yii/base/Controller::$id|

$module					*yii/console/controllers/AssetController::$module*

 See |yii/base/Controller::$module|

$defaultAction				*yii/console/controllers/AssetController::$defaultAction*

 (string) Controller default action ID.

$layout					*yii/console/controllers/AssetController::$layout*

 See |yii/base/Controller::$layout|

$action					*yii/console/controllers/AssetController::$action*

 See |yii/base/Controller::$action|

$interactive				*yii/console/controllers/AssetController::$interactive*

 See |yii/console/Controller::$interactive|

$color					*yii/console/controllers/AssetController::$color*

 See |yii/console/Controller::$color|

$help					*yii/console/controllers/AssetController::$help*

 See |yii/console/Controller::$help|

$bundles				*yii/console/controllers/AssetController::$bundles*

 (array) List of asset bundles to be compressed.

$targets				*yii/console/controllers/AssetController::$targets*

 (array) List of asset bundles, which represents output compressed files. You
 can specify the name of the output compressed file using 'css' and 'js' keys:
 For example:

   'app\config\AllAsset' => [
       'js' => 'js/all-{hash}.js',
       'css' => 'css/all-{hash}.css',
       'depends' => [ ... ],
   ]

 File names can contain placeholder "{hash}", which will be filled by the hash
 of the resulting file.

 You may specify several target bundles in order to compress different groups
 of assets. In this case you should use 'depends' key to specify, which
 bundles should be covered with particular target bundle. You may leave
 'depends' to be empty for single bundle, which will compress all remaining
 bundles in this case. For example:

   'allShared' => [
       'js' => 'js/all-shared-{hash}.js',
       'css' => 'css/all-shared-{hash}.css',
       'depends' => [
           // Include all assets shared between 'backend' and 'frontend'
           'yii\web\YiiAsset',
           'app\assets\SharedAsset',
       ],
   ],
   'allBackEnd' => [
       'js' => 'js/all-{hash}.js',
       'css' => 'css/all-{hash}.css',
       'depends' => [
           // Include only 'backend' assets:
           'app\assets\AdminAsset'
       ],
   ],
   'allFrontEnd' => [
       'js' => 'js/all-{hash}.js',
       'css' => 'css/all-{hash}.css',
       'depends' => [], // Include all remaining assets
   ],



$jsCompressor				*yii/console/controllers/AssetController::$jsCompressor*

 (string|callable) JavaScript file compressor. If a string, it is treated as
 shell command template, which should contain placeholders {from} 
   - source file name - and {to} - output file name. Otherwise, it is treated
 as PHP callback, which should perform the compression.

 Default value relies on usage of "Closure Compiler"

$cssCompressor				*yii/console/controllers/AssetController::$cssCompressor*

 (string|callable) CSS file compressor. If a string, it is treated as shell
 command template, which should contain placeholders {from} 
   - source file name - and {to} - output file name. Otherwise, it is treated
 as PHP callback, which should perform the compression.

 Default value relies on usage of "YUI Compressor"

$deleteSource				*yii/console/controllers/AssetController::$deleteSource*

 (boolean) Whether to delete asset source files after compression. This option
 affects only those bundles, which have '\yii\web\AssetBundle::sourcePath' is
 set.

$behaviors				*yii/console/controllers/AssetController::$behaviors*

 See |yii/base/Component::$behaviors|

$modules				*yii/console/controllers/AssetController::$modules*

 See |yii/base/Controller::$modules|

$uniqueId				*yii/console/controllers/AssetController::$uniqueId*

 See |yii/base/Controller::$uniqueId|

$route					*yii/console/controllers/AssetController::$route*

 See |yii/base/Controller::$route|

$view					*yii/console/controllers/AssetController::$view*

 See |yii/base/Controller::$view|

$viewPath				*yii/console/controllers/AssetController::$viewPath*

 See |yii/base/Controller::$viewPath|

$passedOptions				*yii/console/controllers/AssetController::$passedOptions*

 See |yii/console/Controller::$passedOptions|

$passedOptionValues			*yii/console/controllers/AssetController::$passedOptionValues*

 See |yii/console/Controller::$passedOptionValues|

$helpSummary				*yii/console/controllers/AssetController::$helpSummary*

 See |yii/console/Controller::$helpSummary|

$assetManager				*yii/console/controllers/AssetController::$assetManager*

 (\yii\web\AssetManager) Asset manager instance.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/console/controllers/AssetController::className*	public

 See |yii/base/Object::className|


*yii/console/controllers/AssetController::__construct*	public

 See |yii/base/Controller::__construct|


*yii/console/controllers/AssetController::init*		public

 See |yii/base/Object::init|


*yii/console/controllers/AssetController::__get*		public

 See |yii/base/Object::__get|


*yii/console/controllers/AssetController::__set*		public

 See |yii/base/Object::__set|


*yii/console/controllers/AssetController::__isset*	public

 See |yii/base/Object::__isset|


*yii/console/controllers/AssetController::__unset*	public

 See |yii/base/Object::__unset|


*yii/console/controllers/AssetController::__call*		public

 See |yii/base/Object::__call|


*yii/console/controllers/AssetController::hasProperty*	public

 See |yii/base/Object::hasProperty|


*yii/console/controllers/AssetController::canGetProperty*	public

 See |yii/base/Object::canGetProperty|


*yii/console/controllers/AssetController::canSetProperty*	public

 See |yii/base/Object::canSetProperty|


*yii/console/controllers/AssetController::hasMethod*	public

 See |yii/base/Object::hasMethod|


*yii/console/controllers/AssetController::__clone*	public

 See |yii/base/Component::__clone|


*yii/console/controllers/AssetController::behaviors*	public

 See |yii/base/Component::behaviors|


*yii/console/controllers/AssetController::hasEventHandlers*public

 See |yii/base/Component::hasEventHandlers|


*yii/console/controllers/AssetController::on*		public

 See |yii/base/Component::on|


*yii/console/controllers/AssetController::off*		public

 See |yii/base/Component::off|


*yii/console/controllers/AssetController::trigger*	public

 See |yii/base/Component::trigger|


*yii/console/controllers/AssetController::getBehavior*	public

 See |yii/base/Component::getBehavior|


*yii/console/controllers/AssetController::getBehaviors*	public

 See |yii/base/Component::getBehaviors|


*yii/console/controllers/AssetController::attachBehavior*	public

 See |yii/base/Component::attachBehavior|


*yii/console/controllers/AssetController::attachBehaviors*public

 See |yii/base/Component::attachBehaviors|


*yii/console/controllers/AssetController::detachBehavior*	public

 See |yii/base/Component::detachBehavior|


*yii/console/controllers/AssetController::detachBehaviors*public

 See |yii/base/Component::detachBehaviors|


*yii/console/controllers/AssetController::ensureBehaviors*public

 See |yii/base/Component::ensureBehaviors|


*yii/console/controllers/AssetController::actions*	public

 See |yii/base/Controller::actions|


*yii/console/controllers/AssetController::runAction*	public

 See |yii/console/Controller::runAction|


*yii/console/controllers/AssetController::run*		public

 See |yii/base/Controller::run|


*yii/console/controllers/AssetController::bindActionParams*public

 See |yii/console/Controller::bindActionParams|


*yii/console/controllers/AssetController::createAction*	public

 See |yii/base/Controller::createAction|


*yii/console/controllers/AssetController::beforeAction*	public

 See |yii/base/Controller::beforeAction|


*yii/console/controllers/AssetController::afterAction*	public

 See |yii/base/Controller::afterAction|


*yii/console/controllers/AssetController::getModules*	public

 See |yii/base/Controller::getModules|


*yii/console/controllers/AssetController::getUniqueId*	public

 See |yii/base/Controller::getUniqueId|


*yii/console/controllers/AssetController::getRoute*	public

 See |yii/base/Controller::getRoute|


*yii/console/controllers/AssetController::render*		public

 See |yii/base/Controller::render|


*yii/console/controllers/AssetController::renderContent*	public

 See |yii/base/Controller::renderContent|


*yii/console/controllers/AssetController::renderPartial*	public

 See |yii/base/Controller::renderPartial|


*yii/console/controllers/AssetController::renderFile*	public

 See |yii/base/Controller::renderFile|


*yii/console/controllers/AssetController::getView*	public

 See |yii/base/Controller::getView|


*yii/console/controllers/AssetController::setView*	public

 See |yii/base/Controller::setView|


*yii/console/controllers/AssetController::getViewPath*	public

 See |yii/base/Controller::getViewPath|


*yii/console/controllers/AssetController::setViewPath*	public

 See |yii/base/Controller::setViewPath|


*yii/console/controllers/AssetController::findLayoutFile*	public

 See |yii/base/Controller::findLayoutFile|


*yii/console/controllers/AssetController::isColorEnabled*	public

 See |yii/console/Controller::isColorEnabled|


*yii/console/controllers/AssetController::ansiFormat*	public

 See |yii/console/Controller::ansiFormat|


*yii/console/controllers/AssetController::stdout*		public

 See |yii/console/Controller::stdout|


*yii/console/controllers/AssetController::stderr*		public

 See |yii/console/Controller::stderr|


*yii/console/controllers/AssetController::prompt*		public

 See |yii/console/Controller::prompt|


*yii/console/controllers/AssetController::confirm*	public

 See |yii/console/Controller::confirm|


*yii/console/controllers/AssetController::select*		public

 See |yii/console/Controller::select|


*yii/console/controllers/AssetController::options*	public

 See |yii/console/Controller::options|


*yii/console/controllers/AssetController::optionAliases*	public

 See |yii/console/Controller::optionAliases|


*yii/console/controllers/AssetController::getOptionValues*public

 See |yii/console/Controller::getOptionValues|


*yii/console/controllers/AssetController::getPassedOptions*public

 See |yii/console/Controller::getPassedOptions|


*yii/console/controllers/AssetController::getPassedOptionValues*public

 See |yii/console/Controller::getPassedOptionValues|


*yii/console/controllers/AssetController::getHelpSummary*	public

 See |yii/console/Controller::getHelpSummary|


*yii/console/controllers/AssetController::getHelp*	public

 See |yii/console/Controller::getHelp|


*yii/console/controllers/AssetController::getActionHelpSummary*public

 See |yii/console/Controller::getActionHelpSummary|


*yii/console/controllers/AssetController::getActionHelp*	public

 See |yii/console/Controller::getActionHelp|


*yii/console/controllers/AssetController::getActionArgsHelp*public

 See |yii/console/Controller::getActionArgsHelp|


*yii/console/controllers/AssetController::getActionOptionsHelp*public

 See |yii/console/Controller::getActionOptionsHelp|


*yii/console/controllers/AssetController::getActionMethodReflection*protected

 See |yii/console/Controller::getActionMethodReflection|


*yii/console/controllers/AssetController::parseDocCommentTags*protected

 See |yii/console/Controller::parseDocCommentTags|


*yii/console/controllers/AssetController::parseDocCommentSummary*protected

 See |yii/console/Controller::parseDocCommentSummary|


*yii/console/controllers/AssetController::parseDocCommentDetail*protected

 See |yii/console/Controller::parseDocCommentDetail|


*yii/console/controllers/AssetController::getAssetManager*public
>
 getAssetManager()
<
return (\yii\web\AssetManager) Asset manager instance.



*yii/console/controllers/AssetController::setAssetManager*public
>
 setAssetManager($assetManager)
<
return (void)

    [$assetManager] (\yii\web\AssetManager|array) Asset manager instance or
    its array configuration.


*yii/console/controllers/AssetController::actionCompress*	public
>
 actionCompress($configFile, $bundleFile)
<
return (void)

 During the process new asset bundle configuration file will be created. You
 should replace your original asset bundle configuration with this file in
 order to use compressed files.

    [$configFile] (string) Configuration file name.
    [$bundleFile] (string) Output asset bundles configuration file name.


*yii/console/controllers/AssetController::loadConfiguration*protected
>
 loadConfiguration($configFile)
<
return (void)

    [$configFile] (string) Configuration file name.


*yii/console/controllers/AssetController::loadBundles*	protected
>
 loadBundles($bundles)
<
return (\yii\web\AssetBundle[]) List of source asset bundles.

    [$bundles] (string[]) List of asset bundle names


*yii/console/controllers/AssetController::loadDependency*	protected
>
 loadDependency($bundle, $result)
<
return (void)

    [$bundle] (\yii\web\AssetBundle) Bundle instance
    [$result] (array) Already loaded bundles list.


*yii/console/controllers/AssetController::loadTargets*	protected
>
 loadTargets($targets, $bundles)
<
return (\yii\web\AssetBundle[]) List of output asset bundles.

    [$targets] (array) Output asset bundles configuration.
    [$bundles] (\yii\web\AssetBundle[]) List of source asset bundles.


*yii/console/controllers/AssetController::buildTarget*	protected
>
 buildTarget($target, $type, $bundles)
<
return (void)

    [$target] (\yii\web\AssetBundle) Output asset bundle
    [$type] (string) Either 'js' or 'css'.
    [$bundles] (\yii\web\AssetBundle[]) Source asset bundles.


*yii/console/controllers/AssetController::adjustDependency*protected
>
 adjustDependency($targets, $bundles)
<
return (\yii\web\AssetBundle[]) Output asset bundles.

    [$targets] (\yii\web\AssetBundle[]) Output asset bundles.
    [$bundles] (\yii\web\AssetBundle[]) Source asset bundles.


*yii/console/controllers/AssetController::registerBundle*	protected
>
 registerBundle($bundles, $name, $registered)
<
return (void)

    [$bundles] (\yii\web\AssetBundle[]) Asset bundles list.
    [$name] (string) Bundle name.
    [$registered] (array) Stores already registered names.


*yii/console/controllers/AssetController::saveTargets*	protected
>
 saveTargets($targets, $bundleFile)
<
return (void)

    [$targets] (\yii\web\AssetBundle[]) List of asset bundles to be saved.
    [$bundleFile] (string) Output file name.


*yii/console/controllers/AssetController::compressJsFiles*protected
>
 compressJsFiles($inputFiles, $outputFile)
<
return (void)

    [$inputFiles] (array) List of source file names.
    [$outputFile] (string) Output file name.


*yii/console/controllers/AssetController::compressCssFiles*protected
>
 compressCssFiles($inputFiles, $outputFile)
<
return (void)

    [$inputFiles] (array) List of source file names.
    [$outputFile] (string) Output file name.


*yii/console/controllers/AssetController::combineJsFiles*	public
>
 combineJsFiles($inputFiles, $outputFile)
<
return (void)

    [$inputFiles] (array) Source file names.
    [$outputFile] (string) Output file name.


*yii/console/controllers/AssetController::combineCssFiles*public
>
 combineCssFiles($inputFiles, $outputFile)
<
return (void)

    [$inputFiles] (array) Source file names.
    [$outputFile] (string) Output file name.


*yii/console/controllers/AssetController::adjustCssUrl*	protected
>
 adjustCssUrl($cssContent, $inputFilePath, $outputFilePath)
<
return (string) Adjusted CSS content.

    [$cssContent] (string) Source CSS content.
    [$inputFilePath] (string) Input CSS file name.
    [$outputFilePath] (string) Output CSS file name.


*yii/console/controllers/AssetController::actionTemplate*	public
>
 actionTemplate($configFile)
<
return (integer) CLI exit code

    [$configFile] (string) Output file name.



 vim:tw=78:ts=8:ft=help:norl:
