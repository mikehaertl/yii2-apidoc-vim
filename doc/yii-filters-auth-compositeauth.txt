
*yii/filters/auth/CompositeAuth*   >> |yii/filters/auth/AuthMethod|
================================

DESCRIPTION
------------------------------------------------------------------------------

 The authentication methods contained by CompositeAuth are configured via
 'authMethods', which is a list of supported authentication class
 configurations.

 The following example shows how to support three authentication methods:

   public function behaviors()
   {
       return [
           'compositeAuth' => [
               'class' => \yii\filters\auth\CompositeAuth::className(),
               'authMethods' => [
                   \yii\filters\auth\HttpBasicAuth::className(),
                   \yii\filters\auth\QueryParamAuth::className(),
               ],
           ],
       ];
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Behavior::$owner|
 |yii/base/ActionFilter::$only|
 |yii/base/ActionFilter::$except|
 |yii/filters/auth/AuthMethod::$user|
 |yii/filters/auth/AuthMethod::$request|
 |yii/filters/auth/AuthMethod::$response|
 |yii/filters/auth/AuthMethod::$optional|


$authMethods				*yii/filters/auth/CompositeAuth::$authMethods*

 (array) The supported authentication methods. This property should take a
 list of supported authentication methods, each represented by an
 authentication class or configuration.

 If this property is empty, no authentication will be performed.

 Note that an auth method class must implement the
 '\yii\filters\auth\AuthInterface' interface.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Behavior::events|
 |yii/base/Behavior::attach|
 |yii/base/Behavior::detach|
 |yii/base/ActionFilter::beforeFilter|
 |yii/base/ActionFilter::afterFilter|
 |yii/base/ActionFilter::afterAction|
 |yii/base/ActionFilter::getActionId|
 |yii/base/ActionFilter::isActive|
 |yii/filters/auth/AuthMethod::handleFailure|
 |yii/filters/auth/AuthMethod::isOptional|


*yii/filters/auth/CompositeAuth::beforeAction*		public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to be executed.

 This method is invoked right before an action is to be executed (after all
 possible filters.) You may override this method to do last-minute preparation
 for the action.







    [$action] (\yii\base\Action) The action to be executed.


*yii/filters/auth/CompositeAuth::challenge*		public
>
 challenge($response)
<
return (void)

 Generates challenges upon authentication failure.



 For example, some appropriate HTTP headers may be generated.



    [$response] (\yii\web\Response) 


*yii/filters/auth/CompositeAuth::authenticate*		public
>
 authenticate($user, $request, $response)
<
return (\yii\web\IdentityInterface) The authenticated user identity. If
authentication information is not provided, null will be returned.

 Authenticates the current user.







    [$user] (\yii\web\User) 
    [$request] (\yii\web\Request) 
    [$response] (\yii\web\Response) 



 vim:tw=78:ts=8:ft=help:norl:
