
*yii/caching/ApcCache*   >> |yii/caching/Cache|
======================

DESCRIPTION
------------------------------------------------------------------------------

 To use this application component, the [APC PHP
 extension](https://secure.php.net/apc) must be loaded. Alternatively [APCu
 PHP extension](https://secure.php.net/apcu) could be used via setting
 'useApcu' to 'true'. In order to enable APC or APCu for CLI you should add
 "apc.enable_cli = 1" to your php.ini.

 See 'Cache' for common cache operations that ApcCache supports.

 For more details and usage information on Cache, see the [guide article on
 caching](guide:caching-overview).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/caching/Cache::$keyPrefix|
 |yii/caching/Cache::$serializer|
 |yii/caching/Cache::$defaultDuration|
 |yii/base/Component::$behaviors|


$useApcu				*yii/caching/ApcCache::$useApcu*

 (bool) Whether to use apcu or apc as the underlying caching extension. If
 true, [apcu](https://pecl.php.net/package/apcu) will be used. If false,
 [apc](https://pecl.php.net/package/apc) will be used. Defaults to false.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/caching/Cache::buildKey|
 |yii/caching/Cache::get|
 |yii/caching/Cache::mget|
 |yii/caching/Cache::multiGet|
 |yii/caching/Cache::set|
 |yii/caching/Cache::mset|
 |yii/caching/Cache::multiSet|
 |yii/caching/Cache::madd|
 |yii/caching/Cache::multiAdd|
 |yii/caching/Cache::add|
 |yii/caching/Cache::delete|
 |yii/caching/Cache::flush|
 |yii/caching/Cache::offsetExists|
 |yii/caching/Cache::offsetGet|
 |yii/caching/Cache::offsetSet|
 |yii/caching/Cache::offsetUnset|
 |yii/caching/Cache::getOrSet|


*yii/caching/ApcCache::init*				public
>
 init()
<
return (void)

 Initializes this application component.

 It checks if extension required is loaded.


*yii/caching/ApcCache::exists*				public
>
 exists($key)
<
return (bool) True if a value exists in cache, false if the value is not in the cache
or expired.

 Checks whether a specified key exists in the cache.

 This can be faster than getting the value from the cache if the data is big.
 Note that this method does not check whether the dependency associated with
 the cached data, if there is any, has changed. So a call to 'get' may return
 false while exists returns true.

    [$key] (mixed) A key identifying the cached value. This can be a simple
    string or a complex data structure consisting of factors representing the
    key.


*yii/caching/ApcCache::getValue*				protected
>
 getValue($key)
<
return (mixed|false) The value stored in cache, false if the value is not in the
cache or expired.

 Retrieves a value from cache with a specified key.

 This is the implementation of the method declared in the parent class.

    [$key] (string) A unique key identifying the cached value


*yii/caching/ApcCache::setValue*				protected
>
 setValue($key, $value, $duration)
<
return (bool) True if the value is successfully stored into cache, false otherwise.

 Stores a value identified by a key in cache.

 This is the implementation of the method declared in the parent class.

    [$key] (string) The key identifying the value to be cached
    [$value] (mixed) The value to be cached. Most often it's a string. If you
    have disabled 'serializer', it could be something else.
    [$duration] (int) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/ApcCache::addValue*				protected
>
 addValue($key, $value, $duration)
<
return (bool) True if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key.

 This is the implementation of the method declared in the parent class.

    [$key] (string) The key identifying the value to be cached
    [$value] (mixed) The value to be cached. Most often it's a string. If you
    have disabled 'serializer', it could be something else.
    [$duration] (int) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/ApcCache::deleteValue*			protected
>
 deleteValue($key)
<
return (bool) If no error happens during deletion

 Deletes a value with the specified key from cache This is the implementation
 of the method declared in the parent class.

    [$key] (string) The key of the value to be deleted


*yii/caching/ApcCache::flushValues*			protected
>
 flushValues()
<
return (bool) Whether the flush operation was successful.

 Deletes all values from cache.

 This is the implementation of the method declared in the parent class.


*yii/caching/ApcCache::getValues*				protected
>
 getValues($keys)
<
return (array) A list of cached values indexed by the keys

 Retrieves multiple values from cache with the specified keys.

    [$keys] (array) A list of keys identifying the cached values


*yii/caching/ApcCache::setValues*				protected
>
 setValues($data, $duration)
<
return (array) Array of failed keys

 Stores multiple key-value pairs in cache.

    [$data] (array) Array where key corresponds to cache key while value
    [$duration] (int) The number of seconds in which the cached values will
    expire. 0 means never expire.


*yii/caching/ApcCache::addValues*				protected
>
 addValues($data, $duration)
<
return (array) Array of failed keys

 Adds multiple key-value pairs to cache.

    [$data] (array) Array where key corresponds to cache key while value is
    the value stored
    [$duration] (int) The number of seconds in which the cached values will
    expire. 0 means never expire.



 vim:tw=78:ts=8:ft=help:norl:
