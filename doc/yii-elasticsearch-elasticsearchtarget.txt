
*yii/elasticsearch/ElasticsearchTarget*   >> |yii/log/Target|
=======================================


PROPERTY DETAILS
------------------------------------------------------------------------------


$index					*yii/elasticsearch/ElasticsearchTarget::$index*

 (string) Elasticsearch index name.

$type					*yii/elasticsearch/ElasticsearchTarget::$type*

 (string) Elasticsearch type name.

$db					*yii/elasticsearch/ElasticsearchTarget::$db*

 (\yii\elasticsearch\Connection|array|string) The elasticsearch connection
 object or the application component ID of the elasticsearch connection.

$options				*yii/elasticsearch/ElasticsearchTarget::$options*

 (array) URL options.

$logContext				*yii/elasticsearch/ElasticsearchTarget::$logContext*

 (boolean) If true, context will be logged as a separate message after all
 other messages.

$includeContext				*yii/elasticsearch/ElasticsearchTarget::$includeContext*

 (boolean) If true, context will be included in every message. This is
 convenient if you log application errors and analyze them with tools like
 Kibana.

$cacheContext				*yii/elasticsearch/ElasticsearchTarget::$cacheContext*

 (boolean) If true, context message will cached once it's been created. Makes
 sense to use with 'includeContext'.

$_contextMessage			*yii/elasticsearch/ElasticsearchTarget::$_contextMessage*

 (string) Context message cache (can be used multiple times if context is
 appended to every message)



METHOD DETAILS
------------------------------------------------------------------------------


*yii/elasticsearch/ElasticsearchTarget::init*		public
>
 init()
<
return (void)

 This method will initialize the 'elasticsearch' property to make sure it
 refers to a valid Elasticsearch connection.


*yii/elasticsearch/ElasticsearchTarget::export*		public
>
 export()
<
return (void)



*yii/elasticsearch/ElasticsearchTarget::getContextMessage*protected
>
 getContextMessage()
<
return (array) The context information

 If 'includeContext' property is false, returns context message normally.

 If 'includeContext' is true, returns an empty string (so that context message
 in 'collect' is not generated), expecting that context will be appended to
 every message in 'prepareMessage'.


*yii/elasticsearch/ElasticsearchTarget::collect*		public
>
 collect($messages, $final)
<
return (void)

 Processes the given log messages.

 This method will filter the given messages with 'levels' and 'categories'.
 And if requested, it will also export the filtering result to specific medium
 (e.g. email). Depending on the 'includeContext' attribute, a context message
 will be either created or ignored.

    [$messages] (array) Log messages to be processed. See 'Logger::messages'
    for the structure of each message.
    [$final] (bool) Whether this method is called at the end of the current
    application


*yii/elasticsearch/ElasticsearchTarget::prepareMessage*	public
>
 prepareMessage($message)
<
return (string) 

 Prepares a log message.

    [$message] (array) The log message to be formatted.



 vim:tw=78:ts=8:ft=help:norl:
