
*yii/sphinx/QueryBuilder*   >> |yii/base/Object|
=========================

DESCRIPTION
------------------------------------------------------------------------------

 QueryBuilder can also be used to build SQL statements such as INSERT,
 REPLACE, UPDATE, DELETE, from a 'Query' object.


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/sphinx/QueryBuilder::$db*
 (\yii\sphinx\Connection) The Sphinx connection.

$separator				*yii/sphinx/QueryBuilder::$separator*
 (string) The separator between different fragments of a SQL statement.
 Defaults to an empty space. This is mainly used by 'build()' when generating
 a SQL statement.

$querySeparator				*yii/sphinx/QueryBuilder::$querySeparator*
 (string) Separator between different SQL queries. This is mainly used by
 'build()' when generating a SQL statement.

$conditionBuilders			*yii/sphinx/QueryBuilder::$conditionBuilders*
 (array) Map of query condition to builder methods. These methods are used by
 'buildCondition' to build SQL conditions from array syntax.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/sphinx/QueryBuilder::className*			public
 See |yii/base/Object::className|


*yii/sphinx/QueryBuilder::__construct*			public
>
 __construct($connection, $config='[]')
<
(void)

    [$connection] (\yii\sphinx\Connection) The Sphinx connection.
    [$config] (array) Name-value pairs that will be used to initialize the
    object properties


*yii/sphinx/QueryBuilder::init*				public
 See |yii/base/Object::init|


*yii/sphinx/QueryBuilder::__get*				public
 See |yii/base/Object::__get|


*yii/sphinx/QueryBuilder::__set*				public
 See |yii/base/Object::__set|


*yii/sphinx/QueryBuilder::__isset*			public
 See |yii/base/Object::__isset|


*yii/sphinx/QueryBuilder::__unset*			public
 See |yii/base/Object::__unset|


*yii/sphinx/QueryBuilder::__call*				public
 See |yii/base/Object::__call|


*yii/sphinx/QueryBuilder::hasProperty*			public
 See |yii/base/Object::hasProperty|


*yii/sphinx/QueryBuilder::canGetProperty*			public
 See |yii/base/Object::canGetProperty|


*yii/sphinx/QueryBuilder::canSetProperty*			public
 See |yii/base/Object::canSetProperty|


*yii/sphinx/QueryBuilder::hasMethod*			public
 See |yii/base/Object::hasMethod|


*yii/sphinx/QueryBuilder::build*				public
>
 build($query, $params='[]')
<
(array) The generated SQL statement (the first array element) and the
corresponding parameters to be bound to the SQL statement (the second array
element). The parameters returned include those provided in '$params'.

    [$query] (\yii\sphinx\Query) The 'Query' object from which the SQL
    statement will be generated
    [$params] (array) The parameters to be bound to the generated SQL
    statement. These parameters will be included in the result with the
    additional parameters generated during the query building process.


*yii/sphinx/QueryBuilder::insert*				public
>
 insert($index, $columns, $params)
<
(string) The INSERT SQL

 For example,

   $sql = $queryBuilder->insert('idx_user', [
       'name' => 'Sam',
       'age' => 30,
       'id' => 10,
   ], $params);

 The method will properly escape the index and column names.
    [$index] (string) The index that new rows will be inserted into.
    [$columns] (array) The column data (name => value) to be inserted into the
    index.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the Sphinx command later.


*yii/sphinx/QueryBuilder::replace*			public
>
 replace($index, $columns, $params)
<
(string) The INSERT SQL

 For example,

   $sql = $queryBuilder->replace('idx_user', [
       'name' => 'Sam',
       'age' => 30,
       'id' => 10,
   ], $params);

 The method will properly escape the index and column names.
    [$index] (string) The index that new rows will be replaced.
    [$columns] (array) The column data (name => value) to be replaced in the
    index.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the Sphinx command later.


*yii/sphinx/QueryBuilder::generateInsertReplace*		protected
>
 generateInsertReplace($statement, $index, $columns, $params)
<
(string) Generated SQL

    [$statement] (string) Statement ot be generated.
    [$index] (string) The affected index name.
    [$columns] (array) The column data (name => value).
    [$params] (array) The binding parameters that will be generated by this
    method.


*yii/sphinx/QueryBuilder::batchInsert*			public
>
 batchInsert($index, $columns, $rows, $params)
<
(string) The batch INSERT SQL statement

 For example,

   $sql = $queryBuilder->batchInsert('idx_user', ['id', 'name', 'age'], [
       [1, 'Tom', 30],
       [2, 'Jane', 20],
       [3, 'Linda', 25],
   ], $params);

 Note that the values in each row must match the corresponding column names.
    [$index] (string) The index that new rows will be inserted into.
    [$columns] (array) The column names
    [$rows] (array) The rows to be batch inserted into the index
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the Sphinx command later.


*yii/sphinx/QueryBuilder::batchReplace*			public
>
 batchReplace($index, $columns, $rows, $params)
<
(string) The batch INSERT SQL statement

 For example,

   $sql = $queryBuilder->batchReplace('idx_user', ['id', 'name', 'age'], [
       [1, 'Tom', 30],
       [2, 'Jane', 20],
       [3, 'Linda', 25],
   ], $params);

 Note that the values in each row must match the corresponding column names.
    [$index] (string) The index that new rows will be replaced.
    [$columns] (array) The column names
    [$rows] (array) The rows to be batch replaced in the index
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the Sphinx command later.


*yii/sphinx/QueryBuilder::generateBatchInsertReplace*	protected
>
 generateBatchInsertReplace($statement, $index, $columns, $rows, $params)
<
(string) Generated SQL

    [$statement] (string) Statement ot be generated.
    [$index] (string) The affected index name.
    [$columns] (array) The column data (name => value).
    [$rows] (array) The rows to be batch inserted into the index
    [$params] (array) The binding parameters that will be generated by this
    method.


*yii/sphinx/QueryBuilder::update*				public
>
 update($index, $columns, $condition, $params, $options)
<
(string) The UPDATE SQL

 For example,

   $params = [];
   $sql = $queryBuilder->update('idx_user', ['status' => 1], 'age > 30',
 $params);

 The method will properly escape the index and column names.
    [$index] (string) The index to be updated.
    [$columns] (array) The column data (name => value) to be updated.
    [$condition] (array|string) The condition that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify condition.
    [$params] (array) The binding parameters that will be modified by this
    method so that they can be bound to the Sphinx command later.
    [$options] (array) List of options in format: optionName => optionValue


*yii/sphinx/QueryBuilder::delete*				public
>
 delete($index, $condition, $params)
<
(string) The DELETE SQL

 For example,

   $sql = $queryBuilder->delete('idx_user', 'status = 0');

 The method will properly escape the index and column names.
    [$index] (string) The index where the data will be deleted from.
    [$condition] (array|string) The condition that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify condition.
    [$params] (array) The binding parameters that will be modified by this
    method so that they can be bound to the Sphinx command later.


*yii/sphinx/QueryBuilder::truncateIndex*			public
>
 truncateIndex($index)
<
(string) The SQL statement for truncating an index.

    [$index] (string) The index to be truncated. The name will be properly
    quoted by the method.


*yii/sphinx/QueryBuilder::callSnippets*			public
>
 callSnippets($index, $source, $match, $options, $params)
<
(string) The SQL statement for call snippets.

    [$index] (string) Name of the index, from which to take the text
    processing settings.
    [$source] (string|array) Is the source data to extract a snippet from. It
    could be either a single string or array of strings.
    [$match] (string) The full-text query to build snippets for.
    [$options] (array) List of options in format: optionName => optionValue
    [$params] (array) The binding parameters that will be modified by this
    method so that they can be bound to the Sphinx command later.


*yii/sphinx/QueryBuilder::callKeywords*			public
>
 callKeywords($index, $text, $fetchStatistic, $params)
<
(string) The SQL statement for call keywords.

    [$index] (string) The name of the index from which to take the text
    processing settings
    [$text] (string) The text to break down to keywords.
    [$fetchStatistic] (boolean) Whether to return document and hit occurrence
    statistics
    [$params] (array) The binding parameters that will be modified by this
    method so that they can be bound to the Sphinx command later.


*yii/sphinx/QueryBuilder::buildSelect*			public
>
 buildSelect($columns, $params, $distinct='false', $selectOption='null')
<
(string) The SELECT clause built from 'query'.

    [$columns] (array) 
    [$params] (array) The binding parameters to be populated
    [$distinct] (boolean) 
    [$selectOption] (string) 


*yii/sphinx/QueryBuilder::buildFrom*			public
>
 buildFrom($indexes, $params)
<
(string) The FROM clause built from 'query'.

    [$indexes] (array) 
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildWhere*			public
>
 buildWhere($indexes, $condition, $params, $match='null')
<
(string) The WHERE clause built from 'query'.

    [$indexes] (string[]) List of index names, which affected by query
    [$condition] (string|array) 
    [$params] (array) The binding parameters to be populated
    [$match] (string|\yii\db\Expression|null) 


*yii/sphinx/QueryBuilder::buildGroupBy*			public
>
 buildGroupBy($columns)
<
(string) The GROUP BY clause

    [$columns] (array) 


*yii/sphinx/QueryBuilder::buildHaving*			public
>
 buildHaving($indexes, $condition, $params)
<
(string) The HAVING clause built from 'Query::$having'.

    [$indexes] (string[]) List of index names, which affected by query
    [$condition] (string|array) 
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildOrderByAndLimit*		public
>
 buildOrderByAndLimit($sql, $orderBy, $limit, $offset)
<
(string) The SQL completed with ORDER BY/LIMIT/OFFSET (if any)

    [$sql] (string) The existing SQL (without ORDER BY/LIMIT/OFFSET)
    [$orderBy] (array) The order by columns. See 'Query::orderBy' for more
    details on how to specify this parameter.
    [$limit] (integer) The limit number. See 'Query::limit' for more details.
    [$offset] (integer) The offset number. See 'Query::offset' for more
    details.


*yii/sphinx/QueryBuilder::buildOrderBy*			public
>
 buildOrderBy($columns)
<
(string) The ORDER BY clause built from 'query'.

    [$columns] (array) 


*yii/sphinx/QueryBuilder::buildLimit*			public
>
 buildLimit($limit, $offset)
<
(string) The LIMIT and OFFSET clauses built from 'query'.

    [$limit] (integer) 
    [$offset] (integer) 


*yii/sphinx/QueryBuilder::buildColumns*			public
>
 buildColumns($columns)
<
(string) The processing result

 It will join all columns into a string with comma as separators.
    [$columns] (string|array) The columns to be processed


*yii/sphinx/QueryBuilder::buildCondition*			public
>
 buildCondition($indexes, $condition, $params)
<
(string) The generated SQL expression

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$condition] (string|array) The condition specification. Please refer to
    'Query::where()' on how to specify a condition.
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildHashCondition*		public
>
 buildHashCondition($indexes, $condition, $params)
<
(string) The generated SQL expression

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$condition] (array) The condition specification.
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildAndCondition*		public
>
 buildAndCondition($indexes, $operator, $operands, $params)
<
(string) The generated SQL expression

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$operator] (string) The operator to use for connecting the given operands
    [$operands] (array) The SQL expressions to connect.
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildNotCondition*		public
>
 buildNotCondition($indexes, $operator, $operands, $params)
<
(string) The generated SQL expression

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$operator] (string) The operator to use for connecting the given operands
    [$operands] (array) The SQL expressions to connect.
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildBetweenCondition*		public
>
 buildBetweenCondition($indexes, $operator, $operands, $params)
<
(string) The generated SQL expression

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$operator] (string) The operator to use (e.g. 'BETWEEN' or 'NOT BETWEEN')
    [$operands] (array) The first operand is the column name. The second and
    third operands describe the interval that column value should be in.
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildInCondition*		public
>
 buildInCondition($indexes, $operator, $operands, $params)
<
(string) The generated SQL expression

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$operator] (string) The operator to use (e.g. 'IN' or 'NOT IN')
    [$operands] (array) The first operand is the column name. If it is an
    array a composite IN condition will be generated. The second operand is an
    array of values that column value should be among. If it is an empty array
    the generated expression will be a 'false' value if operator is 'IN' and
    empty if operator is 'NOT IN'.
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildCompositeInCondition*	protected
>
 buildCompositeInCondition($indexes, $operator, $columns, $values, $params)
<
(string) The generated SQL expression

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$operator] (string) The operator to use (e.g. 'IN' or 'NOT IN')
    [$columns] (array) 
    [$values] (array) 
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildLikeCondition*		public
>
 buildLikeCondition($indexes, $operator, $operands, $params)
<
(string) The generated SQL expression

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$operator] (string) The operator to use (e.g. 'LIKE', 'NOT LIKE', 'OR
    LIKE' or 'OR NOT LIKE')
    [$operands] (array) An array of two or three operands


      - The first operand is the column name. 
      - The second operand is a single value or an array of values that
      column value   should be compared with. If it is an empty array the
    generated expression will   be a 'false' value if operator is 'LIKE' or
    'OR LIKE', and empty if operator   is 'NOT LIKE' or 'OR NOT LIKE'. 
      - An optional third operand can also be provided to specify how to
      escape special characters   in the value(s). The operand should be an
    array of mappings from the special characters to their   escaped
    counterparts. If this operand is not provided, a default escape mapping
    will be used.   You may use 'false' or an empty array to indicate the
    values are already escaped and no escape   should be applied. Note that
    when using an escape mapping (or the third operand is not provided),   the
    values will be automatically enclosed within a pair of percentage
    characters.
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildSimpleCondition*		public
>
 buildSimpleCondition($indexes, $operator, $operands, $params)
<
(string) The generated SQL expression

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$operator] (string) The operator to use. Anything could be used e.g. '>',
    '<=', etc.
    [$operands] (array) Contains two column names.
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildWithin*			public
>
 buildWithin($columns)
<
(string) The ORDER BY clause built from 'query'.

    [$columns] (array) 


*yii/sphinx/QueryBuilder::buildOption*			public
>
 buildOption($options, $params)
<
(string) The OPTION clause build from 'query'

    [$options] (array) Query options in format: optionName => optionValue
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildFacets*			protected
>
 buildFacets($facets, $params)
<
(string) The FACET clause build from 'query'

    [$facets] (array) Facet specifications
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::buildShowMeta*			protected
>
 buildShowMeta($showMeta, $params)
<
(string) SHOW META query, if it does not required 
  - empty string.

    [$showMeta] (boolean|string|\yii\db\Expression) Show meta specification.
    [$params] (array) The binding parameters to be populated


*yii/sphinx/QueryBuilder::composeColumnValue*		protected
>
 composeColumnValue($indexes, $columnName, $value, $params)
<
(string) SQL expression, which represents column value

    [$indexes] (\yii\sphinx\IndexSchema[]) List of indexes, which affected by
    query
    [$columnName] (string) Name of the column
    [$value] (mixed) Raw column value
    [$params] (array) The binding parameters to be populated



 vim:tw=78:ts=8:ft=help:norl:
