
*yii/db/ActiveRecord*   >> |yii/db/BaseActiveRecord|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 Active Record implements the [Active Record design
 pattern](http://en.wikipedia.org/wiki/Active_record). The premise behind
 Active Record is that an individual 'ActiveRecord' object is associated with
 a specific row in a database table. The object's attributes are mapped to the
 columns of the corresponding table. Referencing an Active Record attribute is
 equivalent to accessing the corresponding table column for that record.

 As an example, say that the 'Customer' ActiveRecord class is associated with
 the 'customer' table. This would mean that the class's 'name' attribute is
 automatically mapped to the 'name' column in 'customer' table. Thanks to
 Active Record, assuming the variable '$customer' is an object of type
 'Customer', to get the value of the 'name' column for the table row, you can
 use the expression '$customer->name'. In this example, Active Record is
 providing an object-oriented interface for accessing data stored in the
 database. But Active Record provides much more functionality than this.

 To declare an ActiveRecord class you need to extend '\yii\db\ActiveRecord'
 and implement the 'tableName' method:

   <?php

   class Customer extends \yii\db\ActiveRecord
   {
       public static function tableName()
       {
           return 'customer';
       }
   }

 The 'tableName' method only has to return the name of the database table
 associated with the class.

 > Tip: You may also use the [Gii code generator](guide:start-gii) to generate
 ActiveRecord classes from your > database tables.

 Class instances are obtained in one of two ways:

 * Using the 'new' operator to create a new, empty object * Using a method to
 fetch an existing record (or records) from the database

 Below is an example showing some typical usage of ActiveRecord:

   $user = new User();
   $user->name = 'Qiang';
   $user->save();  // a new row is inserted into user table

   // the following will retrieve the user 'CeBe' from the database
   $user = User::find()->where(['name' => 'CeBe'])->one();

   // this will get related records from orders table when relation is defined
   $orders = $user->orders;

 For more details and usage information on ActiveRecord, see the [guide
 article on ActiveRecord](guide:db-active-record).



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/ActiveRecord::className*				public

 See |yii/base/BaseObject::className|


*yii/db/ActiveRecord::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/db/ActiveRecord::init*				public

 See |yii/db/BaseActiveRecord::init|


*yii/db/ActiveRecord::__get*				public

 See |yii/db/BaseActiveRecord::__get|


*yii/db/ActiveRecord::__set*				public

 See |yii/db/BaseActiveRecord::__set|


*yii/db/ActiveRecord::__isset*				public

 See |yii/db/BaseActiveRecord::__isset|


*yii/db/ActiveRecord::__unset*				public

 See |yii/db/BaseActiveRecord::__unset|


*yii/db/ActiveRecord::__call*				public

 See |yii/base/Component::__call|


*yii/db/ActiveRecord::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/db/ActiveRecord::canGetProperty*			public

 See |yii/db/BaseActiveRecord::canGetProperty|


*yii/db/ActiveRecord::canSetProperty*			public

 See |yii/db/BaseActiveRecord::canSetProperty|


*yii/db/ActiveRecord::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/db/ActiveRecord::__clone*				public

 See |yii/base/Component::__clone|


*yii/db/ActiveRecord::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/db/ActiveRecord::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/db/ActiveRecord::on*					public

 See |yii/base/Component::on|


*yii/db/ActiveRecord::off*				public

 See |yii/base/Component::off|


*yii/db/ActiveRecord::trigger*				public

 See |yii/base/Component::trigger|


*yii/db/ActiveRecord::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/db/ActiveRecord::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/db/ActiveRecord::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/db/ActiveRecord::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/db/ActiveRecord::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/db/ActiveRecord::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/db/ActiveRecord::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/db/ActiveRecord::instance*				public

 See |yii/base/StaticInstanceTrait::instance|


*yii/db/ActiveRecord::fields*				public

 See |yii/base/ArrayableTrait::fields|


*yii/db/ActiveRecord::extraFields*			public

 See |yii/base/ArrayableTrait::extraFields|


*yii/db/ActiveRecord::toArray*				public

 See |yii/base/ArrayableTrait::toArray|


*yii/db/ActiveRecord::resolveFields*			protected

 See |yii/base/ArrayableTrait::resolveFields|


*yii/db/ActiveRecord::rules*				public

 See |yii/base/Model::rules|


*yii/db/ActiveRecord::scenarios*				public

 See |yii/base/Model::scenarios|


*yii/db/ActiveRecord::formName*				public

 See |yii/base/Model::formName|


*yii/db/ActiveRecord::attributes*				public
>
 attributes()
<
return (array) List of attribute names.

 The default implementation will return all column names of the table
 associated with this AR class.


*yii/db/ActiveRecord::attributeLabels*			public

 See |yii/base/Model::attributeLabels|


*yii/db/ActiveRecord::attributeHints*			public

 See |yii/base/Model::attributeHints|


*yii/db/ActiveRecord::validate*				public

 See |yii/base/Model::validate|


*yii/db/ActiveRecord::beforeValidate*			public

 See |yii/base/Model::beforeValidate|


*yii/db/ActiveRecord::afterValidate*			public

 See |yii/base/Model::afterValidate|


*yii/db/ActiveRecord::getValidators*			public

 See |yii/base/Model::getValidators|


*yii/db/ActiveRecord::getActiveValidators*		public

 See |yii/base/Model::getActiveValidators|


*yii/db/ActiveRecord::createValidators*			public

 See |yii/base/Model::createValidators|


*yii/db/ActiveRecord::isAttributeRequired*		public

 See |yii/base/Model::isAttributeRequired|


*yii/db/ActiveRecord::isAttributeSafe*			public

 See |yii/base/Model::isAttributeSafe|


*yii/db/ActiveRecord::isAttributeActive*			public

 See |yii/base/Model::isAttributeActive|


*yii/db/ActiveRecord::getAttributeLabel*			public

 See |yii/db/BaseActiveRecord::getAttributeLabel|


*yii/db/ActiveRecord::getAttributeHint*			public

 See |yii/db/BaseActiveRecord::getAttributeHint|


*yii/db/ActiveRecord::hasErrors*				public

 See |yii/base/Model::hasErrors|


*yii/db/ActiveRecord::getErrors*				public

 See |yii/base/Model::getErrors|


*yii/db/ActiveRecord::getFirstErrors*			public

 See |yii/base/Model::getFirstErrors|


*yii/db/ActiveRecord::getFirstError*			public

 See |yii/base/Model::getFirstError|


*yii/db/ActiveRecord::addError*				public

 See |yii/base/Model::addError|


*yii/db/ActiveRecord::addErrors*				public

 See |yii/base/Model::addErrors|


*yii/db/ActiveRecord::clearErrors*			public

 See |yii/base/Model::clearErrors|


*yii/db/ActiveRecord::generateAttributeLabel*		public

 See |yii/base/Model::generateAttributeLabel|


*yii/db/ActiveRecord::getAttributes*			public

 See |yii/base/Model::getAttributes|


*yii/db/ActiveRecord::setAttributes*			public

 See |yii/base/Model::setAttributes|


*yii/db/ActiveRecord::onUnsafeAttribute*			public

 See |yii/base/Model::onUnsafeAttribute|


*yii/db/ActiveRecord::getScenario*			public

 See |yii/base/Model::getScenario|


*yii/db/ActiveRecord::setScenario*			public

 See |yii/base/Model::setScenario|


*yii/db/ActiveRecord::safeAttributes*			public

 See |yii/base/Model::safeAttributes|


*yii/db/ActiveRecord::activeAttributes*			public

 See |yii/base/Model::activeAttributes|


*yii/db/ActiveRecord::load*				public

 See |yii/base/Model::load|


*yii/db/ActiveRecord::loadMultiple*			public

 See |yii/base/Model::loadMultiple|


*yii/db/ActiveRecord::validateMultiple*			public

 See |yii/base/Model::validateMultiple|


*yii/db/ActiveRecord::getIterator*			public

 See |yii/base/Model::getIterator|


*yii/db/ActiveRecord::offsetExists*			public

 See |yii/db/BaseActiveRecord::offsetExists|


*yii/db/ActiveRecord::offsetGet*				public

 See |yii/base/Model::offsetGet|


*yii/db/ActiveRecord::offsetSet*				public

 See |yii/base/Model::offsetSet|


*yii/db/ActiveRecord::offsetUnset*			public

 See |yii/db/BaseActiveRecord::offsetUnset|


*yii/db/ActiveRecord::findOne*				public

 See |yii/db/BaseActiveRecord::findOne|


*yii/db/ActiveRecord::findAll*				public

 See |yii/db/BaseActiveRecord::findAll|


*yii/db/ActiveRecord::findByCondition*			protected
>
 findByCondition($condition)
<
return (\yii\db\ActiveQueryInterface) The newly created
'ActiveQueryInterface|ActiveQuery' instance.

 This method is internally called by 'findOne()' and 'findAll()'.

    [$condition] (mixed) Please refer to 'findOne()' for the explanation of
    this parameter


*yii/db/ActiveRecord::updateAll*				public
>
 updateAll($attributes, $condition='\'\'', $params='[]')
<
return (int) The number of rows updated

 For example, to change the status to be 1 for all customers whose status is
 2:

   Customer::updateAll(['status' => 1], 'status = 2');

 > Warning: If you do not specify any condition, this method will update
 **all** rows in the table.

 Note that this method will not trigger any events. If you need
 'EVENT_BEFORE_UPDATE' or 'EVENT_AFTER_UPDATE' to be triggered, you need to
 'find()|find' the models first and then call 'update()' on each of them. For
 example an equivalent of the example above would be:

   $models = Customer::find()->where('status = 2')->all();
   foreach ($models as $model) {
       $model->status = 1;
       $model->update(false); // skipping validation as no user input is
 involved
   }

 For a large set of models you might consider using 'ActiveQuery::each()' to
 keep memory usage within limits.

    [$attributes] (array) Attribute values (name-value pairs) to be saved into
    the table
    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the UPDATE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/ActiveRecord::updateAllCounters*			public
>
 updateAllCounters($counters, $condition='\'\'', $params='[]')
<
return (int) The number of rows updated

 For example, to increment all customers' age by 1,

   Customer::updateAllCounters(['age' => 1]);

 Note that this method will not trigger any events.

    [$counters] (array) The counters to be updated (attribute name =>
    increment value). Use negative values if you want to decrement the
    counters.
    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the UPDATE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.
    Do not name the parameters as ':bp0', ':bp1', etc., because they are used
    internally by this method.


*yii/db/ActiveRecord::deleteAll*				public
>
 deleteAll($condition='null', $params='[]')
<
return (int) The number of rows deleted

 For example, to delete all customers whose status is 3:

   Customer::deleteAll('status = 3');

 > Warning: If you do not specify any condition, this method will delete
 **all** rows in the table.

 Note that this method will not trigger any events. If you need
 'EVENT_BEFORE_DELETE' or 'EVENT_AFTER_DELETE' to be triggered, you need to
 'find()|find' the models first and then call 'delete()' on each of them. For
 example an equivalent of the example above would be:

   $models = Customer::find()->where('status = 3')->all();
   foreach ($models as $model) {
       $model->delete();
   }

 For a large set of models you might consider using 'ActiveQuery::each()' to
 keep memory usage within limits.

    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the DELETE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/ActiveRecord::optimisticLock*			public

 See |yii/db/BaseActiveRecord::optimisticLock|


*yii/db/ActiveRecord::hasOne*				public

 See |yii/db/BaseActiveRecord::hasOne|


*yii/db/ActiveRecord::hasMany*				public

 See |yii/db/BaseActiveRecord::hasMany|


*yii/db/ActiveRecord::createRelationQuery*		protected

 See |yii/db/BaseActiveRecord::createRelationQuery|


*yii/db/ActiveRecord::populateRelation*			public

 See |yii/db/BaseActiveRecord::populateRelation|


*yii/db/ActiveRecord::isRelationPopulated*		public

 See |yii/db/BaseActiveRecord::isRelationPopulated|


*yii/db/ActiveRecord::getRelatedRecords*			public

 See |yii/db/BaseActiveRecord::getRelatedRecords|


*yii/db/ActiveRecord::hasAttribute*			public

 See |yii/db/BaseActiveRecord::hasAttribute|


*yii/db/ActiveRecord::getAttribute*			public

 See |yii/db/BaseActiveRecord::getAttribute|


*yii/db/ActiveRecord::setAttribute*			public

 See |yii/db/BaseActiveRecord::setAttribute|


*yii/db/ActiveRecord::getOldAttributes*			public

 See |yii/db/BaseActiveRecord::getOldAttributes|


*yii/db/ActiveRecord::setOldAttributes*			public

 See |yii/db/BaseActiveRecord::setOldAttributes|


*yii/db/ActiveRecord::getOldAttribute*			public

 See |yii/db/BaseActiveRecord::getOldAttribute|


*yii/db/ActiveRecord::setOldAttribute*			public

 See |yii/db/BaseActiveRecord::setOldAttribute|


*yii/db/ActiveRecord::markAttributeDirty*			public

 See |yii/db/BaseActiveRecord::markAttributeDirty|


*yii/db/ActiveRecord::isAttributeChanged*			public

 See |yii/db/BaseActiveRecord::isAttributeChanged|


*yii/db/ActiveRecord::getDirtyAttributes*			public

 See |yii/db/BaseActiveRecord::getDirtyAttributes|


*yii/db/ActiveRecord::save*				public

 See |yii/db/BaseActiveRecord::save|


*yii/db/ActiveRecord::update*				public
>
 update($runValidation='true', $attributeNames='null')
<
return (int|false) The number of rows affected, or false if validation fails or
'beforeSave()' stops the updating process.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is 'true'. If
 'beforeValidate()'    returns 'false', the rest of the steps will be skipped;
 2. call 'afterValidate()' when '$runValidation' is 'true'. If validation   
 failed, the rest of the steps will be skipped; 3. call 'beforeSave()'. If
 'beforeSave()' returns 'false',    the rest of the steps will be skipped; 4.
 save the record into database. If this fails, it will skip the rest of the
 steps; 5. call 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_AFTER_VALIDATE', 'EVENT_BEFORE_UPDATE', and 'EVENT_AFTER_UPDATE' will
 be raised by the corresponding methods.

 Only the 'dirtyAttributes|changed attribute values' will be saved into
 database.

 For example, to update a customer record:

   $customer = Customer::findOne($id);
   $customer->name = $name;
   $customer->email = $email;
   $customer->update();

 Note that it is possible the update does not affect any row in the table. In
 this case, this method will return 0. For this reason, you should use the
 following code to check if update() is successful or not:

   if ($customer->update() !== false) {
       // update successful
   } else {
       // update failed
   }



    [$runValidation] (bool) Whether to perform validation (calling
    'validate()') before saving the record. Defaults to 'true'. If the
    validation fails, the record will not be saved to the database and this
    method will return 'false'.
    [$attributeNames] (array) List of attributes that need to be saved.
    Defaults to 'null', meaning all attributes that are loaded from DB will be
    saved.


*yii/db/ActiveRecord::updateAttributes*			public

 See |yii/db/BaseActiveRecord::updateAttributes|


*yii/db/ActiveRecord::updateInternal*			protected

 See |yii/db/BaseActiveRecord::updateInternal|


*yii/db/ActiveRecord::updateCounters*			public

 See |yii/db/BaseActiveRecord::updateCounters|


*yii/db/ActiveRecord::delete*				public
>
 delete()
<
return (int|false) The number of rows deleted, or 'false' if the deletion is
unsuccessful for some reason. Note that it is possible the number of rows
deleted is 0, even though the deletion execution is successful.

 This method performs the following steps in order:

 1. call 'beforeDelete()'. If the method returns 'false', it will skip the   
 rest of the steps; 2. delete the record from the database; 3. call
 'afterDelete()'.

 In the above step 1 and 3, events named 'EVENT_BEFORE_DELETE' and
 'EVENT_AFTER_DELETE' will be raised by the corresponding methods.


*yii/db/ActiveRecord::getIsNewRecord*			public

 See |yii/db/BaseActiveRecord::getIsNewRecord|


*yii/db/ActiveRecord::setIsNewRecord*			public

 See |yii/db/BaseActiveRecord::setIsNewRecord|


*yii/db/ActiveRecord::afterFind*				public

 See |yii/db/BaseActiveRecord::afterFind|


*yii/db/ActiveRecord::beforeSave*				public

 See |yii/db/BaseActiveRecord::beforeSave|


*yii/db/ActiveRecord::afterSave*				public

 See |yii/db/BaseActiveRecord::afterSave|


*yii/db/ActiveRecord::beforeDelete*			public

 See |yii/db/BaseActiveRecord::beforeDelete|


*yii/db/ActiveRecord::afterDelete*			public

 See |yii/db/BaseActiveRecord::afterDelete|


*yii/db/ActiveRecord::refresh*				public
>
 refresh()
<
return (bool) Whether the row still exists in the database. If 'true', the latest
data will be populated to this active record. Otherwise, this record will
remain unchanged.



 If the refresh is successful, an 'EVENT_AFTER_REFRESH' event will be
 triggered. This event is available since version 2.0.8.




*yii/db/ActiveRecord::refreshInternal*			protected

 See |yii/db/BaseActiveRecord::refreshInternal|


*yii/db/ActiveRecord::afterRefresh*			public

 See |yii/db/BaseActiveRecord::afterRefresh|


*yii/db/ActiveRecord::equals*				public
>
 equals($record)
<
return (bool) Whether the two active records refer to the same row in the same
database table.

 The comparison is made by comparing the table names and the primary key
 values of the two active records. If one of the records 'isNewRecord|is new'
 they are also considered not equal.

    [$record] (\yii\db\ActiveRecord) Record to compare to


*yii/db/ActiveRecord::getPrimaryKey*			public

 See |yii/db/BaseActiveRecord::getPrimaryKey|


*yii/db/ActiveRecord::getOldPrimaryKey*			public

 See |yii/db/BaseActiveRecord::getOldPrimaryKey|


*yii/db/ActiveRecord::populateRecord*			public
>
 populateRecord($record, $row)
<
return (void)



 This is an internal method meant to be called to create active record objects
 after fetching data from the database. It is mainly used by 'ActiveQuery' to
 populate the query results into active records.

 When calling this method manually you should call 'afterFind()' on the
 created record to trigger the 'EVENT_AFTER_FIND|afterFind Event'.



    [$record] (\yii\db\BaseActiveRecord) The record to be populated. In most
    cases this will be an instance created by 'instantiate()' beforehand.
    [$row] (array) Attribute values (name => value)


*yii/db/ActiveRecord::instantiate*			public

 See |yii/db/BaseActiveRecord::instantiate|


*yii/db/ActiveRecord::getRelation*			public

 See |yii/db/BaseActiveRecord::getRelation|


*yii/db/ActiveRecord::link*				public

 See |yii/db/BaseActiveRecord::link|


*yii/db/ActiveRecord::unlink*				public

 See |yii/db/BaseActiveRecord::unlink|


*yii/db/ActiveRecord::unlinkAll*				public

 See |yii/db/BaseActiveRecord::unlinkAll|


*yii/db/ActiveRecord::isPrimaryKey*			public

 See |yii/db/BaseActiveRecord::isPrimaryKey|


*yii/db/ActiveRecord::primaryKey*				public
>
 primaryKey()
<
return (string[]) The primary keys of the associated database table.

 The default implementation will return the primary key(s) as declared in the
 DB table that is associated with this AR class.

 If the DB table does not declare any primary key, you should override this
 method to return the attributes that you want to use as primary keys for this
 AR class.

 Note that an array should be returned even for a table with single primary
 key.


*yii/db/ActiveRecord::find*				public
>
 find()
<
return (\yii\db\ActiveQuery) The newly created 'ActiveQuery' instance.



 The returned 'ActiveQueryInterface' instance can be further customized by
 calling methods defined in 'ActiveQueryInterface' before 'one()' or 'all()'
 is called to return populated ActiveRecord instances. For example,

   // find the customer whose ID is 1
   $customer = Customer::find()->where(['id' => 1])->one();

   // find all active customers and order them by their age:
   $customers = Customer::find()
       ->where(['status' => 1])
       ->orderBy('age')
       ->all();

 This method is also called by 'BaseActiveRecord::hasOne()' and
 'BaseActiveRecord::hasMany()' to create a relational query.

 You may override this method to return a customized query. For example,

   class Customer extends ActiveRecord
   {
       public static function find()
       {
           // use CustomerQuery instead of the default ActiveQuery
           return new CustomerQuery(get_called_class());
       }
   }

 The following code shows how to apply a default condition for all queries:

 '''php class Customer extends ActiveRecord {     public static function
 find()     {         return parent::find()->where(['deleted' => false]);    
 } }

 // Use andWhere()/orWhere() to apply the default condition // SELECT FROM
 customer WHERE 'deleted'=:deleted AND age>30 $customers =
 Customer::find()->andWhere('age>30')->all();

 // Use where() to ignore the default condition // SELECT FROM customer WHERE
 age>30 $customers = Customer::find()->where('age>30')->all();




*yii/db/ActiveRecord::insert*				public
>
 insert($runValidation='true', $attributes='null')
<
return (bool) Whether the attributes are valid and the record is inserted
successfully.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is 'true'. If
 'beforeValidate()'    returns 'false', the rest of the steps will be skipped;
 2. call 'afterValidate()' when '$runValidation' is 'true'. If validation   
 failed, the rest of the steps will be skipped; 3. call 'beforeSave()'. If
 'beforeSave()' returns 'false',    the rest of the steps will be skipped; 4.
 insert the record into database. If this fails, it will skip the rest of the
 steps; 5. call 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_AFTER_VALIDATE', 'EVENT_BEFORE_INSERT', and 'EVENT_AFTER_INSERT' will
 be raised by the corresponding methods.

 Only the 'dirtyAttributes|changed attribute values' will be inserted into
 database.

 If the table's primary key is auto-incremental and is 'null' during
 insertion, it will be populated with the actual value after insertion.

 For example, to insert a customer record:

   $customer = new Customer;
   $customer->name = $name;
   $customer->email = $email;
   $customer->insert();



    [$runValidation] (bool) Whether to perform validation (calling
    'validate()') before saving the record. Defaults to 'true'. If the
    validation fails, the record will not be saved to the database and this
    method will return 'false'.
    [$attributes] (array) List of attributes that need to be saved. Defaults
    to 'null', meaning all attributes that are loaded from DB will be saved.


*yii/db/ActiveRecord::getDb*				public
>
 getDb()
<
return (\yii\db\Connection) The database connection used by this AR class.

 By default, the "db" application component is used as the database
 connection. You may override this method if you want to use a different
 database connection.


*yii/db/ActiveRecord::loadDefaultValues*			public
>
 loadDefaultValues($skipIfSet='true')
<
return ($this) The model instance itself.

 You may call this method to load default values after creating a new
 instance:

   // class Customer extends \yii\db\ActiveRecord
   $customer = new Customer();
   $customer->loadDefaultValues();



    [$skipIfSet] (bool) Whether existing value should be preserved. This will
    only set defaults for attributes that are 'null'.


*yii/db/ActiveRecord::findBySql*				public
>
 findBySql($sql, $params='[]')
<
return (\yii\db\ActiveQuery) The newly created 'ActiveQuery' instance

 Note that because the SQL statement is already specified, calling additional
 query modification methods (such as 'where()', 'order()') on the created
 'ActiveQuery' instance will have no effect. However, calling 'with()',
 'asArray()' or 'indexBy()' is still fine.

 Below is an example:

   $customers = Customer::findBySql('SELECT * FROM customer')->all();



    [$sql] (string) The SQL statement to be executed
    [$params] (array) Parameters to be bound to the SQL statement during
    execution.


*yii/db/ActiveRecord::tableName*				public
>
 tableName()
<
return (string) The table name

 By default this method returns the class name as the table name by calling
 'Inflector::camel2id()' with prefix 'Connection::tablePrefix'. For example if
 'Connection::tablePrefix' is 'tbl_', 'Customer' becomes 'tbl_customer', and
 'OrderItem' becomes 'tbl_order_item'. You may override this method if the
 table is not named after this convention.


*yii/db/ActiveRecord::getTableSchema*			public
>
 getTableSchema()
<
return (\yii\db\TableSchema) The schema information of the DB table associated with
this AR class.



*yii/db/ActiveRecord::transactions*			public
>
 transactions()
<
return (array) The declarations of transactional operations. The array keys are
scenarios names, and the array values are the corresponding transaction
operations.

 The supported DB operations are: 'OP_INSERT', 'OP_UPDATE' and 'OP_DELETE',
 which correspond to the 'insert()', 'update()' and 'delete()' methods,
 respectively. By default, these methods are NOT enclosed in a DB transaction.

 In some scenarios, to ensure data consistency, you may want to enclose some
 or all of them in transactions. You can do so by overriding this method and
 returning the operations that need to be transactional. For example,

   return [
       'admin' => self::OP_INSERT,
       'api' => self::OP_INSERT | self::OP_UPDATE | self::OP_DELETE,
       // the above is equivalent to the following:
       // 'api' => self::OP_ALL,

   ];

 The above declaration specifies that in the "admin" scenario, the insert
 operation ('insert()') should be done in a transaction; and in the "api"
 scenario, all the operations should be done in a transaction.


*yii/db/ActiveRecord::insertInternal*			protected
>
 insertInternal($attributes='null')
<
return (bool) Whether the record is inserted successfully.

    [$attributes] (array) List of attributes that need to be saved. Defaults
    to 'null', meaning all attributes that are loaded from DB will be saved.


*yii/db/ActiveRecord::deleteInternal*			protected
>
 deleteInternal()
<
return (int|false) The number of rows deleted, or 'false' if the deletion is
unsuccessful for some reason. Note that it is possible the number of rows
deleted is 0, even though the deletion execution is successful.



*yii/db/ActiveRecord::isTransactional*			public
>
 isTransactional($operation)
<
return (bool) Whether the specified operation is transactional in the current
'scenario'.

    [$operation] (int) The operation to check. Possible values are
    'OP_INSERT', 'OP_UPDATE' and 'OP_DELETE'.



 vim:tw=78:ts=8:ft=help:norl:
