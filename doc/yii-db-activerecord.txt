
*yii/db/ActiveRecord*   >> |yii/db/BaseActiveRecord|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 Active Record implements the [Active Record design
 pattern](http://en.wikipedia.org/wiki/Active_record). The premise behind
 Active Record is that an individual 'ActiveRecord' object is associated with
 a specific row in a database table. The object's attributes are mapped to the
 columns of the corresponding table. Referencing an Active Record attribute is
 equivalent to accessing the corresponding table column for that record.

 As an example, say that the 'Customer' ActiveRecord class is associated with
 the 'customer' table. This would mean that the class's 'name' attribute is
 automatically mapped to the 'name' column in 'customer' table. Thanks to
 Active Record, assuming the variable '$customer' is an object of type
 'Customer', to get the value of the 'name' column for the table row, you can
 use the expression '$customer->name'. In this example, Active Record is
 providing an object-oriented interface for accessing data stored in the
 database. But Active Record provides much more functionality than this.

 To declare an ActiveRecord class you need to extend '\yii\db\ActiveRecord'
 and implement the 'tableName' method:

   <?php

   class Customer extends \yii\db\ActiveRecord
   {
       public static function tableName()
       {
           return 'customer';
       }
   }

 The 'tableName' method only has to return the name of the database table
 associated with the class.

 > Tip: You may also use the [Gii code generator](guide:start-gii) to generate
 ActiveRecord classes from your > database tables.

 Class instances are obtained in one of two ways:

 * Using the 'new' operator to create a new, empty object * Using a method to
 fetch an existing record (or records) from the database

 Here is a short teaser how working with an ActiveRecord looks like:

   $user = new User();
   $user->name = 'Qiang';
   $user->save();  // a new row is inserted into user table

   // the following will retrieve the user 'CeBe' from the database
   $user = User::find()->where(['name' => 'CeBe'])->one();

   // this will get related records from orders table when relation is defined
   $orders = $user->orders;

 For more details and usage information on ActiveRecord, see the [guide
 article on ActiveRecord](guide:db-active-record).


PROPERTY DETAILS
------------------------------------------------------------------------------

$behaviors				*yii/db/ActiveRecord::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$validators				*yii/db/ActiveRecord::$validators*
 (\ArrayObject|\yii\validators\Validator[]) All the validators declared in the
 model.

$activeValidators			*yii/db/ActiveRecord::$activeValidators*
 (\yii\validators\Validator[]) The validators applicable to the current
 'scenario'.

$errors					*yii/db/ActiveRecord::$errors*
 (array) Errors for all attributes or the specified attribute. Empty array is
 returned if no error. Note that when returning errors for all attributes, the
 result is a two-dimensional array, like the following:

   [
       'username' => [
           'Username is required.',
           'Username must contain only word characters.',
       ],
       'email' => [
           'Email address is invalid.',
       ]
   ]



$firstErrors				*yii/db/ActiveRecord::$firstErrors*
 (array) The first errors. The array keys are the attribute names, and the
 array values are the corresponding error messages. An empty array will be
 returned if there is no error.

$attributes				*yii/db/ActiveRecord::$attributes*
 (array) Attribute values (name => value).

$scenario				*yii/db/ActiveRecord::$scenario*
 (string) The scenario that this model is in. Defaults to 'SCENARIO_DEFAULT'.

$iterator				*yii/db/ActiveRecord::$iterator*
 (\ArrayIterator) An iterator for traversing the items in the list.

$relatedRecords				*yii/db/ActiveRecord::$relatedRecords*
 (array) An array of related records indexed by relation names.

$oldAttributes				*yii/db/ActiveRecord::$oldAttributes*
 (array) The old attribute values (name-value pairs)

$dirtyAttributes			*yii/db/ActiveRecord::$dirtyAttributes*
 (array) The changed attribute values (name-value pairs)

$isNewRecord				*yii/db/ActiveRecord::$isNewRecord*
 (boolean) Whether the record is new and should be inserted when calling
 'save()'.

$primaryKey				*yii/db/ActiveRecord::$primaryKey*
 (mixed) The primary key value. An array (column name => column value) is
 returned if the primary key is composite or '$asArray' is true. A string is
 returned otherwise (null will be returned if the key value is null).

$oldPrimaryKey				*yii/db/ActiveRecord::$oldPrimaryKey*
 (mixed) The old primary key value. An array (column name => column value) is
 returned if the primary key is composite or '$asArray' is true. A string is
 returned otherwise (null will be returned if the key value is null).



METHOD DETAILS
------------------------------------------------------------------------------

*yii/db/ActiveRecord::className*				public
 See |yii/base/Object::className|


*yii/db/ActiveRecord::__construct*			public
 See |yii/base/Object::__construct|


*yii/db/ActiveRecord::init*				public
 See |yii/db/BaseActiveRecord::init|


*yii/db/ActiveRecord::__get*				public
 See |yii/base/Component::__get|


*yii/db/ActiveRecord::__set*				public
 See |yii/base/Component::__set|


*yii/db/ActiveRecord::__isset*				public
 See |yii/base/Component::__isset|


*yii/db/ActiveRecord::__unset*				public
 See |yii/base/Component::__unset|


*yii/db/ActiveRecord::__call*				public
 See |yii/base/Component::__call|


*yii/db/ActiveRecord::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/db/ActiveRecord::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/db/ActiveRecord::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/db/ActiveRecord::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/db/ActiveRecord::__clone*				public
 See |yii/base/Component::__clone|


*yii/db/ActiveRecord::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/db/ActiveRecord::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/db/ActiveRecord::on*					public
 See |yii/base/Component::on|


*yii/db/ActiveRecord::off*				public
 See |yii/base/Component::off|


*yii/db/ActiveRecord::trigger*				public
 See |yii/base/Component::trigger|


*yii/db/ActiveRecord::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/db/ActiveRecord::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/db/ActiveRecord::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/db/ActiveRecord::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/db/ActiveRecord::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/db/ActiveRecord::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/db/ActiveRecord::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/db/ActiveRecord::fields*				public
 See |yii/base/ArrayableTrait::fields|


*yii/db/ActiveRecord::extraFields*			public
 See |yii/base/ArrayableTrait::extraFields|


*yii/db/ActiveRecord::toArray*				public
 See |yii/base/ArrayableTrait::toArray|


*yii/db/ActiveRecord::resolveFields*			protected
 See |yii/base/ArrayableTrait::resolveFields|


*yii/db/ActiveRecord::rules*				public
 See |yii/base/Model::rules|


*yii/db/ActiveRecord::scenarios*				public
 See |yii/base/Model::scenarios|


*yii/db/ActiveRecord::formName*				public
 See |yii/base/Model::formName|


*yii/db/ActiveRecord::attributes*				public
>
 attributes()
<
(array) List of attribute names.

 The default implementation will return all column names of the table
 associated with this AR class.


*yii/db/ActiveRecord::attributeLabels*			public
 See |yii/base/Model::attributeLabels|


*yii/db/ActiveRecord::validate*				public
 See |yii/base/Model::validate|


*yii/db/ActiveRecord::beforeValidate*			public
 See |yii/base/Model::beforeValidate|


*yii/db/ActiveRecord::afterValidate*			public
 See |yii/base/Model::afterValidate|


*yii/db/ActiveRecord::getValidators*			public
 See |yii/base/Model::getValidators|


*yii/db/ActiveRecord::getActiveValidators*		public
 See |yii/base/Model::getActiveValidators|


*yii/db/ActiveRecord::createValidators*			public
 See |yii/base/Model::createValidators|


*yii/db/ActiveRecord::isAttributeRequired*		public
 See |yii/base/Model::isAttributeRequired|


*yii/db/ActiveRecord::isAttributeSafe*			public
 See |yii/base/Model::isAttributeSafe|


*yii/db/ActiveRecord::isAttributeActive*			public
 See |yii/base/Model::isAttributeActive|


*yii/db/ActiveRecord::getAttributeLabel*			public
 See |yii/base/Model::getAttributeLabel|


*yii/db/ActiveRecord::hasErrors*				public
 See |yii/base/Model::hasErrors|


*yii/db/ActiveRecord::getErrors*				public
 See |yii/base/Model::getErrors|


*yii/db/ActiveRecord::getFirstErrors*			public
 See |yii/base/Model::getFirstErrors|


*yii/db/ActiveRecord::getFirstError*			public
 See |yii/base/Model::getFirstError|


*yii/db/ActiveRecord::addError*				public
 See |yii/base/Model::addError|


*yii/db/ActiveRecord::clearErrors*			public
 See |yii/base/Model::clearErrors|


*yii/db/ActiveRecord::generateAttributeLabel*		public
 See |yii/base/Model::generateAttributeLabel|


*yii/db/ActiveRecord::getAttributes*			public
 See |yii/base/Model::getAttributes|


*yii/db/ActiveRecord::setAttributes*			public
 See |yii/base/Model::setAttributes|


*yii/db/ActiveRecord::onUnsafeAttribute*			public
 See |yii/base/Model::onUnsafeAttribute|


*yii/db/ActiveRecord::getScenario*			public
 See |yii/base/Model::getScenario|


*yii/db/ActiveRecord::setScenario*			public
 See |yii/base/Model::setScenario|


*yii/db/ActiveRecord::safeAttributes*			public
 See |yii/base/Model::safeAttributes|


*yii/db/ActiveRecord::activeAttributes*			public
 See |yii/base/Model::activeAttributes|


*yii/db/ActiveRecord::load*				public
 See |yii/base/Model::load|


*yii/db/ActiveRecord::loadMultiple*			public
 See |yii/base/Model::loadMultiple|


*yii/db/ActiveRecord::validateMultiple*			public
 See |yii/base/Model::validateMultiple|


*yii/db/ActiveRecord::getIterator*			public
 See |yii/base/Model::getIterator|


*yii/db/ActiveRecord::offsetExists*			public
 See |yii/base/Model::offsetExists|


*yii/db/ActiveRecord::offsetGet*				public
 See |yii/base/Model::offsetGet|


*yii/db/ActiveRecord::offsetSet*				public
 See |yii/base/Model::offsetSet|


*yii/db/ActiveRecord::offsetUnset*			public
 See |yii/base/Model::offsetUnset|


*yii/db/ActiveRecord::findOne*				public
 See |yii/db/BaseActiveRecord::findOne|


*yii/db/ActiveRecord::findAll*				public
 See |yii/db/BaseActiveRecord::findAll|


*yii/db/ActiveRecord::findByCondition*			protected
>
 findByCondition($condition, $one)
<
(static|static[]) 

 This method is internally called by 'findOne()' and 'findAll()'.
    [$condition] (mixed) Please refer to 'findOne()' for the explanation of
    this parameter
    [$one] (boolean) Whether this method is called by 'findOne()' or
    'findAll()'


*yii/db/ActiveRecord::updateAll*				public
>
 updateAll($attributes, $condition='\'\'', $params='[]')
<
(integer) The number of rows updated

 For example, to change the status to be 1 for all customers whose status is
 2:

   Customer::updateAll(['status' => 1], 'status = 2');


    [$attributes] (array) Attribute values (name-value pairs) to be saved into
    the table
    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the UPDATE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/ActiveRecord::updateAllCounters*			public
>
 updateAllCounters($counters, $condition='\'\'', $params='[]')
<
(integer) The number of rows updated

 For example, to increment all customers' age by 1,

   Customer::updateAllCounters(['age' => 1]);


    [$counters] (array) The counters to be updated (attribute name =>
    increment value). Use negative values if you want to decrement the
    counters.
    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the UPDATE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.
    Do not name the parameters as ':bp0', ':bp1', etc., because they are used
    internally by this method.


*yii/db/ActiveRecord::deleteAll*				public
>
 deleteAll($condition='\'\'', $params='[]')
<
(integer) The number of rows deleted

 WARNING: If you do not specify any condition, this method will delete ALL
 rows in the table.

 For example, to delete all customers whose status is 3:

   Customer::deleteAll('status = 3');


    [$condition] (string|array) The conditions that will be put in the WHERE
    part of the DELETE SQL. Please refer to 'Query::where()' on how to specify
    this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/ActiveRecord::optimisticLock*			public
 See |yii/db/BaseActiveRecord::optimisticLock|


*yii/db/ActiveRecord::hasOne*				public
 See |yii/db/BaseActiveRecord::hasOne|


*yii/db/ActiveRecord::hasMany*				public
 See |yii/db/BaseActiveRecord::hasMany|


*yii/db/ActiveRecord::populateRelation*			public
 See |yii/db/BaseActiveRecord::populateRelation|


*yii/db/ActiveRecord::isRelationPopulated*		public
 See |yii/db/BaseActiveRecord::isRelationPopulated|


*yii/db/ActiveRecord::getRelatedRecords*			public
 See |yii/db/BaseActiveRecord::getRelatedRecords|


*yii/db/ActiveRecord::hasAttribute*			public
 See |yii/db/BaseActiveRecord::hasAttribute|


*yii/db/ActiveRecord::getAttribute*			public
 See |yii/db/BaseActiveRecord::getAttribute|


*yii/db/ActiveRecord::setAttribute*			public
 See |yii/db/BaseActiveRecord::setAttribute|


*yii/db/ActiveRecord::getOldAttributes*			public
 See |yii/db/BaseActiveRecord::getOldAttributes|


*yii/db/ActiveRecord::setOldAttributes*			public
 See |yii/db/BaseActiveRecord::setOldAttributes|


*yii/db/ActiveRecord::getOldAttribute*			public
 See |yii/db/BaseActiveRecord::getOldAttribute|


*yii/db/ActiveRecord::setOldAttribute*			public
 See |yii/db/BaseActiveRecord::setOldAttribute|


*yii/db/ActiveRecord::markAttributeDirty*			public
 See |yii/db/BaseActiveRecord::markAttributeDirty|


*yii/db/ActiveRecord::isAttributeChanged*			public
 See |yii/db/BaseActiveRecord::isAttributeChanged|


*yii/db/ActiveRecord::getDirtyAttributes*			public
 See |yii/db/BaseActiveRecord::getDirtyAttributes|


*yii/db/ActiveRecord::save*				public
 See |yii/db/BaseActiveRecord::save|


*yii/db/ActiveRecord::update*				public
>
 update($runValidation='true', $attributeNames='null')
<
(integer|boolean) The number of rows affected, or false if validation fails or
'beforeSave()' stops the updating process.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is true. If validation   
 fails, it will skip the rest of the steps; 2. call 'afterValidate()' when
 '$runValidation' is true. 3. call 'beforeSave()'. If the method returns
 false, it will skip the    rest of the steps; 4. save the record into
 database. If this fails, it will skip the rest of the steps; 5. call
 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_BEFORE_UPDATE', 'EVENT_AFTER_UPDATE' and 'EVENT_AFTER_VALIDATE' will
 be raised by the corresponding methods.

 Only the 'dirtyAttributes|changed attribute values' will be saved into
 database.

 For example, to update a customer record:

   $customer = Customer::findOne($id);
   $customer->name = $name;
   $customer->email = $email;
   $customer->update();

 Note that it is possible the update does not affect any row in the table. In
 this case, this method will return 0. For this reason, you should use the
 following code to check if update() is successful or not:

   if ($this->update() !== false) {
       // update successful
   } else {
       // update failed
   }


    [$runValidation] (boolean) Whether to perform validation before saving the
    record. If the validation fails, the record will not be inserted into the
    database.
    [$attributeNames] (array) List of attributes that need to be saved.
    Defaults to null, meaning all attributes that are loaded from DB will be
    saved.


*yii/db/ActiveRecord::updateAttributes*			public
 See |yii/db/BaseActiveRecord::updateAttributes|


*yii/db/ActiveRecord::updateInternal*			protected
 See |yii/db/BaseActiveRecord::updateInternal|


*yii/db/ActiveRecord::updateCounters*			public
 See |yii/db/BaseActiveRecord::updateCounters|


*yii/db/ActiveRecord::delete*				public
>
 delete()
<
(integer|boolean) The number of rows deleted, or false if the deletion is
unsuccessful for some reason. Note that it is possible the number of rows
deleted is 0, even though the deletion execution is successful.

 This method performs the following steps in order:

 1. call 'beforeDelete()'. If the method returns false, it will skip the   
 rest of the steps; 2. delete the record from the database; 3. call
 'afterDelete()'.

 In the above step 1 and 3, events named 'EVENT_BEFORE_DELETE' and
 'EVENT_AFTER_DELETE' will be raised by the corresponding methods.


*yii/db/ActiveRecord::getIsNewRecord*			public
 See |yii/db/BaseActiveRecord::getIsNewRecord|


*yii/db/ActiveRecord::setIsNewRecord*			public
 See |yii/db/BaseActiveRecord::setIsNewRecord|


*yii/db/ActiveRecord::afterFind*				public
 See |yii/db/BaseActiveRecord::afterFind|


*yii/db/ActiveRecord::beforeSave*				public
 See |yii/db/BaseActiveRecord::beforeSave|


*yii/db/ActiveRecord::afterSave*				public
 See |yii/db/BaseActiveRecord::afterSave|


*yii/db/ActiveRecord::beforeDelete*			public
 See |yii/db/BaseActiveRecord::beforeDelete|


*yii/db/ActiveRecord::afterDelete*			public
 See |yii/db/BaseActiveRecord::afterDelete|


*yii/db/ActiveRecord::refresh*				public
 See |yii/db/BaseActiveRecord::refresh|


*yii/db/ActiveRecord::equals*				public
>
 equals($record)
<
(boolean) Whether the two active records refer to the same row in the same
database table.

 The comparison is made by comparing the table names and the primary key
 values of the two active records. If one of the records 'isNewRecord|is new'
 they are also considered not equal.
    [$record] (\yii\db\ActiveRecord) Record to compare to


*yii/db/ActiveRecord::getPrimaryKey*			public
 See |yii/db/BaseActiveRecord::getPrimaryKey|


*yii/db/ActiveRecord::getOldPrimaryKey*			public
 See |yii/db/BaseActiveRecord::getOldPrimaryKey|


*yii/db/ActiveRecord::populateRecord*			public
>
 populateRecord($record, $row)
<
(void)

 This is an internal method meant to be called to create active record objects
 after fetching data from the database. It is mainly used by 'ActiveQuery' to
 populate the query results into active records.

 When calling this method manually you should call 'afterFind()' on the
 created record to trigger the 'EVENT_AFTER_FIND|afterFind Event'.
    [$record] (\yii\db\BaseActiveRecord) The record to be populated. In most
    cases this will be an instance created by 'instantiate()' beforehand.
    [$row] (array) Attribute values (name => value)


*yii/db/ActiveRecord::instantiate*			public
 See |yii/db/BaseActiveRecord::instantiate|


*yii/db/ActiveRecord::getRelation*			public
 See |yii/db/BaseActiveRecord::getRelation|


*yii/db/ActiveRecord::link*				public
 See |yii/db/BaseActiveRecord::link|


*yii/db/ActiveRecord::unlink*				public
 See |yii/db/BaseActiveRecord::unlink|


*yii/db/ActiveRecord::unlinkAll*				public
 See |yii/db/BaseActiveRecord::unlinkAll|


*yii/db/ActiveRecord::isPrimaryKey*			public
 See |yii/db/BaseActiveRecord::isPrimaryKey|


*yii/db/ActiveRecord::primaryKey*				public
>
 primaryKey()
<
(string[]) The primary keys of the associated database table.

 The default implementation will return the primary key(s) as declared in the
 DB table that is associated with this AR class.

 If the DB table does not declare any primary key, you should override this
 method to return the attributes that you want to use as primary keys for this
 AR class.

 Note that an array should be returned even for a table with single primary
 key.


*yii/db/ActiveRecord::find*				public
>
 find()
<
(\yii\db\ActiveQuery) The newly created 'ActiveQuery' instance.

 The returned 'ActiveQueryInterface|ActiveQuery' instance can be further
 customized by calling methods defined in 'ActiveQueryInterface' before
 'one()' or 'all()' is called to return populated ActiveRecord instances. For
 example,

   // find the customer whose ID is 1
   $customer = Customer::find()->where(['id' => 1])->one();

   // find all active customers and order them by their age:
   $customers = Customer::find()
       ->where(['status' => 1])
       ->orderBy('age')
       ->all();

 This method is also called by 'BaseActiveRecord::hasOne()' and
 'BaseActiveRecord::hasMany()' to create a relational query.

 You may override this method to return a customized query. For example,

   class Customer extends ActiveRecord
   {
       public static function find()
       {
           // use CustomerQuery instead of the default ActiveQuery
           return new CustomerQuery(get_called_class());
       }
   }

 The following code shows how to apply a default condition for all queries:

 '''php class Customer extends ActiveRecord {     public static function
 find()     {         return parent::find()->where(['deleted' => false]);    
 } }

 // Use andWhere()/orWhere() to apply the default condition // SELECT FROM
 customer WHERE 'deleted'=:deleted AND age>30 $customers =
 Customer::find()->andWhere('age>30')->all();

 // Use where() to ignore the default condition // SELECT FROM customer WHERE
 age>30 $customers = Customer::find()->where('age>30')->all();


*yii/db/ActiveRecord::insert*				public
>
 insert($runValidation='true', $attributes='null')
<
(boolean) Whether the attributes are valid and the record is inserted
successfully.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is true. If validation   
 fails, it will skip the rest of the steps; 2. call 'afterValidate()' when
 '$runValidation' is true. 3. call 'beforeSave()'. If the method returns
 false, it will skip the    rest of the steps; 4. insert the record into
 database. If this fails, it will skip the rest of the steps; 5. call
 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_BEFORE_INSERT', 'EVENT_AFTER_INSERT' and 'EVENT_AFTER_VALIDATE' will
 be raised by the corresponding methods.

 Only the 'dirtyAttributes|changed attribute values' will be inserted into
 database.

 If the table's primary key is auto-incremental and is null during insertion,
 it will be populated with the actual value after insertion.

 For example, to insert a customer record:

   $customer = new Customer;
   $customer->name = $name;
   $customer->email = $email;
   $customer->insert();


    [$runValidation] (boolean) Whether to perform validation before saving the
    record. If the validation fails, the record will not be inserted into the
    database.
    [$attributes] (array) List of attributes that need to be saved. Defaults
    to null, meaning all attributes that are loaded from DB will be saved.


*yii/db/ActiveRecord::getDb*				public
>
 getDb()
<
(\yii\db\Connection) The database connection used by this AR class.

 By default, the "db" application component is used as the database
 connection. You may override this method if you want to use a different
 database connection.


*yii/db/ActiveRecord::loadDefaultValues*			public
>
 loadDefaultValues($skipIfSet='true')
<
(static) Model instance

    [$skipIfSet] (boolean) If existing value should be preserved


*yii/db/ActiveRecord::findBySql*				public
>
 findBySql($sql, $params='[]')
<
(\yii\db\ActiveQuery) The newly created 'ActiveQuery' instance

 Note that because the SQL statement is already specified, calling additional
 query modification methods (such as 'where()', 'order()') on the created
 'ActiveQuery' instance will have no effect. However, calling 'with()',
 'asArray()' or 'indexBy()' is still fine.

 Below is an example:

   $customers = Customer::findBySql('SELECT * FROM customer')->all();


    [$sql] (string) The SQL statement to be executed
    [$params] (array) Parameters to be bound to the SQL statement during
    execution.


*yii/db/ActiveRecord::tableName*				public
>
 tableName()
<
(string) The table name

 By default this method returns the class name as the table name by calling
 'Inflector::camel2id()' with prefix 'Connection::tablePrefix'. For example if
 'Connection::tablePrefix' is 'tbl_', 'Customer' becomes 'tbl_customer', and
 'OrderItem' becomes 'tbl_order_item'. You may override this method if the
 table is not named after this convention.


*yii/db/ActiveRecord::getTableSchema*			public
>
 getTableSchema()
<
(\yii\db\TableSchema) The schema information of the DB table associated with
this AR class.



*yii/db/ActiveRecord::transactions*			public
>
 transactions()
<
(array) The declarations of transactional operations. The array keys are
scenarios names, and the array values are the corresponding transaction
operations.

 The supported DB operations are: 'OP_INSERT', 'OP_UPDATE' and 'OP_DELETE',
 which correspond to the 'insert()', 'update()' and 'delete()' methods,
 respectively. By default, these methods are NOT enclosed in a DB transaction.

 In some scenarios, to ensure data consistency, you may want to enclose some
 or all of them in transactions. You can do so by overriding this method and
 returning the operations that need to be transactional. For example,

   return [
       'admin' => self::OP_INSERT,
       'api' => self::OP_INSERT | self::OP_UPDATE | self::OP_DELETE,
       // the above is equivalent to the following:
       // 'api' => self::OP_ALL,

   ];

 The above declaration specifies that in the "admin" scenario, the insert
 operation ('insert()') should be done in a transaction; and in the "api"
 scenario, all the operations should be done in a transaction.


*yii/db/ActiveRecord::insertInternal*			protected
>
 insertInternal($attributes='null')
<
(boolean) Whether the record is inserted successfully.

    [$attributes] (array) List of attributes that need to be saved. Defaults
    to null, meaning all attributes that are loaded from DB will be saved.


*yii/db/ActiveRecord::deleteInternal*			protected
>
 deleteInternal()
<
(integer|boolean) The number of rows deleted, or false if the deletion is
unsuccessful for some reason. Note that it is possible the number of rows
deleted is 0, even though the deletion execution is successful.



*yii/db/ActiveRecord::isTransactional*			public
>
 isTransactional($operation)
<
(boolean) Whether the specified operation is transactional in the current
'scenario'.

    [$operation] (integer) The operation to check. Possible values are
    'OP_INSERT', 'OP_UPDATE' and 'OP_DELETE'.



 vim:tw=78:ts=8:ft=help:norl:
