
*yii/widgets/DetailView*   >> |yii/base/Widget|
========================

DESCRIPTION
------------------------------------------------------------------------------

 DetailView is best used for displaying a model in a regular format (e.g. each
 model attribute is displayed as a row in a table.) The model can be either an
 instance of 'Model' or an associative array.

 DetailView uses the 'attributes' property to determines which model
 attributes should be displayed and how they should be formatted.

 A typical usage of DetailView is as follows:

   echo DetailView::widget([
       'model' => $model,
       'attributes' => [
           'title',               // title attribute (in plain text)
           'description:html',    // description attribute in HTML
           [                      // the owner name of the model
               'label' => 'Owner',
               'value' => $model->owner->name,
           ],
           'created_at:datetime', // creation date formatted as datetime
       ],
   ]);

 For more details and usage information on DetailView, see the [guide article
 on data widgets](guide:output-data-widgets).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Widget::$counter|
 |yii/base/Widget::$autoIdPrefix|
 |yii/base/Widget::$stack|
 |yii/base/Component::$behaviors|
 |yii/base/Widget::$id|
 |yii/base/Widget::$view|
 |yii/base/Widget::$viewPath|


$model					*yii/widgets/DetailView::$model*

 (array|object) The data model whose details are to be displayed. This can be
 a 'Model' instance, an associative array, an object that implements
 'Arrayable' interface or simply an object with defined public accessible
 non-static properties.

$attributes				*yii/widgets/DetailView::$attributes*

 (array) A list of attributes to be displayed in the detail view. Each array
 element represents the specification for displaying one particular attribute.

 An attribute can be specified as a string in the format of 'attribute',
 'attribute:format' or 'attribute:format:label', where 'attribute' refers to
 the attribute name, and 'format' represents the format of the attribute. The
 'format' is passed to the 'Formatter::format()' method to format an attribute
 value into a displayable text. Please refer to 'Formatter' for the supported
 types. Both 'format' and 'label' are optional. They will take default values
 if absent.

 An attribute can also be specified in terms of an array with the following
 elements:


   - 'attribute': the attribute name. This is required if either
   'label' or 'value' is not specified. 
   - 'label': the label associated with the attribute. If this is not
   specified, it will be generated from the attribute name. 
   - 'value': the value to be displayed. If this is not specified, it
   will be retrieved from 'model' using the attribute name   by calling
 'ArrayHelper::getValue()'. Note that this value will be formatted into a
 displayable text   according to the 'format' option. Since version 2.0.11 it
 can be defined as closure with the following   parameters:

     function ($model, $widget)

 '$model' refers to displayed model and '$widget' is an instance of
 'DetailView' widget.


   - 'format': the type of the value that determines how the value
   would be formatted into a displayable text.   Please refer to 'Formatter'
 for supported types and 'Formatter::format()' on how to specify this value. 
   - 'visible': whether the attribute is visible. If set to 'false',
   the attribute will NOT be displayed. 
   - 'contentOptions': the HTML attributes to customize value tag. For
   example: '['class' => 'bg-red']'.   Please refer to
 '\yii\helpers\BaseHtml::renderTagAttributes()' for the supported syntax. 
   - 'captionOptions': the HTML attributes to customize label tag. For
   example: '['class' => 'bg-red']'.   Please refer to
 '\yii\helpers\BaseHtml::renderTagAttributes()' for the supported syntax.

$template				*yii/widgets/DetailView::$template*

 (string|callable) The template used to render a single attribute. If a
 string, the token '{label}' and '{value}' will be replaced with the label and
 the value of the corresponding attribute. If a callback (e.g. an anonymous
 function), the signature must be as follows:

   function ($attribute, $index, $widget)

 where '$attribute' refer to the specification of the attribute being
 rendered, '$index' is the zero-based index of the attribute in the
 'attributes' array, and '$widget' refers to this widget instance.

 Since Version 2.0.10, the tokens '{captionOptions}' and '{contentOptions}'
 are available, which will represent HTML attributes of HTML container
 elements for the label and value.

$options				*yii/widgets/DetailView::$options*

 (array) The HTML attributes for the container tag of this widget. The 'tag'
 option specifies what container tag should be used. It defaults to 'table' if
 not set.

$formatter				*yii/widgets/DetailView::$formatter*

 (array|\yii\i18n\Formatter) The formatter used to format model attribute
 values into displayable texts. This can be either an instance of 'Formatter'
 or an configuration array for creating the 'Formatter' instance. If this
 property is not set, the 'formatter' application component will be used.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Widget::begin|
 |yii/base/Widget::end|
 |yii/base/Widget::widget|
 |yii/base/Widget::getId|
 |yii/base/Widget::setId|
 |yii/base/Widget::getView|
 |yii/base/Widget::setView|
 |yii/base/Widget::render|
 |yii/base/Widget::renderFile|
 |yii/base/Widget::getViewPath|
 |yii/base/Widget::beforeRun|
 |yii/base/Widget::afterRun|


*yii/widgets/DetailView::init*				public
>
 init()
<
return (void)

 Initializes the detail view.

 This method will initialize required property values.


*yii/widgets/DetailView::run*				public
>
 run()
<
return (void)

 Renders the detail view.

 This is the main entry of the whole detail view rendering.


*yii/widgets/DetailView::renderAttribute*			protected
>
 renderAttribute($attribute, $index)
<
return (string) The rendering result

 Renders a single attribute.

    [$attribute] (array) The specification of the attribute to be rendered.
    [$index] (int) The zero-based index of the attribute in the 'attributes'
    array


*yii/widgets/DetailView::normalizeAttributes*		protected
>
 normalizeAttributes()
<
return (void)

 Normalizes the attribute specifications.



 vim:tw=78:ts=8:ft=help:norl:
