
*yii/rest/IndexAction*   >> |yii/rest/Action|
======================

DESCRIPTION
------------------------------------------------------------------------------

 For more details and usage information on IndexAction, see the [guide article
 on rest controllers](guide:rest-controllers).


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/rest/IndexAction::$id*

 See |yii/base/Action::$id|

$controller				*yii/rest/IndexAction::$controller*

 See |yii/base/Action::$controller|

$modelClass				*yii/rest/IndexAction::$modelClass*

 See |yii/rest/Action::$modelClass|

$findModel				*yii/rest/IndexAction::$findModel*

 See |yii/rest/Action::$findModel|

$checkAccess				*yii/rest/IndexAction::$checkAccess*

 See |yii/rest/Action::$checkAccess|

$prepareDataProvider			*yii/rest/IndexAction::$prepareDataProvider*

 (callable) A PHP callable that will be called to prepare a data provider that
 should return a collection of the models. If not set, 'prepareDataProvider()'
 will be used instead. The signature of the callable should be:

   function (IndexAction $action) {
       // $action is the action object currently running
   }

 The callable should return an instance of 'ActiveDataProvider'.

 If 'dataFilter' is set the result of 'DataFilter::build()' will be passed to
 the callable as a second parameter. In this case the signature of the
 callable should be the following:

   function (IndexAction $action, mixed $filter) {
       // $action is the action object currently running
       // $filter the built filter condition
   }



$dataFilter				*yii/rest/IndexAction::$dataFilter*

 (\yii\data\DataFilter|null) Data filter to be used for the search filter
 composition. You must setup this field explicitly in order to enable filter
 processing. For example:

   [
       'class' => 'yii\data\ActiveDataFilter',
       'searchModel' => function () {
           return (new \yii\base\DynamicModel(['id' => null, 'name' => null,
 'price' => null]))
               ->addRule('id', 'integer')
               ->addRule('name', 'trim')
               ->addRule('name', 'string')
               ->addRule('price', 'number');
       },
   ]





METHOD DETAILS
------------------------------------------------------------------------------


*yii/rest/IndexAction::className*				public

 See |yii/base/BaseObject::className|


*yii/rest/IndexAction::__construct*			public

 See |yii/base/Action::__construct|


*yii/rest/IndexAction::init*				public

 See |yii/rest/Action::init|


*yii/rest/IndexAction::__get*				public

 See |yii/base/Component::__get|


*yii/rest/IndexAction::__set*				public

 See |yii/base/Component::__set|


*yii/rest/IndexAction::__isset*				public

 See |yii/base/Component::__isset|


*yii/rest/IndexAction::__unset*				public

 See |yii/base/Component::__unset|


*yii/rest/IndexAction::__call*				public

 See |yii/base/Component::__call|


*yii/rest/IndexAction::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/rest/IndexAction::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/rest/IndexAction::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/rest/IndexAction::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/rest/IndexAction::__clone*				public

 See |yii/base/Component::__clone|


*yii/rest/IndexAction::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/rest/IndexAction::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/rest/IndexAction::on*				public

 See |yii/base/Component::on|


*yii/rest/IndexAction::off*				public

 See |yii/base/Component::off|


*yii/rest/IndexAction::trigger*				public

 See |yii/base/Component::trigger|


*yii/rest/IndexAction::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/rest/IndexAction::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/rest/IndexAction::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/rest/IndexAction::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/rest/IndexAction::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/rest/IndexAction::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/rest/IndexAction::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/rest/IndexAction::getUniqueId*			public

 See |yii/base/Action::getUniqueId|


*yii/rest/IndexAction::runWithParams*			public

 See |yii/base/Action::runWithParams|


*yii/rest/IndexAction::beforeRun*				protected

 See |yii/base/Action::beforeRun|


*yii/rest/IndexAction::afterRun*				protected

 See |yii/base/Action::afterRun|


*yii/rest/IndexAction::findModel*				public

 See |yii/rest/Action::findModel|


*yii/rest/IndexAction::run*				public
>
 run()
<
return (\yii\data\ActiveDataProvider) 



*yii/rest/IndexAction::prepareDataProvider*		protected
>
 prepareDataProvider()
<
return (\yii\data\ActiveDataProvider) 

 Prepares the data provider that should return the requested collection of the
 models.



 vim:tw=78:ts=8:ft=help:norl:
