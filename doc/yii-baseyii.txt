
*yii/BaseYii*  
=============

SUBCLASSES
------------------------------------------------------------------------------

|Yii|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseYii directly. Instead, use its child class '\Yii' which you
 can replace to customize methods of BaseYii.


PROPERTY DETAILS
------------------------------------------------------------------------------

$classMap				*yii/BaseYii::$classMap*
 (array) Class map used by the Yii autoloading mechanism. The array keys are
 the class names (without leading backslashes), and the array values are the
 corresponding class file paths (or path aliases). This property mainly
 affects how 'autoload()' works.

$app					*yii/BaseYii::$app*
 (\yii\console\Application|\yii\web\Application) The application instance

$aliases				*yii/BaseYii::$aliases*
 (array) Registered path aliases

$container				*yii/BaseYii::$container*
 (\yii\di\Container) The dependency injection (DI) container used by
 'createObject()'. You may use 'Container::set()' to set up the needed
 dependencies of classes and their initial property values.



METHOD DETAILS
------------------------------------------------------------------------------

yii/BaseYii::getVersion 				       public
>
 getVersion()
<
(string) The version of Yii framework




yii/BaseYii::getAlias					       public
>
 getAlias($alias, $throwException='true')
<
(string|boolean) The path corresponding to the alias, false if the root alias
is not previously registered.

 The translation is done according to the following procedure:

 1. If the given alias does not start with '@', it is returned back without
 change; 2. Otherwise, look for the longest registered alias that matches the
 beginning part    of the given alias. If it exists, replace the matching part
 of the given alias with    the corresponding registered path. 3. Throw an
 exception or return false, depending on the '$throwException' parameter.

 For example, by default '@yii' is registered as the alias to the Yii
 framework directory, say '/path/to/yii'. The alias '@yii/web' would then be
 translated into '/path/to/yii/web'.

 If you have registered two aliases '@foo' and '@foo/bar'. Then translating
 '@foo/bar/config' would replace the part '@foo/bar' (instead of '@foo') with
 the corresponding registered path. This is because the longest alias takes
 precedence.

 However, if the alias to be translated is '@foo/barbar/config', then '@foo'
 will be replaced instead of '@foo/bar', because '/' serves as the boundary
 character.

 Note, this method does not check if the returned path exists or not.
    [$alias] (string) The alias to be translated.
    [$throwException] (boolean) Whether to throw an exception if the given
    alias is invalid. If this is false and an invalid alias is given, false
    will be returned by this method.


yii/BaseYii::getRootAlias				       public
>
 getRootAlias($alias)
<
(string|boolean) The root alias, or false if no root alias is found

 A root alias is an alias that has been registered via 'setAlias()'
 previously. If a given alias matches multiple root aliases, the longest one
 will be returned.
    [$alias] (string) The alias


yii/BaseYii::setAlias					       public
>
 setAlias($alias, $path)
<
(void)

 A path alias is a short name representing a long path (a file path, a URL,
 etc.) For example, we use '@yii' as the alias of the path to the Yii
 framework directory.

 A path alias must start with the character '@' so that it can be easily
 differentiated from non-alias paths.

 Note that this method does not check if the given path exists or not. All it
 does is to associate the alias with the path.

 Any trailing '/' and '\' characters in the given path will be trimmed.
    [$alias] (string) The alias name (e.g. "@yii"). It must start with a '@'
    character. It may contain the forward slash '/' which serves as boundary
    character when performing alias translation by 'getAlias()'.
    [$path] (string) The path corresponding to the alias. Trailing '/' and '\'
    characters will be trimmed. This can be

    - a directory or a file path (e.g. '/tmp', '/tmp/main.txt') - a URL (e.g.
    'http://www.yiiframework.com') - a path alias (e.g. '@yii/base'). In this
    case, the path alias will be converted into the   actual path first by
    calling 'getAlias()'.


yii/BaseYii::autoload					       public
>
 autoload($className)
<
(void)

 This method is invoked automatically when PHP sees an unknown class. The
 method will attempt to include the class file according to the following
 procedure:

 1. Search in 'classMap'; 2. If the class is namespaced (e.g.
 'yii\base\Component'), it will attempt    to include the file associated with
 the corresponding path alias    (e.g. '@yii/base/Component.php');

 This autoloader allows loading classes that follow the [PSR-4
 standard](http://www.php-fig.org/psr/psr-4/) and have its top-level namespace
 or sub-namespaces defined as path aliases.

 Example: When aliases '@yii' and '@yii/bootstrap' are defined, classes in the
 'yii\bootstrap' namespace will be loaded using the '@yii/bootstrap' alias
 which points to the directory where bootstrap extension files are installed
 and all classes from other 'yii' namespaces will be loaded from the yii
 framework directory.
    [$className] (string) The fully qualified class name without a leading
    backslash "\"


yii/BaseYii::createObject				       public
>
 createObject($type, $params='[]')
<
(object) The created object

 You may view this method as an enhanced version of the 'new' operator. The
 method supports creating an object based on a class name, a configuration
 array or an anonymous function.

 Below are some usage examples:

   // create an object using a class name
   $object = Yii::createObject('yii\db\Connection');

   // create an object using a configuration array
   $object = Yii::createObject([
       'class' => 'yii\db\Connection',
       'dsn' => 'mysql:host=127.0.0.1;dbname=demo',
       'username' => 'root',
       'password' => '',
       'charset' => 'utf8',
   ]);

   // create an object with two constructor parameters
   $object = \Yii::createObject('MyClass', [$param1, $param2]);

 Using '\yii\di\Container|dependency injection container', this method can
 also identify dependent objects, instantiate them and inject them into the
 newly created object.
    [$type] (string|array|callable) The object type. This can be specified in
    one of the following forms:

    - a string: representing the class name of the object to be created - a
    configuration array: the array must contain a 'class' element which is
    treated as the object class,   and the rest of the name-value pairs will
    be used to initialize the corresponding object properties - a PHP
    callable: either an anonymous function or an array representing a class
    method ('[$class or $object, $method]').   The callable should return a
    new instance of the object being created.
    [$params] (array) The constructor parameters


yii/BaseYii::getLogger					       public
>
 getLogger()
<
(\yii\log\Logger) Message logger




yii/BaseYii::setLogger					       public
>
 setLogger($logger)
<
(void)


    [$logger] (\yii\log\Logger) The logger object.


yii/BaseYii::trace					       public
>
 trace($message, $category=''application'')
<
(void)

 Trace messages are logged mainly for development purpose to see the execution
 work flow of some code.
    [$message] (string) The message to be logged.
    [$category] (string) The category of the message.


yii/BaseYii::error					       public
>
 error($message, $category=''application'')
<
(void)

 An error message is typically logged when an unrecoverable error occurs
 during the execution of an application.
    [$message] (string) The message to be logged.
    [$category] (string) The category of the message.


yii/BaseYii::warning					       public
>
 warning($message, $category=''application'')
<
(void)

 A warning message is typically logged when an error occurs while the
 execution can still continue.
    [$message] (string) The message to be logged.
    [$category] (string) The category of the message.


yii/BaseYii::info					       public
>
 info($message, $category=''application'')
<
(void)

 An informative message is typically logged by an application to keep record
 of something important (e.g. an administrator logs in).
    [$message] (string) The message to be logged.
    [$category] (string) The category of the message.


yii/BaseYii::beginProfile				       public
>
 beginProfile($token, $category=''application'')
<
(void)

 This has to be matched with a call to 'endProfile' with the same category
 name. The begin- and end- calls must also be properly nested. For example,

   \Yii::beginProfile('block1');
   // some code to be profiled
       \Yii::beginProfile('block2');
       // some other code to be profiled
       \Yii::endProfile('block2');
   \Yii::endProfile('block1');


    [$token] (string) Token for the code block
    [$category] (string) The category of this log message


yii/BaseYii::endProfile 				       public
>
 endProfile($token, $category=''application'')
<
(void)

 This has to be matched with a previous call to 'beginProfile' with the same
 category name.
    [$token] (string) Token for the code block
    [$category] (string) The category of this log message


yii/BaseYii::powered					       public
>
 powered()
<
(string) An HTML hyperlink that can be displayed on your Web page showing
"Powered by Yii Framework" information




yii/BaseYii::t						       public
>
 t($category, $message, $params='[]', $language='null')
<
(string) The translated message.

 This is a shortcut method of '\yii\i18n\I18N::translate()'.

 The translation will be conducted according to the message category and the
 target language will be used.

 You can add parameters to a translation message that will be substituted with
 the corresponding value after translation. The format for this is to use
 curly brackets around the parameter name as you can see in the following
 example:

   $username = 'Alexander';
   echo \Yii::t('app', 'Hello, {username}!', ['username' => $username]);

 Further formatting of message parameters is supported using the [PHP intl
 extensions](http://www.php.net/manual/en/intro.intl.php) message formatter.
 See '\yii\i18n\I18N::translate()' for more details.
    [$category] (string) The message category.
    [$message] (string) The message to be translated.
    [$params] (array) The parameters that will be used to replace the
    corresponding placeholders in the message.
    [$language] (string) The language code (e.g. 'en-US', 'en'). If this is
    null, the current '\yii\base\Application::language|application language'
    will be used.


yii/BaseYii::configure					       public
>
 configure($object, $properties)
<
(object) The object itself


    [$object] (object) The object to be configured
    [$properties] (array) The property initial values given in terms of
    name-value pairs.


yii/BaseYii::getObjectVars				       public
>
 getObjectVars($object)
<
(array) The public member variables of the object

 This method is provided such that we can get the public member variables of
 an object. It is different from "get_object_vars()" because the latter will
 return private and protected variables if it is called within the object
 itself.
    [$object] (object) The object to be handled



 vim:tw=78:ts=8:ft=help:norl:
