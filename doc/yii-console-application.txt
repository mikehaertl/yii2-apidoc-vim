
*yii/console/Application*   >> |yii/base/Application|
=========================

DESCRIPTION
------------------------------------------------------------------------------

 Application extends from '\yii\base\Application' by providing functionalities
 that are specific to console requests. In particular, it deals with console
 requests through a command-based approach:

 - A console application consists of one or several possible user commands; -
 Each user command is implemented as a class extending
 '\yii\console\Controller'; - User specifies which command to run on the
 command line; - The command processes the user request with the specified
 parameters.

 The command classes should be under the namespace specified by
 'controllerNamespace'. Their naming should follow the same naming convention
 as controllers. For example, the 'help' command is implemented using the
 'HelpController' class.

 To run the console application, enter the following on the command line:

   yii <route> [--param1=value1 --param2 ...]

 where '<route>' refers to a controller route in the form of
 'ModuleID/ControllerID/ActionID' (e.g. 'sitemap/create'), and 'param1',
 'param2' refers to a set of named parameters that will be used to initialize
 the controller action (e.g. '--since=0' specifies a 'since' parameter whose
 value is 0 and a corresponding '$since' parameter is passed to the action
 method).

 A 'help' command is provided by default, which lists available commands and
 shows their usage. To use this command, simply type:

   yii help




PROPERTY DETAILS
------------------------------------------------------------------------------

$params					*yii/console/Application::$params*
 See |yii/base/Module::$params|

$id					*yii/console/Application::$id*
 See |yii/base/Module::$id|

$module					*yii/console/Application::$module*
 See |yii/base/Module::$module|

$layout					*yii/console/Application::$layout*
 See |yii/base/Application::$layout|

$controllerMap				*yii/console/Application::$controllerMap*
 See |yii/base/Module::$controllerMap|

$controllerNamespace			*yii/console/Application::$controllerNamespace*
 See |yii/base/Application::$controllerNamespace|

$defaultRoute				*yii/console/Application::$defaultRoute*
 (string) The default route of this application. Defaults to 'help', meaning
 the 'help' command.

$name					*yii/console/Application::$name*
 See |yii/base/Application::$name|

$version				*yii/console/Application::$version*
 See |yii/base/Application::$version|

$charset				*yii/console/Application::$charset*
 See |yii/base/Application::$charset|

$language				*yii/console/Application::$language*
 See |yii/base/Application::$language|

$sourceLanguage				*yii/console/Application::$sourceLanguage*
 See |yii/base/Application::$sourceLanguage|

$controller				*yii/console/Application::$controller*
 (\yii\console\Controller) The currently active controller instance

$requestedRoute				*yii/console/Application::$requestedRoute*
 See |yii/base/Application::$requestedRoute|

$requestedAction			*yii/console/Application::$requestedAction*
 See |yii/base/Application::$requestedAction|

$requestedParams			*yii/console/Application::$requestedParams*
 See |yii/base/Application::$requestedParams|

$extensions				*yii/console/Application::$extensions*
 See |yii/base/Application::$extensions|

$bootstrap				*yii/console/Application::$bootstrap*
 See |yii/base/Application::$bootstrap|

$state					*yii/console/Application::$state*
 See |yii/base/Application::$state|

$enableCoreCommands			*yii/console/Application::$enableCoreCommands*
 (boolean) Whether to enable the commands provided by the core framework.
 Defaults to true.

$behaviors				*yii/console/Application::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$components				*yii/console/Application::$components*
 (array) The list of the component definitions or the loaded component
 instances (ID => definition or instance).

$uniqueId				*yii/console/Application::$uniqueId*
 (string) The unique ID of the module.

$basePath				*yii/console/Application::$basePath*
 (string) The root directory of the module.

$controllerPath				*yii/console/Application::$controllerPath*
 (string) The directory that contains the controller classes.

$viewPath				*yii/console/Application::$viewPath*
 (string) The root directory of view files. Defaults to "'basePath'/view".

$layoutPath				*yii/console/Application::$layoutPath*
 (string) The root directory of layout files. Defaults to
 "'viewPath'/layouts".

$aliases				*yii/console/Application::$aliases*
 (array) List of path aliases to be defined. The array keys are alias names
 (must start with '@') and the array values are the corresponding paths or
 aliases. For example,

   [
   '@models' => '@app/models', // an existing alias
   '@backend' => __DIR__ . '/../backend',  // a directory
   ]



$modules				*yii/console/Application::$modules*
 (array) The modules (indexed by their IDs)

$runtimePath				*yii/console/Application::$runtimePath*
 (string) The directory that stores runtime files. Defaults to the "runtime"
 subdirectory under 'basePath'.

$vendorPath				*yii/console/Application::$vendorPath*
 (string) The directory that stores vendor files. Defaults to "vendor"
 directory under 'basePath'.

$timeZone				*yii/console/Application::$timeZone*
 (string) The time zone used by this application.

$db					*yii/console/Application::$db*
 (\yii\db\Connection) The database connection

$log					*yii/console/Application::$log*
 (\yii\log\Dispatcher) The log dispatcher component

$errorHandler				*yii/console/Application::$errorHandler*
 (\yii\web\ErrorHandler|\yii\console\ErrorHandler) The error handler
 application component.

$cache					*yii/console/Application::$cache*
 (\yii\caching\Cache) The cache application component. Null if the component
 is not enabled.

$formatter				*yii/console/Application::$formatter*
 (\yii\base\Formatter) The formatter application component.

$request				*yii/console/Application::$request*
 (\yii\web\Request|\yii\console\Request) The request component

$response				*yii/console/Application::$response*
 (\yii\web\Response|\yii\console\Response) The response component

$view					*yii/console/Application::$view*
 (\yii\base\View|\yii\web\View) The view object that is used to render various
 view files.

$urlManager				*yii/console/Application::$urlManager*
 (\yii\web\UrlManager) The URL manager for this application.

$i18n					*yii/console/Application::$i18n*
 (\yii\i18n\I18N) The internationalization component

$mail					*yii/console/Application::$mail*
 (\yii\mail\MailerInterface) The mailer interface

$authManager				*yii/console/Application::$authManager*
 (\yii\rbac\ManagerInterface) The auth manager for this application. Null is
 returned if auth manager is not configured.

$assetManager				*yii/console/Application::$assetManager*
 (\yii\web\AssetManager) The asset manager component



METHOD DETAILS
------------------------------------------------------------------------------

*yii/console/Application::className*			public
 See |yii/base/Object::className|


*yii/console/Application::__construct*			public
>
 __construct($config='[]')
<
(void)


    [$config] () 


*yii/console/Application::init*				public
>
 init()
<
(void)




*yii/console/Application::__get*				public
 See |yii/di/ServiceLocator::__get|


*yii/console/Application::__set*				public
 See |yii/base/Component::__set|


*yii/console/Application::__isset*			public
 See |yii/di/ServiceLocator::__isset|


*yii/console/Application::__unset*			public
 See |yii/base/Component::__unset|


*yii/console/Application::__call*				public
 See |yii/base/Component::__call|


*yii/console/Application::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/console/Application::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/console/Application::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/console/Application::hasMethod*			public
 See |yii/base/Component::hasMethod|


*yii/console/Application::__clone*			public
 See |yii/base/Component::__clone|


*yii/console/Application::behaviors*			public
 See |yii/base/Component::behaviors|


*yii/console/Application::hasEventHandlers*		public
 See |yii/base/Component::hasEventHandlers|


*yii/console/Application::on*				public
 See |yii/base/Component::on|


*yii/console/Application::off*				public
 See |yii/base/Component::off|


*yii/console/Application::trigger*			public
 See |yii/base/Component::trigger|


*yii/console/Application::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/console/Application::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/console/Application::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/console/Application::attachBehaviors*		public
 See |yii/base/Component::attachBehaviors|


*yii/console/Application::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/console/Application::detachBehaviors*		public
 See |yii/base/Component::detachBehaviors|


*yii/console/Application::ensureBehaviors*		public
 See |yii/base/Component::ensureBehaviors|


*yii/console/Application::has*				public
 See |yii/di/ServiceLocator::has|


*yii/console/Application::get*				public
 See |yii/di/ServiceLocator::get|


*yii/console/Application::set*				public
 See |yii/di/ServiceLocator::set|


*yii/console/Application::clear*				public
 See |yii/di/ServiceLocator::clear|


*yii/console/Application::getComponents*			public
 See |yii/di/ServiceLocator::getComponents|


*yii/console/Application::setComponents*			public
 See |yii/di/ServiceLocator::setComponents|


*yii/console/Application::getUniqueId*			public
 See |yii/base/Application::getUniqueId|


*yii/console/Application::getBasePath*			public
 See |yii/base/Module::getBasePath|


*yii/console/Application::setBasePath*			public
 See |yii/base/Application::setBasePath|


*yii/console/Application::getControllerPath*		public
 See |yii/base/Module::getControllerPath|


*yii/console/Application::getViewPath*			public
 See |yii/base/Module::getViewPath|


*yii/console/Application::setViewPath*			public
 See |yii/base/Module::setViewPath|


*yii/console/Application::getLayoutPath*			public
 See |yii/base/Module::getLayoutPath|


*yii/console/Application::setLayoutPath*			public
 See |yii/base/Module::setLayoutPath|


*yii/console/Application::setAliases*			public
 See |yii/base/Module::setAliases|


*yii/console/Application::hasModule*			public
 See |yii/base/Module::hasModule|


*yii/console/Application::getModule*			public
 See |yii/base/Module::getModule|


*yii/console/Application::setModule*			public
 See |yii/base/Module::setModule|


*yii/console/Application::getModules*			public
 See |yii/base/Module::getModules|


*yii/console/Application::setModules*			public
 See |yii/base/Module::setModules|


*yii/console/Application::runAction*			public
>
 runAction($route, $params='[]')
<
(integer) The status code returned by the action execution. 0 means normal,
and other values mean abnormal.

 This method parses the specified route and creates the corresponding child
 module(s), controller and action instances. It then calls
 'Controller::runAction()' to run the action with the given parameters. If the
 route is empty, the method will use 'defaultRoute'.
    [$route] (string) The route that specifies the action.
    [$params] (array) The parameters to be passed to the action


*yii/console/Application::createController*		public
 See |yii/base/Module::createController|


*yii/console/Application::createControllerByID*		public
 See |yii/base/Module::createControllerByID|


*yii/console/Application::beforeAction*			public
 See |yii/base/Module::beforeAction|


*yii/console/Application::afterAction*			public
 See |yii/base/Module::afterAction|


*yii/console/Application::preInit*			public
 See |yii/base/Application::preInit|


*yii/console/Application::bootstrap*			protected
 See |yii/base/Application::bootstrap|


*yii/console/Application::registerErrorHandler*		protected
>
 registerErrorHandler($config)
<
(void)


    [$config] () 


*yii/console/Application::run*				public
 See |yii/base/Application::run|


*yii/console/Application::handleRequest*			public
>
 handleRequest($request)
<
(\yii\console\Response) The resulting response


    [$request] (\yii\console\Request) The request to be handled


*yii/console/Application::getRuntimePath*			public
 See |yii/base/Application::getRuntimePath|


*yii/console/Application::setRuntimePath*			public
 See |yii/base/Application::setRuntimePath|


*yii/console/Application::getVendorPath*			public
 See |yii/base/Application::getVendorPath|


*yii/console/Application::setVendorPath*			public
 See |yii/base/Application::setVendorPath|


*yii/console/Application::getTimeZone*			public
 See |yii/base/Application::getTimeZone|


*yii/console/Application::setTimeZone*			public
 See |yii/base/Application::setTimeZone|


*yii/console/Application::getDb*				public
 See |yii/base/Application::getDb|


*yii/console/Application::getLog*				public
 See |yii/base/Application::getLog|


*yii/console/Application::getErrorHandler*		public
 See |yii/base/Application::getErrorHandler|


*yii/console/Application::getCache*			public
 See |yii/base/Application::getCache|


*yii/console/Application::getFormatter*			public
 See |yii/base/Application::getFormatter|


*yii/console/Application::getRequest*			public
 See |yii/base/Application::getRequest|


*yii/console/Application::getResponse*			public
 See |yii/base/Application::getResponse|


*yii/console/Application::getView*			public
 See |yii/base/Application::getView|


*yii/console/Application::getUrlManager*			public
 See |yii/base/Application::getUrlManager|


*yii/console/Application::getI18n*			public
 See |yii/base/Application::getI18n|


*yii/console/Application::getMail*			public
 See |yii/base/Application::getMail|


*yii/console/Application::getAuthManager*			public
 See |yii/base/Application::getAuthManager|


*yii/console/Application::getAssetManager*		public
 See |yii/base/Application::getAssetManager|


*yii/console/Application::coreComponents*			public
>
 coreComponents()
<
(void)




*yii/console/Application::end*				public
 See |yii/base/Application::end|


*yii/console/Application::loadConfig*			protected
>
 loadConfig($config)
<
(array) The actual configuration to be used by the application.

 This method will check if the command line option 'OPTION_APPCONFIG' is
 specified. If so, the corresponding file will be loaded as the application
 configuration. Otherwise, the configuration provided as the parameter will be
 returned back.
    [$config] (array) The configuration provided in the constructor.


*yii/console/Application::coreCommands*			public
>
 coreCommands()
<
(array) The configuration of the built-in commands.





 vim:tw=78:ts=8:ft=help:norl:
