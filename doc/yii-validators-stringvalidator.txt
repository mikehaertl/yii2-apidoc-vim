
*yii/validators/StringValidator*   >> |yii/validators/Validator|
================================

DESCRIPTION
------------------------------------------------------------------------------

 Note, this validator should only be used with string-typed attributes.


PROPERTY DETAILS
------------------------------------------------------------------------------

$builtInValidators			*yii/validators/StringValidator::$builtInValidators*
 See |yii/validators/Validator::$builtInValidators|

$attributes				*yii/validators/StringValidator::$attributes*
 See |yii/validators/Validator::$attributes|

$message				*yii/validators/StringValidator::$message*
 (string) User-defined error message used when the value is not a string

$on					*yii/validators/StringValidator::$on*
 See |yii/validators/Validator::$on|

$except					*yii/validators/StringValidator::$except*
 See |yii/validators/Validator::$except|

$skipOnError				*yii/validators/StringValidator::$skipOnError*
 See |yii/validators/Validator::$skipOnError|

$skipOnEmpty				*yii/validators/StringValidator::$skipOnEmpty*
 See |yii/validators/Validator::$skipOnEmpty|

$enableClientValidation			*yii/validators/StringValidator::$enableClientValidation*
 See |yii/validators/Validator::$enableClientValidation|

$isEmpty				*yii/validators/StringValidator::$isEmpty*
 See |yii/validators/Validator::$isEmpty|

$when					*yii/validators/StringValidator::$when*
 See |yii/validators/Validator::$when|

$whenClient				*yii/validators/StringValidator::$whenClient*
 See |yii/validators/Validator::$whenClient|

$length					*yii/validators/StringValidator::$length*
 (integer|array) Specifies the length limit of the value to be validated. This
 can be specified in one of the following forms:


   - an integer: the exact length that the value should be of; 
   - an array of one element: the minimum length that the value should
   be of. For example, '[8]'.   This will overwrite 'min'. 
   - an array of two elements: the minimum and maximum lengths that the
   value should be of.   For example, '[8, 128]'. This will overwrite both
 'min' and 'max'.

$max					*yii/validators/StringValidator::$max*
 (integer) Maximum length. If not set, it means no maximum length limit.

$min					*yii/validators/StringValidator::$min*
 (integer) Minimum length. If not set, it means no minimum length limit.

$tooShort				*yii/validators/StringValidator::$tooShort*
 (string) User-defined error message used when the length of the value is
 smaller than 'min'.

$tooLong				*yii/validators/StringValidator::$tooLong*
 (string) User-defined error message used when the length of the value is
 greater than 'max'.

$notEqual				*yii/validators/StringValidator::$notEqual*
 (string) User-defined error message used when the length of the value is not
 equal to 'length'.

$encoding				*yii/validators/StringValidator::$encoding*
 (string) The encoding of the string value to be validated (e.g. 'UTF-8'). If
 this property is not set, '\yii\base\Application::charset' will be used.

$behaviors				*yii/validators/StringValidator::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component



METHOD DETAILS
------------------------------------------------------------------------------

*yii/validators/StringValidator::className*		public
 See |yii/base/Object::className|


*yii/validators/StringValidator::__construct*		public
 See |yii/base/Object::__construct|


*yii/validators/StringValidator::init*			public
>
 init()
<
(void)

 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.


*yii/validators/StringValidator::__get*			public
 See |yii/base/Component::__get|


*yii/validators/StringValidator::__set*			public
 See |yii/base/Component::__set|


*yii/validators/StringValidator::__isset*			public
 See |yii/base/Component::__isset|


*yii/validators/StringValidator::__unset*			public
 See |yii/base/Component::__unset|


*yii/validators/StringValidator::__call*			public
 See |yii/base/Component::__call|


*yii/validators/StringValidator::hasProperty*		public
 See |yii/base/Component::hasProperty|


*yii/validators/StringValidator::canGetProperty*		public
 See |yii/base/Component::canGetProperty|


*yii/validators/StringValidator::canSetProperty*		public
 See |yii/base/Component::canSetProperty|


*yii/validators/StringValidator::hasMethod*		public
 See |yii/base/Component::hasMethod|


*yii/validators/StringValidator::__clone*			public
 See |yii/base/Component::__clone|


*yii/validators/StringValidator::behaviors*		public
 See |yii/base/Component::behaviors|


*yii/validators/StringValidator::hasEventHandlers*	public
 See |yii/base/Component::hasEventHandlers|


*yii/validators/StringValidator::on*			public
 See |yii/base/Component::on|


*yii/validators/StringValidator::off*			public
 See |yii/base/Component::off|


*yii/validators/StringValidator::trigger*			public
 See |yii/base/Component::trigger|


*yii/validators/StringValidator::getBehavior*		public
 See |yii/base/Component::getBehavior|


*yii/validators/StringValidator::getBehaviors*		public
 See |yii/base/Component::getBehaviors|


*yii/validators/StringValidator::attachBehavior*		public
 See |yii/base/Component::attachBehavior|


*yii/validators/StringValidator::attachBehaviors*		public
 See |yii/base/Component::attachBehaviors|


*yii/validators/StringValidator::detachBehavior*		public
 See |yii/base/Component::detachBehavior|


*yii/validators/StringValidator::detachBehaviors*		public
 See |yii/base/Component::detachBehaviors|


*yii/validators/StringValidator::ensureBehaviors*		public
 See |yii/base/Component::ensureBehaviors|


*yii/validators/StringValidator::createValidator*		public
 See |yii/validators/Validator::createValidator|


*yii/validators/StringValidator::validateAttributes*	public
 See |yii/validators/Validator::validateAttributes|


*yii/validators/StringValidator::validateAttribute*	public
>
 validateAttribute($object, $attribute)
<
(void)

 Child classes must implement this method to provide the actual validation
 logic.
    [$object] (\yii\base\Model) The data object to be validated
    [$attribute] (string) The name of the attribute to be validated.


*yii/validators/StringValidator::validate*		public
 See |yii/validators/Validator::validate|


*yii/validators/StringValidator::validateValue*		protected
>
 validateValue($value)
<
(array|null) The error message and the parameters to be inserted into the
error message. Null should be returned if the data is valid.

 A validator class can implement this method to support data validation out of
 the context of a data model.
    [$value] (mixed) The data value to be validated.


*yii/validators/StringValidator::clientValidateAttribute*	public
>
 clientValidateAttribute($object, $attribute, $view)
<
(string) The client-side validation script. Null if the validator does not
support client-side validation.

 You may override this method to return the JavaScript validation code if the
 validator can support client-side validation.

 The following JavaScript variables are predefined and can be used in the
 validation code:


   - 'attribute': the name of the attribute being validated. 
   - 'value': the value being validated. 
   - 'messages': an array used to hold the validation error messages
   for the attribute.
    [$object] (\yii\base\Model) The data object being validated
    [$attribute] (string) The name of the attribute to be validated.
    [$view] (\yii\web\View) The view object that is going to be used to render
    views or view files containing a model form with this validator applied.


*yii/validators/StringValidator::isActive*		public
 See |yii/validators/Validator::isActive|


*yii/validators/StringValidator::addError*		public
 See |yii/validators/Validator::addError|


*yii/validators/StringValidator::isEmpty*			public
 See |yii/validators/Validator::isEmpty|



 vim:tw=78:ts=8:ft=help:norl:
