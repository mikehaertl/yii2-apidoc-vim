
*yii/base/ArrayableTrait*  
=========================

DESCRIPTION
------------------------------------------------------------------------------

 ArrayableTrait implements 'toArray()' by respecting the field definitions as
 declared in 'fields()' and 'extraFields()'.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/base/ArrayableTrait::fields*				public
>
 fields()
<
return (array) The list of field names or field definitions.

 Returns the list of fields that should be returned by default by 'toArray()'
 when no specific fields are specified.

 A field is a named element in the returned array by 'toArray()'.

 This method should return an array of field names or field definitions. If
 the former, the field name will be treated as an object property name whose
 value will be used as the field value. If the latter, the array key should be
 the field name while the array value should be the corresponding field
 definition which can be either an object property name or a PHP callable
 returning the corresponding field value. The signature of the callable should
 be:

   function ($model, $field) {
       // return field value
   }

 For example, the following code declares four fields:


   - 'email': the field name is the same as the property name 'email'; 
   - 'firstName' and 'lastName': the field names are 'firstName' and
   'lastName', and their   values are obtained from the 'first_name' and
 'last_name' properties; 
   - 'fullName': the field name is 'fullName'. Its value is obtained by
   concatenating 'first_name'   and 'last_name'.

   return [
       'email',
       'firstName' => 'first_name',
       'lastName' => 'last_name',
       'fullName' => function () {
           return $this->first_name . ' ' . $this->last_name;
       },
   ];

 In this method, you may also want to return different lists of fields based
 on some context information. For example, depending on the privilege of the
 current application user, you may return different sets of visible fields or
 filter out some fields.

 The default implementation of this method returns the public object member
 variables indexed by themselves.


*yii/base/ArrayableTrait::extraFields*			public
>
 extraFields()
<
return (array) The list of expandable field names or field definitions. Please refer
to 'fields()' on the format of the return value.

 Returns the list of fields that can be expanded further and returned by
 'toArray()'.

 This method is similar to 'fields()' except that the list of fields returned
 by this method are not returned by default by 'toArray()'. Only when field
 names to be expanded are explicitly specified when calling 'toArray()', will
 their values be exported.

 The default implementation returns an empty array.

 You may override this method to return a list of expandable fields based on
 some context information (e.g. the current application user).


*yii/base/ArrayableTrait::toArray*			public
>
 toArray($fields='[]', $expand='[]', $recursive='true')
<
return (array) The array representation of the object

 Converts the model into an array.

 This method will first identify which fields to be included in the resulting
 array by calling 'resolveFields()'. It will then turn the model into an array
 with these fields. If '$recursive' is true, any embedded objects will also be
 converted into arrays. When embeded objects are 'Arrayable', their respective
 nested fields will be extracted and passed to 'toArray()'.

 If the model implements the 'Linkable' interface, the resulting array will
 also have a '_link' element which refers to a list of links as specified by
 the interface.

    [$fields] (array) The fields being requested. If empty or if it contains
    '*', all fields as specified by 'fields()' will be returned. Fields can be
    nested, separated with dots (.). e.g.: item.field.sub-field '$recursive'
    must be true for nested fields to be extracted. If '$recursive' is false,
    only the root fields will be extracted.
    [$expand] (array) The additional fields being requested for exporting.
    Only fields declared in 'extraFields()' will be considered. Expand can
    also be nested, separated with dots (.). e.g.: item.expand1.expand2
    '$recursive' must be true for nested expands to be extracted. If
    '$recursive' is false, only the root expands will be extracted.
    [$recursive] (bool) Whether to recursively return array representation of
    embedded objects.


*yii/base/ArrayableTrait::extractRootFields*		protected
>
 extractRootFields($fields)
<
return (array) Root fields extracted from the given nested fields

 Extracts the root field names from nested fields.

 Nested fields are separated with dots (.). e.g: "item.id" The previous
 example would extract "item".

    [$fields] (array) The fields requested for extraction


*yii/base/ArrayableTrait::extractFieldsFor*		protected
>
 extractFieldsFor($fields, $rootField)
<
return (array) Nested fields extracted for the given field

 Extract nested fields from a fields collection for a given root field Nested
 fields are separated with dots (.). e.g: "item.id" The previous example would
 extract "id".

    [$fields] (array) The fields requested for extraction
    [$rootField] (string) The root field for which we want to extract the
    nested fields


*yii/base/ArrayableTrait::resolveFields*			protected
>
 resolveFields($fields, $expand)
<
return (array) The list of fields to be exported. The array keys are the field names,
and the array values are the corresponding object property names or PHP
callables returning the field values.

 Determines which fields can be returned by 'toArray()'.

 This method will first extract the root fields from the given fields. Then it
 will check the requested root fields against those declared in 'fields()' and
 'extraFields()' to determine which fields can be returned.

    [$fields] (array) The fields being requested for exporting
    [$expand] (array) The additional fields being requested for exporting



 vim:tw=78:ts=8:ft=help:norl:
