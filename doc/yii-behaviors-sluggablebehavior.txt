
*yii/behaviors/SluggableBehavior*   >> |yii/behaviors/AttributeBehavior|
=================================

DESCRIPTION
------------------------------------------------------------------------------

 To use SluggableBehavior, insert the following code to your ActiveRecord
 class:

   use yii\behaviors\SluggableBehavior;

   public function behaviors()
   {
       return [
           [
               'class' => SluggableBehavior::className(),
               'attribute' => 'title',
               // 'slugAttribute' => 'slug',
           ],
       ];
   }

 By default, SluggableBehavior will fill the 'slug' attribute with a value
 that can be used a slug in a URL when the associated AR object is being
 validated.

 Because attribute values will be set automatically by this behavior, they are
 usually not user input and should therefore not be validated, i.e. the 'slug'
 attribute should not appear in the '\yii\base\Model::rules()|rules()' method
 of the model.

 If your attribute name is different, you may configure the 'slugAttribute'
 property like the following:

   public function behaviors()
   {
       return [
           [
               'class' => SluggableBehavior::className(),
               'slugAttribute' => 'alias',
           ],
       ];
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

$owner					*yii/behaviors/SluggableBehavior::$owner*

 See |yii/base/Behavior::$owner|

$attributes				*yii/behaviors/SluggableBehavior::$attributes*

 See |yii/behaviors/AttributeBehavior::$attributes|

$value					*yii/behaviors/SluggableBehavior::$value*

 (callable|string|null) The value that will be used as a slug. This can be an
 anonymous function or an arbitrary value or null. If the former, the return
 value of the function will be used as a slug. If 'null' then the '$attribute'
 property will be used to generate a slug. The signature of the function
 should be as follows,

   function ($event)
   {
       // return slug
   }



$skipUpdateOnClean			*yii/behaviors/SluggableBehavior::$skipUpdateOnClean*

 See |yii/behaviors/AttributeBehavior::$skipUpdateOnClean|

$preserveNonEmptyValues			*yii/behaviors/SluggableBehavior::$preserveNonEmptyValues*

 See |yii/behaviors/AttributeBehavior::$preserveNonEmptyValues|

$slugAttribute				*yii/behaviors/SluggableBehavior::$slugAttribute*

 (string) The attribute that will receive the slug value

$attribute				*yii/behaviors/SluggableBehavior::$attribute*

 (string|array|null) The attribute or list of attributes whose value will be
 converted into a slug or 'null' meaning that the '$value' property will be
 used to generate a slug.

$immutable				*yii/behaviors/SluggableBehavior::$immutable*

 (bool) Whether to generate a new slug if it has already been generated
 before. If true, the behavior will not generate a new slug even if
 'attribute' is changed.

$ensureUnique				*yii/behaviors/SluggableBehavior::$ensureUnique*

 (bool) Whether to ensure generated slug value to be unique among owner class
 records. If enabled behavior will validate slug uniqueness automatically. If
 validation fails it will attempt generating unique slug value from based one
 until success.

$skipOnEmpty				*yii/behaviors/SluggableBehavior::$skipOnEmpty*

 (bool) Whether to skip slug generation if 'attribute' is null or an empty
 string. If true, the behaviour will not generate a new slug if 'attribute' is
 null or an empty string.

$uniqueValidator			*yii/behaviors/SluggableBehavior::$uniqueValidator*

 (array) Configuration for slug uniqueness validator. Parameter 'class' may be
 omitted 
   - by default 'UniqueValidator' will be used.

$uniqueSlugGenerator			*yii/behaviors/SluggableBehavior::$uniqueSlugGenerator*

 (callable) Slug unique value generator. It is used in case 'ensureUnique'
 enabled and generated slug is not unique. This should be a PHP callable with
 following signature:

   function ($baseSlug, $iteration, $model)
   {
       // return uniqueSlug
   }

 If not set unique slug will be generated adding incrementing suffix to the
 base slug.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/behaviors/SluggableBehavior::className*		public

 See |yii/base/BaseObject::className|


*yii/behaviors/SluggableBehavior::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/behaviors/SluggableBehavior::init*			public
>
 init()
<
return (void)

 {@inheritdoc}


*yii/behaviors/SluggableBehavior::__get*			public

 See |yii/base/BaseObject::__get|


*yii/behaviors/SluggableBehavior::__set*			public

 See |yii/base/BaseObject::__set|


*yii/behaviors/SluggableBehavior::__isset*		public

 See |yii/base/BaseObject::__isset|


*yii/behaviors/SluggableBehavior::__unset*		public

 See |yii/base/BaseObject::__unset|


*yii/behaviors/SluggableBehavior::__call*			public

 See |yii/base/BaseObject::__call|


*yii/behaviors/SluggableBehavior::hasProperty*		public

 See |yii/base/BaseObject::hasProperty|


*yii/behaviors/SluggableBehavior::canGetProperty*		public

 See |yii/base/BaseObject::canGetProperty|


*yii/behaviors/SluggableBehavior::canSetProperty*		public

 See |yii/base/BaseObject::canSetProperty|


*yii/behaviors/SluggableBehavior::hasMethod*		public

 See |yii/base/BaseObject::hasMethod|


*yii/behaviors/SluggableBehavior::events*			public

 See |yii/behaviors/AttributeBehavior::events|


*yii/behaviors/SluggableBehavior::attach*			public

 See |yii/base/Behavior::attach|


*yii/behaviors/SluggableBehavior::detach*			public

 See |yii/base/Behavior::detach|


*yii/behaviors/SluggableBehavior::evaluateAttributes*	public

 See |yii/behaviors/AttributeBehavior::evaluateAttributes|


*yii/behaviors/SluggableBehavior::getValue*		protected
>
 getValue($event)
<
return (void)

 {@inheritdoc}

    [$event] () 


*yii/behaviors/SluggableBehavior::isNewSlugNeeded*	protected
>
 isNewSlugNeeded()
<
return (bool) 

 Checks whether the new slug generation is needed This method is called by
 'getValue' to check whether the new slug generation is needed.

 You may override it to customize checking.


*yii/behaviors/SluggableBehavior::generateSlug*		protected
>
 generateSlug($slugParts)
<
return (string) The conversion result.

 This method is called by 'getValue' to generate the slug.

 You may override it to customize slug generation. The default implementation
 calls '\yii\helpers\Inflector::slug()' on the input strings concatenated by
 dashes ('-').

    [$slugParts] (array) An array of strings that should be concatenated and
    converted to generate the slug value.


*yii/behaviors/SluggableBehavior::makeUnique*		protected
>
 makeUnique($slug)
<
return (string) Unique slug

 This method is called by 'getValue' when 'ensureUnique' is true to generate
 the unique slug.

 Calls 'generateUniqueSlug' until generated slug is unique and returns it.

    [$slug] (string) Basic slug value


*yii/behaviors/SluggableBehavior::validateSlug*		protected
>
 validateSlug($slug)
<
return (bool) Whether slug is unique.

 Checks if given slug value is unique.

    [$slug] (string) Slug value


*yii/behaviors/SluggableBehavior::generateUniqueSlug*	protected
>
 generateUniqueSlug($baseSlug, $iteration)
<
return (string) New slug value

 Generates slug using configured callback or increment of iteration.

    [$baseSlug] (string) Base slug value
    [$iteration] (int) Iteration number


*yii/behaviors/SluggableBehavior::isEmpty*		protected
>
 isEmpty($slugPart)
<
return (bool) Whether $slugPart empty or not.

 Checks if $slugPart is empty string or null.

    [$slugPart] (string) One of attributes that is used for slug generation.



 vim:tw=78:ts=8:ft=help:norl:
