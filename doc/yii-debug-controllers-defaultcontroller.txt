
*yii/debug/controllers/DefaultController*   >> |yii/web/Controller|
=========================================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Controller::$id|
 |yii/base/Controller::$defaultAction|
 |yii/base/Controller::$action|
 |yii/web/Controller::$enableCsrfValidation|
 |yii/web/Controller::$actionParams|
 |yii/base/Component::$behaviors|
 |yii/base/Controller::$modules|
 |yii/base/Controller::$uniqueId|
 |yii/base/Controller::$route|
 |yii/base/Controller::$view|
 |yii/base/Controller::$viewPath|


$module					*yii/debug/controllers/DefaultController::$module*

 (\yii\debug\Module) Owner module.

$layout					*yii/debug/controllers/DefaultController::$layout*

 (null|string|false) 

 The name of the layout to be applied to this controller's views. This
 property mainly affects the behavior of 'render()'. Defaults to null, meaning
 the actual layout value should inherit that from 'module''s layout value. If
 false, no layout will be applied.



$summary				*yii/debug/controllers/DefaultController::$summary*

 (array) The summary data (e.g. URL, time)



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Controller::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Controller::runAction|
 |yii/base/Controller::run|
 |yii/web/Controller::bindActionParams|
 |yii/base/Controller::createAction|
 |yii/base/Controller::afterAction|
 |yii/base/Controller::getModules|
 |yii/base/Controller::getUniqueId|
 |yii/base/Controller::getRoute|
 |yii/base/Controller::render|
 |yii/base/Controller::renderContent|
 |yii/base/Controller::renderPartial|
 |yii/base/Controller::renderFile|
 |yii/base/Controller::getView|
 |yii/base/Controller::setView|
 |yii/base/Controller::getViewPath|
 |yii/base/Controller::setViewPath|
 |yii/base/Controller::findLayoutFile|
 |yii/web/Controller::renderAjax|
 |yii/web/Controller::asJson|
 |yii/web/Controller::asXml|
 |yii/web/Controller::redirect|
 |yii/web/Controller::goHome|
 |yii/web/Controller::goBack|
 |yii/web/Controller::refresh|


*yii/debug/controllers/DefaultController::actions*	public
>
 actions()
<
return (void)

 Declares external actions for the controller.



 This method is meant to be overwritten to declare external actions for the
 controller. It should return an array, with array keys being action IDs, and
 array values the corresponding action class names or action configuration
 arrays. For example,

   return [
       'action1' => 'app\components\Action1',
       'action2' => [
           'class' => 'app\components\Action2',
           'property1' => 'value1',
           'property2' => 'value2',
       ],
   ];

 '\Yii::createObject()' will be used later to create the requested action
 using the configuration provided here.




*yii/debug/controllers/DefaultController::beforeAction*	public
>
 beforeAction($action)
<
return (bool) Whether the action should continue to run.

 This method is invoked right before an action is executed.



 The method will trigger the 'EVENT_BEFORE_ACTION' event. The return value of
 the method will determine whether the action should continue to run.

 In case the action should not run, the request should be handled inside of
 the 'beforeAction' code by either providing the necessary output or
 redirecting the request. Otherwise the response will be empty.

 If you override this method, your code should look like the following:

   public function beforeAction($action)
   {
       // your custom code here, if you want the code to run before action
 filters,
       // which are triggered on the [[EVENT_BEFORE_ACTION]] event, e.g.
 PageCache or AccessControl

       if (!parent::beforeAction($action)) {
           return false;
       }

       // other custom code here

       return true; // or false to not run the action
   }



    [$action] (\yii\base\Action) The action to be executed.


*yii/debug/controllers/DefaultController::actionIndex*	public
>
 actionIndex()
<
return (string) 

 Index action


*yii/debug/controllers/DefaultController::actionView*	public
>
 actionView($tag='null', $panel='null')
<
return (mixed) Response.

    [$tag] (string|null) Debug data tag.
    [$panel] (string|null) Debug panel ID.


*yii/debug/controllers/DefaultController::actionToolbar*	public
>
 actionToolbar($tag)
<
return (string) 

 Toolbar action

    [$tag] (string) 


*yii/debug/controllers/DefaultController::actionDownloadMail*public
>
 actionDownloadMail($file)
<
return (\yii\console\Response|\yii\web\Response) 

 Download mail action

    [$file] (string) 


*yii/debug/controllers/DefaultController::getManifest*	protected
>
 getManifest($forceReload='false')
<
return (array) 

    [$forceReload] (bool) 


*yii/debug/controllers/DefaultController::loadData*	public
>
 loadData($tag, $maxRetry=0)
<
return (void)

    [$tag] (string) Debug data tag.
    [$maxRetry] (int) Maximum numbers of tag retrieval attempts.



 vim:tw=78:ts=8:ft=help:norl:
