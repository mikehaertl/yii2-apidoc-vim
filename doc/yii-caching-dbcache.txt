
*yii/caching/DbCache*   >> |yii/caching/Cache|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 By default, DbCache stores session data in a DB table named 'cache'. This
 table must be pre-created. The table name can be changed by setting
 'cacheTable'.

 Please refer to 'Cache' for common cache operations that are supported by
 DbCache.

 The following example shows how you can configure the application to use
 DbCache:

   'cache' => [
       'class' => 'yii\caching\DbCache',
       // 'db' => 'mydb',
       // 'cacheTable' => 'my_cache',
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

$keyPrefix				*yii/caching/DbCache::$keyPrefix*

 See |yii/caching/Cache::$keyPrefix|

$serializer				*yii/caching/DbCache::$serializer*

 See |yii/caching/Cache::$serializer|

$db					*yii/caching/DbCache::$db*

 (\yii\db\Connection|array|string) The DB connection object or the application
 component ID of the DB connection. After the DbCache object is created, if
 you want to change this property, you should only assign it with a DB
 connection object. Starting from version 2.0.2, this can also be a
 configuration array for creating the object.

$cacheTable				*yii/caching/DbCache::$cacheTable*

 (string) Name of the DB table to store cache content. The table should be
 pre-created as follows:

   CREATE TABLE cache (
       id char(128) NOT NULL PRIMARY KEY,
       expire int(11),
       data BLOB
   );

 where 'BLOB' refers to the BLOB-type of your preferred DBMS. Below are the
 BLOB type that can be used for some popular DBMS:


   - MySQL: LONGBLOB 
   - PostgreSQL: BYTEA 
   - MSSQL: BLOB

 When using DbCache in a production server, we recommend you create a DB index
 for the 'expire' column in the cache table to improve the performance.

$gcProbability				*yii/caching/DbCache::$gcProbability*

 (integer) The probability (parts per million) that garbage collection (GC)
 should be performed when storing a piece of data in the cache. Defaults to
 100, meaning 0.01% chance. This number should be between 0 and 1000000. A
 value 0 meaning no GC will be performed at all.

$behaviors				*yii/caching/DbCache::$behaviors*

 See |yii/base/Component::$behaviors|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/caching/DbCache::className*				public

 See |yii/base/Object::className|


*yii/caching/DbCache::__construct*			public

 See |yii/base/Object::__construct|


*yii/caching/DbCache::init*				public
>
 init()
<
return (void)

 This method will initialize the 'db' property to make sure it refers to a
 valid DB connection.


*yii/caching/DbCache::__get*				public

 See |yii/base/Component::__get|


*yii/caching/DbCache::__set*				public

 See |yii/base/Component::__set|


*yii/caching/DbCache::__isset*				public

 See |yii/base/Component::__isset|


*yii/caching/DbCache::__unset*				public

 See |yii/base/Component::__unset|


*yii/caching/DbCache::__call*				public

 See |yii/base/Component::__call|


*yii/caching/DbCache::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/caching/DbCache::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/caching/DbCache::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/caching/DbCache::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/caching/DbCache::__clone*				public

 See |yii/base/Component::__clone|


*yii/caching/DbCache::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/caching/DbCache::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/caching/DbCache::on*					public

 See |yii/base/Component::on|


*yii/caching/DbCache::off*				public

 See |yii/base/Component::off|


*yii/caching/DbCache::trigger*				public

 See |yii/base/Component::trigger|


*yii/caching/DbCache::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/caching/DbCache::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/caching/DbCache::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/caching/DbCache::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/caching/DbCache::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/caching/DbCache::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/caching/DbCache::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/caching/DbCache::buildKey*				public

 See |yii/caching/Cache::buildKey|


*yii/caching/DbCache::get*				public

 See |yii/caching/Cache::get|


*yii/caching/DbCache::exists*				public
>
 exists($key)
<
return (boolean) True if a value exists in cache, false if the value is not in the
cache or expired.

 This can be faster than getting the value from the cache if the data is big.
 Note that this method does not check whether the dependency associated with
 the cached data, if there is any, has changed. So a call to 'get' may return
 false while exists returns true.

    [$key] (mixed) A key identifying the cached value. This can be a simple
    string or a complex data structure consisting of factors representing the
    key.


*yii/caching/DbCache::mget*				public

 See |yii/caching/Cache::mget|


*yii/caching/DbCache::multiGet*				public

 See |yii/caching/Cache::multiGet|


*yii/caching/DbCache::set*				public

 See |yii/caching/Cache::set|


*yii/caching/DbCache::mset*				public

 See |yii/caching/Cache::mset|


*yii/caching/DbCache::multiSet*				public

 See |yii/caching/Cache::multiSet|


*yii/caching/DbCache::madd*				public

 See |yii/caching/Cache::madd|


*yii/caching/DbCache::multiAdd*				public

 See |yii/caching/Cache::multiAdd|


*yii/caching/DbCache::add*				public

 See |yii/caching/Cache::add|


*yii/caching/DbCache::delete*				public

 See |yii/caching/Cache::delete|


*yii/caching/DbCache::flush*				public

 See |yii/caching/Cache::flush|


*yii/caching/DbCache::getValue*				protected
>
 getValue($key)
<
return (string|boolean) The value stored in cache, false if the value is not in the
cache or expired.

 This is the implementation of the method declared in the parent class.

    [$key] (string) A unique key identifying the cached value


*yii/caching/DbCache::setValue*				protected
>
 setValue($key, $value, $duration)
<
return (boolean) True if the value is successfully stored into cache, false otherwise

 This is the implementation of the method declared in the parent class.

    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$duration] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/DbCache::addValue*				protected
>
 addValue($key, $value, $duration)
<
return (boolean) True if the value is successfully stored into cache, false otherwise

 This is the implementation of the method declared in the parent class.

    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$duration] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/DbCache::deleteValue*			protected
>
 deleteValue($key)
<
return (boolean) If no error happens during deletion

    [$key] (string) The key of the value to be deleted


*yii/caching/DbCache::flushValues*			protected
>
 flushValues()
<
return (boolean) Whether the flush operation was successful.

 This is the implementation of the method declared in the parent class.


*yii/caching/DbCache::getValues*				protected
>
 getValues($keys)
<
return (array) A list of cached values indexed by the keys

    [$keys] (array) A list of keys identifying the cached values


*yii/caching/DbCache::setValues*				protected

 See |yii/caching/Cache::setValues|


*yii/caching/DbCache::addValues*				protected

 See |yii/caching/Cache::addValues|


*yii/caching/DbCache::offsetExists*			public

 See |yii/caching/Cache::offsetExists|


*yii/caching/DbCache::offsetGet*				public

 See |yii/caching/Cache::offsetGet|


*yii/caching/DbCache::offsetSet*				public

 See |yii/caching/Cache::offsetSet|


*yii/caching/DbCache::offsetUnset*			public

 See |yii/caching/Cache::offsetUnset|


*yii/caching/DbCache::gc*					public
>
 gc($force='false')
<
return (void)

    [$force] (boolean) Whether to enforce the garbage collection regardless of
    'gcProbability'. Defaults to false, meaning the actual deletion happens
    with the probability as specified by 'gcProbability'.



 vim:tw=78:ts=8:ft=help:norl:
