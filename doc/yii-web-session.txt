
*yii/web/Session*   >> |yii/base/Component|
=================

SUBCLASSES
------------------------------------------------------------------------------

|yii/mongodb/Session|
|yii/redis/Session|
|yii/web/CacheSession|
|yii/web/MultiFieldSession|
|yii/web/DbSession|

DESCRIPTION
------------------------------------------------------------------------------

 Session is a Web application component that can be accessed via
 'Yii::$app->session'.

 To start the session, call 'open()'; To complete and send out session data,
 call 'close()'; To destroy the session, call 'destroy()'.

 Session can be used like an array to set and get session data. For example,

   $session = new Session;
   $session->open();
   $value1 = $session['name1'];  // get session variable 'name1'
   $value2 = $session['name2'];  // get session variable 'name2'
   foreach ($session as $name => $value) // traverse all session variables
   $session['name3'] = $value3;  // set session variable 'name3'

 Session can be extended to support customized session storage. To do so,
 override 'useCustomStorage' so that it returns true, and override these
 methods with the actual logic about using custom storage: 'openSession()',
 'closeSession()', 'readSession()', 'writeSession()', 'destroySession()' and
 'gcSession()'.

 Session also supports a special type of session data, called *flash
 messages*. A flash message is available only in the current request and the
 next request. After that, it will be deleted automatically. Flash messages
 are particularly useful for displaying confirmation messages. To use flash
 messages, simply call methods such as 'setFlash()', 'getFlash()'.

 For more details and usage information on Session, see the [guide article on
 sessions](guide:runtime-sessions-cookies).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|


$flashParam				*yii/web/Session::$flashParam*

 (string) The name of the session variable that stores the flash message data.

$handler				*yii/web/Session::$handler*

 (\SessionHandlerInterface|array) An object implementing the
 SessionHandlerInterface or a configuration array. If set, will be used to
 provide persistency instead of build-in methods.

$useCustomStorage			*yii/web/Session::$useCustomStorage*

 (bool) Whether to use custom storage.

$isActive				*yii/web/Session::$isActive*

 (bool) Whether the session has started

$hasSessionId				*yii/web/Session::$hasSessionId*

 (bool) Whether the current request has sent the session ID.

$id					*yii/web/Session::$id*

 (string) The current session ID

$name					*yii/web/Session::$name*

 (string) The current session name

$savePath				*yii/web/Session::$savePath*

 (string) The current session save path, defaults to '/tmp'.

$cookieParams				*yii/web/Session::$cookieParams*

 (array) The session cookie parameters.

$useCookies				*yii/web/Session::$useCookies*

 (bool|null) The value indicating whether cookies should be used to store
 session IDs.

$gCProbability				*yii/web/Session::$gCProbability*

 (float) The probability (percentage) that the GC (garbage collection) process
 is started on every session initialization, defaults to 1 meaning 1% chance.

$useTransparentSessionID		*yii/web/Session::$useTransparentSessionID*

 (bool) Whether transparent sid support is enabled or not, defaults to false.

$timeout				*yii/web/Session::$timeout*

 (int) The number of seconds after which data will be seen as 'garbage' and
 cleaned up. The default value is 1440 seconds (or the value of
 "session.gc_maxlifetime" set in php.ini).

$iterator				*yii/web/Session::$iterator*

 (\yii\web\SessionIterator) An iterator for traversing the session variables.

$count					*yii/web/Session::$count*

 (int) The number of session variables

$allFlashes				*yii/web/Session::$allFlashes*

 (array) Flash messages (key => message or key => [message1, message2]).

$flash					*yii/web/Session::$flash*

 (string) The key identifying the flash message. Note that flash messages and
 normal session variables share the same name space. If you have a normal
 session variable using the same name, its value will be overwritten by this
 method.

$cacheLimiter				*yii/web/Session::$cacheLimiter*

 (string)



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/web/Session::init*					public
>
 init()
<
return (void)

 Initializes the application component.

 This method is required by IApplicationComponent and is invoked by
 application.


*yii/web/Session::getUseCustomStorage*			public
>
 getUseCustomStorage()
<
return (bool) Whether to use custom storage.

 Returns a value indicating whether to use custom session storage.

 This method should be overridden to return true by child classes that
 implement custom session storage. To implement custom session storage,
 override these methods: 'openSession()', 'closeSession()', 'readSession()',
 'writeSession()', 'destroySession()' and 'gcSession()'.


*yii/web/Session::open*					public
>
 open()
<
return (void)

 Starts the session.


*yii/web/Session::registerSessionHandler*			protected
>
 registerSessionHandler()
<
return (void)

 Registers session handler.


*yii/web/Session::close*					public
>
 close()
<
return (void)

 Ends the current session and store session data.


*yii/web/Session::destroy*				public
>
 destroy()
<
return (void)

 Frees all session variables and destroys all data registered to a session.

 This method has no effect when session is not 'getIsActive()|active'. Make
 sure to call 'open()' before calling it.


*yii/web/Session::getIsActive*				public
>
 getIsActive()
<
return (bool) Whether the session has started



*yii/web/Session::getHasSessionId*			public
>
 getHasSessionId()
<
return (bool) Whether the current request has sent the session ID.

 Returns a value indicating whether the current request has sent the session
 ID.

 The default implementation will check cookie and $_GET using the session
 name. If you send session ID via other ways, you may need to override this
 method or call 'setHasSessionId()' to explicitly set whether the session ID
 is sent.


*yii/web/Session::setHasSessionId*			public
>
 setHasSessionId($value)
<
return (void)

 Sets the value indicating whether the current request has sent the session
 ID.

 This method is provided so that you can override the default way of
 determining whether the session ID is sent.

    [$value] (bool) Whether the current request has sent the session ID.


*yii/web/Session::getId*					public
>
 getId()
<
return (string) The current session ID

 Gets the session ID.

 This is a wrapper for [PHP
 session_id()](https://secure.php.net/manual/en/function.session-id.php).


*yii/web/Session::setId*					public
>
 setId($value)
<
return (void)

 Sets the session ID.

 This is a wrapper for [PHP
 session_id()](https://secure.php.net/manual/en/function.session-id.php).

    [$value] (string) The session ID for the current session


*yii/web/Session::regenerateID*				public
>
 regenerateID($deleteOldSession='false')
<
return (void)

 Updates the current session ID with a newly generated one.

 Please refer to <https://secure.php.net/session_regenerate_id> for more
 details.

 This method has no effect when session is not 'getIsActive()|active'. Make
 sure to call 'open()' before calling it.

    [$deleteOldSession] (bool) Whether to delete the old associated session
    file or not.


*yii/web/Session::getName*				public
>
 getName()
<
return (string) The current session name

 Gets the name of the current session.

 This is a wrapper for [PHP
 session_name()](https://secure.php.net/manual/en/function.session-name.php).


*yii/web/Session::setName*				public
>
 setName($value)
<
return (void)

 Sets the name for the current session.

 This is a wrapper for [PHP
 session_name()](https://secure.php.net/manual/en/function.session-name.php).

    [$value] (string) The session name for the current session, must be an
    alphanumeric string. It defaults to "PHPSESSID".


*yii/web/Session::getSavePath*				public
>
 getSavePath()
<
return (string) The current session save path, defaults to '/tmp'.

 Gets the current session save path.

 This is a wrapper for [PHP
 session_save_path()](https://secure.php.net/manual/en/function.session-save-path.php).


*yii/web/Session::setSavePath*				public
>
 setSavePath($value)
<
return (void)

 Sets the current session save path.

 This is a wrapper for [PHP
 session_save_path()](https://secure.php.net/manual/en/function.session-save-path.php).

    [$value] (string) The current session save path. This can be either a
    directory name or a [path alias](guide:concept-aliases).


*yii/web/Session::getCookieParams*			public
>
 getCookieParams()
<
return (array) The session cookie parameters.



*yii/web/Session::setCookieParams*			public
>
 setCookieParams($value)
<
return (void)

 Sets the session cookie parameters.

 The cookie parameters passed to this method will be merged with the result of
 'session_get_cookie_params()'.

    [$value] (array) Cookie parameters, valid keys include: 'lifetime',
    'path', 'domain', 'secure' and 'httponly'. Starting with Yii 2.0.21
    'sameSite' is also supported. It requires PHP version 7.3.0 or higher. For
    securtiy, an exception will be thrown if 'sameSite' is set while using an
    unsupported version of PHP. To use this feature across different PHP
    versions check the version first. E.g.

      [
          'sameSite' => PHP_VERSION_ID >= 70300 ?
    yii\web\Cookie::SAME_SITE_LAX : null,
      ]

    See https://www.owasp.org/index.php/SameSite for more information about
    'sameSite'.


*yii/web/Session::getUseCookies*				public
>
 getUseCookies()
<
return (bool|null) The value indicating whether cookies should be used to store
session IDs.

 Returns the value indicating whether cookies should be used to store session
 IDs.


*yii/web/Session::setUseCookies*				public
>
 setUseCookies($value)
<
return (void)

 Sets the value indicating whether cookies should be used to store session
 IDs.

 Three states are possible:


   - true: cookies and only cookies will be used to store session IDs. 
   - false: cookies will not be used to store session IDs. 
   - null: if possible, cookies will be used to store session IDs; if
   not, other mechanisms will be used (e.g. GET parameter)

    [$value] (bool|null) The value indicating whether cookies should be used
    to store session IDs.


*yii/web/Session::getGCProbability*			public
>
 getGCProbability()
<
return (float) The probability (percentage) that the GC (garbage collection) process
is started on every session initialization, defaults to 1 meaning 1% chance.



*yii/web/Session::setGCProbability*			public
>
 setGCProbability($value)
<
return (void)

    [$value] (float) The probability (percentage) that the GC (garbage
    collection) process is started on every session initialization.


*yii/web/Session::getUseTransparentSessionID*		public
>
 getUseTransparentSessionID()
<
return (bool) Whether transparent sid support is enabled or not, defaults to false.



*yii/web/Session::setUseTransparentSessionID*		public
>
 setUseTransparentSessionID($value)
<
return (void)

    [$value] (bool) Whether transparent sid support is enabled or not.


*yii/web/Session::getTimeout*				public
>
 getTimeout()
<
return (int) The number of seconds after which data will be seen as 'garbage' and
cleaned up. The default value is 1440 seconds (or the value of
"session.gc_maxlifetime" set in php.ini).



*yii/web/Session::setTimeout*				public
>
 setTimeout($value)
<
return (void)

    [$value] (int) The number of seconds after which data will be seen as
    'garbage' and cleaned up


*yii/web/Session::openSession*				public
>
 openSession($savePath, $sessionName)
<
return (bool) Whether session is opened successfully

 Session open handler.

 This method should be overridden if 'useCustomStorage' returns true.

    [$savePath] (string) Session save path
    [$sessionName] (string) Session name


*yii/web/Session::closeSession*				public
>
 closeSession()
<
return (bool) Whether session is closed successfully

 Session close handler.

 This method should be overridden if 'useCustomStorage' returns true.


*yii/web/Session::readSession*				public
>
 readSession($id)
<
return (string) The session data

 Session read handler.

 This method should be overridden if 'useCustomStorage' returns true.

    [$id] (string) Session ID


*yii/web/Session::writeSession*				public
>
 writeSession($id, $data)
<
return (bool) Whether session write is successful

 Session write handler.

 This method should be overridden if 'useCustomStorage' returns true.

    [$id] (string) Session ID
    [$data] (string) Session data


*yii/web/Session::destroySession*				public
>
 destroySession($id)
<
return (bool) Whether session is destroyed successfully

 Session destroy handler.

 This method should be overridden if 'useCustomStorage' returns true.

    [$id] (string) Session ID


*yii/web/Session::gcSession*				public
>
 gcSession($maxLifetime)
<
return (bool) Whether session is GCed successfully

 Session GC (garbage collection) handler.

 This method should be overridden if 'useCustomStorage' returns true.

    [$maxLifetime] (int) The number of seconds after which data will be seen
    as 'garbage' and cleaned up.


*yii/web/Session::getIterator*				public
>
 getIterator()
<
return (\yii\web\SessionIterator) An iterator for traversing the session variables.

 Returns an iterator for traversing the session variables.

 This method is required by the interface '\IteratorAggregate'.


*yii/web/Session::getCount*				public
>
 getCount()
<
return (int) The number of session variables

 Returns the number of items in the session.


*yii/web/Session::count*					public
>
 count()
<
return (int) Number of items in the session.

 Returns the number of items in the session.

 This method is required by '\Countable' interface.


*yii/web/Session::get*					public
>
 get($key, $defaultValue='null')
<
return (mixed) The session variable value, or $defaultValue if the session variable
does not exist.

 Returns the session variable value with the session variable name.

 If the session variable does not exist, the '$defaultValue' will be returned.

    [$key] (string) The session variable name
    [$defaultValue] (mixed) The default value to be returned when the session
    variable does not exist.


*yii/web/Session::set*					public
>
 set($key, $value)
<
return (void)

 Adds a session variable.

 If the specified name already exists, the old value will be overwritten.

    [$key] (string) Session variable name
    [$value] (mixed) Session variable value


*yii/web/Session::remove*					public
>
 remove($key)
<
return (mixed) The removed value, null if no such session variable.

 Removes a session variable.

    [$key] (string) The name of the session variable to be removed


*yii/web/Session::removeAll*				public
>
 removeAll()
<
return (void)

 Removes all session variables.


*yii/web/Session::has*					public
>
 has($key)
<
return (bool) Whether there is the named session variable

    [$key] (mixed) Session variable name


*yii/web/Session::updateFlashCounters*			protected
>
 updateFlashCounters()
<
return (void)

 Updates the counters for flash messages and removes outdated flash messages.

 This method should only be called once in 'init()'.


*yii/web/Session::getFlash*				public
>
 getFlash($key, $defaultValue='null', $delete='false')
<
return (mixed) The flash message or an array of messages if addFlash was used

 Returns a flash message.

    [$key] (string) The key identifying the flash message
    [$defaultValue] (mixed) Value to be returned if the flash message does not
    exist.
    [$delete] (bool) Whether to delete this flash message right after this
    method is called. If false, the flash message will be automatically
    deleted in the next request.


*yii/web/Session::getAllFlashes*				public
>
 getAllFlashes($delete='false')
<
return (array) Flash messages (key => message or key => [message1, message2]).

 Returns all flash messages.

 You may use this method to display all the flash messages in a view file:

   <?php
   foreach (Yii::$app->session->getAllFlashes() as $key => $message) {
       echo '<div class="alert alert-' . $key . '">' . $message . '</div>';
   } ?>

 With the above code you can use the [bootstrap alert][] classes such as
 'success', 'info', 'danger' as the flash message key to influence the color
 of the div.

 Note that if you use 'addFlash()', '$message' will be an array, and you will
 have to adjust the above code.

 [bootstrap alert]: http://getbootstrap.com/components/#alerts

    [$delete] (bool) Whether to delete the flash messages right after this
    method is called. If false, the flash messages will be automatically
    deleted in the next request.


*yii/web/Session::setFlash*				public
>
 setFlash($key, $value='true', $removeAfterAccess='true')
<
return (void)

 Sets a flash message.

 A flash message will be automatically deleted after it is accessed in a
 request and the deletion will happen in the next request. If there is already
 an existing flash message with the same key, it will be overwritten by the
 new one.

    [$key] (string) The key identifying the flash message. Note that flash
    messages and normal session variables share the same name space. If you
    have a normal session variable using the same name, its value will be
    overwritten by this method.
    [$value] (mixed) Flash message
    [$removeAfterAccess] (bool) Whether the flash message should be
    automatically removed only if it is accessed. If false, the flash message
    will be automatically removed after the next request, regardless if it is
    accessed or not. If true (default value), the flash message will remain
    until after it is accessed.


*yii/web/Session::addFlash*				public
>
 addFlash($key, $value='true', $removeAfterAccess='true')
<
return (void)

 Adds a flash message.

 If there are existing flash messages with the same key, the new one will be
 appended to the existing message array.

    [$key] (string) The key identifying the flash message.
    [$value] (mixed) Flash message
    [$removeAfterAccess] (bool) Whether the flash message should be
    automatically removed only if it is accessed. If false, the flash message
    will be automatically removed after the next request, regardless if it is
    accessed or not. If true (default value), the flash message will remain
    until after it is accessed.


*yii/web/Session::removeFlash*				public
>
 removeFlash($key)
<
return (mixed) The removed flash message. Null if the flash message does not exist.

 Removes a flash message.

    [$key] (string) The key identifying the flash message. Note that flash
    messages and normal session variables share the same name space.  If you
    have a normal session variable using the same name, it will be removed by
    this method.


*yii/web/Session::removeAllFlashes*			public
>
 removeAllFlashes()
<
return (void)

 Removes all flash messages.

 Note that flash messages and normal session variables share the same name
 space. If you have a normal session variable using the same name, it will be
 removed by this method.


*yii/web/Session::hasFlash*				public
>
 hasFlash($key)
<
return (bool) Whether any flash messages exist under specified key

 Returns a value indicating whether there are flash messages associated with
 the specified key.

    [$key] (string) Key identifying the flash message type


*yii/web/Session::offsetExists*				public
>
 offsetExists($offset)
<
return (bool) 

 This method is required by the interface '\ArrayAccess'.

    [$offset] (mixed) The offset to check on


*yii/web/Session::offsetGet*				public
>
 offsetGet($offset)
<
return (mixed) The element at the offset, null if no element is found at the offset

 This method is required by the interface '\ArrayAccess'.

    [$offset] (int) The offset to retrieve element.


*yii/web/Session::offsetSet*				public
>
 offsetSet($offset, $item)
<
return (void)

 This method is required by the interface '\ArrayAccess'.

    [$offset] (int) The offset to set element
    [$item] (mixed) The element value


*yii/web/Session::offsetUnset*				public
>
 offsetUnset($offset)
<
return (void)

 This method is required by the interface '\ArrayAccess'.

    [$offset] (mixed) The offset to unset element


*yii/web/Session::freeze*					protected
>
 freeze()
<
return (void)

 If session is started it's not possible to edit session ini settings. In
 PHP7.2+ it throws exception.

 This function saves session data to temporary variable and stop session.


*yii/web/Session::unfreeze*				protected
>
 unfreeze()
<
return (void)

 Starts session and restores data from temporary variable


*yii/web/Session::setCacheLimiter*			public
>
 setCacheLimiter($cacheLimiter)
<
return (void)

 Set cache limiter

    [$cacheLimiter] (string) 


*yii/web/Session::getCacheLimiter*			public
>
 getCacheLimiter()
<
return (string) Current cache limiter

 Returns current cache limiter



 vim:tw=78:ts=8:ft=help:norl:
