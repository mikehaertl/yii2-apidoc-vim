
*yii/sphinx/Schema*   >> |yii/base/Object|
===================


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/sphinx/Schema::$db*

 (\yii\sphinx\Connection) The Sphinx connection

$typeMap				*yii/sphinx/Schema::$typeMap*

 (array) Mapping from physical column types (keys) to abstract column types
 (values)

$indexSchemas				*yii/sphinx/Schema::$indexSchemas*

 (\yii\sphinx\IndexSchema[]) The metadata for all indexes in the Sphinx. Each
 array element is an instance of 'IndexSchema' or its child class.

$indexNames				*yii/sphinx/Schema::$indexNames*

 (string[]) All index names in the Sphinx.

$indexTypes				*yii/sphinx/Schema::$indexTypes*

 (array) All index types in the Sphinx in format: index name => index type.

$queryBuilder				*yii/sphinx/Schema::$queryBuilder*

 (\yii\sphinx\QueryBuilder) The query builder for this connection.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/sphinx/Schema::className*				public

 See |yii/base/BaseObject::className|


*yii/sphinx/Schema::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/sphinx/Schema::init*					public

 See |yii/base/BaseObject::init|


*yii/sphinx/Schema::__get*				public

 See |yii/base/BaseObject::__get|


*yii/sphinx/Schema::__set*				public

 See |yii/base/BaseObject::__set|


*yii/sphinx/Schema::__isset*				public

 See |yii/base/BaseObject::__isset|


*yii/sphinx/Schema::__unset*				public

 See |yii/base/BaseObject::__unset|


*yii/sphinx/Schema::__call*				public

 See |yii/base/BaseObject::__call|


*yii/sphinx/Schema::hasProperty*				public

 See |yii/base/BaseObject::hasProperty|


*yii/sphinx/Schema::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/sphinx/Schema::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/sphinx/Schema::hasMethod*				public

 See |yii/base/BaseObject::hasMethod|


*yii/sphinx/Schema::loadIndexSchema*			protected
>
 loadIndexSchema($name)
<
return (\yii\sphinx\IndexSchema|null) Driver dependent index metadata. 'null' 
  - if the index does not exist.

    [$name] (string) Index name


*yii/sphinx/Schema::resolveIndexNames*			protected
>
 resolveIndexNames($index, $name)
<
return (void)

    [$index] (\yii\sphinx\IndexSchema) The index metadata object
    [$name] (string) The index name


*yii/sphinx/Schema::resolveIndexType*			protected
>
 resolveIndexType($index)
<
return (void)

    [$index] (\yii\sphinx\IndexSchema) The index metadata object


*yii/sphinx/Schema::getIndexSchema*			public
>
 getIndexSchema($name, $refresh='false')
<
return (\yii\sphinx\IndexSchema|null) Index metadata. 'null' 
  - if the named index does not exist.

    [$name] (string) Index name. The index name may contain schema name if
    any. Do not quote the index name.
    [$refresh] (bool) Whether to reload the index schema even if it is found
    in the cache.


*yii/sphinx/Schema::getCacheKey*				protected
>
 getCacheKey($name)
<
return (mixed) The cache key

    [$name] (string) The index name


*yii/sphinx/Schema::getCacheTag*				protected
>
 getCacheTag()
<
return (string) The cache tag name

 This allows 'refresh()' to invalidate all cached index schemas.


*yii/sphinx/Schema::getIndexSchemas*			public
>
 getIndexSchemas($refresh='false')
<
return (\yii\sphinx\IndexSchema[]) The metadata for all indexes in the Sphinx. Each
array element is an instance of 'IndexSchema' or its child class.

    [$refresh] (bool) Whether to fetch the latest available index schemas. If
    this is false, cached data may be returned if available.


*yii/sphinx/Schema::getIndexNames*			public
>
 getIndexNames($refresh='false')
<
return (string[]) All index names in the Sphinx.

    [$refresh] (bool) Whether to fetch the latest available index names. If
    this is false, index names fetched previously (if available) will be
    returned.


*yii/sphinx/Schema::getIndexTypes*			public
>
 getIndexTypes($refresh='false')
<
return (array) All index types in the Sphinx in format: index name => index type.

    [$refresh] (bool) Whether to fetch the latest available index types. If
    this is false, index types fetched previously (if available) will be
    returned.


*yii/sphinx/Schema::initIndexesInfo*			protected
>
 initIndexesInfo()
<
return (void)



*yii/sphinx/Schema::findIndexes*				protected
>
 findIndexes()
<
return (array) All index names in the Sphinx.



*yii/sphinx/Schema::getQueryBuilder*			public
>
 getQueryBuilder()
<
return (\yii\sphinx\QueryBuilder) The query builder for this connection.



*yii/sphinx/Schema::getPdoType*				public
>
 getPdoType($data)
<
return (int) The PDO type

    [$data] (mixed) The data whose PDO type is to be determined


*yii/sphinx/Schema::refresh*				public
>
 refresh()
<
return (void)

 This method cleans up all cached index schemas so that they can be re-created
 later to reflect the Sphinx schema change.


*yii/sphinx/Schema::createQueryBuilder*			public
>
 createQueryBuilder()
<
return (\yii\sphinx\QueryBuilder) Query builder instance



*yii/sphinx/Schema::quoteValue*				public
>
 quoteValue($str)
<
return (string) The properly quoted string

 Note that if the parameter is not a string, it will be returned without
 change.

    [$str] (string) String to be quoted


*yii/sphinx/Schema::quoteIndexName*			public
>
 quoteIndexName($name)
<
return (string) The properly quoted index name

 If the index name contains schema prefix, the prefix will also be properly
 quoted. If the index name is already quoted or contains '(' or '{{', then
 this method will do nothing.

    [$name] (string) Index name


*yii/sphinx/Schema::quoteColumnName*			public
>
 quoteColumnName($name)
<
return (string) The properly quoted column name

 If the column name contains prefix, the prefix will also be properly quoted.
 If the column name is already quoted or contains '(', ''' or '{{', then this
 method will do nothing.

    [$name] (string) Column name


*yii/sphinx/Schema::quoteSimpleIndexName*			public
>
 quoteSimpleIndexName($name)
<
return (string) The properly quoted index name

 A simple index name has no schema prefix.

    [$name] (string) Index name


*yii/sphinx/Schema::quoteSimpleColumnName*		public
>
 quoteSimpleColumnName($name)
<
return (string) The properly quoted column name

 A simple column name has no prefix.

    [$name] (string) Column name


*yii/sphinx/Schema::getRawIndexName*			public
>
 getRawIndexName($name)
<
return (string) The real name of the given index name

 This method will strip off curly brackets from the given index name and
 replace the percentage character '%' with 'Connection::indexPrefix'.

    [$name] (string) The index name to be converted


*yii/sphinx/Schema::getColumnPhpType*			protected
>
 getColumnPhpType($column)
<
return (string) PHP type name

    [$column] (\yii\sphinx\ColumnSchema) The column schema information


*yii/sphinx/Schema::findColumns*				protected
>
 findColumns($index)
<
return (bool) Whether the index exists in the database

    [$index] (\yii\sphinx\IndexSchema) The index metadata


*yii/sphinx/Schema::applyDefaultColumns*			protected
>
 applyDefaultColumns($index)
<
return (void)

 This method should be used in case there is no way to find actual columns,
 like in some distributed indexes.

    [$index] (\yii\sphinx\IndexSchema) The index metadata


*yii/sphinx/Schema::loadColumnSchema*			protected
>
 loadColumnSchema($info)
<
return (\yii\sphinx\ColumnSchema) The column schema object

    [$info] (array) Column information


*yii/sphinx/Schema::convertException*			public
>
 convertException($e, $rawSql)
<
return (\yii\db\Exception) 

    [$e] (\Exception) 
    [$rawSql] (string) SQL that produced exception


*yii/sphinx/Schema::isReadQuery*				public
>
 isReadQuery($sql)
<
return (bool) Whether a SQL statement is for read purpose.

    [$sql] (string) The SQL statement



 vim:tw=78:ts=8:ft=help:norl:
