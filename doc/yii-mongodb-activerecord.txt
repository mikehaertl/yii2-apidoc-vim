
*yii/mongodb/ActiveRecord*   >> |yii/db/BaseActiveRecord|
==========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/mongodb/file/ActiveRecord|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/mongodb/ActiveRecord::getDb*				public
>
 getDb()
<
return (\yii\mongodb\Connection) The database connection used by this AR class.

 Returns the Mongo connection used by this AR class.

 By default, the "mongodb" application component is used as the Mongo
 connection. You may override this method if you want to use a different
 database connection.


*yii/mongodb/ActiveRecord::updateAll*			public
>
 updateAll($attributes, $condition='[]', $options='[]')
<
return (int) The number of documents updated.

 Updates all documents in the collection using the provided attribute values
 and conditions.

 For example, to change the status to be 1 for all customers whose status is
 2:

   Customer::updateAll(['status' => 1], ['status' => 2]);



    [$attributes] (array) Attribute values (name-value pairs) to be saved into
    the collection
    [$condition] (array) Description of the objects to update. Please refer to
    'Query::where()' on how to specify this parameter.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/ActiveRecord::updateAllCounters*		public
>
 updateAllCounters($counters, $condition='[]', $options='[]')
<
return (int) The number of documents updated.

 Updates all documents in the collection using the provided counter changes
 and conditions.

 For example, to increment all customers' age by 1,

   Customer::updateAllCounters(['age' => 1]);



    [$counters] (array) The counters to be updated (attribute name =>
    increment value). Use negative values if you want to decrement the
    counters.
    [$condition] (array) Description of the objects to update. Please refer to
    'Query::where()' on how to specify this parameter.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/ActiveRecord::deleteAll*			public
>
 deleteAll($condition='[]', $options='[]')
<
return (int) The number of documents deleted.

 Deletes documents in the collection using the provided conditions.

 WARNING: If you do not specify any condition, this method will delete
 documents rows in the collection.

 For example, to delete all customers whose status is 3:

   Customer::deleteAll(['status' => 3]);



    [$condition] (array) Description of the objects to delete. Please refer to
    'Query::where()' on how to specify this parameter.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/ActiveRecord::find*				public
>
 find()
<
return (\yii\mongodb\ActiveQuery) The newly created 'ActiveQuery' instance.



*yii/mongodb/ActiveRecord::collectionName*		public
>
 collectionName()
<
return (string|array) The collection name

 Declares the name of the Mongo collection associated with this AR class.

 Collection name can be either a string or array:  
   - if string considered as the name of the collection inside the
   default database.  
   - if array - first element considered as the name of the database,
   second - as    name of collection inside that database

 By default this method returns the class name as the collection name by
 calling 'Inflector::camel2id()'. For example, 'Customer' becomes 'customer',
 and 'OrderItem' becomes 'order_item'. You may override this method if the
 collection is not named after this convention.


*yii/mongodb/ActiveRecord::getCollection*			public
>
 getCollection()
<
return (\yii\mongodb\Collection) Collection instance.

 Return the Mongo collection instance for this AR class.


*yii/mongodb/ActiveRecord::primaryKey*			public
>
 primaryKey()
<
return (string[]) The primary keys of the associated Mongo collection.

 Returns the primary key name(s) for this AR class.

 The default implementation will return ['_id'].

 Note that an array should be returned even for a collection with single
 primary key.


*yii/mongodb/ActiveRecord::attributes*			public
>
 attributes()
<
return (array) List of attribute names.

 Returns the list of all attribute names of the model.

 This method must be overridden by child classes to define available
 attributes. Note: primary key attribute "_id" should be always present in
 returned array. For example:

   public function attributes()
   {
       return ['_id', 'name', 'address', 'status'];
   }




*yii/mongodb/ActiveRecord::insert*			public
>
 insert($runValidation='true', $attributes='null')
<
return (bool) Whether the attributes are valid and the record is inserted
successfully.

 Inserts a row into the associated Mongo collection using the attribute values
 of this record.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is true. If validation   
 fails, it will skip the rest of the steps; 2. call 'afterValidate()' when
 '$runValidation' is true. 3. call 'beforeSave()'. If the method returns
 false, it will skip the    rest of the steps; 4. insert the record into
 collection. If this fails, it will skip the rest of the steps; 5. call
 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_BEFORE_INSERT', 'EVENT_AFTER_INSERT' and 'EVENT_AFTER_VALIDATE' will
 be raised by the corresponding methods.

 Only the 'dirtyAttributes|changed attribute values' will be inserted into
 database.

 If the primary key  is null during insertion, it will be populated with the
 actual value after insertion.

 For example, to insert a customer record:

   $customer = new Customer();
   $customer->name = $name;
   $customer->email = $email;
   $customer->insert();



    [$runValidation] (bool) Whether to perform validation before saving the
    record. If the validation fails, the record will not be inserted into the
    collection.
    [$attributes] (array) List of attributes that need to be saved. Defaults
    to null, meaning all attributes that are loaded will be saved.


*yii/mongodb/ActiveRecord::insertInternal*		protected
>
 insertInternal($attributes='null')
<
return (void)

    [$attributes] () 


*yii/mongodb/ActiveRecord::updateInternal*		protected
>
 updateInternal($attributes='null')
<
return (void)

    [$attributes] () 


*yii/mongodb/ActiveRecord::delete*			public
>
 delete()
<
return (int|bool) The number of documents deleted, or false if the deletion is
unsuccessful for some reason. Note that it is possible the number of documents
deleted is 0, even though the deletion execution is successful.

 Deletes the document corresponding to this active record from the collection.

 This method performs the following steps in order:

 1. call 'beforeDelete()'. If the method returns false, it will skip the   
 rest of the steps; 2. delete the document from the collection; 3. call
 'afterDelete()'.

 In the above step 1 and 3, events named 'EVENT_BEFORE_DELETE' and
 'EVENT_AFTER_DELETE' will be raised by the corresponding methods.


*yii/mongodb/ActiveRecord::deleteInternal*		protected
>
 deleteInternal()
<
return (void)



*yii/mongodb/ActiveRecord::equals*			public
>
 equals($record)
<
return (bool) Whether the two active records refer to the same row in the same Mongo
collection.

 Returns a value indicating whether the given active record is the same as the
 current one.

 The comparison is made by comparing the collection names and the primary key
 values of the two active records. If one of the records 'isNewRecord|is new'
 they are also considered not equal.

    [$record] (\yii\mongodb\ActiveRecord) Record to compare to


*yii/mongodb/ActiveRecord::toArray*			public
>
 toArray($fields='[]', $expand='[]', $recursive='true')
<
return (void)

    [$fields] () 
    [$expand] () 
    [$recursive] () 



 vim:tw=78:ts=8:ft=help:norl:
