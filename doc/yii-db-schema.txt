
*yii/db/Schema*   >> |yii/base/BaseObject|
===============

SUBCLASSES
------------------------------------------------------------------------------

|yii/db/mysql/Schema|
|yii/db/mssql/Schema|
|yii/db/oci/Schema|
|yii/db/sqlite/Schema|
|yii/db/pgsql/Schema|
|yii/db/cubrid/Schema|

DESCRIPTION
------------------------------------------------------------------------------

 Schema represents the database schema information that is DBMS specific.


PROPERTY DETAILS
------------------------------------------------------------------------------


$db					*yii/db/Schema::$db*

 (\yii\db\Connection) The database connection

$defaultSchema				*yii/db/Schema::$defaultSchema*

 (string) The default schema name used for the current session.

$exceptionMap				*yii/db/Schema::$exceptionMap*

 (array) Map of DB errors and corresponding exceptions If left part is found
 in DB error message exception class from the right part is used.

$columnSchemaClass			*yii/db/Schema::$columnSchemaClass*

 (string|array) Column schema class or class config

$tableQuoteCharacter			*yii/db/Schema::$tableQuoteCharacter*

 (string|string[]) Character used to quote schema, table, etc. names. An array
 of 2 characters can be used in case starting and ending characters are
 different.

$columnQuoteCharacter			*yii/db/Schema::$columnQuoteCharacter*

 (string|string[]) Character used to quote column names. An array of 2
 characters can be used in case starting and ending characters are different.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|


*yii/db/Schema::resolveTableName*				protected
>
 resolveTableName($name)
<
return (\yii\db\TableSchema) 'TableSchema' with resolved table, schema, etc. names.

 Resolves the table name and schema name (if any).

    [$name] (string) The table name


*yii/db/Schema::findSchemaNames*				protected
>
 findSchemaNames()
<
return (array) All schema names in the database, except system schemas.

 Returns all schema names in the database, including the default one but not
 system schemas.

 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception.


*yii/db/Schema::findTableNames*				protected
>
 findTableNames($schema='''')
<
return (array) All table names in the database. The names have NO schema name prefix.

 Returns all table names in the database.

 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception.

    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema.


*yii/db/Schema::loadTableSchema*				protected
>
 loadTableSchema($name)
<
return (\yii\db\TableSchema|null) DBMS-dependent table metadata, 'null' if the table
does not exist.

 Loads the metadata for the specified table.

    [$name] (string) Table name


*yii/db/Schema::createColumnSchema*			protected
>
 createColumnSchema()
<
return (\yii\db\ColumnSchema) Column schema instance.

 Creates a column schema for the database.

 This method may be overridden by child classes to create a DBMS-specific
 column schema.


*yii/db/Schema::getTableSchema*				public
>
 getTableSchema($name, $refresh='false')
<
return (\yii\db\TableSchema|null) Table metadata. 'null' if the named table does not
exist.

 Obtains the metadata for the named table.

    [$name] (string) Table name. The table name may contain schema name if
    any. Do not quote the table name.
    [$refresh] (bool) Whether to reload the table schema even if it is found
    in the cache.


*yii/db/Schema::getTableSchemas*				public
>
 getTableSchemas($schema='''', $refresh='false')
<
return (\yii\db\TableSchema[]) The metadata for all tables in the database. Each
array element is an instance of 'TableSchema' or its child class.

 Returns the metadata for all tables in the database.

    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema name.
    [$refresh] (bool) Whether to fetch the latest available table schemas. If
    this is 'false', cached data may be returned if available.


*yii/db/Schema::getSchemaNames*				public
>
 getSchemaNames($refresh='false')
<
return (string[]) All schema names in the database, except system schemas.

 Returns all schema names in the database, except system schemas.

    [$refresh] (bool) Whether to fetch the latest available schema names. If
    this is false, schema names fetched previously (if available) will be
    returned.


*yii/db/Schema::getTableNames*				public
>
 getTableNames($schema='''', $refresh='false')
<
return (string[]) All table names in the database.

 Returns all table names in the database.

    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema name. If not empty, the returned
    table names will be prefixed with the schema name.
    [$refresh] (bool) Whether to fetch the latest available table names. If
    this is false, table names fetched previously (if available) will be
    returned.


*yii/db/Schema::getQueryBuilder*				public
>
 getQueryBuilder()
<
return (\yii\db\QueryBuilder) The query builder for this connection.



*yii/db/Schema::getPdoType*				public
>
 getPdoType($data)
<
return (int) The PDO type

 Determines the PDO type for the given PHP data value.

    [$data] (mixed) The data whose PDO type is to be determined


*yii/db/Schema::refresh*					public
>
 refresh()
<
return (void)

 Refreshes the schema.

 This method cleans up all cached table schemas so that they can be re-created
 later to reflect the database schema change.


*yii/db/Schema::refreshTableSchema*			public
>
 refreshTableSchema($name)
<
return (void)

 Refreshes the particular table schema.

 This method cleans up cached table schema so that it can be re-created later
 to reflect the database schema change.

    [$name] (string) Table name.


*yii/db/Schema::createQueryBuilder*			public
>
 createQueryBuilder()
<
return (\yii\db\QueryBuilder) Query builder instance

 Creates a query builder for the database.

 This method may be overridden by child classes to create a DBMS-specific
 query builder.


*yii/db/Schema::createColumnSchemaBuilder*		public
>
 createColumnSchemaBuilder($type, $length='null')
<
return (\yii\db\ColumnSchemaBuilder) Column schema builder instance

 Create a column schema builder instance giving the type and value precision.

 This method may be overridden by child classes to create a DBMS-specific
 column schema builder.

    [$type] (string) Type of the column. See 'ColumnSchemaBuilder::$type'.
    [$length] (int|string|array) Length or precision of the column. See
    'ColumnSchemaBuilder::$length'.


*yii/db/Schema::findUniqueIndexes*			public
>
 findUniqueIndexes($table)
<
return (array) All unique indexes for the given table.

 Returns all unique indexes for the given table.

 Each array element is of the following structure:

   [
    'IndexName1' => ['col1' [, ...]],
    'IndexName2' => ['col2' [, ...]],
   ]

 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception

    [$table] (\yii\db\TableSchema) The table metadata


*yii/db/Schema::getLastInsertID*				public
>
 getLastInsertID($sequenceName='''')
<
return (string) The row ID of the last row inserted, or the last value retrieved from
the sequence object

 Returns the ID of the last inserted row or sequence value.

    [$sequenceName] (string) Name of the sequence object (required by some
    DBMS)


*yii/db/Schema::supportsSavepoint*			public
>
 supportsSavepoint()
<
return (bool) Whether this DBMS supports
[savepoint](http://en.wikipedia.org/wiki/Savepoint).



*yii/db/Schema::createSavepoint*				public
>
 createSavepoint($name)
<
return (void)

 Creates a new savepoint.

    [$name] (string) The savepoint name


*yii/db/Schema::releaseSavepoint*				public
>
 releaseSavepoint($name)
<
return (void)

 Releases an existing savepoint.

    [$name] (string) The savepoint name


*yii/db/Schema::rollBackSavepoint*			public
>
 rollBackSavepoint($name)
<
return (void)

 Rolls back to a previously created savepoint.

    [$name] (string) The savepoint name


*yii/db/Schema::setTransactionIsolationLevel*		public
>
 setTransactionIsolationLevel($level)
<
return (void)

 Sets the isolation level of the current transaction.

    [$level] (string) The transaction isolation level to use for this
    transaction. This can be one of 'Transaction::READ_UNCOMMITTED',
    'Transaction::READ_COMMITTED', 'Transaction::REPEATABLE_READ' and
    'Transaction::SERIALIZABLE' but also a string containing DBMS specific
    syntax to be used after 'SET TRANSACTION ISOLATION LEVEL'.


*yii/db/Schema::insert*					public
>
 insert($table, $columns)
<
return (array|false) Primary key values or false if the command fails

 Executes the INSERT command, returning primary key values.

    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column data (name => value) to be inserted into the
    table.


*yii/db/Schema::quoteValue*				public
>
 quoteValue($str)
<
return (string) The properly quoted string

 Quotes a string value for use in a query.

 Note that if the parameter is not a string, it will be returned without
 change.

    [$str] (string) String to be quoted


*yii/db/Schema::quoteTableName*				public
>
 quoteTableName($name)
<
return (string) The properly quoted table name

 Quotes a table name for use in a query.

 If the table name contains schema prefix, the prefix will also be properly
 quoted. If the table name is already quoted or contains '(' or '{{', then
 this method will do nothing.

    [$name] (string) Table name


*yii/db/Schema::quoteColumnName*				public
>
 quoteColumnName($name)
<
return (string) The properly quoted column name

 Quotes a column name for use in a query.

 If the column name contains prefix, the prefix will also be properly quoted.
 If the column name is already quoted or contains '(', ''' or '{{', then this
 method will do nothing.

    [$name] (string) Column name


*yii/db/Schema::quoteSimpleTableName*			public
>
 quoteSimpleTableName($name)
<
return (string) The properly quoted table name

 Quotes a simple table name for use in a query.

 A simple table name should contain the table name only without any schema
 prefix. If the table name is already quoted, this method will do nothing.

    [$name] (string) Table name


*yii/db/Schema::quoteSimpleColumnName*			public
>
 quoteSimpleColumnName($name)
<
return (string) The properly quoted column name

 Quotes a simple column name for use in a query.

 A simple column name should contain the column name only without any prefix.
 If the column name is already quoted or is the asterisk character '*', this
 method will do nothing.

    [$name] (string) Column name


*yii/db/Schema::unquoteSimpleTableName*			public
>
 unquoteSimpleTableName($name)
<
return (string) Unquoted table name.

 Unquotes a simple table name.

 A simple table name should contain the table name only without any schema
 prefix. If the table name is not quoted, this method will do nothing.

    [$name] (string) Table name.


*yii/db/Schema::unquoteSimpleColumnName*			public
>
 unquoteSimpleColumnName($name)
<
return (string) Unquoted column name.

 Unquotes a simple column name.

 A simple column name should contain the column name only without any prefix.
 If the column name is not quoted or is the asterisk character '*', this
 method will do nothing.

    [$name] (string) Column name.


*yii/db/Schema::getRawTableName*				public
>
 getRawTableName($name)
<
return (string) The real name of the given table name

 Returns the actual name of a given table name.

 This method will strip off curly brackets from the given table name and
 replace the percentage character '%' with 'Connection::tablePrefix'.

    [$name] (string) The table name to be converted


*yii/db/Schema::getColumnPhpType*				protected
>
 getColumnPhpType($column)
<
return (string) PHP type name

 Extracts the PHP type from abstract DB type.

    [$column] (\yii\db\ColumnSchema) The column schema information


*yii/db/Schema::convertException*				public
>
 convertException($e, $rawSql)
<
return (\yii\db\Exception) 

 Converts a DB exception to a more concrete one if possible.

    [$e] (\Exception) 
    [$rawSql] (string) SQL that produced exception


*yii/db/Schema::isReadQuery*				public
>
 isReadQuery($sql)
<
return (bool) Whether a SQL statement is for read purpose.

 Returns a value indicating whether a SQL statement is for read purpose.

    [$sql] (string) The SQL statement


*yii/db/Schema::getServerVersion*				public
>
 getServerVersion()
<
return (string) Server version as a string.

 Returns a server version as a string comparable by '\version_compare()'.


*yii/db/Schema::getCacheKey*				protected
>
 getCacheKey($name)
<
return (mixed) The cache key.

 Returns the cache key for the specified table name.

    [$name] (string) The table name.


*yii/db/Schema::getCacheTag*				protected
>
 getCacheTag()
<
return (string) The cache tag name

 Returns the cache tag name.

 This allows 'refresh()' to invalidate all cached table schemas.


*yii/db/Schema::getTableMetadata*				protected
>
 getTableMetadata($name, $type, $refresh)
<
return (mixed) Metadata.

 Returns the metadata of the given type for the given table.

 If there's no metadata in the cache, this method will call a ''loadTable' .
 ucfirst($type)' named method with the table name to obtain the metadata.

    [$name] (string) Table name. The table name may contain schema name if
    any. Do not quote the table name.
    [$type] (string) Metadata type.
    [$refresh] (bool) Whether to reload the table metadata even if it is found
    in the cache.


*yii/db/Schema::getSchemaMetadata*			protected
>
 getSchemaMetadata($schema, $type, $refresh)
<
return (array) Array of metadata.

 Returns the metadata of the given type for all tables in the given schema.

 This method will call a ''getTable' . ucfirst($type)' named method with the
 table name and the refresh flag to obtain the metadata.

    [$schema] (string) The schema of the metadata. Defaults to empty string,
    meaning the current or default schema name.
    [$type] (string) Metadata type.
    [$refresh] (bool) Whether to fetch the latest available table metadata. If
    this is 'false', cached data may be returned if available.


*yii/db/Schema::setTableMetadata*				protected
>
 setTableMetadata($name, $type, $data)
<
return (void)

 Sets the metadata of the given type for the given table.

    [$name] (string) Table name.
    [$type] (string) Metadata type.
    [$data] (mixed) Metadata.


*yii/db/Schema::normalizePdoRowKeyCase*			protected
>
 normalizePdoRowKeyCase($row, $multiple)
<
return (array) Normalized row or rows.

 Changes row's array key case to lower if PDO's one is set to uppercase.

    [$row] (array) Row's array or an array of row's arrays.
    [$multiple] (bool) Whether multiple rows or a single row passed.



 vim:tw=78:ts=8:ft=help:norl:
