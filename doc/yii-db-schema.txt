
*yii/db/Schema*   >> |yii/base/Object|
===============

SUBCLASSES
------------------------------------------------------------------------------

|yii/db/sqlite/Schema|
|yii/db/mssql/Schema|
|yii/db/mysql/Schema|
|yii/db/pgsql/Schema|
|yii/db/oci/Schema|
|yii/db/cubrid/Schema|

DESCRIPTION
------------------------------------------------------------------------------

 Schema represents the database schema information that is DBMS specific.


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/Schema::$db*
 (\yii\db\Connection) The database connection

$defaultSchema				*yii/db/Schema::$defaultSchema*
 (string) The default schema name used for the current session.

$exceptionMap				*yii/db/Schema::$exceptionMap*
 (array) Map of DB errors and corresponding exceptions If left part is found
 in DB error message exception class from the right part is used.

$tableSchemas				*yii/db/Schema::$tableSchemas*
 (\yii\db\TableSchema[]) The metadata for all tables in the database. Each
 array element is an instance of 'TableSchema' or its child class.

$schemaNames				*yii/db/Schema::$schemaNames*
 (string[]) All schema names in the database, except system schemas.

$tableNames				*yii/db/Schema::$tableNames*
 (string[]) All table names in the database.

$queryBuilder				*yii/db/Schema::$queryBuilder*
 (\yii\db\QueryBuilder) The query builder for this connection.

$lastInsertID				*yii/db/Schema::$lastInsertID*
 (string) The row ID of the last row inserted, or the last value retrieved
 from the sequence object

$transactionIsolationLevel		*yii/db/Schema::$transactionIsolationLevel*
 (string) The transaction isolation level to use for this transaction. This
 can be one of 'Transaction::READ_UNCOMMITTED', 'Transaction::READ_COMMITTED',
 'Transaction::REPEATABLE_READ' and 'Transaction::SERIALIZABLE' but also a
 string containing DBMS specific syntax to be used after 'SET TRANSACTION
 ISOLATION LEVEL'.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/db/Schema::className*				public
 See |yii/base/Object::className|


*yii/db/Schema::__construct*				public
 See |yii/base/Object::__construct|


*yii/db/Schema::init*					public
 See |yii/base/Object::init|


*yii/db/Schema::__get*					public
 See |yii/base/Object::__get|


*yii/db/Schema::__set*					public
 See |yii/base/Object::__set|


*yii/db/Schema::__isset*					public
 See |yii/base/Object::__isset|


*yii/db/Schema::__unset*					public
 See |yii/base/Object::__unset|


*yii/db/Schema::__call*					public
 See |yii/base/Object::__call|


*yii/db/Schema::hasProperty*				public
 See |yii/base/Object::hasProperty|


*yii/db/Schema::canGetProperty*				public
 See |yii/base/Object::canGetProperty|


*yii/db/Schema::canSetProperty*				public
 See |yii/base/Object::canSetProperty|


*yii/db/Schema::hasMethod*				public
 See |yii/base/Object::hasMethod|


*yii/db/Schema::createColumnSchema*			protected
>
 createColumnSchema()
<
(\yii\db\ColumnSchema) 



*yii/db/Schema::loadTableSchema*				protected
>
 loadTableSchema($name)
<
(\yii\db\TableSchema) DBMS-dependent table metadata, null if the table does
not exist.

    [$name] (string) Table name


*yii/db/Schema::getTableSchema*				public
>
 getTableSchema($name, $refresh='false')
<
(\yii\db\TableSchema) Table metadata. Null if the named table does not exist.

    [$name] (string) Table name. The table name may contain schema name if
    any. Do not quote the table name.
    [$refresh] (boolean) Whether to reload the table schema even if it is
    found in the cache.


*yii/db/Schema::getCacheKey*				protected
>
 getCacheKey($name)
<
(mixed) The cache key

    [$name] (string) The table name


*yii/db/Schema::getCacheTag*				protected
>
 getCacheTag()
<
(string) The cache tag name

 This allows 'refresh()' to invalidate all cached table schemas.


*yii/db/Schema::getTableSchemas*				public
>
 getTableSchemas($schema='''', $refresh='false')
<
(\yii\db\TableSchema[]) The metadata for all tables in the database. Each
array element is an instance of 'TableSchema' or its child class.

    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema name.
    [$refresh] (boolean) Whether to fetch the latest available table schemas.
    If this is false, cached data may be returned if available.


*yii/db/Schema::getSchemaNames*				public
>
 getSchemaNames($refresh='false')
<
(string[]) All schema names in the database, except system schemas.

    [$refresh] (boolean) Whether to fetch the latest available schema names.
    If this is false, schema names fetched previously (if available) will be
    returned.


*yii/db/Schema::getTableNames*				public
>
 getTableNames($schema='''', $refresh='false')
<
(string[]) All table names in the database.

    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema name. If not empty, the returned
    table names will be prefixed with the schema name.
    [$refresh] (boolean) Whether to fetch the latest available table names. If
    this is false, table names fetched previously (if available) will be
    returned.


*yii/db/Schema::getQueryBuilder*				public
>
 getQueryBuilder()
<
(\yii\db\QueryBuilder) The query builder for this connection.



*yii/db/Schema::getPdoType*				public
>
 getPdoType($data)
<
(integer) The PDO type

    [$data] (mixed) The data whose PDO type is to be determined


*yii/db/Schema::refresh*					public
>
 refresh()
<
(void)

 This method cleans up all cached table schemas so that they can be re-created
 later to reflect the database schema change.


*yii/db/Schema::refreshTableSchema*			public
>
 refreshTableSchema($name)
<
(void)

 This method cleans up cached table schema so that it can be re-created later
 to reflect the database schema change.
    [$name] (string) Table name.


*yii/db/Schema::createQueryBuilder*			public
>
 createQueryBuilder()
<
(\yii\db\QueryBuilder) Query builder instance

 This method may be overridden by child classes to create a DBMS-specific
 query builder.


*yii/db/Schema::createColumnSchemaBuilder*		public
>
 createColumnSchemaBuilder($type, $length='null')
<
(\yii\db\ColumnSchemaBuilder) Column schema builder instance

 This method may be overridden by child classes to create a DBMS-specific
 column schema builder.
    [$type] (string) Type of the column. See 'ColumnSchemaBuilder::$type'.
    [$length] (integer|string|array) Length or precision of the column. See
    'ColumnSchemaBuilder::$length'.


*yii/db/Schema::findSchemaNames*				protected
>
 findSchemaNames()
<
(array) All schema names in the database, except system schemas

 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception.


*yii/db/Schema::findTableNames*				protected
>
 findTableNames($schema='''')
<
(array) All table names in the database. The names have NO schema name prefix.

 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception.
    [$schema] (string) The schema of the tables. Defaults to empty string,
    meaning the current or default schema.


*yii/db/Schema::findUniqueIndexes*			public
>
 findUniqueIndexes($table)
<
(array) All unique indexes for the given table.

 Each array element is of the following structure:

   [
    'IndexName1' => ['col1' [, ...]],
    'IndexName2' => ['col2' [, ...]],
   ]

 This method should be overridden by child classes in order to support this
 feature because the default implementation simply throws an exception
    [$table] (\yii\db\TableSchema) The table metadata


*yii/db/Schema::getLastInsertID*				public
>
 getLastInsertID($sequenceName='''')
<
(string) The row ID of the last row inserted, or the last value retrieved from
the sequence object

    [$sequenceName] (string) Name of the sequence object (required by some
    DBMS)


*yii/db/Schema::supportsSavepoint*			public
>
 supportsSavepoint()
<
(boolean) Whether this DBMS supports
[savepoint](http://en.wikipedia.org/wiki/Savepoint).



*yii/db/Schema::createSavepoint*				public
>
 createSavepoint($name)
<
(void)

    [$name] (string) The savepoint name


*yii/db/Schema::releaseSavepoint*				public
>
 releaseSavepoint($name)
<
(void)

    [$name] (string) The savepoint name


*yii/db/Schema::rollBackSavepoint*			public
>
 rollBackSavepoint($name)
<
(void)

    [$name] (string) The savepoint name


*yii/db/Schema::setTransactionIsolationLevel*		public
>
 setTransactionIsolationLevel($level)
<
(void)

    [$level] (string) The transaction isolation level to use for this
    transaction. This can be one of 'Transaction::READ_UNCOMMITTED',
    'Transaction::READ_COMMITTED', 'Transaction::REPEATABLE_READ' and
    'Transaction::SERIALIZABLE' but also a string containing DBMS specific
    syntax to be used after 'SET TRANSACTION ISOLATION LEVEL'.


*yii/db/Schema::insert*					public
>
 insert($table, $columns)
<
(array) Primary key values or false if the command fails

    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column data (name => value) to be inserted into the
    table.


*yii/db/Schema::quoteValue*				public
>
 quoteValue($str)
<
(string) The properly quoted string

 Note that if the parameter is not a string, it will be returned without
 change.
    [$str] (string) String to be quoted


*yii/db/Schema::quoteTableName*				public
>
 quoteTableName($name)
<
(string) The properly quoted table name

 If the table name contains schema prefix, the prefix will also be properly
 quoted. If the table name is already quoted or contains '(' or '{{', then
 this method will do nothing.
    [$name] (string) Table name


*yii/db/Schema::quoteColumnName*				public
>
 quoteColumnName($name)
<
(string) The properly quoted column name

 If the column name contains prefix, the prefix will also be properly quoted.
 If the column name is already quoted or contains '(', ''' or '{{', then this
 method will do nothing.
    [$name] (string) Column name


*yii/db/Schema::quoteSimpleTableName*			public
>
 quoteSimpleTableName($name)
<
(string) The properly quoted table name

 A simple table name should contain the table name only without any schema
 prefix. If the table name is already quoted, this method will do nothing.
    [$name] (string) Table name


*yii/db/Schema::quoteSimpleColumnName*			public
>
 quoteSimpleColumnName($name)
<
(string) The properly quoted column name

 A simple column name should contain the column name only without any prefix.
 If the column name is already quoted or is the asterisk character '*', this
 method will do nothing.
    [$name] (string) Column name


*yii/db/Schema::getRawTableName*				public
>
 getRawTableName($name)
<
(string) The real name of the given table name

 This method will strip off curly brackets from the given table name and
 replace the percentage character '%' with 'Connection::tablePrefix'.
    [$name] (string) The table name to be converted


*yii/db/Schema::getColumnPhpType*				protected
>
 getColumnPhpType($column)
<
(string) PHP type name

    [$column] (\yii\db\ColumnSchema) The column schema information


*yii/db/Schema::convertException*				public
>
 convertException($e, $rawSql)
<
(\yii\db\Exception) 

    [$e] (\Exception) 
    [$rawSql] (string) SQL that produced exception


*yii/db/Schema::isReadQuery*				public
>
 isReadQuery($sql)
<
(boolean) Whether a SQL statement is for read purpose.

    [$sql] (string) The SQL statement



 vim:tw=78:ts=8:ft=help:norl:
