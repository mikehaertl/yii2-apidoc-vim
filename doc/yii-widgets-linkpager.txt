
*yii/widgets/LinkPager*   >> |yii/base/Widget|
=======================

DESCRIPTION
------------------------------------------------------------------------------

 LinkPager works with a 'Pagination' object which specifies the totally number
 of pages and the current page number.

 Note that LinkPager only generates the necessary HTML markups. In order for
 it to look like a real pager, you should provide some CSS styles for it. With
 the default configuration, LinkPager should look good using Twitter Bootstrap
 CSS framework.


PROPERTY DETAILS
------------------------------------------------------------------------------

$counter				*yii/widgets/LinkPager::$counter*
 See |yii/base/Widget::$counter|

$autoIdPrefix				*yii/widgets/LinkPager::$autoIdPrefix*
 See |yii/base/Widget::$autoIdPrefix|

$stack					*yii/widgets/LinkPager::$stack*
 See |yii/base/Widget::$stack|

$pagination				*yii/widgets/LinkPager::$pagination*
 (\yii\data\Pagination) The pagination object that this pager is associated
 with. You must set this property in order to make LinkPager work.

$options				*yii/widgets/LinkPager::$options*
 (array) HTML attributes for the pager container tag.

$linkOptions				*yii/widgets/LinkPager::$linkOptions*
 (array) HTML attributes for the link in a pager container tag.

$firstPageCssClass			*yii/widgets/LinkPager::$firstPageCssClass*
 (string) The CSS class for the "first" page button.

$lastPageCssClass			*yii/widgets/LinkPager::$lastPageCssClass*
 (string) The CSS class for the "last" page button.

$prevPageCssClass			*yii/widgets/LinkPager::$prevPageCssClass*
 (string) The CSS class for the "previous" page button.

$nextPageCssClass			*yii/widgets/LinkPager::$nextPageCssClass*
 (string) The CSS class for the "next" page button.

$activePageCssClass			*yii/widgets/LinkPager::$activePageCssClass*
 (string) The CSS class for the active (currently selected) page button.

$disabledPageCssClass			*yii/widgets/LinkPager::$disabledPageCssClass*
 (string) The CSS class for the disabled page buttons.

$maxButtonCount				*yii/widgets/LinkPager::$maxButtonCount*
 (integer) Maximum number of page buttons that can be displayed. Defaults to
 10.

$nextPageLabel				*yii/widgets/LinkPager::$nextPageLabel*
 (string) The label for the "next" page button. Note that this will NOT be
 HTML-encoded. If this property is null, the "next" page button will not be
 displayed.

$prevPageLabel				*yii/widgets/LinkPager::$prevPageLabel*
 (string) The text label for the previous page button. Note that this will NOT
 be HTML-encoded. If this property is null, the "previous" page button will
 not be displayed.

$firstPageLabel				*yii/widgets/LinkPager::$firstPageLabel*
 (string) The text label for the "first" page button. Note that this will NOT
 be HTML-encoded. If this property is null, the "first" page button will not
 be displayed.

$lastPageLabel				*yii/widgets/LinkPager::$lastPageLabel*
 (string) The text label for the "last" page button. Note that this will NOT
 be HTML-encoded. If this property is null, the "last" page button will not be
 displayed.

$registerLinkTags			*yii/widgets/LinkPager::$registerLinkTags*
 (boolean) Whether to register link tags in the HTML header for prev, next,
 first and last page. Defaults to 'false' to avoid conflicts when multiple
 pagers are used on one page.

$hideOnSinglePage			*yii/widgets/LinkPager::$hideOnSinglePage*
 (boolean) Hide widget when only one page exist.

$behaviors				*yii/widgets/LinkPager::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$id					*yii/widgets/LinkPager::$id*
 (string) ID of the widget.

$view					*yii/widgets/LinkPager::$view*
 (\yii\web\View) The view object that can be used to render views or view
 files.

$viewPath				*yii/widgets/LinkPager::$viewPath*
 (string) The directory containing the view files for this widget.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/widgets/LinkPager::className*			public
 See |yii/base/Object::className|


*yii/widgets/LinkPager::__construct*			public
 See |yii/base/Object::__construct|


*yii/widgets/LinkPager::init*				public
>
 init()
<
(void)



*yii/widgets/LinkPager::__get*				public
 See |yii/base/Component::__get|


*yii/widgets/LinkPager::__set*				public
 See |yii/base/Component::__set|


*yii/widgets/LinkPager::__isset*				public
 See |yii/base/Component::__isset|


*yii/widgets/LinkPager::__unset*				public
 See |yii/base/Component::__unset|


*yii/widgets/LinkPager::__call*				public
 See |yii/base/Component::__call|


*yii/widgets/LinkPager::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/widgets/LinkPager::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/widgets/LinkPager::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/widgets/LinkPager::hasMethod*			public
 See |yii/base/Component::hasMethod|


*yii/widgets/LinkPager::__clone*				public
 See |yii/base/Component::__clone|


*yii/widgets/LinkPager::behaviors*			public
 See |yii/base/Component::behaviors|


*yii/widgets/LinkPager::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/widgets/LinkPager::on*				public
 See |yii/base/Component::on|


*yii/widgets/LinkPager::off*				public
 See |yii/base/Component::off|


*yii/widgets/LinkPager::trigger*				public
 See |yii/base/Component::trigger|


*yii/widgets/LinkPager::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/widgets/LinkPager::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/widgets/LinkPager::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/widgets/LinkPager::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/widgets/LinkPager::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/widgets/LinkPager::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/widgets/LinkPager::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/widgets/LinkPager::begin*				public
 See |yii/base/Widget::begin|


*yii/widgets/LinkPager::end*				public
 See |yii/base/Widget::end|


*yii/widgets/LinkPager::widget*				public
 See |yii/base/Widget::widget|


*yii/widgets/LinkPager::getId*				public
 See |yii/base/Widget::getId|


*yii/widgets/LinkPager::setId*				public
 See |yii/base/Widget::setId|


*yii/widgets/LinkPager::getView*				public
 See |yii/base/Widget::getView|


*yii/widgets/LinkPager::setView*				public
 See |yii/base/Widget::setView|


*yii/widgets/LinkPager::run*				public
>
 run()
<
(void)

 This overrides the parent implementation by displaying the generated page
 buttons.


*yii/widgets/LinkPager::render*				public
 See |yii/base/Widget::render|


*yii/widgets/LinkPager::renderFile*			public
 See |yii/base/Widget::renderFile|


*yii/widgets/LinkPager::getViewPath*			public
 See |yii/base/Widget::getViewPath|


*yii/widgets/LinkPager::registerLinkTags*			protected
>
 registerLinkTags()
<
(void)

 These links are generated using '\yii\data\Pagination::getLinks()'.


*yii/widgets/LinkPager::renderPageButtons*		protected
>
 renderPageButtons()
<
(string) The rendering result



*yii/widgets/LinkPager::renderPageButton*			protected
>
 renderPageButton($label, $page, $class, $disabled, $active)
<
(string) The rendering result

 You may override this method to customize the generation of page buttons.
    [$label] (string) The text label for the button
    [$page] (integer) The page number
    [$class] (string) The CSS class for the page button.
    [$disabled] (boolean) Whether this page button is disabled
    [$active] (boolean) Whether this page button is active


*yii/widgets/LinkPager::getPageRange*			protected
>
 getPageRange()
<
(array) The begin and end pages that need to be displayed.




 vim:tw=78:ts=8:ft=help:norl:
