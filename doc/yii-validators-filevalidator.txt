
*yii/validators/FileValidator*   >> |yii/validators/Validator|
==============================

SUBCLASSES
------------------------------------------------------------------------------

|yii/validators/ImageValidator|

DESCRIPTION
------------------------------------------------------------------------------

 Note that you should enable 'fileinfo' PHP extension.


PROPERTY DETAILS
------------------------------------------------------------------------------

$builtInValidators			*yii/validators/FileValidator::$builtInValidators*

 See |yii/validators/Validator::$builtInValidators|

$attributes				*yii/validators/FileValidator::$attributes*

 See |yii/validators/Validator::$attributes|

$message				*yii/validators/FileValidator::$message*

 (string) The error message used when a file is not uploaded correctly.

$on					*yii/validators/FileValidator::$on*

 See |yii/validators/Validator::$on|

$except					*yii/validators/FileValidator::$except*

 See |yii/validators/Validator::$except|

$skipOnError				*yii/validators/FileValidator::$skipOnError*

 See |yii/validators/Validator::$skipOnError|

$skipOnEmpty				*yii/validators/FileValidator::$skipOnEmpty*

 See |yii/validators/Validator::$skipOnEmpty|

$enableClientValidation			*yii/validators/FileValidator::$enableClientValidation*

 See |yii/validators/Validator::$enableClientValidation|

$isEmpty				*yii/validators/FileValidator::$isEmpty*

 See |yii/validators/Validator::$isEmpty|

$when					*yii/validators/FileValidator::$when*

 See |yii/validators/Validator::$when|

$whenClient				*yii/validators/FileValidator::$whenClient*

 See |yii/validators/Validator::$whenClient|

$extensions				*yii/validators/FileValidator::$extensions*

 (array|string) A list of file name extensions that are allowed to be
 uploaded. This can be either an array or a string consisting of file
 extension names separated by space or comma (e.g. "gif, jpg"). Extension
 names are case-insensitive. Defaults to null, meaning all file name
 extensions are allowed.

$checkExtensionByMimeType		*yii/validators/FileValidator::$checkExtensionByMimeType*

 (bool) Whether to check file type (extension) with mime-type. If extension
 produced by file mime-type check differs from uploaded file extension, the
 file will be considered as invalid.

$mimeTypes				*yii/validators/FileValidator::$mimeTypes*

 (array|string) A list of file MIME types that are allowed to be uploaded.
 This can be either an array or a string consisting of file MIME types
 separated by space or comma (e.g. "text/plain, image/png"). The mask with the
 special character '*' can be used to match groups of mime types. For example
 'image/*' will pass all mime types, that begin with 'image/' (e.g.
 'image/jpeg', 'image/png'). Mime type names are case-insensitive. Defaults to
 null, meaning all MIME types are allowed.

$minSize				*yii/validators/FileValidator::$minSize*

 (int) The minimum number of bytes required for the uploaded file. Defaults to
 null, meaning no limit.

$maxSize				*yii/validators/FileValidator::$maxSize*

 (int) The maximum number of bytes required for the uploaded file. Defaults to
 null, meaning no limit. Note, the size limit is also affected by
 'upload_max_filesize' and 'post_max_size' INI setting and the 'MAX_FILE_SIZE'
 hidden field value. See 'getSizeLimit()' for details.

$maxFiles				*yii/validators/FileValidator::$maxFiles*

 (int) The maximum file count the given attribute can hold. Defaults to 1,
 meaning single file upload. By defining a higher number, multiple uploads
 become possible. Setting it to '0' means there is no limit on the number of
 files that can be uploaded simultaneously.

 > Note: The maximum number of files allowed to be uploaded simultaneously is
 also limited with PHP directive 'max_file_uploads', which defaults to 20.

$minFiles				*yii/validators/FileValidator::$minFiles*

 (int) The minimum file count the given attribute can hold. Defaults to 0.
 Higher value means at least that number of files should be uploaded.

$uploadRequired				*yii/validators/FileValidator::$uploadRequired*

 (string) The error message used when no file is uploaded. Note that this is
 the text of the validation error message. To make uploading files required,
 you have to set 'skipOnEmpty' to 'false'.

$tooBig					*yii/validators/FileValidator::$tooBig*

 (string) The error message used when the uploaded file is too large. You may
 use the following tokens in the message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {limit}: the maximum size allowed (see 'getSizeLimit()') 
   - {formattedLimit}: the maximum size formatted   with
 '\yii\i18n\Formatter::asShortSize()|Formatter::asShortSize()'

$tooSmall				*yii/validators/FileValidator::$tooSmall*

 (string) The error message used when the uploaded file is too small. You may
 use the following tokens in the message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {limit}: the value of 'minSize' 
   - {formattedLimit}: the value of 'minSize' formatted   with
 '\yii\i18n\Formatter::asShortSize()|Formatter::asShortSize()]

$tooMany				*yii/validators/FileValidator::$tooMany*

 (string) The error message used if the count of multiple uploads exceeds
 limit. You may use the following tokens in the message:


   - {attribute}: the attribute name 
   - {limit}: the value of 'maxFiles'

$tooFew					*yii/validators/FileValidator::$tooFew*

 (string) The error message used if the count of multiple uploads less that
 minFiles. You may use the following tokens in the message:


   - {attribute}: the attribute name 
   - {limit}: the value of 'minFiles'

$wrongExtension				*yii/validators/FileValidator::$wrongExtension*

 (string) The error message used when the uploaded file has an extension name
 that is not listed in 'extensions'. You may use the following tokens in the
 message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {extensions}: the list of the allowed extensions.

$wrongMimeType				*yii/validators/FileValidator::$wrongMimeType*

 (string) The error message used when the file has an mime type that is not
 allowed by 'mimeTypes' property. You may use the following tokens in the
 message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {mimeTypes}: the value of 'mimeTypes'



METHOD DETAILS
------------------------------------------------------------------------------


*yii/validators/FileValidator::className*			public

 See |yii/base/BaseObject::className|


*yii/validators/FileValidator::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/validators/FileValidator::init*			public
>
 init()
<
return (void)

 {@inheritdoc}


*yii/validators/FileValidator::__get*			public

 See |yii/base/Component::__get|


*yii/validators/FileValidator::__set*			public

 See |yii/base/Component::__set|


*yii/validators/FileValidator::__isset*			public

 See |yii/base/Component::__isset|


*yii/validators/FileValidator::__unset*			public

 See |yii/base/Component::__unset|


*yii/validators/FileValidator::__call*			public

 See |yii/base/Component::__call|


*yii/validators/FileValidator::hasProperty*		public

 See |yii/base/Component::hasProperty|


*yii/validators/FileValidator::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/validators/FileValidator::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/validators/FileValidator::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/validators/FileValidator::__clone*			public

 See |yii/base/Component::__clone|


*yii/validators/FileValidator::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/validators/FileValidator::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/validators/FileValidator::on*			public

 See |yii/base/Component::on|


*yii/validators/FileValidator::off*			public

 See |yii/base/Component::off|


*yii/validators/FileValidator::trigger*			public

 See |yii/base/Component::trigger|


*yii/validators/FileValidator::getBehavior*		public

 See |yii/base/Component::getBehavior|


*yii/validators/FileValidator::getBehaviors*		public

 See |yii/base/Component::getBehaviors|


*yii/validators/FileValidator::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/validators/FileValidator::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/validators/FileValidator::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/validators/FileValidator::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/validators/FileValidator::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/validators/FileValidator::createValidator*		public

 See |yii/validators/Validator::createValidator|


*yii/validators/FileValidator::validateAttributes*	public

 See |yii/validators/Validator::validateAttributes|


*yii/validators/FileValidator::validateAttribute*		public
>
 validateAttribute($model, $attribute)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 


*yii/validators/FileValidator::validate*			public

 See |yii/validators/Validator::validate|


*yii/validators/FileValidator::validateValue*		protected
>
 validateValue($value)
<
return (void)

 {@inheritdoc}

    [$value] () 


*yii/validators/FileValidator::clientValidateAttribute*	public
>
 clientValidateAttribute($model, $attribute, $view)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 
    [$view] () 


*yii/validators/FileValidator::getClientOptions*		public
>
 getClientOptions($model, $attribute)
<
return (void)

 {@inheritdoc}

    [$model] () 
    [$attribute] () 


*yii/validators/FileValidator::isActive*			public

 See |yii/validators/Validator::isActive|


*yii/validators/FileValidator::addError*			public

 See |yii/validators/Validator::addError|


*yii/validators/FileValidator::isEmpty*			public
>
 isEmpty($value, $trim='false')
<
return (void)

 {@inheritdoc}

    [$value] () 
    [$trim] (bool) 


*yii/validators/FileValidator::formatMessage*		protected

 See |yii/validators/Validator::formatMessage|


*yii/validators/FileValidator::getAttributeNames*		public

 See |yii/validators/Validator::getAttributeNames|


*yii/validators/FileValidator::getSizeLimit*		public
>
 getSizeLimit()
<
return (int) The size limit for uploaded files.

 Returns the maximum size allowed for uploaded files.

 This is determined based on four factors:


   - 'upload_max_filesize' in php.ini 
   - 'post_max_size' in php.ini 
   - 'MAX_FILE_SIZE' hidden field 
   - 'maxSize'


*yii/validators/FileValidator::validateExtension*		protected
>
 validateExtension($file)
<
return (bool) 

 Checks if given uploaded file have correct type (extension) according current
 validator settings.

    [$file] (\yii\web\UploadedFile) 


*yii/validators/FileValidator::validateMimeType*		protected
>
 validateMimeType($file)
<
return (bool) Whether the $file mimeType is allowed

 Checks the mimeType of the $file against the list in the 'mimeTypes'
 property.

    [$file] (\yii\web\UploadedFile) 



 vim:tw=78:ts=8:ft=help:norl:
