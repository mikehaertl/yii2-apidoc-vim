
*yii/validators/FileValidator*   >> |yii/validators/Validator|
==============================

SUBCLASSES
------------------------------------------------------------------------------

|yii/validators/ImageValidator|

DESCRIPTION
------------------------------------------------------------------------------

 Note that you should enable 'fileinfo' PHP extension.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/validators/Validator::$builtInValidators|
 |yii/validators/Validator::$attributes|
 |yii/validators/Validator::$on|
 |yii/validators/Validator::$except|
 |yii/validators/Validator::$skipOnError|
 |yii/validators/Validator::$skipOnEmpty|
 |yii/validators/Validator::$enableClientValidation|
 |yii/validators/Validator::$isEmpty|
 |yii/validators/Validator::$when|
 |yii/validators/Validator::$whenClient|
 |yii/base/Component::$behaviors|
 |yii/validators/Validator::$validationAttributes|
 |yii/validators/Validator::$attributeNames|


$message				*yii/validators/FileValidator::$message*

 (string) The error message used when a file is not uploaded correctly.

$extensions				*yii/validators/FileValidator::$extensions*

 (array|string) A list of file name extensions that are allowed to be
 uploaded. This can be either an array or a string consisting of file
 extension names separated by space or comma (e.g. "gif, jpg"). Extension
 names are case-insensitive. Defaults to null, meaning all file name
 extensions are allowed.

$checkExtensionByMimeType		*yii/validators/FileValidator::$checkExtensionByMimeType*

 (bool) Whether to check file type (extension) with mime-type. If extension
 produced by file mime-type check differs from uploaded file extension, the
 file will be considered as invalid.

$mimeTypes				*yii/validators/FileValidator::$mimeTypes*

 (array|string) A list of file MIME types that are allowed to be uploaded.
 This can be either an array or a string consisting of file MIME types
 separated by space or comma (e.g. "text/plain, image/png"). The mask with the
 special character '*' can be used to match groups of mime types. For example
 'image/*' will pass all mime types, that begin with 'image/' (e.g.
 'image/jpeg', 'image/png'). Mime type names are case-insensitive. Defaults to
 null, meaning all MIME types are allowed.

$minSize				*yii/validators/FileValidator::$minSize*

 (int) The minimum number of bytes required for the uploaded file. Defaults to
 null, meaning no limit.

$maxSize				*yii/validators/FileValidator::$maxSize*

 (int) The maximum number of bytes required for the uploaded file. Defaults to
 null, meaning no limit. Note, the size limit is also affected by
 'upload_max_filesize' and 'post_max_size' INI setting and the 'MAX_FILE_SIZE'
 hidden field value. See 'getSizeLimit()' for details.

$maxFiles				*yii/validators/FileValidator::$maxFiles*

 (int) The maximum file count the given attribute can hold. Defaults to 1,
 meaning single file upload. By defining a higher number, multiple uploads
 become possible. Setting it to '0' means there is no limit on the number of
 files that can be uploaded simultaneously.

 > Note: The maximum number of files allowed to be uploaded simultaneously is
 also limited with PHP directive 'max_file_uploads', which defaults to 20.

$minFiles				*yii/validators/FileValidator::$minFiles*

 (int) The minimum file count the given attribute can hold. Defaults to 0.
 Higher value means at least that number of files should be uploaded.

$uploadRequired				*yii/validators/FileValidator::$uploadRequired*

 (string) The error message used when no file is uploaded. Note that this is
 the text of the validation error message. To make uploading files required,
 you have to set 'skipOnEmpty' to 'false'.

$tooBig					*yii/validators/FileValidator::$tooBig*

 (string) The error message used when the uploaded file is too large. You may
 use the following tokens in the message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {limit}: the maximum size allowed (see 'getSizeLimit()') 
   - {formattedLimit}: the maximum size formatted   with
 '\yii\i18n\Formatter::asShortSize()|Formatter::asShortSize()'

$tooSmall				*yii/validators/FileValidator::$tooSmall*

 (string) The error message used when the uploaded file is too small. You may
 use the following tokens in the message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {limit}: the value of 'minSize' 
   - {formattedLimit}: the value of 'minSize' formatted   with
 '\yii\i18n\Formatter::asShortSize()|Formatter::asShortSize()]

$tooMany				*yii/validators/FileValidator::$tooMany*

 (string) The error message used if the count of multiple uploads exceeds
 limit. You may use the following tokens in the message:


   - {attribute}: the attribute name 
   - {limit}: the value of 'maxFiles'

$tooFew					*yii/validators/FileValidator::$tooFew*

 (string) The error message used if the count of multiple uploads less that
 minFiles. You may use the following tokens in the message:


   - {attribute}: the attribute name 
   - {limit}: the value of 'minFiles'

$wrongExtension				*yii/validators/FileValidator::$wrongExtension*

 (string) The error message used when the uploaded file has an extension name
 that is not listed in 'extensions'. You may use the following tokens in the
 message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {extensions}: the list of the allowed extensions.

$wrongMimeType				*yii/validators/FileValidator::$wrongMimeType*

 (string) The error message used when the file has an mime type that is not
 allowed by 'mimeTypes' property. You may use the following tokens in the
 message:


   - {attribute}: the attribute name 
   - {file}: the uploaded file name 
   - {mimeTypes}: the value of 'mimeTypes'

$sizeLimit				*yii/validators/FileValidator::$sizeLimit*

 (int) The size limit for uploaded files.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/validators/Validator::createValidator|
 |yii/validators/Validator::validateAttributes|
 |yii/validators/Validator::getValidationAttributes|
 |yii/validators/Validator::validate|
 |yii/validators/Validator::isActive|
 |yii/validators/Validator::addError|
 |yii/validators/Validator::formatMessage|
 |yii/validators/Validator::getAttributeNames|


*yii/validators/FileValidator::init*			public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/validators/FileValidator::validateAttribute*		public
>
 validateAttribute($model, $attribute)
<
return (void)

 Validates a single attribute.



 Child classes must implement this method to provide the actual validation
 logic.



    [$model] (\yii\base\Model) The data model to be validated
    [$attribute] (string) The name of the attribute to be validated.


*yii/validators/FileValidator::validateValue*		protected
>
 validateValue($value)
<
return (array|null) The error message and the array of parameters to be inserted into
the error message.

  if (!$valid) {
      return [$this->message, [
          'param1' => $this->param1,
          'formattedLimit' =>
Yii::$app->formatter->asShortSize($this->getSizeLimit()),
          'mimeTypes' => implode(', ', $this->mimeTypes),
          'param4' => 'etc...',
      ]];
  }

  return null;

for this example 'message' template can contain '{param1}',
'{formattedLimit}', '{mimeTypes}', '{param4}'

Null should be returned if the data is valid.

 Validates a value.



 A validator class can implement this method to support data validation out of
 the context of a data model.



    [$value] (mixed) The data value to be validated.


*yii/validators/FileValidator::clientValidateAttribute*	public
>
 clientValidateAttribute($model, $attribute, $view)
<
return (string|null) The client-side validation script. Null if the validator does
not support client-side validation.

 Returns the JavaScript needed for performing client-side validation.



 Calls 'getClientOptions()' to generate options array for client-side
 validation.

 You may override this method to return the JavaScript validation code if the
 validator can support client-side validation.

 The following JavaScript variables are predefined and can be used in the
 validation code:


   - 'attribute': an object describing the the attribute being
   validated. 
   - 'value': the value being validated. 
   - 'messages': an array used to hold the validation error messages
   for the attribute. 
   - 'deferred': an array used to hold deferred objects for
   asynchronous validation 
   - '$form': a jQuery object containing the form element

 The 'attribute' object contains the following properties: 
   - 'id': a unique ID identifying the attribute (e.g.
   "loginform-username") in the form 
   - 'name': attribute name or expression (e.g. "[0]content" for
   tabular input) 
   - 'container': the jQuery selector of the container of the input
   field 
   - 'input': the jQuery selector of the input field under the context
   of the form 
   - 'error': the jQuery selector of the error tag under the context of
   the container 
   - 'status': status of the input field, 0: empty, not entered before,
   1: validated, 2: pending validation, 3: validating



    [$model] (\yii\base\Model) The data model being validated
    [$attribute] (string) The name of the attribute to be validated.
    [$view] (\yii\web\View) The view object that is going to be used to render
    views or view files containing a model form with this validator applied.


*yii/validators/FileValidator::getClientOptions*		public
>
 getClientOptions($model, $attribute)
<
return (array) The client-side validation options

 Returns the client-side validation options.



 This method is usually called from 'clientValidateAttribute()'. You may
 override this method to modify options that will be passed to the client-side
 validation.



    [$model] (\yii\base\Model) The model being validated
    [$attribute] (string) The attribute name being validated


*yii/validators/FileValidator::isEmpty*			public
>
 isEmpty($value, $trim='false')
<
return (bool) Whether the value is empty

 Checks if the given value is empty.



 A value is considered empty if it is null, an empty array, or an empty
 string. Note that this method is different from PHP empty(). It will return
 false when the value is 0.



    [$value] (mixed) The value to be checked
    [$trim] (bool) 


*yii/validators/FileValidator::getSizeLimit*		public
>
 getSizeLimit()
<
return (int) The size limit for uploaded files.

 Returns the maximum size allowed for uploaded files.

 This is determined based on four factors:


   - 'upload_max_filesize' in php.ini 
   - 'post_max_size' in php.ini 
   - 'MAX_FILE_SIZE' hidden field 
   - 'maxSize'


*yii/validators/FileValidator::validateExtension*		protected
>
 validateExtension($file)
<
return (bool) 

 Checks if given uploaded file have correct type (extension) according current
 validator settings.

    [$file] (\yii\web\UploadedFile) 


*yii/validators/FileValidator::validateMimeType*		protected
>
 validateMimeType($file)
<
return (bool) Whether the $file mimeType is allowed

 Checks the mimeType of the $file against the list in the 'mimeTypes'
 property.

    [$file] (\yii\web\UploadedFile) 


*yii/validators/FileValidator::getMimeTypeByFile*		protected
>
 getMimeTypeByFile($filePath)
<
return (string) 

 Get MIME type by file path

    [$filePath] (string) 



 vim:tw=78:ts=8:ft=help:norl:
