
*yii/sphinx/Query*   >> |yii/db/Query|
==================

SUBCLASSES
------------------------------------------------------------------------------

|yii/sphinx/ActiveQuery|

DESCRIPTION
------------------------------------------------------------------------------

 Query provides a set of methods to facilitate the specification of different
 clauses in a SELECT statement. These methods can be chained together.

 By calling 'createCommand()', we can get a 'Command' instance which can be
 further used to perform/execute the Sphinx query.

 For example,

   $query = new Query();
   $query->select('id, group_id')
       ->from('idx_item')
       ->limit(10);
   // build and execute the query
   $command = $query->createCommand();
   // $command->sql returns the actual SQL
   $rows = $command->queryAll();

 Since Sphinx does not store the original indexed text, the snippets for the
 rows in query result should be build separately via another query. You can
 simplify this workflow using 'snippetCallback'.

 Warning: even if you do not set any query limit, implicit LIMIT 0,20 is
 present by default!


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/QueryTrait::$where|
 |yii/db/QueryTrait::$limit|
 |yii/db/QueryTrait::$offset|
 |yii/db/QueryTrait::$orderBy|
 |yii/db/QueryTrait::$indexBy|
 |yii/db/QueryTrait::$emulateExecution|
 |yii/db/Query::$select|
 |yii/db/Query::$selectOption|
 |yii/db/Query::$distinct|
 |yii/db/Query::$from|
 |yii/db/Query::$groupBy|
 |yii/db/Query::$join|
 |yii/db/Query::$having|
 |yii/db/Query::$union|
 |yii/db/Query::$params|
 |yii/db/Query::$queryCacheDuration|
 |yii/db/Query::$queryCacheDependency|
 |yii/base/Component::$behaviors|


$match					*yii/sphinx/Query::$match*

 (string|\yii\db\Expression) Text, which should be searched in fulltext mode.
 This value will be composed into MATCH operator inside the WHERE clause.
 Note: this value will be processed by 'Connection::escapeMatchValue()', if
 you need to compose complex match condition use 'Expression', see 'match()'
 for details.

$within					*yii/sphinx/Query::$within*

 (string) WITHIN GROUP ORDER BY clause. This is a Sphinx specific extension
 that lets you control how the best row within a group will to be selected.
 The possible value matches the 'orderBy' one.

$options				*yii/sphinx/Query::$options*

 (array) Per-query options in format: optionName => optionValue They will
 compose OPTION clause. This is a Sphinx specific extension that lets you
 control a number of per-query options.

$snippetCallback			*yii/sphinx/Query::$snippetCallback*

 (callable) PHP callback, which should be used to fetch source data for the
 snippets. Such callback will receive array of query result rows as an
 argument and must return the array of snippet source strings in the order,
 which match one of incoming rows. For example:

   $query = new Query();
   $query->from('idx_item')
       ->match('pencil')
       ->snippetCallback(function ($rows) {
           $result = [];
           foreach ($rows as $row) {
               $result[] = file_get_contents('/path/to/index/files/' .
 $row['id'] . '.txt');
           }
           return $result;
       })
       ->all();



$snippetOptions				*yii/sphinx/Query::$snippetOptions*

 (array) Query options for the call snippet.

$facets					*yii/sphinx/Query::$facets*

 (array) Facet search specifications. For example:

   [
       'group_id',
       'brand_id' => [
           'order' => ['COUNT(*)' => SORT_ASC],
       ],
       'price' => [
           'select' => 'INTERVAL(price,200,400,600,800) AS price',
           'order' => ['FACET()' => SORT_ASC],
       ],
       'name_in_json' => [
           'select' => [new Expression('json_attr.name AS name_in_json')],
       ],
   ]

 You need to use 'search()' method in order to fetch facet results.

 Note: if you specify custom select for the facet, ensure facet name has
 corresponding column inside it.

$showMeta				*yii/sphinx/Query::$showMeta*

 (bool|string|\yii\db\Expression) Whether to automatically perform 'SHOW META'
 query against main one. You may set this value to be string or 'Expression'
 instance, in this case its value will be used as 'LIKE' condition for 'SHOW
 META' statement. You need to use 'search()' method in order to fetch 'meta'
 results.

$groupLimit				*yii/sphinx/Query::$groupLimit*

 (int) Groups limit: to return (no more than) N top matches for each group.
 This option will take effect only if 'groupBy' is set.

$tablesUsedInFrom			*yii/sphinx/Query::$tablesUsedInFrom*

 (string[]) Table names indexed by aliases

$connection				*yii/sphinx/Query::$connection*

 (\yii\sphinx\Connection) Sphinx connection instance



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/db/QueryTrait::indexBy|
 |yii/db/QueryTrait::where|
 |yii/db/QueryTrait::andWhere|
 |yii/db/QueryTrait::orWhere|
 |yii/db/QueryTrait::filterWhere|
 |yii/db/QueryTrait::andFilterWhere|
 |yii/db/QueryTrait::orFilterWhere|
 |yii/db/QueryTrait::filterCondition|
 |yii/db/QueryTrait::isEmpty|
 |yii/db/QueryTrait::orderBy|
 |yii/db/QueryTrait::addOrderBy|
 |yii/db/QueryTrait::normalizeOrderBy|
 |yii/db/QueryTrait::limit|
 |yii/db/QueryTrait::offset|
 |yii/db/QueryTrait::emulateExecution|
 |yii/db/Query::prepare|
 |yii/db/Query::batch|
 |yii/db/Query::each|
 |yii/db/Query::all|
 |yii/db/Query::scalar|
 |yii/db/Query::column|
 |yii/db/Query::count|
 |yii/db/Query::sum|
 |yii/db/Query::average|
 |yii/db/Query::min|
 |yii/db/Query::max|
 |yii/db/Query::exists|
 |yii/db/Query::cleanUpTableNames|
 |yii/db/Query::select|
 |yii/db/Query::addSelect|
 |yii/db/Query::normalizeSelect|
 |yii/db/Query::getUniqueColumns|
 |yii/db/Query::getUnaliasedColumnsFromSelect|
 |yii/db/Query::distinct|
 |yii/db/Query::from|
 |yii/db/Query::andFilterCompare|
 |yii/db/Query::groupBy|
 |yii/db/Query::addGroupBy|
 |yii/db/Query::having|
 |yii/db/Query::andHaving|
 |yii/db/Query::orHaving|
 |yii/db/Query::filterHaving|
 |yii/db/Query::andFilterHaving|
 |yii/db/Query::orFilterHaving|
 |yii/db/Query::union|
 |yii/db/Query::params|
 |yii/db/Query::addParams|
 |yii/db/Query::cache|
 |yii/db/Query::noCache|
 |yii/db/Query::setCommandCache|
 |yii/db/Query::__toString|


*yii/sphinx/Query::createCommand*				public
>
 createCommand($db='null')
<
return (\yii\sphinx\Command) The created Sphinx command instance.

 Creates a Sphinx command that can be used to execute this query.

    [$db] (\yii\sphinx\Connection) The Sphinx connection used to generate the
    SQL statement. If this parameter is not given, the 'sphinx' application
    component will be used.


*yii/sphinx/Query::populate*				public
>
 populate($rows)
<
return (array) The converted query result

 Converts the raw query results into the format as specified by this query.



 This method is internally used to convert the data fetched from database into
 the format as required by this query.



    [$rows] (array) The raw query result from database


*yii/sphinx/Query::one*					public
>
 one($db='null')
<
return (array|bool) The first row (in terms of an array) of the query result. False
is returned if the query results in nothing.

 Executes the query and returns a single row of result.







    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/sphinx/Query::queryScalar*				protected
>
 queryScalar($selectExpression, $db)
<
return (bool|string) 

 Queries a scalar value by setting 'select' first.



 Restores the value of select to make this query reusable.



    [$selectExpression] (string|\yii\db\ExpressionInterface) 
    [$db] (\yii\db\Connection|null) 


*yii/sphinx/Query::getTablesUsedInFrom*			public
>
 getTablesUsedInFrom()
<
return (string[]) Table names indexed by aliases

 Returns table names used in 'from' indexed by aliases.



 Both aliases and names are enclosed into {{ and }}.




*yii/sphinx/Query::join*					public
>
 join($type, $table, $on='\'\'', $params='[]')
<
return ($this) The query object itself

 Appends a JOIN part to the query.



 The first parameter specifies what type of join it is.



    [$type] (string) The type of join, such as INNER JOIN, LEFT JOIN.
    [$table] (string|array) The table to be joined.

    Use a string to represent the name of the table to be joined. The table
    name can contain a schema prefix (e.g. 'public.user') and/or table alias
    (e.g. 'user u'). The method will automatically quote the table name unless
    it contains some parenthesis (which means the table is given as a
    sub-query or DB expression).

    Use an array to represent joining with a sub-query. The array must contain
    only one element. The value must be a 'Query' object representing the
    sub-query while the corresponding key represents the alias for the
    sub-query.
    [$on] (string|array) The join condition that should appear in the ON part.
    Please refer to 'where()' on how to specify this parameter.

    Note that the array format of 'where()' is designed to match columns to
    values instead of columns to columns, so the following would **not** work
    as expected: '['post.author_id' => 'user.id']', it would match the
    'post.author_id' column value against the string ''user.id''. It is
    recommended to use the string syntax here which is more suited for a join:

      'post.author_id = user.id'


    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/sphinx/Query::innerJoin*				public
>
 innerJoin($table, $on='\'\'', $params='[]')
<
return ($this) The query object itself

 Appends an INNER JOIN part to the query.







    [$table] (string|array) The table to be joined.

    Use a string to represent the name of the table to be joined. The table
    name can contain a schema prefix (e.g. 'public.user') and/or table alias
    (e.g. 'user u'). The method will automatically quote the table name unless
    it contains some parenthesis (which means the table is given as a
    sub-query or DB expression).

    Use an array to represent joining with a sub-query. The array must contain
    only one element. The value must be a 'Query' object representing the
    sub-query while the corresponding key represents the alias for the
    sub-query.
    [$on] (string|array) The join condition that should appear in the ON part.
    Please refer to 'join()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/sphinx/Query::leftJoin*				public
>
 leftJoin($table, $on='\'\'', $params='[]')
<
return ($this) The query object itself

 Appends a LEFT OUTER JOIN part to the query.







    [$table] (string|array) The table to be joined.

    Use a string to represent the name of the table to be joined. The table
    name can contain a schema prefix (e.g. 'public.user') and/or table alias
    (e.g. 'user u'). The method will automatically quote the table name unless
    it contains some parenthesis (which means the table is given as a
    sub-query or DB expression).

    Use an array to represent joining with a sub-query. The array must contain
    only one element. The value must be a 'Query' object representing the
    sub-query while the corresponding key represents the alias for the
    sub-query.
    [$on] (string|array) The join condition that should appear in the ON part.
    Please refer to 'join()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query


*yii/sphinx/Query::rightJoin*				public
>
 rightJoin($table, $on='\'\'', $params='[]')
<
return ($this) The query object itself

 Appends a RIGHT OUTER JOIN part to the query.







    [$table] (string|array) The table to be joined.

    Use a string to represent the name of the table to be joined. The table
    name can contain a schema prefix (e.g. 'public.user') and/or table alias
    (e.g. 'user u'). The method will automatically quote the table name unless
    it contains some parenthesis (which means the table is given as a
    sub-query or DB expression).

    Use an array to represent joining with a sub-query. The array must contain
    only one element. The value must be a 'Query' object representing the
    sub-query while the corresponding key represents the alias for the
    sub-query.
    [$on] (string|array) The join condition that should appear in the ON part.
    Please refer to 'join()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query


*yii/sphinx/Query::create*				public
>
 create($from)
<
return (\yii\sphinx\Query) The new Query object

 Creates a new Query object and copies its property values from an existing
 one.

 The properties being copies are the ones to be used by query builders.

    [$from] (\yii\sphinx\Query) The source query object


*yii/sphinx/Query::setConnection*				public
>
 setConnection($connection)
<
return ($this) The query object itself

    [$connection] (\yii\sphinx\Connection) Sphinx connection instance


*yii/sphinx/Query::getConnection*				public
>
 getConnection()
<
return (\yii\sphinx\Connection) Sphinx connection instance



*yii/sphinx/Query::defaultConnection*			protected
>
 defaultConnection()
<
return (\yii\sphinx\Connection) Default connection value.



*yii/sphinx/Query::search*				public
>
 search($db='null')
<
return (array) The query results.

 Executes the query and returns the complete search result including e.g.
 hits, facets.

    [$db] (\yii\sphinx\Connection) The Sphinx connection used to generate the
    SQL statement.


*yii/sphinx/Query::match*					public
>
 match($query)
<
return ($this) The query object itself.

 Sets the fulltext query text. This text will be composed into MATCH operator
 inside the WHERE clause.

 Note: this value will be processed by 'Connection::escapeMatchValue()', if
 you need to compose complex match condition use 'Expression':

   $query = new Query();
   $query->from('my_index')
       ->match(new Expression(':match', ['match' => '@(content) ' .
 Yii::$app->sphinx->escapeMatchValue($matchValue)]))
       ->all();



    [$query] (string|\yii\db\Expression|\yii\sphinx\MatchExpression) Fulltext
    query text.


*yii/sphinx/Query::options*				public
>
 options($options)
<
return ($this) The query object itself

 Sets the query options.

    [$options] (array) Query options in format: optionName => optionValue


*yii/sphinx/Query::addOptions*				public
>
 addOptions($options)
<
return ($this) The query object itself

 Adds additional query options.

    [$options] (array) Query options in format: optionName => optionValue


*yii/sphinx/Query::within*				public
>
 within($columns)
<
return ($this) The query object itself

 Sets the WITHIN GROUP ORDER BY part of the query.

    [$columns] (string|array) The columns (and the directions) to find best
    row within a group. Columns can be specified in either a string (e.g. "id
    ASC, name DESC") or an array (e.g. '['id' => Query::SORT_ASC, 'name' =>
    Query::SORT_DESC]'). The method will automatically quote the column names
    unless a column contains some parenthesis (which means the column contains
    a DB expression).


*yii/sphinx/Query::addWithin*				public
>
 addWithin($columns)
<
return ($this) The query object itself

 Adds additional WITHIN GROUP ORDER BY columns to the query.

    [$columns] (string|array) The columns (and the directions) to find best
    row within a group. Columns can be specified in either a string (e.g. "id
    ASC, name DESC") or an array (e.g. '['id' => Query::SORT_ASC, 'name' =>
    Query::SORT_DESC]'). The method will automatically quote the column names
    unless a column contains some parenthesis (which means the column contains
    a DB expression).


*yii/sphinx/Query::groupLimit*				public
>
 groupLimit($limit)
<
return ($this) The query object itself.

 Sets groups limit: to return (no more than) N top matches for each group.

 This option will take effect only if 'groupBy' is set.

    [$limit] (int) Group limit.


*yii/sphinx/Query::facets*				public
>
 facets($facets)
<
return ($this) The query object itself

 Sets FACET part of the query.

    [$facets] (array) Facet specifications.


*yii/sphinx/Query::addFacets*				public
>
 addFacets($facets)
<
return ($this) The query object itself

 Adds additional FACET part of the query.

    [$facets] (array) Facet specifications.


*yii/sphinx/Query::showMeta*				public
>
 showMeta($showMeta)
<
return ($this) The query object itself

 Sets whether to automatically perform 'SHOW META' for the search query.

    [$showMeta] (bool|string|\yii\db\Expression) Whether to automatically
    perform 'SHOW META'


*yii/sphinx/Query::snippetCallback*			public
>
 snippetCallback($callback)
<
return ($this) The query object itself

 Sets the PHP callback, which should be used to retrieve the source data for
 the snippets building.

    [$callback] (callable) PHP callback, which should be used to fetch source
    data for the snippets.


*yii/sphinx/Query::snippetOptions*			public
>
 snippetOptions($options)
<
return ($this) The query object itself

 Sets the call snippets query options.

    [$options] (array) Call snippet options in format: option_name =>
    option_value


*yii/sphinx/Query::fillUpSnippets*			protected
>
 fillUpSnippets($rows)
<
return (array|\yii\sphinx\ActiveRecord[]) Query result rows with filled up snippets.

 Fills the query result rows with the snippets built from source determined by
 'snippetCallback' result.

    [$rows] (array) Raw query result rows.


*yii/sphinx/Query::callSnippets*				protected
>
 callSnippets($source)
<
return (array) Snippets list.

 Builds a snippets from provided source data.

    [$source] (array) The source data to extract a snippet from.


*yii/sphinx/Query::callSnippetsInternal*			protected
>
 callSnippetsInternal($source, $from)
<
return (array) Snippets list.

 Builds a snippets from provided source data by the given index.

    [$source] (array) The source data to extract a snippet from.
    [$from] (string) Name of the source index.



 vim:tw=78:ts=8:ft=help:norl:
