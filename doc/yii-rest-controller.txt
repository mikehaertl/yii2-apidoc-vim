
*yii/rest/Controller*   >> |yii/web/Controller|
=====================

SUBCLASSES
------------------------------------------------------------------------------

|yii/rest/ActiveController|

DESCRIPTION
------------------------------------------------------------------------------

 Controller implements the following steps in a RESTful API request handling
 cycle:

 1. Resolving response format (see 'ContentNegotiator'); 2. Validating request
 method (see 'verbs()'). 3. Authenticating user (see
 '\yii\filters\auth\AuthInterface'); 4. Rate limiting (see 'RateLimiter'); 5.
 Formatting response data (see 'serializeData()').

 For more details and usage information on Controller, see the [guide article
 on rest controllers](guide:rest-controllers).


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/rest/Controller::$id*

 See |yii/base/Controller::$id|

$module					*yii/rest/Controller::$module*

 See |yii/base/Controller::$module|

$defaultAction				*yii/rest/Controller::$defaultAction*

 See |yii/base/Controller::$defaultAction|

$layout					*yii/rest/Controller::$layout*

 See |yii/base/Controller::$layout|

$action					*yii/rest/Controller::$action*

 See |yii/base/Controller::$action|

$enableCsrfValidation			*yii/rest/Controller::$enableCsrfValidation*

 ()

$actionParams				*yii/rest/Controller::$actionParams*

 See |yii/web/Controller::$actionParams|

$serializer				*yii/rest/Controller::$serializer*

 (string|array) The configuration for creating the serializer that formats the
 response data.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/rest/Controller::className*				public

 See |yii/base/BaseObject::className|


*yii/rest/Controller::__construct*			public

 See |yii/base/Controller::__construct|


*yii/rest/Controller::init*				public

 See |yii/base/BaseObject::init|


*yii/rest/Controller::__get*				public

 See |yii/base/BaseObject::__get|


*yii/rest/Controller::__set*				public

 See |yii/base/BaseObject::__set|


*yii/rest/Controller::__isset*				public

 See |yii/base/BaseObject::__isset|


*yii/rest/Controller::__unset*				public

 See |yii/base/BaseObject::__unset|


*yii/rest/Controller::__call*				public

 See |yii/base/BaseObject::__call|


*yii/rest/Controller::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/rest/Controller::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/rest/Controller::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/rest/Controller::hasMethod*				public

 See |yii/base/BaseObject::hasMethod|


*yii/rest/Controller::__clone*				public

 See |yii/base/Component::__clone|


*yii/rest/Controller::behaviors*				public
>
 behaviors()
<
return (void)

 {@inheritdoc}


*yii/rest/Controller::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/rest/Controller::on*					public

 See |yii/base/Component::on|


*yii/rest/Controller::off*				public

 See |yii/base/Component::off|


*yii/rest/Controller::trigger*				public

 See |yii/base/Component::trigger|


*yii/rest/Controller::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/rest/Controller::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/rest/Controller::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/rest/Controller::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/rest/Controller::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/rest/Controller::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/rest/Controller::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/rest/Controller::actions*				public

 See |yii/base/Controller::actions|


*yii/rest/Controller::runAction*				public

 See |yii/base/Controller::runAction|


*yii/rest/Controller::run*				public

 See |yii/base/Controller::run|


*yii/rest/Controller::bindActionParams*			public

 See |yii/base/Controller::bindActionParams|


*yii/rest/Controller::createAction*			public

 See |yii/base/Controller::createAction|


*yii/rest/Controller::beforeAction*			public

 See |yii/base/Controller::beforeAction|


*yii/rest/Controller::afterAction*			public
>
 afterAction($action, $result)
<
return (void)

 {@inheritdoc}

    [$action] () 
    [$result] () 


*yii/rest/Controller::getModules*				public

 See |yii/base/Controller::getModules|


*yii/rest/Controller::getUniqueId*			public

 See |yii/base/Controller::getUniqueId|


*yii/rest/Controller::getRoute*				public

 See |yii/base/Controller::getRoute|


*yii/rest/Controller::render*				public

 See |yii/base/Controller::render|


*yii/rest/Controller::renderContent*			public

 See |yii/base/Controller::renderContent|


*yii/rest/Controller::renderPartial*			public

 See |yii/base/Controller::renderPartial|


*yii/rest/Controller::renderFile*				public

 See |yii/base/Controller::renderFile|


*yii/rest/Controller::getView*				public

 See |yii/base/Controller::getView|


*yii/rest/Controller::setView*				public

 See |yii/base/Controller::setView|


*yii/rest/Controller::getViewPath*			public

 See |yii/base/Controller::getViewPath|


*yii/rest/Controller::setViewPath*			public

 See |yii/base/Controller::setViewPath|


*yii/rest/Controller::findLayoutFile*			public

 See |yii/base/Controller::findLayoutFile|


*yii/rest/Controller::renderAjax*				public

 See |yii/web/Controller::renderAjax|


*yii/rest/Controller::asJson*				public

 See |yii/web/Controller::asJson|


*yii/rest/Controller::asXml*				public

 See |yii/web/Controller::asXml|


*yii/rest/Controller::redirect*				public

 See |yii/web/Controller::redirect|


*yii/rest/Controller::goHome*				public

 See |yii/web/Controller::goHome|


*yii/rest/Controller::goBack*				public

 See |yii/web/Controller::goBack|


*yii/rest/Controller::refresh*				public

 See |yii/web/Controller::refresh|


*yii/rest/Controller::verbs*				protected
>
 verbs()
<
return (array) The allowed HTTP verbs.

 Declares the allowed HTTP verbs.

 Please refer to 'VerbFilter::actions' on how to declare the allowed verbs.


*yii/rest/Controller::serializeData*			protected
>
 serializeData($data)
<
return (mixed) The serialized data.

 Serializes the specified data.

 The default implementation will create a serializer based on the
 configuration given by 'serializer'. It then uses the serializer to serialize
 the given data.

    [$data] (mixed) The data to be serialized



 vim:tw=78:ts=8:ft=help:norl:
