
*yii/rest/Controller*   >> |yii/web/Controller|
=====================

SUBCLASSES
------------------------------------------------------------------------------

|yii/rest/ActiveController|

DESCRIPTION
------------------------------------------------------------------------------

 Controller implements the following steps in a RESTful API request handling
 cycle:

 1. Resolving response format (see 'ContentNegotiator'); 2. Validating request
 method (see 'verbs()'). 3. Authenticating user (see
 '\yii\filters\auth\AuthInterface'); 4. Rate limiting (see 'RateLimiter'); 5.
 Formatting response data (see 'serializeData()').


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/rest/Controller::$id*
 See |yii/base/Controller::$id|

$module					*yii/rest/Controller::$module*
 See |yii/base/Controller::$module|

$defaultAction				*yii/rest/Controller::$defaultAction*
 See |yii/base/Controller::$defaultAction|

$layout					*yii/rest/Controller::$layout*
 See |yii/base/Controller::$layout|

$action					*yii/rest/Controller::$action*
 See |yii/base/Controller::$action|

$enableCsrfValidation			*yii/rest/Controller::$enableCsrfValidation*
 ()

$actionParams				*yii/rest/Controller::$actionParams*
 See |yii/web/Controller::$actionParams|

$serializer				*yii/rest/Controller::$serializer*
 (string|array) The configuration for creating the serializer that formats the
 response data.

$behaviors				*yii/rest/Controller::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$modules				*yii/rest/Controller::$modules*
 (\yii\base\Module[]) All ancestor modules that this controller is located
 within.

$uniqueId				*yii/rest/Controller::$uniqueId*
 (string) The controller ID that is prefixed with the module ID (if any).

$route					*yii/rest/Controller::$route*
 (string) The route (module ID, controller ID and action ID) of the current
 request.

$view					*yii/rest/Controller::$view*
 (\yii\base\View|\yii\web\View) The view object that can be used to render
 views or view files.

$viewPath				*yii/rest/Controller::$viewPath*
 (string) The directory containing the view files for this controller.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/rest/Controller::className*				public
 See |yii/base/Object::className|


*yii/rest/Controller::__construct*			public
 See |yii/base/Controller::__construct|


*yii/rest/Controller::init*				public
 See |yii/base/Object::init|


*yii/rest/Controller::__get*				public
 See |yii/base/Component::__get|


*yii/rest/Controller::__set*				public
 See |yii/base/Component::__set|


*yii/rest/Controller::__isset*				public
 See |yii/base/Component::__isset|


*yii/rest/Controller::__unset*				public
 See |yii/base/Component::__unset|


*yii/rest/Controller::__call*				public
 See |yii/base/Component::__call|


*yii/rest/Controller::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/rest/Controller::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/rest/Controller::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/rest/Controller::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/rest/Controller::__clone*				public
 See |yii/base/Component::__clone|


*yii/rest/Controller::behaviors*				public
>
 behaviors()
<
(array) The behavior configurations.

 Child classes may override this method to specify the behaviors they want to
 behave as.

 The return value of this method should be an array of behavior objects or
 configurations indexed by behavior names. A behavior configuration can be
 either a string specifying the behavior class or an array of the following
 structure:

   'view' => [
       'theme' => 'app\themes\MyTheme',
       'renderers' => [
           // you may add Smarty or Twig renderer here
       ]
       // ...
   ]

 Note that a behavior class must extend from 'Behavior'. Behavior names can be
 strings or integers. If the former, they uniquely identify the behaviors. If
 the latter, the corresponding behaviors are anonymous and their properties
 and methods will NOT be made available via the component (however, the
 behaviors can still respond to the component's events).

 Behaviors declared in this method will be attached to the component
 automatically (on demand).


*yii/rest/Controller::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/rest/Controller::on*					public
 See |yii/base/Component::on|


*yii/rest/Controller::off*				public
 See |yii/base/Component::off|


*yii/rest/Controller::trigger*				public
 See |yii/base/Component::trigger|


*yii/rest/Controller::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/rest/Controller::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/rest/Controller::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/rest/Controller::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/rest/Controller::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/rest/Controller::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/rest/Controller::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/rest/Controller::actions*				public
 See |yii/base/Controller::actions|


*yii/rest/Controller::runAction*				public
 See |yii/base/Controller::runAction|


*yii/rest/Controller::run*				public
 See |yii/base/Controller::run|


*yii/rest/Controller::bindActionParams*			public
 See |yii/web/Controller::bindActionParams|


*yii/rest/Controller::createAction*			public
 See |yii/base/Controller::createAction|


*yii/rest/Controller::beforeAction*			public
 See |yii/web/Controller::beforeAction|


*yii/rest/Controller::afterAction*			public
>
 afterAction($action, $result)
<
(mixed) The processed action result.

 The method will trigger the 'EVENT_AFTER_ACTION' event. The return value of
 the method will be used as the action return value.

 If you override this method, your code should look like the following:

   'behaviorName' => [
       'class' => 'BehaviorClass',
       'property1' => 'value1',
       'property2' => 'value2',
   ]


    [$action] (\yii\base\Action) The action just executed.
    [$result] (mixed) The action return result.


*yii/rest/Controller::getModules*				public
 See |yii/base/Controller::getModules|


*yii/rest/Controller::getUniqueId*			public
 See |yii/base/Controller::getUniqueId|


*yii/rest/Controller::getRoute*				public
 See |yii/base/Controller::getRoute|


*yii/rest/Controller::render*				public
 See |yii/base/Controller::render|


*yii/rest/Controller::renderPartial*			public
 See |yii/base/Controller::renderPartial|


*yii/rest/Controller::renderFile*				public
 See |yii/base/Controller::renderFile|


*yii/rest/Controller::getView*				public
 See |yii/base/Controller::getView|


*yii/rest/Controller::setView*				public
 See |yii/base/Controller::setView|


*yii/rest/Controller::getViewPath*			public
 See |yii/base/Controller::getViewPath|


*yii/rest/Controller::findLayoutFile*			protected
 See |yii/base/Controller::findLayoutFile|


*yii/rest/Controller::renderAjax*				public
 See |yii/web/Controller::renderAjax|


*yii/rest/Controller::redirect*				public
 See |yii/web/Controller::redirect|


*yii/rest/Controller::goHome*				public
 See |yii/web/Controller::goHome|


*yii/rest/Controller::goBack*				public
 See |yii/web/Controller::goBack|


*yii/rest/Controller::refresh*				public
 See |yii/web/Controller::refresh|


*yii/rest/Controller::verbs*				protected
>
 verbs()
<
(array) The allowed HTTP verbs.

 Please refer to 'VerbFilter::actions' on how to declare the allowed verbs.


*yii/rest/Controller::serializeData*			protected
>
 serializeData($data)
<
(mixed) The serialized data.

 The default implementation will create a serializer based on the
 configuration given by 'serializer'. It then uses the serializer to serialize
 the given data.
    [$data] (mixed) The data to be serialized


*yii/rest/Controller::checkAccess*			public
>
 checkAccess($action, $model='null', $params='[]')
<
(void)

 This method should be overridden to check whether the current user has the
 privilege to run the specified action against the specified data model. If
 the user does not have access, a 'ForbiddenHttpException' should be thrown.
    [$action] (string) The ID of the action to be executed
    [$model] (object) The model to be accessed. If null, it means no specific
    model is being accessed.
    [$params] (array) Additional parameters



 vim:tw=78:ts=8:ft=help:norl:
