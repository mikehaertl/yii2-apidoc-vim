
*yii\rest\Controller*   >> yii\web\Controller
=====================

 Controller implements the following steps in a RESTful API request handling
 cycle:

 1. Resolving response format and API version number (see
 [[supportedFormats]], [[supportedVersions]] and [[version]]); 2. Validating
 request method (see [[verbs()]]). 3. Authenticating user (see
 [[authenticate()]]); 4. Formatting response data (see [[serializeData()]]).


PROPERTY DETAILS
------------------------------------------------------------------------------

<$id>					*yii\rest\Controller::$id*
 See |yii\base\Controller::$id|

<$module>				*yii\rest\Controller::$module*
 See |yii\base\Controller::$module|

<$defaultAction>			*yii\rest\Controller::$defaultAction*
 See |yii\base\Controller::$defaultAction|

<$layout>				*yii\rest\Controller::$layout*
 See |yii\base\Controller::$layout|

<$action>				*yii\rest\Controller::$action*
 See |yii\base\Controller::$action|

<$enableCsrfValidation> 		*yii\rest\Controller::$enableCsrfValidation*
 ()

<$actionParams> 			*yii\rest\Controller::$actionParams*
 See |yii\web\Controller::$actionParams|

<$versionHeaderParam>			*yii\rest\Controller::$versionHeaderParam*
 (string) The name of the header parameter representing the API version
 number.

<$serializer>				*yii\rest\Controller::$serializer*
 (string|array) The configuration for creating the serializer that formats the
 response data.

<$authMethods>				*yii\rest\Controller::$authMethods*
 (array) The supported authentication methods. This property should take a
 list of supported authentication methods, each represented by an
 authentication class or configuration. If this is not set or empty, it means
 authentication is disabled.

<$rateLimiter>				*yii\rest\Controller::$rateLimiter*
 (string|array) The rate limiter class or configuration. If this is not set or
 empty, the rate limiting will be disabled. Note that if the user is not
 authenticated, the rate limiting will also NOT be performed.

<$version>				*yii\rest\Controller::$version*
 (string) The chosen API version number, or null if [[supportedVersions]] is
 empty.

<$supportedVersions>			*yii\rest\Controller::$supportedVersions*
 (array) List of supported API version numbers. If the current request does
 not specify a version number, the first element will be used as the
 [[version|chosen version number]]. For this reason, you should put the latest
 version number at the first. If this property is empty, [[version]] will not
 be set.

<$supportedFormats>			*yii\rest\Controller::$supportedFormats*
 (array) List of supported response formats. The array keys are the requested
 content MIME types, and the array values are the corresponding response
 formats. The first element will be used as the response format if the current
 request does not specify a content type.

<$behaviors>				*yii\rest\Controller::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

<$uniqueId>				*yii\rest\Controller::$uniqueId*
 (string) The controller ID that is prefixed with the module ID (if any).

<$route>				*yii\rest\Controller::$route*
 (string) The route (module ID, controller ID and action ID) of the current
 request.

<$view> 				*yii\rest\Controller::$view*
 (\yii\base\View) The view object that can be used to render views or view
 files.

<$viewPath>				*yii\rest\Controller::$viewPath*
 (string) The directory containing the view files for this controller.



METHOD DETAILS
------------------------------------------------------------------------------

*yii\rest\Controller::className*				 public
 See |yii\base\Object::className|


*yii\rest\Controller::__construct*				 public
 See |yii\base\Controller::__construct|


*yii\rest\Controller::init*					 public
>
 init()
<
(void)




*yii\rest\Controller::__get*					 public
 See |yii\base\Component::__get|


*yii\rest\Controller::__set*					 public
 See |yii\base\Component::__set|


*yii\rest\Controller::__isset*					 public
 See |yii\base\Component::__isset|


*yii\rest\Controller::__unset*					 public
 See |yii\base\Component::__unset|


*yii\rest\Controller::__call*					 public
 See |yii\base\Component::__call|


*yii\rest\Controller::hasProperty*				 public
 See |yii\base\Component::hasProperty|


*yii\rest\Controller::canGetProperty*				 public
 See |yii\base\Component::canGetProperty|


*yii\rest\Controller::canSetProperty*				 public
 See |yii\base\Component::canSetProperty|


*yii\rest\Controller::hasMethod*				 public
 See |yii\base\Component::hasMethod|


*yii\rest\Controller::__clone*					 public
 See |yii\base\Component::__clone|


*yii\rest\Controller::behaviors*				 public
>
 behaviors()
<
(array) The behavior configurations.




*yii\rest\Controller::hasEventHandlers* 			 public
 See |yii\base\Component::hasEventHandlers|


*yii\rest\Controller::on*					 public
 See |yii\base\Component::on|


*yii\rest\Controller::off*					 public
 See |yii\base\Component::off|


*yii\rest\Controller::trigger*					 public
 See |yii\base\Component::trigger|


*yii\rest\Controller::getBehavior*				 public
 See |yii\base\Component::getBehavior|


*yii\rest\Controller::getBehaviors*				 public
 See |yii\base\Component::getBehaviors|


*yii\rest\Controller::attachBehavior*				 public
 See |yii\base\Component::attachBehavior|


*yii\rest\Controller::attachBehaviors*				 public
 See |yii\base\Component::attachBehaviors|


*yii\rest\Controller::detachBehavior*				 public
 See |yii\base\Component::detachBehavior|


*yii\rest\Controller::detachBehaviors*				 public
 See |yii\base\Component::detachBehaviors|


*yii\rest\Controller::ensureBehaviors*				 public
 See |yii\base\Component::ensureBehaviors|


*yii\rest\Controller::actions*					 public
 See |yii\base\Controller::actions|


*yii\rest\Controller::runAction*				 public
 See |yii\base\Controller::runAction|


*yii\rest\Controller::run*					 public
 See |yii\base\Controller::run|


*yii\rest\Controller::bindActionParams* 			 public
 See |yii\web\Controller::bindActionParams|


*yii\rest\Controller::createAction*				 public
 See |yii\base\Controller::createAction|


*yii\rest\Controller::beforeAction*				 public
>
 beforeAction($action)
<
(boolean) Whether the action should continue to be executed.


    [$action] () 


*yii\rest\Controller::afterAction*				 public
>
 afterAction($action, $result)
<
(mixed) The processed action result.


    [$action] () 
    [$result] () 


*yii\rest\Controller::getUniqueId*				 public
 See |yii\base\Controller::getUniqueId|


*yii\rest\Controller::getRoute* 				 public
 See |yii\base\Controller::getRoute|


*yii\rest\Controller::render*					 public
 See |yii\base\Controller::render|


*yii\rest\Controller::renderPartial*				 public
 See |yii\base\Controller::renderPartial|


*yii\rest\Controller::renderFile*				 public
 See |yii\base\Controller::renderFile|


*yii\rest\Controller::getView*					 public
 See |yii\base\Controller::getView|


*yii\rest\Controller::setView*					 public
 See |yii\base\Controller::setView|


*yii\rest\Controller::getViewPath*				 public
 See |yii\base\Controller::getViewPath|


*yii\rest\Controller::findLayoutFile*				 protected
 See |yii\base\Controller::findLayoutFile|


*yii\rest\Controller::renderAjax*				 public
 See |yii\web\Controller::renderAjax|


*yii\rest\Controller::redirect* 				 public
 See |yii\web\Controller::redirect|


*yii\rest\Controller::goHome*					 public
 See |yii\web\Controller::goHome|


*yii\rest\Controller::goBack*					 public
 See |yii\web\Controller::goBack|


*yii\rest\Controller::refresh*					 public
 See |yii\web\Controller::refresh|


*yii\rest\Controller::resolveFormatAndVersion*			 protected
>
 resolveFormatAndVersion()
<
(void)




*yii\rest\Controller::verbs*					 protected
>
 verbs()
<
(array) The allowed HTTP verbs.

 Please refer to [[VerbFilter::actions]] on how to declare the allowed verbs.


*yii\rest\Controller::authenticate*				 protected
>
 authenticate($action)
<
(void)

 This method implements the user authentication based on an access token sent
 through the 'Authorization' HTTP header.
    [$action] (\yii\base\Action) The action to be executed


*yii\rest\Controller::checkRateLimit*				 protected
>
 checkRateLimit($action)
<
(void)

 This method will use [[rateLimiter]] to check rate limit. In order to perform
 rate limiting check, the user must be authenticated and the user identity
 object ('Yii::$app->user->identity') must implement [[RateLimitInterface]].
    [$action] (\yii\base\Action) The action to be executed


*yii\rest\Controller::serializeData*				 protected
>
 serializeData($data)
<
(mixed) The serialized data.

 The default implementation will create a serializer based on the
 configuration given by [[serializer]]. It then uses the serializer to
 serialize the given data.
    [$data] (mixed) The data to be serialized


*yii\rest\Controller::checkAccess*				 public
>
 checkAccess($action, $model='null', $params='[]')
<
(void)

 This method should be overridden to check whether the current user has the
 privilege to run the specified action against the specified data model. If
 the user does not have access, a [[ForbiddenHttpException]] should be thrown.
    [$action] (string) The ID of the action to be executed
    [$model] (object) The model to be accessed. If null, it means no specific
    model is being accessed.
    [$params] (array) Additional parameters



 vim:tw=78:ts=8:ft=help:norl:
