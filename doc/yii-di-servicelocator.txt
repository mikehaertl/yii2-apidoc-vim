
*yii/di/ServiceLocator*   >> |yii/base/Component|
=======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/base/Application|
|yii/base/Module|
|yii/web/Application|
|yii/console/Application|
|yii/debug/Module|
|yii/gii/Module|

DESCRIPTION
------------------------------------------------------------------------------

 To use ServiceLocator, you first need to register component IDs with the
 corresponding component definitions with the locator by calling 'set()' or
 'setComponents()'. You can then call 'get()' to retrieve a component with the
 specified ID. The locator will automatically instantiate and configure the
 component according to the definition.

 For example,

   $locator = new \yii\di\ServiceLocator;
   $locator->setComponents([
       'db' => [
           'class' => 'yii\db\Connection',
           'dsn' => 'sqlite:path/to/file.db',
       ],
       'cache' => [
           'class' => 'yii\caching\DbCache',
           'db' => 'db',
       ],
   ]);

   $db = $locator->get('db');  // or $locator->db
   $cache = $locator->get('cache');  // or $locator->cache

 Because '\yii\base\Module' extends from ServiceLocator, modules and the
 application are all service locators. Modules add [tree
 traversal](guide:concept-service-locator#tree-traversal) for service
 resolution.

 For more details and usage information on ServiceLocator, see the [guide
 article on service locators](guide:concept-service-locator).



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/di/ServiceLocator::__get*				public
>
 __get($name)
<
return (mixed) The named property value

 Getter magic method.

 This method is overridden to support accessing components like reading
 properties.

    [$name] (string) Component or property name


*yii/di/ServiceLocator::__isset*				public
>
 __isset($name)
<
return (bool) Whether the property value is null

 Checks if a property value is null.

 This method overrides the parent implementation by checking if the named
 component is loaded.

    [$name] (string) The property name or the event name


*yii/di/ServiceLocator::has*				public
>
 has($id, $checkInstance='false')
<
return (bool) Whether the locator has the specified component definition or has
instantiated the component.

 Returns a value indicating whether the locator has the specified component
 definition or has instantiated the component.

 This method may return different results depending on the value of
 '$checkInstance'.


   - If '$checkInstance' is false (default), the method will return a
   value indicating whether the locator has the specified   component
 definition. 
   - If '$checkInstance' is true, the method will return a value
   indicating whether the locator has   instantiated the specified component.

    [$id] (string) Component ID (e.g. 'db').
    [$checkInstance] (bool) Whether the method should check if the component
    is shared and instantiated.


*yii/di/ServiceLocator::get*				public
>
 get($id, $throwException='true')
<
return (object|null) The component of the specified ID. If '$throwException' is false
and '$id' is not registered before, null will be returned.

 Returns the component instance with the specified ID.

    [$id] (string) Component ID (e.g. 'db').
    [$throwException] (bool) Whether to throw an exception if '$id' is not
    registered with the locator before.


*yii/di/ServiceLocator::set*				public
>
 set($id, $definition)
<
return (void)

 Registers a component definition with this locator.

 For example,

   // a class name
   $locator->set('cache', 'yii\caching\FileCache');

   // a configuration array
   $locator->set('db', [
       'class' => 'yii\db\Connection',
       'dsn' => 'mysql:host=127.0.0.1;dbname=demo',
       'username' => 'root',
       'password' => '',
       'charset' => 'utf8',
   ]);

   // an anonymous function
   $locator->set('cache', function ($params) {
       return new \yii\caching\FileCache;
   });

   // an instance
   $locator->set('cache', new \yii\caching\FileCache);

 If a component definition with the same ID already exists, it will be
 overwritten.

    [$id] (string) Component ID (e.g. 'db').
    [$definition] (mixed) The component definition to be registered with this
    locator. It can be one of the following:


      - a class name 
      - a configuration array: the array contains name-value pairs that
      will be used to   initialize the property values of the newly created
    object when 'get()' is called.   The 'class' element is required and
    stands for the the class of the object to be created. 
      - a PHP callable: either an anonymous function or an array
      representing a class method (e.g. '['Foo', 'bar']').   The callable will
    be called by 'get()' to return an object associated with the specified
    component ID. 
      - an object: When 'get()' is called, this object will be returned.


*yii/di/ServiceLocator::clear*				public
>
 clear($id)
<
return (void)

 Removes the component from the locator.

    [$id] (string) The component ID


*yii/di/ServiceLocator::getComponents*			public
>
 getComponents($returnDefinitions='true')
<
return (array) The list of the component definitions or the loaded component
instances (ID => definition or instance).

 Returns the list of the component definitions or the loaded component
 instances.

    [$returnDefinitions] (bool) Whether to return component definitions
    instead of the loaded component instances.


*yii/di/ServiceLocator::setComponents*			public
>
 setComponents($components)
<
return (void)

 Registers a set of component definitions in this locator.

 This is the bulk version of 'set()'. The parameter should be an array whose
 keys are component IDs and values the corresponding component definitions.

 For more details on how to specify component IDs and definitions, please
 refer to 'set()'.

 If a component definition with the same ID already exists, it will be
 overwritten.

 The following is an example for registering two component definitions:

   [
       'db' => [
           'class' => 'yii\db\Connection',
           'dsn' => 'sqlite:path/to/file.db',
       ],
       'cache' => [
           'class' => 'yii\caching\DbCache',
           'db' => 'db',
       ],
   ]



    [$components] (array) Component definitions or instances



 vim:tw=78:ts=8:ft=help:norl:
