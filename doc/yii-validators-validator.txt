
*yii/validators/Validator*   >> |yii/base/Component|
==========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/captcha/CaptchaValidator|
|yii/validators/EachValidator|
|yii/validators/FilterValidator|
|yii/validators/StringValidator|
|yii/validators/NumberValidator|
|yii/validators/DefaultValueValidator|
|yii/validators/EmailValidator|
|yii/validators/UniqueValidator|
|yii/validators/RequiredValidator|
|yii/validators/IpValidator|
|yii/validators/SafeValidator|
|yii/validators/ExistValidator|
|yii/validators/CompareValidator|
|yii/validators/BooleanValidator|
|yii/validators/DateValidator|
|yii/validators/RangeValidator|
|yii/validators/InlineValidator|
|yii/validators/ImageValidator|
|yii/validators/FileValidator|
|yii/validators/UrlValidator|
|yii/validators/RegularExpressionValidator|
|yii/mongodb/validators/MongoDateValidator|
|yii/mongodb/validators/MongoIdValidator|

DESCRIPTION
------------------------------------------------------------------------------

 Child classes should override the 'validateValue()' and/or
 'validateAttribute()' methods to provide the actual logic of performing data
 validation. Child classes may also override 'clientValidateAttribute()' to
 provide client-side validation support.

 Validator declares a set of 'builtInValidators|built-in validators' which can
 be referenced using short names. They are listed as follows:


   - 'boolean': 'BooleanValidator' 
   - 'captcha': '\yii\captcha\CaptchaValidator' 
   - 'compare': 'CompareValidator' 
   - 'date': 'DateValidator' 
   - 'datetime': 'DateValidator' 
   - 'time': 'DateValidator' 
   - 'default': 'DefaultValueValidator' 
   - 'double': 'NumberValidator' 
   - 'each': 'EachValidator' 
   - 'email': 'EmailValidator' 
   - 'exist': 'ExistValidator' 
   - 'file': 'FileValidator' 
   - 'filter': 'FilterValidator' 
   - 'image': 'ImageValidator' 
   - 'in': 'RangeValidator' 
   - 'integer': 'NumberValidator' 
   - 'match': 'RegularExpressionValidator' 
   - 'required': 'RequiredValidator' 
   - 'safe': 'SafeValidator' 
   - 'string': 'StringValidator' 
   - 'trim': 'FilterValidator' 
   - 'unique': 'UniqueValidator' 
   - 'url': 'UrlValidator' 
   - 'ip': 'IpValidator'

 For more details and usage information on Validator, see the [guide article
 on validators](guide:input-validation).


PROPERTY DETAILS
------------------------------------------------------------------------------


$builtInValidators			*yii/validators/Validator::$builtInValidators*

 (array) List of built-in validators (name => class or configuration)

$attributes				*yii/validators/Validator::$attributes*

 (array|string) Attributes to be validated by this validator. For multiple
 attributes, please specify them as an array; for single attribute, you may
 use either a string or an array.

$message				*yii/validators/Validator::$message*

 (string) The user-defined error message. It may contain the following
 placeholders which will be replaced accordingly by the validator:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated

 Note that some validators may introduce other properties for error messages
 used when specific validation conditions are not met. Please refer to
 individual class API documentation for details about these properties. By
 convention, this property represents the primary error message used when the
 most important validation condition is not met.

$on					*yii/validators/Validator::$on*

 (array|string) Scenarios that the validator can be applied to. For multiple
 scenarios, please specify them as an array; for single scenario, you may use
 either a string or an array.

$except					*yii/validators/Validator::$except*

 (array|string) Scenarios that the validator should not be applied to. For
 multiple scenarios, please specify them as an array; for single scenario, you
 may use either a string or an array.

$skipOnError				*yii/validators/Validator::$skipOnError*

 (bool) Whether this validation rule should be skipped if the attribute being
 validated already has some validation error according to some previous rules.
 Defaults to true.

$skipOnEmpty				*yii/validators/Validator::$skipOnEmpty*

 (bool) Whether this validation rule should be skipped if the attribute value
 is null or an empty string.

$enableClientValidation			*yii/validators/Validator::$enableClientValidation*

 (bool) Whether to enable client-side validation for this validator. The
 actual client-side validation is done via the JavaScript code returned by
 'clientValidateAttribute()'. If that method returns null, even if this
 property is true, no client-side validation will be done by this validator.

$isEmpty				*yii/validators/Validator::$isEmpty*

 (callable) A PHP callable that replaces the default implementation of
 'isEmpty()'. If not set, 'isEmpty()' will be used to check if a value is
 empty. The signature of the callable should be 'function ($value)' which
 returns a boolean indicating whether the value is empty.

$when					*yii/validators/Validator::$when*

 (callable) A PHP callable whose return value determines whether this
 validator should be applied. The signature of the callable should be
 'function ($model, $attribute)', where '$model' and '$attribute' refer to the
 model and the attribute currently being validated. The callable should return
 a boolean value.

 This property is mainly provided to support conditional validation on the
 server-side. If this property is not set, this validator will be always
 applied on the server-side.

 The following example will enable the validator only when the country
 currently selected is USA:

   function ($model) {
       return $model->country == Country::USA;
   }



$whenClient				*yii/validators/Validator::$whenClient*

 (string) A JavaScript function name whose return value determines whether
 this validator should be applied on the client-side. The signature of the
 function should be 'function (attribute, value)', where 'attribute' is an
 object describing the attribute being validated (see
 'clientValidateAttribute()') and 'value' the current value of the attribute.

 This property is mainly provided to support conditional validation on the
 client-side. If this property is not set, this validator will be always
 applied on the client-side.

 The following example will enable the validator only when the country
 currently selected is USA:

 '''javascript function (attribute, value) {     return $('#country').val()
 === 'USA'; } '''



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/validators/Validator::init*				public
>
 init()
<
return (void)

 {@inheritdoc}


*yii/validators/Validator::createValidator*		public
>
 createValidator($type, $model, $attributes, $params='[]')
<
return (\yii\validators\Validator) The validator

 Creates a validator object.

    [$type] (string|\Closure) The validator type. This can be either:  * a
    built-in validator name listed in 'builtInValidators';  * a method name of
    the model class;  * an anonymous function;  * a validator class name.
    [$model] (\yii\base\Model) The data model to be validated.
    [$attributes] (array|string) List of attributes to be validated. This can
    be either an array of the attribute names or a string of comma-separated
    attribute names.
    [$params] (array) Initial values to be applied to the validator
    properties.


*yii/validators/Validator::validateAttributes*		public
>
 validateAttributes($model, $attributes='null')
<
return (void)

 Validates the specified object.

    [$model] (\yii\base\Model) The data model being validated
    [$attributes] (array|null) The list of attributes to be validated. Note
    that if an attribute is not associated with the validator 
      - it will be ignored. If this parameter is null, every attribute listed
    in 'attributes' will be validated.


*yii/validators/Validator::validateAttribute*		public
>
 validateAttribute($model, $attribute)
<
return (void)

 Validates a single attribute.

 Child classes must implement this method to provide the actual validation
 logic.

    [$model] (\yii\base\Model) The data model to be validated
    [$attribute] (string) The name of the attribute to be validated.


*yii/validators/Validator::validate*			public
>
 validate($value, $error='null')
<
return (bool) Whether the data is valid.

 Validates a given value.

 You may use this method to validate a value out of the context of a data
 model.

    [$value] (mixed) The data value to be validated.
    [$error] (string) The error message to be returned, if the validation
    fails.


*yii/validators/Validator::validateValue*			protected
>
 validateValue($value)
<
return (array|null) The error message and the array of parameters to be inserted into
the error message.

  if (!$valid) {
      return [$this->message, [
          'param1' => $this->param1,
          'formattedLimit' =>
Yii::$app->formatter->asShortSize($this->getSizeLimit()),
          'mimeTypes' => implode(', ', $this->mimeTypes),
          'param4' => 'etc...',
      ]];
  }

  return null;

for this example 'message' template can contain '{param1}',
'{formattedLimit}', '{mimeTypes}', '{param4}'

Null should be returned if the data is valid.

 Validates a value.

 A validator class can implement this method to support data validation out of
 the context of a data model.

    [$value] (mixed) The data value to be validated.


*yii/validators/Validator::clientValidateAttribute*	public
>
 clientValidateAttribute($model, $attribute, $view)
<
return (string|null) The client-side validation script. Null if the validator does
not support client-side validation.

 Returns the JavaScript needed for performing client-side validation.

 Calls 'getClientOptions()' to generate options array for client-side
 validation.

 You may override this method to return the JavaScript validation code if the
 validator can support client-side validation.

 The following JavaScript variables are predefined and can be used in the
 validation code:


   - 'attribute': an object describing the the attribute being
   validated. 
   - 'value': the value being validated. 
   - 'messages': an array used to hold the validation error messages
   for the attribute. 
   - 'deferred': an array used to hold deferred objects for
   asynchronous validation 
   - '$form': a jQuery object containing the form element

 The 'attribute' object contains the following properties: 
   - 'id': a unique ID identifying the attribute (e.g.
   "loginform-username") in the form 
   - 'name': attribute name or expression (e.g. "[0]content" for
   tabular input) 
   - 'container': the jQuery selector of the container of the input
   field 
   - 'input': the jQuery selector of the input field under the context
   of the form 
   - 'error': the jQuery selector of the error tag under the context of
   the container 
   - 'status': status of the input field, 0: empty, not entered before,
   1: validated, 2: pending validation, 3: validating

    [$model] (\yii\base\Model) The data model being validated
    [$attribute] (string) The name of the attribute to be validated.
    [$view] (\yii\web\View) The view object that is going to be used to render
    views or view files containing a model form with this validator applied.


*yii/validators/Validator::getClientOptions*		public
>
 getClientOptions($model, $attribute)
<
return (array) The client-side validation options

 Returns the client-side validation options.

 This method is usually called from 'clientValidateAttribute()'. You may
 override this method to modify options that will be passed to the client-side
 validation.

    [$model] (\yii\base\Model) The model being validated
    [$attribute] (string) The attribute name being validated


*yii/validators/Validator::isActive*			public
>
 isActive($scenario)
<
return (bool) Whether the validator applies to the specified scenario.

 Returns a value indicating whether the validator is active for the given
 scenario and attribute.

 A validator is active if


   - the validator's 'on' property is empty, or 
   - the validator's 'on' property contains the specified scenario

    [$scenario] (string) Scenario name


*yii/validators/Validator::addError*			public
>
 addError($model, $attribute, $message, $params='[]')
<
return (void)

 Adds an error about the specified attribute to the model object.

 This is a helper method that performs message selection and
 internationalization.

    [$model] (\yii\base\Model) The data model being validated
    [$attribute] (string) The attribute being validated
    [$message] (string) The error message
    [$params] (array) Values for the placeholders in the error message


*yii/validators/Validator::isEmpty*			public
>
 isEmpty($value)
<
return (bool) Whether the value is empty

 Checks if the given value is empty.

 A value is considered empty if it is null, an empty array, or an empty
 string. Note that this method is different from PHP empty(). It will return
 false when the value is 0.

    [$value] (mixed) The value to be checked


*yii/validators/Validator::formatMessage*			protected
>
 formatMessage($message, $params)
<
return (string) 

 Formats a mesage using the I18N, or simple strtr if '\Yii::$app' is not
 available.

    [$message] (string) 
    [$params] (array) 


*yii/validators/Validator::getAttributeNames*		public
>
 getAttributeNames()
<
return (array) Attribute names.

 Returns cleaned attribute names without the '!' character at the beginning.



 vim:tw=78:ts=8:ft=help:norl:
