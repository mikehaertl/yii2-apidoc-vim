
*yii/validators/Validator*   >> |yii/base/Component|
==========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/captcha/CaptchaValidator|
|yii/validators/DefaultValueValidator|
|yii/validators/BooleanValidator|
|yii/validators/CompareValidator|
|yii/validators/RegularExpressionValidator|
|yii/validators/RangeValidator|
|yii/validators/StringValidator|
|yii/validators/FileValidator|
|yii/validators/NumberValidator|
|yii/validators/DateValidator|
|yii/validators/ExistValidator|
|yii/validators/FilterValidator|
|yii/validators/UniqueValidator|
|yii/validators/InlineValidator|
|yii/validators/SafeValidator|
|yii/validators/UrlValidator|
|yii/validators/ImageValidator|
|yii/validators/RequiredValidator|
|yii/validators/EmailValidator|

DESCRIPTION
------------------------------------------------------------------------------

 Child classes should override the 'validateValue()' and/or
 'validateAttribute()' methods to provide the actual logic of performing data
 validation. Child classes may also override 'clientValidateAttribute()' to
 provide client-side validation support.

 Validator declares a set of 'builtInValidators|built-in validators] which can
 be referenced using short names. They are listed as follows:


   - 'boolean': 'BooleanValidator' 
   - 'captcha': '\yii\captcha\CaptchaValidator' 
   - 'compare': 'CompareValidator' 
   - 'date': 'DateValidator' 
   - 'default': 'DefaultValueValidator' 
   - 'double': 'NumberValidator' 
   - 'email': 'EmailValidator' 
   - 'exist': 'ExistValidator' 
   - 'file': 'FileValidator' 
   - 'filter': 'FilterValidator' 
   - 'image': 'ImageValidator' 
   - 'in': 'RangeValidator' 
   - 'integer': 'NumberValidator' 
   - 'match': 'RegularExpressionValidator' 
   - 'required': 'RequiredValidator' 
   - 'safe': 'SafeValidator' 
   - 'string': 'StringValidator' 
   - 'trim': 'FilterValidator' 
   - 'unique': 'UniqueValidator' 
   - 'url': 'UrlValidator'


PROPERTY DETAILS
------------------------------------------------------------------------------

$builtInValidators			*yii/validators/Validator::$builtInValidators*
 (array) List of built-in validators (name => class or configuration)

$attributes				*yii/validators/Validator::$attributes*
 (array|string) Attributes to be validated by this validator. For multiple
 attributes, please specify them as an array; for single attribute, you may
 use either a string or an array.

$message				*yii/validators/Validator::$message*
 (string) The user-defined error message. It may contain the following
 placeholders which will be replaced accordingly by the validator:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated

$on					*yii/validators/Validator::$on*
 (array|string) Scenarios that the validator can be applied to. For multiple
 scenarios, please specify them as an array; for single scenario, you may use
 either a string or an array.

$except					*yii/validators/Validator::$except*
 (array|string) Scenarios that the validator should not be applied to. For
 multiple scenarios, please specify them as an array; for single scenario, you
 may use either a string or an array.

$skipOnError				*yii/validators/Validator::$skipOnError*
 (boolean) Whether this validation rule should be skipped if the attribute
 being validated already has some validation error according to some previous
 rules. Defaults to true.

$skipOnEmpty				*yii/validators/Validator::$skipOnEmpty*
 (boolean) Whether this validation rule should be skipped if the attribute
 value is null or an empty string.

$enableClientValidation			*yii/validators/Validator::$enableClientValidation*
 (boolean) Whether to enable client-side validation for this validator. The
 actual client-side validation is done via the JavaScript code returned by
 'clientValidateAttribute()'. If that method returns null, even if this
 property is true, no client-side validation will be done by this validator.

$isEmpty				*yii/validators/Validator::$isEmpty*
 (callable) A PHP callable that replaces the default implementation of
 'isEmpty()'. If not set, 'isEmpty()' will be used to check if a value is
 empty. The signature of the callable should be 'function ($value)' which
 returns a boolean indicating whether the value is empty.

$when					*yii/validators/Validator::$when*
 (callable) A PHP callable whose return value determines whether this
 validator should be applied. The signature of the callable should be
 'function ($model, $attribute)', where '$model' and '$attribute' refer to the
 model and the attribute currently being validated. The callable should return
 a boolean value.

 This property is mainly provided to support conditional validation on the
 server side. If this property is not set, this validator will be always
 applied on the server side.

 The following example will enable the validator only when the country
 currently selected is USA:

   [
       'class' => 'yii\rest\UrlRule',
       'controller' => ['user', 'post'],
       'except' => ['delete'],
   ]



$whenClient				*yii/validators/Validator::$whenClient*
 (string) A JavaScript function name whose return value determines whether
 this validator should be applied on the client side. The signature of the
 function should be 'function (attribute, value)', where 'attribute' is the
 name of the attribute being validated and 'value' the current value of the
 attribute.

 This property is mainly provided to support conditional validation on the
 client side. If this property is not set, this validator will be always
 applied on the client side.

 The following example will enable the validator only when the country
 currently selected is USA:

   function ($model) {
       return $model->country == Country::USA;
   }



$behaviors				*yii/validators/Validator::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component



METHOD DETAILS
------------------------------------------------------------------------------

*yii/validators/Validator::className*			public
 See |yii/base/Object::className|


*yii/validators/Validator::__construct*			public
 See |yii/base/Object::__construct|


*yii/validators/Validator::init*				public
>
 init()
<
(void)

 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.


*yii/validators/Validator::__get*				public
 See |yii/base/Component::__get|


*yii/validators/Validator::__set*				public
 See |yii/base/Component::__set|


*yii/validators/Validator::__isset*			public
 See |yii/base/Component::__isset|


*yii/validators/Validator::__unset*			public
 See |yii/base/Component::__unset|


*yii/validators/Validator::__call*			public
 See |yii/base/Component::__call|


*yii/validators/Validator::hasProperty*			public
 See |yii/base/Component::hasProperty|


*yii/validators/Validator::canGetProperty*		public
 See |yii/base/Component::canGetProperty|


*yii/validators/Validator::canSetProperty*		public
 See |yii/base/Component::canSetProperty|


*yii/validators/Validator::hasMethod*			public
 See |yii/base/Component::hasMethod|


*yii/validators/Validator::__clone*			public
 See |yii/base/Component::__clone|


*yii/validators/Validator::behaviors*			public
 See |yii/base/Component::behaviors|


*yii/validators/Validator::hasEventHandlers*		public
 See |yii/base/Component::hasEventHandlers|


*yii/validators/Validator::on*				public
 See |yii/base/Component::on|


*yii/validators/Validator::off*				public
 See |yii/base/Component::off|


*yii/validators/Validator::trigger*			public
 See |yii/base/Component::trigger|


*yii/validators/Validator::getBehavior*			public
 See |yii/base/Component::getBehavior|


*yii/validators/Validator::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/validators/Validator::attachBehavior*		public
 See |yii/base/Component::attachBehavior|


*yii/validators/Validator::attachBehaviors*		public
 See |yii/base/Component::attachBehaviors|


*yii/validators/Validator::detachBehavior*		public
 See |yii/base/Component::detachBehavior|


*yii/validators/Validator::detachBehaviors*		public
 See |yii/base/Component::detachBehaviors|


*yii/validators/Validator::ensureBehaviors*		public
 See |yii/base/Component::ensureBehaviors|


*yii/validators/Validator::createValidator*		public
>
 createValidator($type, $object, $attributes, $params='[]')
<
(\yii\validators\Validator) The validator

    [$type] (mixed) The validator type. This can be a built-in validator name,
    a method name of the model class, an anonymous function, or a validator
    class name.
    [$object] (\yii\base\Model) The data object to be validated.
    [$attributes] (array|string) List of attributes to be validated. This can
    be either an array of the attribute names or a string of comma-separated
    attribute names.
    [$params] (array) Initial values to be applied to the validator properties


*yii/validators/Validator::validateAttributes*		public
>
 validateAttributes($object, $attributes='null')
<
(void)

    [$object] (\yii\base\Model) The data object being validated
    [$attributes] (array|null) The list of attributes to be validated. Note
    that if an attribute is not associated with the validator, it will be
    ignored. If this parameter is null, every attribute listed in 'attributes'
    will be validated.


*yii/validators/Validator::validateAttribute*		public
>
 validateAttribute($object, $attribute)
<
(void)

 Child classes must implement this method to provide the actual validation
 logic.
    [$object] (\yii\base\Model) The data object to be validated
    [$attribute] (string) The name of the attribute to be validated.


*yii/validators/Validator::validate*			public
>
 validate($value, $error='null')
<
(boolean) Whether the data is valid.

 You may use this method to validate a value out of the context of a data
 model.
    [$value] (mixed) The data value to be validated.
    [$error] (string) The error message to be returned, if the validation
    fails.


*yii/validators/Validator::validateValue*			protected
>
 validateValue($value)
<
(array|null) The error message and the parameters to be inserted into the
error message. Null should be returned if the data is valid.

 A validator class can implement this method to support data validation out of
 the context of a data model.
    [$value] (mixed) The data value to be validated.


*yii/validators/Validator::clientValidateAttribute*	public
>
 clientValidateAttribute($object, $attribute, $view)
<
(string) The client-side validation script. Null if the validator does not
support client-side validation.

 You may override this method to return the JavaScript validation code if the
 validator can support client-side validation.

 The following JavaScript variables are predefined and can be used in the
 validation code:


   - 'attribute': the name of the attribute being validated. 
   - 'value': the value being validated. 
   - 'messages': an array used to hold the validation error messages
   for the attribute.
    [$object] (\yii\base\Model) The data object being validated
    [$attribute] (string) The name of the attribute to be validated.
    [$view] (\yii\web\View) The view object that is going to be used to render
    views or view files containing a model form with this validator applied.


*yii/validators/Validator::isActive*			public
>
 isActive($scenario)
<
(boolean) Whether the validator applies to the specified scenario.

 A validator is active if


   - the validator's 'on' property is empty, or 
   - the validator's 'on' property contains the specified scenario
    [$scenario] (string) Scenario name


*yii/validators/Validator::addError*			public
>
 addError($object, $attribute, $message, $params='[]')
<
(void)

 This is a helper method that performs message selection and
 internationalization.
    [$object] (\yii\base\Model) The data object being validated
    [$attribute] (string) The attribute being validated
    [$message] (string) The error message
    [$params] (array) Values for the placeholders in the error message


*yii/validators/Validator::isEmpty*			public
>
 isEmpty($value)
<
(boolean) Whether the value is empty

 A value is considered empty if it is null, an empty array, or the trimmed
 result is an empty string. Note that this method is different from PHP
 empty(). It will return false when the value is 0.
    [$value] (mixed) The value to be checked



 vim:tw=78:ts=8:ft=help:norl:
