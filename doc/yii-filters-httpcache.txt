
*yii/filters/HttpCache*   >> |yii/base/ActionFilter|
=======================

DESCRIPTION
------------------------------------------------------------------------------

 It is an action filter that can be added to a controller and handles the
 'beforeAction' event.

 To use HttpCache, declare it in the 'behaviors()' method of your controller
 class. In the following example the filter will be applied to the
 'list'-action and the Last-Modified header will contain the date of the last
 update to the user table in the database.

   public function behaviors()
   {
       return [
           'access' => [
               'class' => \yii\filters\AccessControl::className(),
               'only' => ['create', 'update'],
               'rules' => [
                   // deny all POST requests
                   [
                       'allow' => false,
                       'verbs' => ['POST']
                   ],
                   // allow authenticated users
                   [
                       'allow' => true,
                       'roles' => ['@'],
                   ],
                   // everything else is denied
               ],
           ],
       ];
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

$owner					*yii/filters/HttpCache::$owner*
 See |yii/base/Behavior::$owner|

$only					*yii/filters/HttpCache::$only*
 See |yii/base/ActionFilter::$only|

$except					*yii/filters/HttpCache::$except*
 See |yii/base/ActionFilter::$except|

$lastModified				*yii/filters/HttpCache::$lastModified*
 (callable) A PHP callback that returns the UNIX timestamp of the last
 modification time. The callback's signature should be:

   function ($rule, $action)

 where '$action' is the 'Action' object that this filter is currently
 handling; '$params' takes the value of 'params'. The callback should return a
 UNIX timestamp.

$etagSeed				*yii/filters/HttpCache::$etagSeed*
 (callable) A PHP callback that generates the Etag seed string. The callback's
 signature should be:

   public function behaviors()
   {
       return [
           [
               'class' => 'yii\filters\HttpCache',
               'only' => ['index'],
               'lastModified' => function ($action, $params) {
                   $q = new \yii\db\Query();
                   return $q->from('user')->max('updated_at');
               },
   //            'etagSeed' => function ($action, $params) {
   //                return // generate etag seed here
   //            }
           ],
       ];
   }

 where '$action' is the 'Action' object that this filter is currently
 handling; '$params' takes the value of 'params'. The callback should return a
 string serving as the seed for generating an Etag.

$params					*yii/filters/HttpCache::$params*
 (mixed) Additional parameters that should be passed to the 'lastModified' and
 'etagSeed' callbacks.

$cacheControlHeader			*yii/filters/HttpCache::$cacheControlHeader*
 (string) The value of the 'Cache-Control' HTTP header. If null, the header
 will not be sent.

$sessionCacheLimiter			*yii/filters/HttpCache::$sessionCacheLimiter*
 (string) The name of the cache limiter to be set when
 [session_cache_limiter()](http://www.php.net/manual/en/function.session-cache-limiter.php)
 is called. The default value is an empty string, meaning turning off
 automatic sending of cache headers entirely. You may set this property to be
 'public', 'private', 'private_no_expire', and 'nocache'. Please refer to
 [session_cache_limiter()](http://www.php.net/manual/en/function.session-cache-limiter.php)
 for detailed explanation of these values.

 If this property is 'null', then 'session_cache_limiter()' will not be
 called. As a result, PHP will send headers according to the
 'session.cache_limiter' PHP ini setting.

$enabled				*yii/filters/HttpCache::$enabled*
 (boolean) A value indicating whether this filter should be enabled.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/filters/HttpCache::className*			public
 See |yii/base/Object::className|


*yii/filters/HttpCache::__construct*			public
 See |yii/base/Object::__construct|


*yii/filters/HttpCache::init*				public
 See |yii/base/Object::init|


*yii/filters/HttpCache::__get*				public
 See |yii/base/Object::__get|


*yii/filters/HttpCache::__set*				public
 See |yii/base/Object::__set|


*yii/filters/HttpCache::__isset*				public
 See |yii/base/Object::__isset|


*yii/filters/HttpCache::__unset*				public
 See |yii/base/Object::__unset|


*yii/filters/HttpCache::__call*				public
 See |yii/base/Object::__call|


*yii/filters/HttpCache::hasProperty*			public
 See |yii/base/Object::hasProperty|


*yii/filters/HttpCache::canGetProperty*			public
 See |yii/base/Object::canGetProperty|


*yii/filters/HttpCache::canSetProperty*			public
 See |yii/base/Object::canSetProperty|


*yii/filters/HttpCache::hasMethod*			public
 See |yii/base/Object::hasMethod|


*yii/filters/HttpCache::events*				public
 See |yii/base/Behavior::events|


*yii/filters/HttpCache::attach*				public
 See |yii/base/ActionFilter::attach|


*yii/filters/HttpCache::detach*				public
 See |yii/base/ActionFilter::detach|


*yii/filters/HttpCache::beforeFilter*			public
 See |yii/base/ActionFilter::beforeFilter|


*yii/filters/HttpCache::afterFilter*			public
 See |yii/base/ActionFilter::afterFilter|


*yii/filters/HttpCache::beforeAction*			public
>
 beforeAction($action)
<
(boolean) Whether the action should continue to be executed.

    [$action] (\yii\base\Action) The action to be executed.


*yii/filters/HttpCache::afterAction*			public
 See |yii/base/ActionFilter::afterAction|


*yii/filters/HttpCache::isActive*				protected
 See |yii/base/ActionFilter::isActive|


*yii/filters/HttpCache::validateCache*			protected
>
 validateCache($lastModified, $etag)
<
(boolean) Whether the HTTP cache is still valid.

    [$lastModified] (integer) The calculated Last-Modified value in terms of a
    UNIX timestamp. If null, the Last-Modified header will not be validated.
    [$etag] (string) The calculated ETag value. If null, the ETag header will
    not be validated.


*yii/filters/HttpCache::sendCacheControlHeader*		protected
>
 sendCacheControlHeader()
<
(void)



*yii/filters/HttpCache::generateEtag*			protected
>
 generateEtag($seed)
<
(string) The generated Etag

    [$seed] (string) Seed for the ETag



 vim:tw=78:ts=8:ft=help:norl:
