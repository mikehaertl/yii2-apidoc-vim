
*yii/sphinx/Connection*   >> |yii/db/Connection|
=======================

DESCRIPTION
------------------------------------------------------------------------------

 This class uses [PDO](http://www.php.net/manual/en/ref.pdo.php) to maintain
 such connection. Note: although PDO supports numerous database drivers, this
 class supports only MySQL.

 In order to setup Sphinx "searchd" to support MySQL protocol following
 configuration should be added:

 ''' searchd {     listen = localhost:9306:mysql41     ... } '''

 The following example shows how to create a Connection instance and establish
 the Sphinx connection:

   $connection = new \yii\db\Connection([
       'dsn' => 'mysql:host=127.0.0.1;port=9306;',
       'username' => $username,
       'password' => $password,
   ]);
   $connection->open();

 After the Sphinx connection is established, one can execute SQL statements
 like the following:

   $command = $connection->createCommand("SELECT * FROM idx_article WHERE
 MATCH('programming')");
   $articles = $command->queryAll();
   $command = $connection->createCommand('UPDATE idx_article SET status=2
 WHERE id=1');
   $command->execute();

 For more information about how to perform various DB queries, please refer to
 'Command'.

 This class supports transactions exactly as "yii\db\Connection".

 Note: while this class extends "yii\db\Connection" some of its methods are
 not supported.


PROPERTY DETAILS
------------------------------------------------------------------------------


$schemaMap				*yii/sphinx/Connection::$schemaMap*

 ()

$enableFloatConversion			*yii/sphinx/Connection::$enableFloatConversion*

 (bool) Whether to enable conversion of the float query params into the direct
 literal SQL insertion. This allows processing of the float values, since PDO
 does not provide specific param type for float binding, while Sphinx is
 unable to process float values passed as quoted strings.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/sphinx/Connection::getIndexSchema*			public
>
 getIndexSchema($name, $refresh='false')
<
return (\yii\sphinx\IndexSchema) Index schema information. Null if the named index
does not exist.

 Obtains the schema information for the named index.

    [$name] (string) Index name.
    [$refresh] (bool) Whether to reload the table schema even if it is found
    in the cache.


*yii/sphinx/Connection::quoteIndexName*			public
>
 quoteIndexName($name)
<
return (string) The properly quoted index name

 Quotes a index name for use in a query.

 If the index name contains schema prefix, the prefix will also be properly
 quoted. If the index name is already quoted or contains special characters
 including '(', ''' and '{{', then this method will do nothing.

    [$name] (string) Index name


*yii/sphinx/Connection::quoteTableName*			public
>
 quoteTableName($name)
<
return (string) The properly quoted table name

 Alias of 'quoteIndexName()'.

    [$name] (string) Table name


*yii/sphinx/Connection::createCommand*			public
>
 createCommand($sql='null', $params='[]')
<
return (\yii\sphinx\Command) The Sphinx command

 Creates a command for execution.

    [$sql] (string) The SQL statement to be executed
    [$params] (array) The parameters to be bound to the SQL statement


*yii/sphinx/Connection::getLastInsertID*			public
>
 getLastInsertID($sequenceName='''')
<
return (string) The row ID of the last row inserted, or the last value retrieved from
the sequence object

 This method is not supported by Sphinx.

    [$sequenceName] (string) Name of the sequence object


*yii/sphinx/Connection::escapeMatchValue*			public
>
 escapeMatchValue($str)
<
return (string) The properly escaped string.

 Escapes all special characters from 'MATCH' statement argument.

 Make sure you are using this method whenever composing 'MATCH' search
 statement. Note: this method does not perform quoting, you should place the
 result in the quotes an perform additional escaping for it manually, the best
 way to do it is using PDO parameter.

    [$str] (string) String to be escaped.



 vim:tw=78:ts=8:ft=help:norl:
