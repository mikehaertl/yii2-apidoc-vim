
*yii/console/widgets/Table*   >> |yii/base/Widget|
===========================

DESCRIPTION
------------------------------------------------------------------------------

 For example,

   $table = new Table();

   echo $table
       ->setHeaders(['test1', 'test2', 'test3'])
       ->setRows([
           ['col1', 'col2', 'col3'],
           ['col1', 'col2', ['col3-0', 'col3-1', 'col3-2']],
       ])
       ->run();

 or

 '''php echo Table::widget([     'headers' => ['test1', 'test2', 'test3'],    
 'rows' => [         ['col1', 'col2', 'col3'],         ['col1', 'col2',
 ['col3-0', 'col3-1', 'col3-2'',     ], ]);



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Widget::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Widget::begin|
 |yii/base/Widget::end|
 |yii/base/Widget::widget|
 |yii/base/Widget::getId|
 |yii/base/Widget::setId|
 |yii/base/Widget::getView|
 |yii/base/Widget::setView|
 |yii/base/Widget::render|
 |yii/base/Widget::renderFile|
 |yii/base/Widget::getViewPath|
 |yii/base/Widget::beforeRun|
 |yii/base/Widget::afterRun|


*yii/console/widgets/Table::run*				public
>
 run()
<
return (string) The rendered table



*yii/console/widgets/Table::setHeaders*			public
>
 setHeaders($headers)
<
return ($this) 

 Set table headers.

    [$headers] (array) Table headers


*yii/console/widgets/Table::setRows*			public
>
 setRows($rows)
<
return ($this) 

 Set table rows.

    [$rows] (array) Table rows


*yii/console/widgets/Table::setChars*			public
>
 setChars($chars)
<
return ($this) 

 Set table chars.

    [$chars] (array) Table chars


*yii/console/widgets/Table::setScreenWidth*		public
>
 setScreenWidth($width)
<
return ($this) 

 Set screen width.

    [$width] (int) Screen width


*yii/console/widgets/Table::setListPrefix*		public
>
 setListPrefix($listPrefix)
<
return ($this) 

 Set list prefix.

    [$listPrefix] (string) List prefix


*yii/console/widgets/Table::renderRow*			protected
>
 renderRow($row, $spanLeft, $spanMiddle, $spanRight)
<
return (string) 

 Renders a row of data into a string.

    [$row] (array) Row of data
    [$spanLeft] (string) Character for left border
    [$spanMiddle] (string) Character for middle border
    [$spanRight] (string) Character for right border


*yii/console/widgets/Table::renderSeparator*		protected
>
 renderSeparator($spanLeft, $spanMid, $spanMidMid, $spanRight)
<
return (string) The generated separator row

 Renders separator.

    [$spanLeft] (string) Character for left border
    [$spanMid] (string) Character for middle border
    [$spanMidMid] (string) Character for middle-middle border
    [$spanRight] (string) Character for right border


*yii/console/widgets/Table::calculateRowsSize*		protected
>
 calculateRowsSize()
<
return (void)

 Calculate the size of rows to draw anchor of columns in console.


*yii/console/widgets/Table::calculateRowHeight*		protected
>
 calculateRowHeight($row)
<
return (int) Maximum row per cell

 Calculate the height of a row.

    [$row] (array) 


*yii/console/widgets/Table::getScreenWidth*		protected
>
 getScreenWidth()
<
return (int) Screen width

 Getting screen width.

 If it is not able to determine screen width, default value '123' will be set.



 vim:tw=78:ts=8:ft=help:norl:
