
*yii/caching/ArrayCache*   >> |yii/caching/Cache|
========================

DESCRIPTION
------------------------------------------------------------------------------

 See 'Cache' for common cache operations that ArrayCache supports.

 Unlike the 'Cache', ArrayCache allows the expire parameter of 'set', 'add',
 'multiSet' and 'multiAdd' to be a floating point number, so you may specify
 the time in milliseconds (e.g. 0.1 will be 100 milliseconds).

 For enhanced performance of ArrayCache, you can disable serialization of the
 stored data by setting '$serializer' to 'false'.

 For more details and usage information on Cache, see the [guide article on
 caching](guide:caching-overview).



METHOD DETAILS
------------------------------------------------------------------------------


*yii/caching/ArrayCache::className*			public

 See |yii/base/BaseObject::className|


*yii/caching/ArrayCache::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/caching/ArrayCache::init*				public

 See |yii/base/BaseObject::init|


*yii/caching/ArrayCache::__get*				public

 See |yii/base/Component::__get|


*yii/caching/ArrayCache::__set*				public

 See |yii/base/Component::__set|


*yii/caching/ArrayCache::__isset*				public

 See |yii/base/Component::__isset|


*yii/caching/ArrayCache::__unset*				public

 See |yii/base/Component::__unset|


*yii/caching/ArrayCache::__call*				public

 See |yii/base/Component::__call|


*yii/caching/ArrayCache::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/caching/ArrayCache::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/caching/ArrayCache::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/caching/ArrayCache::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/caching/ArrayCache::__clone*				public

 See |yii/base/Component::__clone|


*yii/caching/ArrayCache::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/caching/ArrayCache::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/caching/ArrayCache::on*				public

 See |yii/base/Component::on|


*yii/caching/ArrayCache::off*				public

 See |yii/base/Component::off|


*yii/caching/ArrayCache::trigger*				public

 See |yii/base/Component::trigger|


*yii/caching/ArrayCache::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/caching/ArrayCache::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/caching/ArrayCache::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/caching/ArrayCache::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/caching/ArrayCache::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/caching/ArrayCache::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/caching/ArrayCache::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/caching/ArrayCache::buildKey*			public

 See |yii/caching/Cache::buildKey|


*yii/caching/ArrayCache::get*				public

 See |yii/caching/Cache::get|


*yii/caching/ArrayCache::exists*				public
>
 exists($key)
<
return (bool) True if a value exists in cache, false if the value is not in the cache
or expired.



 This can be faster than getting the value from the cache if the data is big.
 In case a cache does not support this feature natively, this method will try
 to simulate it but has no performance improvement over getting it. Note that
 this method does not check whether the dependency associated with the cached
 data, if there is any, has changed. So a call to 'get' may return false while
 exists returns true.



    [$key] (mixed) A key identifying the cached value. This can be a simple
    string or a complex data structure consisting of factors representing the
    key.


*yii/caching/ArrayCache::mget*				public

 See |yii/caching/Cache::mget|


*yii/caching/ArrayCache::multiGet*			public

 See |yii/caching/Cache::multiGet|


*yii/caching/ArrayCache::set*				public

 See |yii/caching/Cache::set|


*yii/caching/ArrayCache::mset*				public

 See |yii/caching/Cache::mset|


*yii/caching/ArrayCache::multiSet*			public

 See |yii/caching/Cache::multiSet|


*yii/caching/ArrayCache::madd*				public

 See |yii/caching/Cache::madd|


*yii/caching/ArrayCache::multiAdd*			public

 See |yii/caching/Cache::multiAdd|


*yii/caching/ArrayCache::add*				public

 See |yii/caching/Cache::add|


*yii/caching/ArrayCache::delete*				public

 See |yii/caching/Cache::delete|


*yii/caching/ArrayCache::flush*				public

 See |yii/caching/Cache::flush|


*yii/caching/ArrayCache::getValue*			protected
>
 getValue($key)
<
return (mixed|false) The value stored in cache, false if the value is not in the
cache or expired. Most often value is a string. If you have disabled
'serializer', it could be something else.



 This method should be implemented by child classes to retrieve the data from
 specific cache storage.



    [$key] (string) A unique key identifying the cached value


*yii/caching/ArrayCache::setValue*			protected
>
 setValue($key, $value, $duration)
<
return (bool) True if the value is successfully stored into cache, false otherwise



 This method should be implemented by child classes to store the data in
 specific cache storage.



    [$key] (string) The key identifying the value to be cached
    [$value] (mixed) The value to be cached. Most often it's a string. If you
    have disabled 'serializer', it could be something else.
    [$duration] (int) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/ArrayCache::addValue*			protected
>
 addValue($key, $value, $duration)
<
return (bool) True if the value is successfully stored into cache, false otherwise



 This method should be implemented by child classes to store the data in
 specific cache storage.



    [$key] (string) The key identifying the value to be cached
    [$value] (mixed) The value to be cached. Most often it's a string. If you
    have disabled 'serializer', it could be something else.
    [$duration] (int) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/ArrayCache::deleteValue*			protected
>
 deleteValue($key)
<
return (bool) If no error happens during deletion







    [$key] (string) The key of the value to be deleted


*yii/caching/ArrayCache::flushValues*			protected
>
 flushValues()
<
return (bool) Whether the flush operation was successful.



 Child classes may implement this method to realize the flush operation.




*yii/caching/ArrayCache::getValues*			protected

 See |yii/caching/Cache::getValues|


*yii/caching/ArrayCache::setValues*			protected

 See |yii/caching/Cache::setValues|


*yii/caching/ArrayCache::addValues*			protected

 See |yii/caching/Cache::addValues|


*yii/caching/ArrayCache::offsetExists*			public

 See |yii/caching/Cache::offsetExists|


*yii/caching/ArrayCache::offsetGet*			public

 See |yii/caching/Cache::offsetGet|


*yii/caching/ArrayCache::offsetSet*			public

 See |yii/caching/Cache::offsetSet|


*yii/caching/ArrayCache::offsetUnset*			public

 See |yii/caching/Cache::offsetUnset|


*yii/caching/ArrayCache::getOrSet*			public

 See |yii/caching/Cache::getOrSet|



 vim:tw=78:ts=8:ft=help:norl:
