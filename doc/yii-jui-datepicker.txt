
*yii/jui/DatePicker*   >> |yii/jui/InputWidget|
====================

DESCRIPTION
------------------------------------------------------------------------------

 For example to use the datepicker with a '\yii\base\Model|model':

   echo DatePicker::widget([
       'model' => $model,
       'attribute' => 'from_date',
       //'language' => 'ru',
       //'dateFormat' => 'yyyy-MM-dd',
   ]);

 The following example will use the name property instead:

   echo DatePicker::widget([
       'name'  => 'from_date',
       'value'  => $value,
       //'language' => 'ru',
       //'dateFormat' => 'yyyy-MM-dd',
   ]);

 You can also use this widget in an '\yii\widgets\ActiveForm|ActiveForm' using
 the '\yii\widgets\ActiveField::widget()|widget()' method, for example like
 this:

   <?= $form->field($model,
 'from_date')->widget(\yii\jui\DatePicker::classname(), [
       //'language' => 'ru',
       //'dateFormat' => 'yyyy-MM-dd',
   ]) ?>

 Note that and empty string ('''') and 'null' will result in an empty text
 field while '0' will be interpreted as a UNIX timestamp and result in a date
 displayed as '1970-01-01'. It is recommended to add a validation filter in
 your model that sets the value to 'null' in case when no date has been
 entered:

   [['from_date'], 'default', 'value' => null],




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Widget::$counter|
 |yii/base/Widget::$autoIdPrefix|
 |yii/base/Widget::$stack|
 |yii/jui/Widget::$options|
 |yii/jui/Widget::$clientOptions|
 |yii/jui/Widget::$clientEvents|
 |yii/jui/Widget::$clientEventMap|
 |yii/jui/InputWidget::$model|
 |yii/jui/InputWidget::$name|


$attribute				*yii/jui/DatePicker::$attribute*

 (string) The model attribute that this widget is associated with. The value
 of the attribute will be converted using
 '\yii\i18n\Formatter::asDate()|'Yii::$app->formatter->asDate()'' with the
 'dateFormat' if it is not null.

$value					*yii/jui/DatePicker::$value*

 (string) The input value. This value will be converted using
 '\yii\i18n\Formatter::asDate()|'Yii::$app->formatter->asDate()'' with the
 'dateFormat' if it is not null.

$language				*yii/jui/DatePicker::$language*

 (string) The locale ID (e.g. 'fr', 'de', 'en-GB') for the language to be used
 by the date picker. If this property is empty, then the current application
 language will be used.

 Since version 2.0.2 a fallback is used if the application language includes a
 locale part (e.g. 'de-DE') and the language file does not exist, it will fall
 back to using 'de'.

$inline					*yii/jui/DatePicker::$inline*

 (boolean) If true, shows the widget as an inline calendar and the input as a
 hidden field.

$containerOptions			*yii/jui/DatePicker::$containerOptions*

 (array) The HTML attributes for the container tag. This is only used when
 'inline' is true.

$dateFormat				*yii/jui/DatePicker::$dateFormat*

 (string) The format string to be used for formatting the date value. This
 option will be used to populate the 'clientOptions|clientOption'
 'dateFormat'. The value can be one of "short", "medium", "long", or "full",
 which represents a preset format of different lengths.

 It can also be a custom format as specified in the [ICU
 manual](http://userguide.icu-project.org/formatparse/datetime#TOC-Date-Time-Format-Syntax).
 Alternatively this can be a string prefixed with 'php:' representing a format
 that can be recognized by the PHP
 [date()](http://php.net/manual/de/function.date.php)-function.

 For example:

   'MM/dd/yyyy' // date in ICU format
   'php:m/d/Y' // the same date in PHP format

 If not set the default value will be taken from
 'Yii::$app->formatter->dateFormat'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Widget::begin|
 |yii/base/Widget::end|
 |yii/base/Widget::widget|
 |yii/base/Widget::getId|
 |yii/base/Widget::setId|
 |yii/base/Widget::getView|
 |yii/base/Widget::setView|
 |yii/base/Widget::render|
 |yii/base/Widget::renderFile|
 |yii/base/Widget::getViewPath|
 |yii/base/Widget::beforeRun|
 |yii/base/Widget::afterRun|
 |yii/jui/Widget::registerClientOptions|
 |yii/jui/Widget::registerClientEvents|
 |yii/jui/Widget::registerWidget|
 |yii/jui/InputWidget::hasModel|


*yii/jui/DatePicker::init*				public
>
 init()
<
return (void)

 Initializes the widget.



 If you override this method, make sure you call the parent implementation
 first.




*yii/jui/DatePicker::run*					public
>
 run()
<
return (void)

 Renders the widget.


*yii/jui/DatePicker::renderWidget*			protected
>
 renderWidget()
<
return (string) The rendering result.

 Renders the DatePicker widget.



 vim:tw=78:ts=8:ft=help:norl:
