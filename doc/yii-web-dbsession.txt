
*yii/web/DbSession*   >> |yii/web/MultiFieldSession|
===================

DESCRIPTION
------------------------------------------------------------------------------

 By default, DbSession stores session data in a DB table named 'session'. This
 table must be pre-created. The table name can be changed by setting
 'sessionTable'.

 The following example shows how you can configure the application to use
 DbSession: Add the following to your application config under 'components':

   'session' => [
       'class' => 'yii\web\DbSession',
       // 'db' => 'mydb',
       // 'sessionTable' => 'my_session',
   ]

 DbSession extends 'MultiFieldSession', thus it allows saving extra fields
 into the 'sessionTable'. Refer to 'MultiFieldSession' for more details.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/web/Session::$flashParam|
 |yii/web/Session::$handler|
 |yii/web/MultiFieldSession::$readCallback|
 |yii/web/MultiFieldSession::$writeCallback|
 |yii/base/Component::$behaviors|
 |yii/web/MultiFieldSession::$useCustomStorage|
 |yii/web/Session::$isActive|
 |yii/web/Session::$hasSessionId|
 |yii/web/Session::$id|
 |yii/web/Session::$name|
 |yii/web/Session::$savePath|
 |yii/web/Session::$cookieParams|
 |yii/web/Session::$useCookies|
 |yii/web/Session::$gCProbability|
 |yii/web/Session::$useTransparentSessionID|
 |yii/web/Session::$timeout|
 |yii/web/Session::$iterator|
 |yii/web/Session::$count|
 |yii/web/Session::$allFlashes|
 |yii/web/Session::$flash|
 |yii/web/Session::$cacheLimiter|


$db					*yii/web/DbSession::$db*

 (\yii\db\Connection|array|string) The DB connection object or the application
 component ID of the DB connection. After the DbSession object is created, if
 you want to change this property, you should only assign it with a DB
 connection object. Starting from version 2.0.2, this can also be a
 configuration array for creating the object.

$sessionTable				*yii/web/DbSession::$sessionTable*

 (string) The name of the DB table that stores the session data. The table
 should be pre-created as follows:

 '''sql CREATE TABLE session (     id CHAR(40) NOT NULL PRIMARY KEY,    
 expire INTEGER,     data BLOB ) '''

 where 'BLOB' refers to the BLOB-type of your preferred DBMS. Below are the
 BLOB type that can be used for some popular DBMS:


   - MySQL: LONGBLOB 
   - PostgreSQL: BYTEA 
   - MSSQL: BLOB

 When using DbSession in a production server, we recommend you create a DB
 index for the 'expire' column in the session table to improve the
 performance.

 Note that according to the php.ini setting of 'session.hash_function', you
 may need to adjust the length of the 'id' column. For example, if
 'session.hash_function=sha256', you should use length 64 instead of 40.

$fields					*yii/web/DbSession::$fields*

 (array) Session fields to be written into session table columns



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/web/MultiFieldSession::getUseCustomStorage|
 |yii/web/Session::open|
 |yii/web/Session::registerSessionHandler|
 |yii/web/Session::destroy|
 |yii/web/Session::getIsActive|
 |yii/web/Session::getHasSessionId|
 |yii/web/Session::setHasSessionId|
 |yii/web/Session::getId|
 |yii/web/Session::setId|
 |yii/web/Session::getName|
 |yii/web/Session::setName|
 |yii/web/Session::getSavePath|
 |yii/web/Session::setSavePath|
 |yii/web/Session::getCookieParams|
 |yii/web/Session::setCookieParams|
 |yii/web/Session::getUseCookies|
 |yii/web/Session::setUseCookies|
 |yii/web/Session::getGCProbability|
 |yii/web/Session::setGCProbability|
 |yii/web/Session::getUseTransparentSessionID|
 |yii/web/Session::setUseTransparentSessionID|
 |yii/web/Session::getTimeout|
 |yii/web/Session::setTimeout|
 |yii/web/Session::openSession|
 |yii/web/Session::closeSession|
 |yii/web/Session::getIterator|
 |yii/web/Session::getCount|
 |yii/web/Session::count|
 |yii/web/Session::get|
 |yii/web/Session::set|
 |yii/web/Session::remove|
 |yii/web/Session::removeAll|
 |yii/web/Session::has|
 |yii/web/Session::updateFlashCounters|
 |yii/web/Session::getFlash|
 |yii/web/Session::getAllFlashes|
 |yii/web/Session::setFlash|
 |yii/web/Session::addFlash|
 |yii/web/Session::removeFlash|
 |yii/web/Session::removeAllFlashes|
 |yii/web/Session::hasFlash|
 |yii/web/Session::offsetExists|
 |yii/web/Session::offsetGet|
 |yii/web/Session::offsetSet|
 |yii/web/Session::offsetUnset|
 |yii/web/Session::freeze|
 |yii/web/Session::unfreeze|
 |yii/web/Session::setCacheLimiter|
 |yii/web/Session::getCacheLimiter|
 |yii/web/MultiFieldSession::composeFields|
 |yii/web/MultiFieldSession::extractData|


*yii/web/DbSession::init*					public
>
 init()
<
return (void)

 Initializes the DbSession component.

 This method will initialize the 'db' property to make sure it refers to a
 valid DB connection.


*yii/web/DbSession::close*				public
>
 close()
<
return (void)

 Ends the current session and store session data.


*yii/web/DbSession::regenerateID*				public
>
 regenerateID($deleteOldSession='false')
<
return (void)

 Updates the current session ID with a newly generated one .

 Please refer to <https://secure.php.net/session_regenerate_id> for more
 details.

    [$deleteOldSession] (bool) Whether to delete the old associated session
    file or not.


*yii/web/DbSession::readSession*				public
>
 readSession($id)
<
return (string) The session data

 Session read handler.

    [$id] (string) Session ID


*yii/web/DbSession::writeSession*				public
>
 writeSession($id, $data)
<
return (bool) Whether session write is successful

 Session write handler.

    [$id] (string) Session ID
    [$data] (string) Session data


*yii/web/DbSession::destroySession*			public
>
 destroySession($id)
<
return (bool) Whether session is destroyed successfully

 Session destroy handler.

    [$id] (string) Session ID


*yii/web/DbSession::gcSession*				public
>
 gcSession($maxLifetime)
<
return (bool) Whether session is GCed successfully

 Session GC (garbage collection) handler.

    [$maxLifetime] (int) The number of seconds after which data will be seen
    as 'garbage' and cleaned up.


*yii/web/DbSession::typecastFields*			protected
>
 typecastFields($fields)
<
return (array) 

 Method typecasts $fields before passing them to PDO.

 Default implementation casts field 'data' to '\PDO::PARAM_LOB'. You can
 override this method in case you need special type casting.

    [$fields] (array) Fields, that will be passed to PDO. Key 
      - name, Value - value



 vim:tw=78:ts=8:ft=help:norl:
