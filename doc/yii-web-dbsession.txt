
*yii/web/DbSession*   >> |yii/web/Session|
===================

DESCRIPTION
------------------------------------------------------------------------------

 By default, DbSession stores session data in a DB table named 'session'. This
 table must be pre-created. The table name can be changed by setting
 'sessionTable'.

 The following example shows how you can configure the application to use
 DbSession: Add the following to your application config under 'components':

   $session = new Session;
   $session->open();
   $value1 = $session['name1'];  // get session variable 'name1'
   $value2 = $session['name2'];  // get session variable 'name2'
   foreach ($session as $name => $value) // traverse all session variables
   $session['name3'] = $value3;  // set session variable 'name3'




PROPERTY DETAILS
------------------------------------------------------------------------------

$flashParam				*yii/web/DbSession::$flashParam*
 See |yii/web/Session::$flashParam|

$handler				*yii/web/DbSession::$handler*
 See |yii/web/Session::$handler|

$db					*yii/web/DbSession::$db*
 (\yii\db\Connection|string) The DB connection object or the application
 component ID of the DB connection. After the DbSession object is created, if
 you want to change this property, you should only assign it with a DB
 connection object.

$sessionTable				*yii/web/DbSession::$sessionTable*
 (string) The name of the DB table that stores the session data. The table
 should be pre-created as follows:

   'session' => [
       'class' => 'yii\web\DbSession',
       // 'db' => 'mydb',
       // 'sessionTable' => 'my_session',
   ]

 where 'BLOB' refers to the BLOB-type of your preferred DBMS. Below are the
 BLOB type that can be used for some popular DBMS:


   - MySQL: LONGBLOB 
   - PostgreSQL: BYTEA 
   - MSSQL: BLOB

 When using DbSession in a production server, we recommend you create a DB
 index for the 'expire' column in the session table to improve the
 performance.

$behaviors				*yii/web/DbSession::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$useCustomStorage			*yii/web/DbSession::$useCustomStorage*
 (boolean) Whether to use custom storage.

$isActive				*yii/web/DbSession::$isActive*
 (boolean) Whether the session has started

$hasSessionId				*yii/web/DbSession::$hasSessionId*
 (boolean) Whether the current request has sent the session ID.

$id					*yii/web/DbSession::$id*
 (string) The current session ID

$name					*yii/web/DbSession::$name*
 (string) The current session name

$savePath				*yii/web/DbSession::$savePath*
 (string) The current session save path, defaults to '/tmp'.

$cookieParams				*yii/web/DbSession::$cookieParams*
 (array) The session cookie parameters.

$useCookies				*yii/web/DbSession::$useCookies*
 (boolean|null) The value indicating whether cookies should be used to store
 session IDs.

$gCProbability				*yii/web/DbSession::$gCProbability*
 (float) The probability (percentage) that the GC (garbage collection) process
 is started on every session initialization, defaults to 1 meaning 1% chance.

$useTransparentSessionID		*yii/web/DbSession::$useTransparentSessionID*
 (boolean) Whether transparent sid support is enabled or not, defaults to
 false.

$timeout				*yii/web/DbSession::$timeout*
 (integer) The number of seconds after which data will be seen as 'garbage'
 and cleaned up. The default value is 1440 seconds (or the value of
 "session.gc_maxlifetime" set in php.ini).

$iterator				*yii/web/DbSession::$iterator*
 (\yii\web\SessionIterator) An iterator for traversing the session variables.

$count					*yii/web/DbSession::$count*
 (integer) The number of session variables

$allFlashes				*yii/web/DbSession::$allFlashes*
 (array) Flash messages (key => message).

$flash					*yii/web/DbSession::$flash*
 (string) The key identifying the flash message. Note that flash messages and
 normal session variables share the same name space. If you have a normal
 session variable using the same name, its value will be overwritten by this
 method.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/web/DbSession::className*				public
 See |yii/base/Object::className|


*yii/web/DbSession::__construct*				public
 See |yii/base/Object::__construct|


*yii/web/DbSession::init*					public
>
 init()
<
(void)

 This method will initialize the 'db' property to make sure it refers to a
 valid DB connection.


*yii/web/DbSession::__get*				public
 See |yii/base/Component::__get|


*yii/web/DbSession::__set*				public
 See |yii/base/Component::__set|


*yii/web/DbSession::__isset*				public
 See |yii/base/Component::__isset|


*yii/web/DbSession::__unset*				public
 See |yii/base/Component::__unset|


*yii/web/DbSession::__call*				public
 See |yii/base/Component::__call|


*yii/web/DbSession::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/web/DbSession::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/web/DbSession::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/web/DbSession::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/web/DbSession::__clone*				public
 See |yii/base/Component::__clone|


*yii/web/DbSession::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/web/DbSession::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/web/DbSession::on*					public
 See |yii/base/Component::on|


*yii/web/DbSession::off*					public
 See |yii/base/Component::off|


*yii/web/DbSession::trigger*				public
 See |yii/base/Component::trigger|


*yii/web/DbSession::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/web/DbSession::getBehaviors*				public
 See |yii/base/Component::getBehaviors|


*yii/web/DbSession::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/web/DbSession::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/web/DbSession::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/web/DbSession::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/web/DbSession::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/web/DbSession::getUseCustomStorage*			public
>
 getUseCustomStorage()
<
(boolean) Whether to use custom storage.

 This method overrides the parent implementation and always returns true.


*yii/web/DbSession::open*					public
 See |yii/web/Session::open|


*yii/web/DbSession::registerSessionHandler*		protected
 See |yii/web/Session::registerSessionHandler|


*yii/web/DbSession::close*				public
 See |yii/web/Session::close|


*yii/web/DbSession::destroy*				public
 See |yii/web/Session::destroy|


*yii/web/DbSession::getIsActive*				public
 See |yii/web/Session::getIsActive|


*yii/web/DbSession::getHasSessionId*			public
 See |yii/web/Session::getHasSessionId|


*yii/web/DbSession::setHasSessionId*			public
 See |yii/web/Session::setHasSessionId|


*yii/web/DbSession::getId*				public
 See |yii/web/Session::getId|


*yii/web/DbSession::setId*				public
 See |yii/web/Session::setId|


*yii/web/DbSession::regenerateID*				public
>
 regenerateID($deleteOldSession='false')
<
(void)

 Please refer to <http://php.net/session_regenerate_id> for more details.
    [$deleteOldSession] (boolean) Whether to delete the old associated session
    file or not.


*yii/web/DbSession::getName*				public
 See |yii/web/Session::getName|


*yii/web/DbSession::setName*				public
 See |yii/web/Session::setName|


*yii/web/DbSession::getSavePath*				public
 See |yii/web/Session::getSavePath|


*yii/web/DbSession::setSavePath*				public
 See |yii/web/Session::setSavePath|


*yii/web/DbSession::getCookieParams*			public
 See |yii/web/Session::getCookieParams|


*yii/web/DbSession::setCookieParams*			public
 See |yii/web/Session::setCookieParams|


*yii/web/DbSession::getUseCookies*			public
 See |yii/web/Session::getUseCookies|


*yii/web/DbSession::setUseCookies*			public
 See |yii/web/Session::setUseCookies|


*yii/web/DbSession::getGCProbability*			public
 See |yii/web/Session::getGCProbability|


*yii/web/DbSession::setGCProbability*			public
 See |yii/web/Session::setGCProbability|


*yii/web/DbSession::getUseTransparentSessionID*		public
 See |yii/web/Session::getUseTransparentSessionID|


*yii/web/DbSession::setUseTransparentSessionID*		public
 See |yii/web/Session::setUseTransparentSessionID|


*yii/web/DbSession::getTimeout*				public
 See |yii/web/Session::getTimeout|


*yii/web/DbSession::setTimeout*				public
 See |yii/web/Session::setTimeout|


*yii/web/DbSession::openSession*				public
 See |yii/web/Session::openSession|


*yii/web/DbSession::closeSession*				public
 See |yii/web/Session::closeSession|


*yii/web/DbSession::readSession*				public
>
 readSession($id)
<
(string) The session data

 Do not call this method directly.
    [$id] (string) Session ID


*yii/web/DbSession::writeSession*				public
>
 writeSession($id, $data)
<
(boolean) Whether session write is successful

 Do not call this method directly.
    [$id] (string) Session ID
    [$data] (string) Session data


*yii/web/DbSession::destroySession*			public
>
 destroySession($id)
<
(boolean) Whether session is destroyed successfully

 Do not call this method directly.
    [$id] (string) Session ID


*yii/web/DbSession::gcSession*				public
>
 gcSession($maxLifetime)
<
(boolean) Whether session is GCed successfully

 Do not call this method directly.
    [$maxLifetime] (integer) The number of seconds after which data will be
    seen as 'garbage' and cleaned up.


*yii/web/DbSession::getIterator*				public
 See |yii/web/Session::getIterator|


*yii/web/DbSession::getCount*				public
 See |yii/web/Session::getCount|


*yii/web/DbSession::count*				public
 See |yii/web/Session::count|


*yii/web/DbSession::get*					public
 See |yii/web/Session::get|


*yii/web/DbSession::set*					public
 See |yii/web/Session::set|


*yii/web/DbSession::remove*				public
 See |yii/web/Session::remove|


*yii/web/DbSession::removeAll*				public
 See |yii/web/Session::removeAll|


*yii/web/DbSession::has*					public
 See |yii/web/Session::has|


*yii/web/DbSession::updateFlashCounters*			protected
 See |yii/web/Session::updateFlashCounters|


*yii/web/DbSession::getFlash*				public
 See |yii/web/Session::getFlash|


*yii/web/DbSession::getAllFlashes*			public
 See |yii/web/Session::getAllFlashes|


*yii/web/DbSession::setFlash*				public
 See |yii/web/Session::setFlash|


*yii/web/DbSession::removeFlash*				public
 See |yii/web/Session::removeFlash|


*yii/web/DbSession::removeAllFlashes*			public
 See |yii/web/Session::removeAllFlashes|


*yii/web/DbSession::hasFlash*				public
 See |yii/web/Session::hasFlash|


*yii/web/DbSession::offsetExists*				public
 See |yii/web/Session::offsetExists|


*yii/web/DbSession::offsetGet*				public
 See |yii/web/Session::offsetGet|


*yii/web/DbSession::offsetSet*				public
 See |yii/web/Session::offsetSet|


*yii/web/DbSession::offsetUnset*				public
 See |yii/web/Session::offsetUnset|



 vim:tw=78:ts=8:ft=help:norl:
