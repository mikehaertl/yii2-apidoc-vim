
*yii/grid/GridView*   >> |yii/widgets/BaseListView|
===================

DESCRIPTION
------------------------------------------------------------------------------

 It provides features like 'sorter|sorting', 'pager|paging' and also
 'filterModel|filtering' the data.

 A basic usage looks like the following:

   <?= GridView::widget([
       'dataProvider' => $dataProvider,
       'columns' => [
           'id',
           'name',
           'created_at:datetime',
           // ...
       ],
   ]) ?>

 The columns of the grid table are configured in terms of 'Column' classes,
 which are configured via 'columns'.

 The look and feel of a grid view can be customized using the large amount of
 properties.

 For more details and usage information on GridView, see the [guide article on
 data widgets](guide:output-data-widgets).


PROPERTY DETAILS
------------------------------------------------------------------------------

$counter				*yii/grid/GridView::$counter*

 See |yii/base/Widget::$counter|

$autoIdPrefix				*yii/grid/GridView::$autoIdPrefix*

 See |yii/base/Widget::$autoIdPrefix|

$stack					*yii/grid/GridView::$stack*

 See |yii/base/Widget::$stack|

$options				*yii/grid/GridView::$options*

 (array) The HTML attributes for the container tag of the grid view. The "tag"
 element specifies the tag name of the container element and defaults to
 "div".

$dataProvider				*yii/grid/GridView::$dataProvider*

 See |yii/widgets/BaseListView::$dataProvider|

$pager					*yii/grid/GridView::$pager*

 See |yii/widgets/BaseListView::$pager|

$sorter					*yii/grid/GridView::$sorter*

 See |yii/widgets/BaseListView::$sorter|

$summary				*yii/grid/GridView::$summary*

 See |yii/widgets/BaseListView::$summary|

$summaryOptions				*yii/grid/GridView::$summaryOptions*

 See |yii/widgets/BaseListView::$summaryOptions|

$showOnEmpty				*yii/grid/GridView::$showOnEmpty*

 (bool) Whether to show the grid view if 'dataProvider' returns no data.

$emptyText				*yii/grid/GridView::$emptyText*

 See |yii/widgets/BaseListView::$emptyText|

$emptyTextOptions			*yii/grid/GridView::$emptyTextOptions*

 See |yii/widgets/BaseListView::$emptyTextOptions|

$layout					*yii/grid/GridView::$layout*

 (string) The layout that determines how different sections of the grid view
 should be organized. The following tokens will be replaced with the
 corresponding section contents:


   - '{summary}': the summary section. See 'renderSummary()'. 
   - '{errors}': the filter model error summary. See 'renderErrors()'. 
   - '{items}': the list items. See 'renderItems()'. 
   - '{sorter}': the sorter. See 'renderSorter()'. 
   - '{pager}': the pager. See 'renderPager()'.

$dataColumnClass			*yii/grid/GridView::$dataColumnClass*

 (string) The default data column class if the class name is not explicitly
 specified when configuring a data column. Defaults to 'yii\grid\DataColumn'.

$caption				*yii/grid/GridView::$caption*

 (string) The caption of the grid table

$captionOptions				*yii/grid/GridView::$captionOptions*

 (array) The HTML attributes for the caption element.

$tableOptions				*yii/grid/GridView::$tableOptions*

 (array) The HTML attributes for the grid table element.

$headerRowOptions			*yii/grid/GridView::$headerRowOptions*

 (array) The HTML attributes for the table header row.

$footerRowOptions			*yii/grid/GridView::$footerRowOptions*

 (array) The HTML attributes for the table footer row.

$rowOptions				*yii/grid/GridView::$rowOptions*

 (array|\Closure) The HTML attributes for the table body rows. This can be
 either an array specifying the common HTML attributes for all body rows, or
 an anonymous function that returns an array of the HTML attributes. The
 anonymous function will be called once for every data model returned by
 'dataProvider'. It should have the following signature:

   function ($model, $key, $index, $grid)


   - '$model': the current data model being rendered 
   - '$key': the key value associated with the current data model 
   - '$index': the zero-based index of the data model in the model
   array returned by 'dataProvider' 
   - '$grid': the GridView object

$beforeRow				*yii/grid/GridView::$beforeRow*

 (\Closure) An anonymous function that is called once BEFORE rendering each
 data model. It should have the similar signature as 'rowOptions'. The return
 result of the function will be rendered directly.

$afterRow				*yii/grid/GridView::$afterRow*

 (\Closure) An anonymous function that is called once AFTER rendering each
 data model. It should have the similar signature as 'rowOptions'. The return
 result of the function will be rendered directly.

$showHeader				*yii/grid/GridView::$showHeader*

 (bool) Whether to show the header section of the grid table.

$showFooter				*yii/grid/GridView::$showFooter*

 (bool) Whether to show the footer section of the grid table.

$formatter				*yii/grid/GridView::$formatter*

 (array|\yii\i18n\Formatter) The formatter used to format model attribute
 values into displayable texts. This can be either an instance of 'Formatter'
 or an configuration array for creating the 'Formatter' instance. If this
 property is not set, the "formatter" application component will be used.

$columns				*yii/grid/GridView::$columns*

 (array) Grid column configuration. Each array element represents the
 configuration for one particular grid column. For example,

   [
       ['class' => SerialColumn::className()],
       [
           'class' => DataColumn::className(), // this line is optional
           'attribute' => 'name',
           'format' => 'text',
           'label' => 'Name',
       ],
       ['class' => CheckboxColumn::className()],
   ]

 If a column is of class 'DataColumn', the "class" element can be omitted.

 As a shortcut format, a string may be used to specify the configuration of a
 data column which only contains 'DataColumn::attribute|attribute',
 'DataColumn::format|format', and/or 'DataColumn::label|label' options:
 '"attribute:format:label"'. For example, the above "name" column can also be
 specified as: '"name:text:Name"'. Both "format" and "label" are optional.
 They will take default values if absent.

 Using the shortcut format the configuration for columns in simple cases would
 look like this:

   [
       'id',
       'amount:currency:Total Amount',
       'created_at:datetime',
   ]

 When using a 'dataProvider' with active records, you can also display values
 from related records, e.g. the 'name' attribute of the 'author' relation:

   // shortcut syntax
   'author.name',
   // full syntax
   [
       'attribute' => 'author.name',
       // ...
   ]



$emptyCell				*yii/grid/GridView::$emptyCell*

 (string) The HTML display when the content of a cell is empty. This property
 is used to render cells that have no defined content, e.g. empty footer or
 filter cells.

 Note that this is not used by the 'DataColumn' if a data item is 'null'. In
 that case the '\yii\i18n\Formatter::nullDisplay|nullDisplay' property of the
 'formatter' will be used to indicate an empty data value.

$filterModel				*yii/grid/GridView::$filterModel*

 (\yii\base\Model) The model that keeps the user-entered filter data. When
 this property is set, the grid view will enable column-based filtering. Each
 data column by default will display a text field at the top that users can
 fill in to filter the data.

 Note that in order to show an input field for filtering, a column must have
 its 'DataColumn::attribute' property set and the attribute should be active
 in the current scenario of $filterModel or have 'DataColumn::filter' set as
 the HTML code for the input field.

 When this property is not set (null) the filtering feature is disabled.

$filterUrl				*yii/grid/GridView::$filterUrl*

 (string|array) The URL for returning the filtering result. 'Url::to()' will
 be called to normalize the URL. If not set, the current controller action
 will be used. When the user makes change to any filter input, the current
 filtering inputs will be appended as GET parameters to this URL.

$filterSelector				*yii/grid/GridView::$filterSelector*

 (string) Additional jQuery selector for selecting filter input fields

$filterPosition				*yii/grid/GridView::$filterPosition*

 (string) Whether the filters should be displayed in the grid view. Valid
 values include:


   - 'FILTER_POS_HEADER': the filters will be displayed on top of each
   column's header cell. 
   - 'FILTER_POS_BODY': the filters will be displayed right below each
   column's header cell. 
   - 'FILTER_POS_FOOTER': the filters will be displayed below each
   column's footer cell.

$filterRowOptions			*yii/grid/GridView::$filterRowOptions*

 (array) The HTML attributes for the filter row element.

$filterErrorSummaryOptions		*yii/grid/GridView::$filterErrorSummaryOptions*

 (array) The options for rendering the filter error summary. Please refer to
 'Html::errorSummary()' for more details about how to specify the options.

$filterErrorOptions			*yii/grid/GridView::$filterErrorOptions*

 (array) The options for rendering every filter error message. This is mainly
 used by 'Html::error()' when rendering an error message next to every filter
 input field.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/grid/GridView::className*				public

 See |yii/base/BaseObject::className|


*yii/grid/GridView::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/grid/GridView::init*					public
>
 init()
<
return (void)

 This method will initialize required property values and instantiate
 'columns' objects.


*yii/grid/GridView::__get*				public

 See |yii/base/Component::__get|


*yii/grid/GridView::__set*				public

 See |yii/base/Component::__set|


*yii/grid/GridView::__isset*				public

 See |yii/base/Component::__isset|


*yii/grid/GridView::__unset*				public

 See |yii/base/Component::__unset|


*yii/grid/GridView::__call*				public

 See |yii/base/Component::__call|


*yii/grid/GridView::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/grid/GridView::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/grid/GridView::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/grid/GridView::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/grid/GridView::__clone*				public

 See |yii/base/Component::__clone|


*yii/grid/GridView::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/grid/GridView::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/grid/GridView::on*					public

 See |yii/base/Component::on|


*yii/grid/GridView::off*					public

 See |yii/base/Component::off|


*yii/grid/GridView::trigger*				public

 See |yii/base/Component::trigger|


*yii/grid/GridView::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/grid/GridView::getBehaviors*				public

 See |yii/base/Component::getBehaviors|


*yii/grid/GridView::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/grid/GridView::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/grid/GridView::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/grid/GridView::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/grid/GridView::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/grid/GridView::begin*				public

 See |yii/base/Widget::begin|


*yii/grid/GridView::end*					public

 See |yii/base/Widget::end|


*yii/grid/GridView::widget*				public

 See |yii/base/Widget::widget|


*yii/grid/GridView::getId*				public

 See |yii/base/Widget::getId|


*yii/grid/GridView::setId*				public

 See |yii/base/Widget::setId|


*yii/grid/GridView::getView*				public

 See |yii/base/Widget::getView|


*yii/grid/GridView::setView*				public

 See |yii/base/Widget::setView|


*yii/grid/GridView::run*					public
>
 run()
<
return (void)



*yii/grid/GridView::render*				public

 See |yii/base/Widget::render|


*yii/grid/GridView::renderFile*				public

 See |yii/base/Widget::renderFile|


*yii/grid/GridView::getViewPath*				public

 See |yii/base/Widget::getViewPath|


*yii/grid/GridView::beforeRun*				public

 See |yii/base/Widget::beforeRun|


*yii/grid/GridView::afterRun*				public

 See |yii/base/Widget::afterRun|


*yii/grid/GridView::renderItems*				public
>
 renderItems()
<
return (void)



*yii/grid/GridView::renderSection*			public
>
 renderSection($name)
<
return (string|bool) The rendering result of the section, or false if the named
section is not supported.



 If the named section is not supported, false will be returned.



    [$name] (string) The section name, e.g., '{summary}', '{items}'.


*yii/grid/GridView::renderEmpty*				public

 See |yii/widgets/BaseListView::renderEmpty|


*yii/grid/GridView::renderSummary*			public

 See |yii/widgets/BaseListView::renderSummary|


*yii/grid/GridView::renderPager*				public

 See |yii/widgets/BaseListView::renderPager|


*yii/grid/GridView::renderSorter*				public

 See |yii/widgets/BaseListView::renderSorter|


*yii/grid/GridView::renderErrors*				public
>
 renderErrors()
<
return (string) The rendering result.



*yii/grid/GridView::getClientOptions*			protected
>
 getClientOptions()
<
return (array) The options



*yii/grid/GridView::renderCaption*			public
>
 renderCaption()
<
return (bool|string) The rendered caption element or 'false' if no caption element
should be rendered.



*yii/grid/GridView::renderColumnGroup*			public
>
 renderColumnGroup()
<
return (bool|string) The column group HTML or 'false' if no column group should be
rendered.



*yii/grid/GridView::renderTableHeader*			public
>
 renderTableHeader()
<
return (string) The rendering result.



*yii/grid/GridView::renderTableFooter*			public
>
 renderTableFooter()
<
return (string) The rendering result.



*yii/grid/GridView::renderFilters*			public
>
 renderFilters()
<
return (string) The rendering result.



*yii/grid/GridView::renderTableBody*			public
>
 renderTableBody()
<
return (string) The rendering result.



*yii/grid/GridView::renderTableRow*			public
>
 renderTableRow($model, $key, $index)
<
return (string) The rendering result

    [$model] (mixed) The data model to be rendered
    [$key] (mixed) The key associated with the data model
    [$index] (int) The zero-based index of the data model among the model
    array returned by 'dataProvider'.


*yii/grid/GridView::initColumns*				protected
>
 initColumns()
<
return (void)



*yii/grid/GridView::createDataColumn*			protected
>
 createDataColumn($text)
<
return (\yii\grid\DataColumn) The column instance

    [$text] (string) The column specification string


*yii/grid/GridView::guessColumns*				protected
>
 guessColumns()
<
return (void)




 vim:tw=78:ts=8:ft=help:norl:
