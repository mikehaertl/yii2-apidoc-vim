
*yii/web/ViewAction*   >> |yii/base/Action|
====================

DESCRIPTION
------------------------------------------------------------------------------

 By default, the view being displayed is specified via the 'view' GET
 parameter. The name of the GET parameter can be customized via 'viewParam'.

 Users specify a view in the format of 'path/to/view', which translates to the
 view name 'ViewPrefix/path/to/view' where 'ViewPrefix' is given by
 'viewPrefix'. The view will then be rendered by the
 '\yii\base\Controller::render()|render()' method of the currently active
 controller.

 Note that the user-specified view name must start with a word character and
 can only contain word characters, forward slashes, dots and dashes.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Action::$id|
 |yii/base/Action::$controller|
 |yii/base/Component::$behaviors|
 |yii/base/Action::$uniqueId|


$viewParam				*yii/web/ViewAction::$viewParam*

 (string) The name of the GET parameter that contains the requested view name.

$defaultView				*yii/web/ViewAction::$defaultView*

 (string) The name of the default view when '\yii\web\ViewAction::$viewParam'
 GET parameter is not provided by user. Defaults to 'index'. This should be in
 the format of 'path/to/view', similar to that given in the GET parameter.

$viewPrefix				*yii/web/ViewAction::$viewPrefix*

 (string) A string to be prefixed to the user-specified view name to form a
 complete view name. For example, if a user requests for 'tutorial/chap1', the
 corresponding view name will be 'pages/tutorial/chap1', assuming the prefix
 is 'pages'. The actual view file is determined by
 '\yii\base\View::findViewFile()'.

$layout					*yii/web/ViewAction::$layout*

 (mixed) The name of the layout to be applied to the requested view. This will
 be assigned to '\yii\base\Controller::$layout' before the view is rendered.
 Defaults to null, meaning the controller's layout will be used. If false, no
 layout will be applied.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Action::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Action::getUniqueId|
 |yii/base/Action::runWithParams|
 |yii/base/Action::beforeRun|
 |yii/base/Action::afterRun|


*yii/web/ViewAction::run*					public
>
 run()
<
return (void)

 Runs the action.

 This method displays the view requested by the user.


*yii/web/ViewAction::render*				protected
>
 render($viewName)
<
return (string) Result of the rendering

 Renders a view.

    [$viewName] (string) View name


*yii/web/ViewAction::resolveViewName*			protected
>
 resolveViewName()
<
return (string) The resolved view name

 Resolves the view name currently being requested.



 vim:tw=78:ts=8:ft=help:norl:
