
*yii/rbac/ManagerInterface*  
===========================



METHOD DETAILS
------------------------------------------------------------------------------


*yii/rbac/ManagerInterface::checkAccess*			public

 See |yii/rbac/CheckAccessInterface::checkAccess|


*yii/rbac/ManagerInterface::createRole*			public
>
 createRole($name)
<
return (\yii\rbac\Role) The new Role object

 Creates a new Role object.

 Note that the newly created role is not added to the RBAC system yet. You
 must fill in the needed data and call 'add()' to add it to the system.

    [$name] (string) The role name


*yii/rbac/ManagerInterface::createPermission*		public
>
 createPermission($name)
<
return (\yii\rbac\Permission) The new Permission object

 Creates a new Permission object.

 Note that the newly created permission is not added to the RBAC system yet.
 You must fill in the needed data and call 'add()' to add it to the system.

    [$name] (string) The permission name


*yii/rbac/ManagerInterface::add*				public
>
 add($object)
<
return (bool) Whether the role, permission or rule is successfully added to the
system

 Adds a role, permission or rule to the RBAC system.

    [$object] (\yii\rbac\Role|\yii\rbac\Permission|\yii\rbac\Rule) 


*yii/rbac/ManagerInterface::remove*			public
>
 remove($object)
<
return (bool) Whether the role, permission or rule is successfully removed

 Removes a role, permission or rule from the RBAC system.

    [$object] (\yii\rbac\Role|\yii\rbac\Permission|\yii\rbac\Rule) 


*yii/rbac/ManagerInterface::update*			public
>
 update($name, $object)
<
return (bool) Whether the update is successful

 Updates the specified role, permission or rule in the system.

    [$name] (string) The old name of the role, permission or rule
    [$object] (\yii\rbac\Role|\yii\rbac\Permission|\yii\rbac\Rule) 


*yii/rbac/ManagerInterface::getRole*			public
>
 getRole($name)
<
return (null|\yii\rbac\Role) The role corresponding to the specified name. Null is
returned if no such role.

 Returns the named role.

    [$name] (string) The role name.


*yii/rbac/ManagerInterface::getRoles*			public
>
 getRoles()
<
return (\yii\rbac\Role[]) All roles in the system. The array is indexed by the role
names.

 Returns all roles in the system.


*yii/rbac/ManagerInterface::getRolesByUser*		public
>
 getRolesByUser($userId)
<
return (\yii\rbac\Role[]) All roles directly assigned to the user. The array is
indexed by the role names.

 Returns the roles that are assigned to the user via 'assign()'.

 Note that child roles that are not assigned directly to the user will not be
 returned.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/ManagerInterface::getChildRoles*		public
>
 getChildRoles($roleName)
<
return (\yii\rbac\Role[]) Child roles. The array is indexed by the role names. First
element is an instance of the parent Role itself.

 Returns child roles of the role specified. Depth isn't limited.

    [$roleName] (string) Name of the role to file child roles for


*yii/rbac/ManagerInterface::getPermission*		public
>
 getPermission($name)
<
return (null|\yii\rbac\Permission) The permission corresponding to the specified
name. Null is returned if no such permission.

 Returns the named permission.

    [$name] (string) The permission name.


*yii/rbac/ManagerInterface::getPermissions*		public
>
 getPermissions()
<
return (\yii\rbac\Permission[]) All permissions in the system. The array is indexed
by the permission names.

 Returns all permissions in the system.


*yii/rbac/ManagerInterface::getPermissionsByRole*		public
>
 getPermissionsByRole($roleName)
<
return (\yii\rbac\Permission[]) All permissions that the role represents. The array
is indexed by the permission names.

 Returns all permissions that the specified role represents.

    [$roleName] (string) The role name


*yii/rbac/ManagerInterface::getPermissionsByUser*		public
>
 getPermissionsByUser($userId)
<
return (\yii\rbac\Permission[]) All permissions that the user has. The array is
indexed by the permission names.

 Returns all permissions that the user has.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/ManagerInterface::getRule*			public
>
 getRule($name)
<
return (null|\yii\rbac\Rule) The rule object, or null if the specified name does not
correspond to a rule.

 Returns the rule of the specified name.

    [$name] (string) The rule name


*yii/rbac/ManagerInterface::getRules*			public
>
 getRules()
<
return (\yii\rbac\Rule[]) The rules indexed by the rule names

 Returns all rules available in the system.


*yii/rbac/ManagerInterface::canAddChild*			public
>
 canAddChild($parent, $child)
<
return (bool) Possibility of adding

 Checks the possibility of adding a child to parent.

    [$parent] (\yii\rbac\Item) The parent item
    [$child] (\yii\rbac\Item) The child item to be added to the hierarchy


*yii/rbac/ManagerInterface::addChild*			public
>
 addChild($parent, $child)
<
return (bool) Whether the child successfully added

 Adds an item as a child of another item.

    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/ManagerInterface::removeChild*			public
>
 removeChild($parent, $child)
<
return (bool) Whether the removal is successful

 Removes a child from its parent.

 Note, the child item is not deleted. Only the parent-child relationship is
 removed.

    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/ManagerInterface::removeChildren*		public
>
 removeChildren($parent)
<
return (bool) Whether the removal is successful

 Removed all children form their parent.

 Note, the children items are not deleted. Only the parent-child relationships
 are removed.

    [$parent] (\yii\rbac\Item) 


*yii/rbac/ManagerInterface::hasChild*			public
>
 hasChild($parent, $child)
<
return (bool) Whether '$child' is already a child of '$parent'

 Returns a value indicating whether the child already exists for the parent.

    [$parent] (\yii\rbac\Item) 
    [$child] (\yii\rbac\Item) 


*yii/rbac/ManagerInterface::getChildren*			public
>
 getChildren($name)
<
return (\yii\rbac\Item[]) The child permissions and/or roles

 Returns the child permissions and/or roles.

    [$name] (string) The parent name


*yii/rbac/ManagerInterface::assign*			public
>
 assign($role, $userId)
<
return (\yii\rbac\Assignment) The role assignment information.

 Assigns a role to a user.

    [$role] (\yii\rbac\Role|\yii\rbac\Permission) 
    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/ManagerInterface::revoke*			public
>
 revoke($role, $userId)
<
return (bool) Whether the revoking is successful

 Revokes a role from a user.

    [$role] (\yii\rbac\Role|\yii\rbac\Permission) 
    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/ManagerInterface::revokeAll*			public
>
 revokeAll($userId)
<
return (bool) Whether the revoking is successful

 Revokes all roles from a user.

    [$userId] (mixed) The user ID (see '\yii\web\User::id')


*yii/rbac/ManagerInterface::getAssignment*		public
>
 getAssignment($roleName, $userId)
<
return (null|\yii\rbac\Assignment) The assignment information. Null is returned if
the role is not assigned to the user.

 Returns the assignment information regarding a role and a user.

    [$roleName] (string) The role name
    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/ManagerInterface::getAssignments*		public
>
 getAssignments($userId)
<
return (\yii\rbac\Assignment[]) The assignments indexed by role names. An empty array
will be returned if there is no role assigned to the user.

 Returns all role assignment information for the specified user.

    [$userId] (string|int) The user ID (see '\yii\web\User::id')


*yii/rbac/ManagerInterface::getUserIdsByRole*		public
>
 getUserIdsByRole($roleName)
<
return (array) Array of user ID strings

 Returns all user IDs assigned to the role specified.

    [$roleName] (string) 


*yii/rbac/ManagerInterface::removeAll*			public
>
 removeAll()
<
return (void)

 Removes all authorization data, including roles, permissions, rules, and
 assignments.


*yii/rbac/ManagerInterface::removeAllPermissions*		public
>
 removeAllPermissions()
<
return (void)

 Removes all permissions.

 All parent child relations will be adjusted accordingly.


*yii/rbac/ManagerInterface::removeAllRoles*		public
>
 removeAllRoles()
<
return (void)

 Removes all roles.

 All parent child relations will be adjusted accordingly.


*yii/rbac/ManagerInterface::removeAllRules*		public
>
 removeAllRules()
<
return (void)

 Removes all rules.

 All roles and permissions which have rules will be adjusted accordingly.


*yii/rbac/ManagerInterface::removeAllAssignments*		public
>
 removeAllAssignments()
<
return (void)

 Removes all role assignments.



 vim:tw=78:ts=8:ft=help:norl:
