
*yii/web/MultipartFormDataParser*   >> |yii/base/BaseObject|
=================================

DESCRIPTION
------------------------------------------------------------------------------

 This parser provides the fallback for the 'multipart/form-data' processing on
 non POST requests, for example: the one with 'PUT' request method.

 In order to enable this parser you should configure 'Request::parsers' in the
 following way:

   return [
       'components' => [
           'request' => [
               'parsers' => [
                   'multipart/form-data' => 'yii\web\MultipartFormDataParser'
               ],
           ],
           // ...
       ],
       // ...
   ];

 Method 'parse()' of this parser automatically populates '$_FILES' with the
 files parsed from raw body.

 > Note: since this is a request parser, it will initialize '$_FILES' values
 on 'Request::getBodyParams()'. Until this method is invoked, '$_FILES' array
 will remain empty even if there are submitted files in the request body. Make
 sure you have requested body params before any attempt to get uploaded file
 in case you are using this parser.

 Usage example:

   use yii\web\UploadedFile;

   $restRequestData = Yii::$app->request->getBodyParams();
   $uploadedFile = UploadedFile::getInstancesByName('photo');

   $model = new Item();
   $model->populate($restRequestData);
   copy($uploadedFile->tempName, '/path/to/file/storage/photo.jpg');

 > Note: although this parser fully emulates regular structure of the
 '$_FILES', related temporary files, which are available via 'tmp_name' key,
 will not be recognized by PHP as uploaded ones. Thus functions like
 'is_uploaded_file()' and 'move_uploaded_file()' will fail on them.


PROPERTY DETAILS
------------------------------------------------------------------------------


$force					*yii/web/MultipartFormDataParser::$force*

 (bool) Whether to parse raw body even for 'POST' request and '$_FILES'
 already populated. By default this option is disabled saving performance for
 'POST' requests, which are already processed by PHP automatically. > Note: if
 this option is enabled, value of '$_FILES' will be reset on each parse.

$uploadFileMaxSize			*yii/web/MultipartFormDataParser::$uploadFileMaxSize*

 (int) Upload file max size in bytes.

$uploadFileMaxCount			*yii/web/MultipartFormDataParser::$uploadFileMaxCount*

 (int) Maximum upload files count.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|


*yii/web/MultipartFormDataParser::getUploadFileMaxSize*	public
>
 getUploadFileMaxSize()
<
return (int) Upload file max size in bytes.



*yii/web/MultipartFormDataParser::setUploadFileMaxSize*	public
>
 setUploadFileMaxSize($uploadFileMaxSize)
<
return (void)

    [$uploadFileMaxSize] (int) Upload file max size in bytes.


*yii/web/MultipartFormDataParser::getUploadFileMaxCount*	public
>
 getUploadFileMaxCount()
<
return (int) Maximum upload files count.



*yii/web/MultipartFormDataParser::setUploadFileMaxCount*	public
>
 setUploadFileMaxCount($uploadFileMaxCount)
<
return (void)

    [$uploadFileMaxCount] (int) Maximum upload files count.


*yii/web/MultipartFormDataParser::parse*			public
>
 parse($rawBody, $contentType)
<
return (array) Parameters parsed from the request body

 Parses a HTTP request body.







    [$rawBody] (string) The raw HTTP request body.
    [$contentType] (string) The content type specified for the request body.



 vim:tw=78:ts=8:ft=help:norl:
