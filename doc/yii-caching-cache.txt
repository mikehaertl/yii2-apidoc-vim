
*yii/caching/Cache*   >> |yii/base/Component|
===================

SUBCLASSES
------------------------------------------------------------------------------

|yii/caching/DummyCache|
|yii/caching/FileCache|
|yii/caching/ApcCache|
|yii/caching/WinCache|
|yii/caching/XCache|
|yii/caching/ArrayCache|
|yii/caching/MemCache|
|yii/caching/ZendDataCache|
|yii/caching/DbCache|
|yii/redis/Cache|

DESCRIPTION
------------------------------------------------------------------------------

 A data item can be stored in the cache by calling 'set()' and be retrieved
 back later (in the same or different request) by 'get()'. In both operations,
 a key identifying the data item is required. An expiration time and/or a
 'Dependency|dependency' can also be specified when calling 'set()'. If the
 data item expires or the dependency changes at the time of calling 'get()',
 the cache will return no data.

 A typical usage pattern of cache is like the following:

   $key = 'demo';
   $data = $cache->get($key);
   if ($data === false) {
       // ...generate $data here...
       $cache->set($key, $data, $duration, $dependency);
   }

 Because Cache implements the '\ArrayAccess' interface, it can be used like an
 array. For example,

   $cache['foo'] = 'some data';
   echo $cache['foo'];

 Derived classes should implement the following methods which do the actual
 cache storage operations:


   - 'getValue()': retrieve the value with a key (if any) from cache 
   - 'setValue()': store the value with a key into cache 
   - 'addValue()': store the value only if the cache does not have this
   key before 
   - 'deleteValue()': delete the value with the specified key from
   cache 
   - 'flushValues()': delete all values from cache


PROPERTY DETAILS
------------------------------------------------------------------------------

$keyPrefix				*yii/caching/Cache::$keyPrefix*

 (string) A string prefixed to every cache key so that it is unique globally
 in the whole cache storage. It is recommended that you set a unique cache key
 prefix for each application if the same cache storage is being used by
 different applications.

 To ensure interoperability, only alphanumeric characters should be used.

$serializer				*yii/caching/Cache::$serializer*

 (array|boolean) The functions used to serialize and unserialize cached data.
 Defaults to null, meaning using the default PHP 'serialize()' and
 'unserialize()' functions. If you want to use some more efficient serializer
 (e.g. [igbinary](http://pecl.php.net/package/igbinary)), you may configure
 this property with a two-element array. The first element specifies the
 serialization function, and the second the deserialization function. If this
 property is set false, data will be directly sent to and retrieved from the
 underlying cache component without any serialization or deserialization. You
 should not turn off serialization if you are using 'Dependency|cache
 dependency', because it relies on data serialization.

$behaviors				*yii/caching/Cache::$behaviors*

 See |yii/base/Component::$behaviors|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/caching/Cache::className*				public

 See |yii/base/Object::className|


*yii/caching/Cache::__construct*				public

 See |yii/base/Object::__construct|


*yii/caching/Cache::init*					public

 See |yii/base/Object::init|


*yii/caching/Cache::__get*				public

 See |yii/base/Component::__get|


*yii/caching/Cache::__set*				public

 See |yii/base/Component::__set|


*yii/caching/Cache::__isset*				public

 See |yii/base/Component::__isset|


*yii/caching/Cache::__unset*				public

 See |yii/base/Component::__unset|


*yii/caching/Cache::__call*				public

 See |yii/base/Component::__call|


*yii/caching/Cache::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/caching/Cache::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/caching/Cache::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/caching/Cache::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/caching/Cache::__clone*				public

 See |yii/base/Component::__clone|


*yii/caching/Cache::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/caching/Cache::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/caching/Cache::on*					public

 See |yii/base/Component::on|


*yii/caching/Cache::off*					public

 See |yii/base/Component::off|


*yii/caching/Cache::trigger*				public

 See |yii/base/Component::trigger|


*yii/caching/Cache::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/caching/Cache::getBehaviors*				public

 See |yii/base/Component::getBehaviors|


*yii/caching/Cache::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/caching/Cache::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/caching/Cache::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/caching/Cache::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/caching/Cache::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/caching/Cache::buildKey*				public
>
 buildKey($key)
<
return (string) The generated cache key

 If the given key is a string containing alphanumeric characters only and no
 more than 32 characters, then the key will be returned back prefixed with
 'keyPrefix'. Otherwise, a normalized key is generated by serializing the
 given key, applying MD5 hashing, and prefixing with 'keyPrefix'.

    [$key] (mixed) The key to be normalized


*yii/caching/Cache::get*					public
>
 get($key)
<
return (mixed) The value stored in cache, false if the value is not in the cache,
expired, or the dependency associated with the cached data has changed.

    [$key] (mixed) A key identifying the cached value. This can be a simple
    string or a complex data structure consisting of factors representing the
    key.


*yii/caching/Cache::exists*				public
>
 exists($key)
<
return (boolean) True if a value exists in cache, false if the value is not in the
cache or expired.

 This can be faster than getting the value from the cache if the data is big.
 In case a cache does not support this feature natively, this method will try
 to simulate it but has no performance improvement over getting it. Note that
 this method does not check whether the dependency associated with the cached
 data, if there is any, has changed. So a call to 'get' may return false while
 exists returns true.

    [$key] (mixed) A key identifying the cached value. This can be a simple
    string or a complex data structure consisting of factors representing the
    key.


*yii/caching/Cache::mget*					public
>
 mget($keys)
<
return (array) List of cached values corresponding to the specified keys. The array
is returned in terms of (key, value) pairs. If a value is not cached or
expired, the corresponding array value will be false.

 Some caches (such as memcache, apc) allow retrieving multiple cached values
 at the same time, which may improve the performance. In case a cache does not
 support this feature natively, this method will try to simulate it.

    [$keys] (string[]) List of string keys identifying the cached values


*yii/caching/Cache::multiGet*				public
>
 multiGet($keys)
<
return (array) List of cached values corresponding to the specified keys. The array
is returned in terms of (key, value) pairs. If a value is not cached or
expired, the corresponding array value will be false.

 Some caches (such as memcache, apc) allow retrieving multiple cached values
 at the same time, which may improve the performance. In case a cache does not
 support this feature natively, this method will try to simulate it.

    [$keys] (string[]) List of string keys identifying the cached values


*yii/caching/Cache::set*					public
>
 set($key, $value, $duration=0, $dependency='null')
<
return (boolean) Whether the value is successfully stored into cache

 If the cache already contains such a key, the existing value and expiration
 time will be replaced with the new ones, respectively.

    [$key] (mixed) A key identifying the value to be cached. This can be a
    simple string or a complex data structure consisting of factors
    representing the key.
    [$value] (mixed) The value to be cached
    [$duration] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached item. If
    the dependency changes, the corresponding value in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/Cache::mset*					public
>
 mset($items, $duration=0, $dependency='null')
<
return (boolean) Whether the items are successfully stored into cache

 If the cache already contains such a key, the existing value and expiration
 time will be replaced with the new ones, respectively.

    [$items] (array) The items to be cached, as key-value pairs.
    [$duration] (integer) Default number of seconds in which the cached values
    will expire. 0 means never expire.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached items. If
    the dependency changes, the corresponding values in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/Cache::multiSet*				public
>
 multiSet($items, $duration=0, $dependency='null')
<
return (boolean) Whether the items are successfully stored into cache

 If the cache already contains such a key, the existing value and expiration
 time will be replaced with the new ones, respectively.

    [$items] (array) The items to be cached, as key-value pairs.
    [$duration] (integer) Default number of seconds in which the cached values
    will expire. 0 means never expire.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached items. If
    the dependency changes, the corresponding values in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/Cache::madd*					public
>
 madd($items, $duration=0, $dependency='null')
<
return (boolean) Whether the items are successfully stored into cache

 If the cache already contains such a key, the existing value and expiration
 time will be preserved.

    [$items] (array) The items to be cached, as key-value pairs.
    [$duration] (integer) Default number of seconds in which the cached values
    will expire. 0 means never expire.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached items. If
    the dependency changes, the corresponding values in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/Cache::multiAdd*				public
>
 multiAdd($items, $duration=0, $dependency='null')
<
return (boolean) Whether the items are successfully stored into cache

 If the cache already contains such a key, the existing value and expiration
 time will be preserved.

    [$items] (array) The items to be cached, as key-value pairs.
    [$duration] (integer) Default number of seconds in which the cached values
    will expire. 0 means never expire.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached items. If
    the dependency changes, the corresponding values in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/Cache::add*					public
>
 add($key, $value, $duration=0, $dependency='null')
<
return (boolean) Whether the value is successfully stored into cache

 Nothing will be done if the cache already contains the key.

    [$key] (mixed) A key identifying the value to be cached. This can be a
    simple string or a complex data structure consisting of factors
    representing the key.
    [$value] (mixed) The value to be cached
    [$duration] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.
    [$dependency] (\yii\caching\Dependency) Dependency of the cached item. If
    the dependency changes, the corresponding value in the cache will be
    invalidated when it is fetched via 'get()'. This parameter is ignored if
    'serializer' is false.


*yii/caching/Cache::delete*				public
>
 delete($key)
<
return (boolean) If no error happens during deletion

    [$key] (mixed) A key identifying the value to be deleted from cache. This
    can be a simple string or a complex data structure consisting of factors
    representing the key.


*yii/caching/Cache::flush*				public
>
 flush()
<
return (boolean) Whether the flush operation was successful.

 Be careful of performing this operation if the cache is shared among multiple
 applications.


*yii/caching/Cache::getValue*				protected
>
 getValue($key)
<
return (string|boolean) The value stored in cache, false if the value is not in the
cache or expired.

 This method should be implemented by child classes to retrieve the data from
 specific cache storage.

    [$key] (string) A unique key identifying the cached value


*yii/caching/Cache::setValue*				protected
>
 setValue($key, $value, $duration)
<
return (boolean) True if the value is successfully stored into cache, false otherwise

 This method should be implemented by child classes to store the data in
 specific cache storage.

    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$duration] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/Cache::addValue*				protected
>
 addValue($key, $value, $duration)
<
return (boolean) True if the value is successfully stored into cache, false otherwise

 This method should be implemented by child classes to store the data in
 specific cache storage.

    [$key] (string) The key identifying the value to be cached
    [$value] (string) The value to be cached
    [$duration] (integer) The number of seconds in which the cached value will
    expire. 0 means never expire.


*yii/caching/Cache::deleteValue*				protected
>
 deleteValue($key)
<
return (boolean) If no error happens during deletion

    [$key] (string) The key of the value to be deleted


*yii/caching/Cache::flushValues*				protected
>
 flushValues()
<
return (boolean) Whether the flush operation was successful.

 Child classes may implement this method to realize the flush operation.


*yii/caching/Cache::getValues*				protected
>
 getValues($keys)
<
return (array) A list of cached values indexed by the keys

 The default implementation calls 'getValue()' multiple times to retrieve the
 cached values one by one. If the underlying cache storage supports multiget,
 this method should be overridden to exploit that feature.

    [$keys] (array) A list of keys identifying the cached values


*yii/caching/Cache::setValues*				protected
>
 setValues($data, $duration)
<
return (array) Array of failed keys

 The default implementation calls 'setValue()' multiple times store values one
 by one. If the underlying cache storage supports multi-set, this method
 should be overridden to exploit that feature.

    [$data] (array) Array where key corresponds to cache key while value is
    the value stored
    [$duration] (integer) The number of seconds in which the cached values
    will expire. 0 means never expire.


*yii/caching/Cache::addValues*				protected
>
 addValues($data, $duration)
<
return (array) Array of failed keys

 The default implementation calls 'addValue()' multiple times add values one
 by one. If the underlying cache storage supports multi-add, this method
 should be overridden to exploit that feature.

    [$data] (array) Array where key corresponds to cache key while value is
    the value stored
    [$duration] (integer) The number of seconds in which the cached values
    will expire. 0 means never expire.


*yii/caching/Cache::offsetExists*				public
>
 offsetExists($key)
<
return (boolean) 

 This method is required by the interface '\ArrayAccess'.

    [$key] (string) A key identifying the cached value


*yii/caching/Cache::offsetGet*				public
>
 offsetGet($key)
<
return (mixed) The value stored in cache, false if the value is not in the cache or
expired.

 This method is required by the interface '\ArrayAccess'.

    [$key] (string) A key identifying the cached value


*yii/caching/Cache::offsetSet*				public
>
 offsetSet($key, $value)
<
return (void)

 If the cache already contains such a key, the existing value will be replaced
 with the new ones. To add expiration and dependencies, use the 'set()'
 method. This method is required by the interface '\ArrayAccess'.

    [$key] (string) The key identifying the value to be cached
    [$value] (mixed) The value to be cached


*yii/caching/Cache::offsetUnset*				public
>
 offsetUnset($key)
<
return (void)

    [$key] (string) The key of the value to be deleted



 vim:tw=78:ts=8:ft=help:norl:
