
*yii/elasticsearch/ActiveFixture*   >> |yii/test/BaseActiveFixture|
=================================

DESCRIPTION
------------------------------------------------------------------------------

 Either 'modelClass' or 'index' and 'type' must be set. You should also
 provide fixture data in the file specified by 'dataFile' or overriding
 'getData()' if you want to use code to generate the fixture data.

 When the fixture is being loaded, it will first call 'resetIndex()' to remove
 any existing data in the index for the 'type'. It will then populate the
 index with the data returned by 'getData()'.

 After the fixture is loaded, you can access the loaded data via the 'data'
 property. If you set 'modelClass', you will also be able to retrieve an
 instance of 'modelClass' with the populated data via 'getModel()'.


PROPERTY DETAILS
------------------------------------------------------------------------------

$depends				*yii/elasticsearch/ActiveFixture::$depends*

 See |yii/test/Fixture::$depends|

$db					*yii/elasticsearch/ActiveFixture::$db*

 (\yii\elasticsearch\Connection|string) The DB connection object or the
 application component ID of the DB connection. After the DbFixture object is
 created, if you want to change this property, you should only assign it with
 a DB connection object.

$dataDirectory				*yii/elasticsearch/ActiveFixture::$dataDirectory*

 See |yii/test/FileFixtureTrait::$dataDirectory|

$dataFile				*yii/elasticsearch/ActiveFixture::$dataFile*

 (string|boolean) The file path or path alias of the data file that contains
 the fixture data to be returned by 'getData()'. If this is not set, it will
 default to 'FixturePath/data/Index/Type.php', where 'FixturePath' stands for
 the directory containing this fixture class, 'Index' stands for the
 elasticsearch 'index' name and 'Type' stands for the 'type' associated with
 this fixture. You can set this property to be false to prevent loading any
 data.

$modelClass				*yii/elasticsearch/ActiveFixture::$modelClass*

 See |yii/test/BaseActiveFixture::$modelClass|

$data					*yii/elasticsearch/ActiveFixture::$data*

 See |yii/test/BaseActiveFixture::$data|

$index					*yii/elasticsearch/ActiveFixture::$index*

 (string) The name of the index that this fixture is about. If this property
 is not set, the name will be determined via 'modelClass'.

$type					*yii/elasticsearch/ActiveFixture::$type*

 (string) The name of the type that this fixture is about. If this property is
 not set, the name will be determined via 'modelClass'.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/elasticsearch/ActiveFixture::className*		public

 See |yii/base/BaseObject::className|


*yii/elasticsearch/ActiveFixture::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/elasticsearch/ActiveFixture::init*			public
>
 init()
<
return (void)

 {@inheritdoc}








*yii/elasticsearch/ActiveFixture::__get*			public

 See |yii/base/Component::__get|


*yii/elasticsearch/ActiveFixture::__set*			public

 See |yii/base/Component::__set|


*yii/elasticsearch/ActiveFixture::__isset*		public

 See |yii/base/Component::__isset|


*yii/elasticsearch/ActiveFixture::__unset*		public

 See |yii/base/Component::__unset|


*yii/elasticsearch/ActiveFixture::__call*			public

 See |yii/base/Component::__call|


*yii/elasticsearch/ActiveFixture::hasProperty*		public

 See |yii/base/Component::hasProperty|


*yii/elasticsearch/ActiveFixture::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/elasticsearch/ActiveFixture::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/elasticsearch/ActiveFixture::hasMethod*		public

 See |yii/base/Component::hasMethod|


*yii/elasticsearch/ActiveFixture::__clone*		public

 See |yii/base/Component::__clone|


*yii/elasticsearch/ActiveFixture::behaviors*		public

 See |yii/base/Component::behaviors|


*yii/elasticsearch/ActiveFixture::hasEventHandlers*	public

 See |yii/base/Component::hasEventHandlers|


*yii/elasticsearch/ActiveFixture::on*			public

 See |yii/base/Component::on|


*yii/elasticsearch/ActiveFixture::off*			public

 See |yii/base/Component::off|


*yii/elasticsearch/ActiveFixture::trigger*		public

 See |yii/base/Component::trigger|


*yii/elasticsearch/ActiveFixture::getBehavior*		public

 See |yii/base/Component::getBehavior|


*yii/elasticsearch/ActiveFixture::getBehaviors*		public

 See |yii/base/Component::getBehaviors|


*yii/elasticsearch/ActiveFixture::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/elasticsearch/ActiveFixture::attachBehaviors*	public

 See |yii/base/Component::attachBehaviors|


*yii/elasticsearch/ActiveFixture::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/elasticsearch/ActiveFixture::detachBehaviors*	public

 See |yii/base/Component::detachBehaviors|


*yii/elasticsearch/ActiveFixture::ensureBehaviors*	public

 See |yii/base/Component::ensureBehaviors|


*yii/elasticsearch/ActiveFixture::load*			public
>
 load()
<
return (void)

 Loads the fixture.

 The default implementation will first clean up the index by calling
 'resetIndex()'. It will then populate the index with the data returned by
 'getData()'.

 If you override this method, you should consider calling the parent
 implementation so that the data returned by 'getData()' can be populated into
 the index.


*yii/elasticsearch/ActiveFixture::beforeLoad*		public

 See |yii/test/Fixture::beforeLoad|


*yii/elasticsearch/ActiveFixture::afterLoad*		public

 See |yii/test/Fixture::afterLoad|


*yii/elasticsearch/ActiveFixture::unload*			public

 See |yii/test/BaseActiveFixture::unload|


*yii/elasticsearch/ActiveFixture::beforeUnload*		public

 See |yii/test/Fixture::beforeUnload|


*yii/elasticsearch/ActiveFixture::afterUnload*		public

 See |yii/test/Fixture::afterUnload|


*yii/elasticsearch/ActiveFixture::loadData*		protected

 See |yii/test/FileFixtureTrait::loadData|


*yii/elasticsearch/ActiveFixture::getIterator*		public

 See |yii/base/ArrayAccessTrait::getIterator|


*yii/elasticsearch/ActiveFixture::count*			public

 See |yii/base/ArrayAccessTrait::count|


*yii/elasticsearch/ActiveFixture::offsetExists*		public

 See |yii/base/ArrayAccessTrait::offsetExists|


*yii/elasticsearch/ActiveFixture::offsetGet*		public

 See |yii/base/ArrayAccessTrait::offsetGet|


*yii/elasticsearch/ActiveFixture::offsetSet*		public

 See |yii/base/ArrayAccessTrait::offsetSet|


*yii/elasticsearch/ActiveFixture::offsetUnset*		public

 See |yii/base/ArrayAccessTrait::offsetUnset|


*yii/elasticsearch/ActiveFixture::getModel*		public

 See |yii/test/BaseActiveFixture::getModel|


*yii/elasticsearch/ActiveFixture::getData*		protected
>
 getData()
<
return (array) The data rows to be inserted into the database index.

 Returns the fixture data.

 The default implementation will try to return the fixture data by including
 the external file specified by 'dataFile'. The file should return an array of
 data rows (column name => column value), each corresponding to a row in the
 index.

 If the data file does not exist, an empty array will be returned.


*yii/elasticsearch/ActiveFixture::resetIndex*		protected
>
 resetIndex()
<
return (void)

 Removes all existing data from the specified index and type.

 This method is called before populating fixture data into the index
 associated with this fixture.



 vim:tw=78:ts=8:ft=help:norl:
