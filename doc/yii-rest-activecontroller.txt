
*yii/rest/ActiveController*   >> |yii/rest/Controller|
===========================

DESCRIPTION
------------------------------------------------------------------------------

 The class of the ActiveRecord should be specified via 'modelClass', which
 must implement '\yii\db\ActiveRecordInterface'. By default, the following
 actions are supported:


   - 'index': list of models 
   - 'view': return the details of a model 
   - 'create': create a new model 
   - 'update': update an existing model 
   - 'delete': delete an existing model 
   - 'options': return the allowed HTTP methods

 You may disable some of these actions by overriding 'actions()' and unsetting
 the corresponding actions.

 To add a new action, either override 'actions()' by appending a new action
 class or write a new action method. Make sure you also override 'verbs()' to
 properly declare what HTTP methods are allowed by the new action.

 You should usually override 'checkAccess()' to check whether the current user
 has the privilege to perform the specified action against the specified
 model.


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/rest/ActiveController::$id*

 See |yii/base/Controller::$id|

$module					*yii/rest/ActiveController::$module*

 See |yii/base/Controller::$module|

$defaultAction				*yii/rest/ActiveController::$defaultAction*

 See |yii/base/Controller::$defaultAction|

$layout					*yii/rest/ActiveController::$layout*

 See |yii/base/Controller::$layout|

$action					*yii/rest/ActiveController::$action*

 See |yii/base/Controller::$action|

$enableCsrfValidation			*yii/rest/ActiveController::$enableCsrfValidation*

 See |yii/web/Controller::$enableCsrfValidation|

$actionParams				*yii/rest/ActiveController::$actionParams*

 See |yii/web/Controller::$actionParams|

$serializer				*yii/rest/ActiveController::$serializer*

 See |yii/rest/Controller::$serializer|

$modelClass				*yii/rest/ActiveController::$modelClass*

 (string) The model class name. This property must be set.

$updateScenario				*yii/rest/ActiveController::$updateScenario*

 (string) The scenario used for updating a model.

$createScenario				*yii/rest/ActiveController::$createScenario*

 (string) The scenario used for creating a model.

$behaviors				*yii/rest/ActiveController::$behaviors*

 See |yii/base/Component::$behaviors|

$modules				*yii/rest/ActiveController::$modules*

 See |yii/base/Controller::$modules|

$uniqueId				*yii/rest/ActiveController::$uniqueId*

 See |yii/base/Controller::$uniqueId|

$route					*yii/rest/ActiveController::$route*

 See |yii/base/Controller::$route|

$view					*yii/rest/ActiveController::$view*

 See |yii/base/Controller::$view|

$viewPath				*yii/rest/ActiveController::$viewPath*

 See |yii/base/Controller::$viewPath|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/rest/ActiveController::className*			public

 See |yii/base/Object::className|


*yii/rest/ActiveController::__construct*			public

 See |yii/base/Controller::__construct|


*yii/rest/ActiveController::init*				public
>
 init()
<
return (void)



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/rest/ActiveController::__get*			public

 See |yii/base/Component::__get|


*yii/rest/ActiveController::__set*			public

 See |yii/base/Component::__set|


*yii/rest/ActiveController::__isset*			public

 See |yii/base/Component::__isset|


*yii/rest/ActiveController::__unset*			public

 See |yii/base/Component::__unset|


*yii/rest/ActiveController::__call*			public

 See |yii/base/Component::__call|


*yii/rest/ActiveController::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/rest/ActiveController::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/rest/ActiveController::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/rest/ActiveController::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/rest/ActiveController::__clone*			public

 See |yii/base/Component::__clone|


*yii/rest/ActiveController::behaviors*			public

 See |yii/rest/Controller::behaviors|


*yii/rest/ActiveController::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/rest/ActiveController::on*				public

 See |yii/base/Component::on|


*yii/rest/ActiveController::off*				public

 See |yii/base/Component::off|


*yii/rest/ActiveController::trigger*			public

 See |yii/base/Component::trigger|


*yii/rest/ActiveController::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/rest/ActiveController::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/rest/ActiveController::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/rest/ActiveController::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/rest/ActiveController::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/rest/ActiveController::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/rest/ActiveController::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/rest/ActiveController::actions*			public
>
 actions()
<
return (void)



 This method is meant to be overwritten to declare external actions for the
 controller. It should return an array, with array keys being action IDs, and
 array values the corresponding action class names or action configuration
 arrays. For example,

   return [
       'action1' => 'app\components\Action1',
       'action2' => [
           'class' => 'app\components\Action2',
           'property1' => 'value1',
           'property2' => 'value2',
       ],
   ];

 '\Yii::createObject()' will be used later to create the requested action
 using the configuration provided here.




*yii/rest/ActiveController::runAction*			public

 See |yii/base/Controller::runAction|


*yii/rest/ActiveController::run*				public

 See |yii/base/Controller::run|


*yii/rest/ActiveController::bindActionParams*		public

 See |yii/web/Controller::bindActionParams|


*yii/rest/ActiveController::createAction*			public

 See |yii/base/Controller::createAction|


*yii/rest/ActiveController::beforeAction*			public

 See |yii/web/Controller::beforeAction|


*yii/rest/ActiveController::afterAction*			public

 See |yii/rest/Controller::afterAction|


*yii/rest/ActiveController::getModules*			public

 See |yii/base/Controller::getModules|


*yii/rest/ActiveController::getUniqueId*			public

 See |yii/base/Controller::getUniqueId|


*yii/rest/ActiveController::getRoute*			public

 See |yii/base/Controller::getRoute|


*yii/rest/ActiveController::render*			public

 See |yii/base/Controller::render|


*yii/rest/ActiveController::renderContent*		public

 See |yii/base/Controller::renderContent|


*yii/rest/ActiveController::renderPartial*		public

 See |yii/base/Controller::renderPartial|


*yii/rest/ActiveController::renderFile*			public

 See |yii/base/Controller::renderFile|


*yii/rest/ActiveController::getView*			public

 See |yii/base/Controller::getView|


*yii/rest/ActiveController::setView*			public

 See |yii/base/Controller::setView|


*yii/rest/ActiveController::getViewPath*			public

 See |yii/base/Controller::getViewPath|


*yii/rest/ActiveController::setViewPath*			public

 See |yii/base/Controller::setViewPath|


*yii/rest/ActiveController::findLayoutFile*		public

 See |yii/base/Controller::findLayoutFile|


*yii/rest/ActiveController::renderAjax*			public

 See |yii/web/Controller::renderAjax|


*yii/rest/ActiveController::redirect*			public

 See |yii/web/Controller::redirect|


*yii/rest/ActiveController::goHome*			public

 See |yii/web/Controller::goHome|


*yii/rest/ActiveController::goBack*			public

 See |yii/web/Controller::goBack|


*yii/rest/ActiveController::refresh*			public

 See |yii/web/Controller::refresh|


*yii/rest/ActiveController::verbs*			protected
>
 verbs()
<
return (array) The allowed HTTP verbs.



 Please refer to 'VerbFilter::actions' on how to declare the allowed verbs.




*yii/rest/ActiveController::serializeData*		protected

 See |yii/rest/Controller::serializeData|


*yii/rest/ActiveController::checkAccess*			public
>
 checkAccess($action, $model='null', $params='[]')
<
return (void)

 This method should be overridden to check whether the current user has the
 privilege to run the specified action against the specified data model. If
 the user does not have access, a 'ForbiddenHttpException' should be thrown.

    [$action] (string) The ID of the action to be executed
    [$model] (object) The model to be accessed. If null, it means no specific
    model is being accessed.
    [$params] (array) Additional parameters



 vim:tw=78:ts=8:ft=help:norl:
