
*yii/elasticsearch/ActiveRecord*   >> |yii/db/BaseActiveRecord|
================================

DESCRIPTION
------------------------------------------------------------------------------

 This class implements the ActiveRecord pattern for the fulltext search and
 data storage [elasticsearch](https://www.elastic.co/products/elasticsearch).

 For defining a record a subclass should at least implement the 'attributes()'
 method to define attributes. The primary key (the '_id' field in
 elasticsearch terms) is represented by 'getId()' and 'setId()'. The primary
 key is not part of the attributes.

 The following is an example model called 'Customer':

   class Customer extends \yii\elasticsearch\ActiveRecord
   {
       public function attributes()
       {
           return ['id', 'name', 'address', 'registration_date'];
       }
   }

 You may override 'index()' and 'type()' to define the index and type this
 record represents.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/elasticsearch/ActiveRecord::getDb*			public
>
 getDb()
<
return (\yii\elasticsearch\Connection) The database connection used by this AR class.

 Returns the database connection used by this AR class.

 By default, the "elasticsearch" application component is used as the database
 connection. You may override this method if you want to use a different
 database connection.


*yii/elasticsearch/ActiveRecord::find*			public
>
 find()
<
return (\yii\elasticsearch\ActiveQuery) The newly created 'ActiveQuery' instance.



*yii/elasticsearch/ActiveRecord::findOne*			public
>
 findOne($condition)
<
return (void)

    [$condition] () 


*yii/elasticsearch/ActiveRecord::findAll*			public
>
 findAll($condition)
<
return (void)

    [$condition] () 


*yii/elasticsearch/ActiveRecord::get*			public
>
 get($primaryKey, $options='[]')
<
return (static|null) The record instance or null if it was not found.

 Gets a record by its primary key.

    [$primaryKey] (mixed) The primaryKey value
    [$options] (array) Options given in this parameter are passed to
    elasticsearch as request URI parameters. Please refer to the
    [elasticsearch
    documentation](http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html)
    for more details on these options.


*yii/elasticsearch/ActiveRecord::mget*			public
>
 mget($primaryKeys, $options='[]')
<
return (array) The record instances, or empty array if nothing was found

 Gets a list of records by its primary keys.

    [$primaryKeys] (array) An array of primaryKey values
    [$options] (array) Options given in this parameter are passed to
    elasticsearch as request URI parameters.

    Please refer to the [elasticsearch
    documentation](http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-get.html)
    for more details on these options.


*yii/elasticsearch/ActiveRecord::getScore*		public
>
 getScore()
<
return (float) Returns the score of this record when it was retrieved via a 'find()'
query.



*yii/elasticsearch/ActiveRecord::getHighlight*		public
>
 getHighlight()
<
return (array|null) A list of arrays with highlighted excerpts indexed by field
names.



*yii/elasticsearch/ActiveRecord::getExplanation*		public
>
 getExplanation()
<
return (array|null) An explanation for each hit on how its score was computed.



*yii/elasticsearch/ActiveRecord::setPrimaryKey*		public
>
 setPrimaryKey($value)
<
return (void)

 Sets the primary key

    [$value] (mixed) 


*yii/elasticsearch/ActiveRecord::getPrimaryKey*		public
>
 getPrimaryKey($asArray='false')
<
return (void)

    [$asArray] () 


*yii/elasticsearch/ActiveRecord::getOldPrimaryKey*	public
>
 getOldPrimaryKey($asArray='false')
<
return (void)

    [$asArray] () 


*yii/elasticsearch/ActiveRecord::primaryKey*		public
>
 primaryKey()
<
return (string[]) Array of primary key attributes. Only the first element of the
array will be used.

 This method defines the attribute that uniquely identifies a record.

 The primaryKey for elasticsearch documents is the '_id' field by default.
 This field is not part of the ActiveRecord attributes so you should never add
 '_id' to the list of 'attributes()|attributes'.

 You may override this method to define the primary key name when you have
 defined [path
 mapping](http://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-id-field.html)
 for the '_id' field so that it is part of the '_source' and thus part of the
 'attributes()|attributes'.

 Note that elasticsearch only supports _one_ attribute to be the primary key.
 However to match the signature of the
 '\yii\db\ActiveRecordInterface|ActiveRecordInterface' this methods returns an
 array instead of a single string.


*yii/elasticsearch/ActiveRecord::attributes*		public
>
 attributes()
<
return (string[]) List of attribute names.

 Returns the list of all attribute names of the model.

 This method must be overridden by child classes to define available
 attributes.

 Attributes are names of fields of the corresponding elasticsearch document.
 The primaryKey for elasticsearch documents is the '_id' field by default
 which is not part of the attributes. You may define [path
 mapping](http://www.elastic.co/guide/en/elasticsearch/reference/current/mapping-id-field.html)
 for the '_id' field so that it is part of the '_source' fields and thus
 becomes part of the attributes.


*yii/elasticsearch/ActiveRecord::arrayAttributes*		public
>
 arrayAttributes()
<
return (string[]) List of attribute names. Must be a subset of 'attributes()'.

 A list of attributes that should be treated as array valued when retrieved
 through 'ActiveQuery::fields'.

 If not listed by this method, attributes retrieved through
 'ActiveQuery::fields' will converted to a scalar value when the result array
 contains only one value.


*yii/elasticsearch/ActiveRecord::index*			public
>
 index()
<
return (string) The name of the index this record is stored in.



*yii/elasticsearch/ActiveRecord::type*			public
>
 type()
<
return (string) The name of the type of this record.



*yii/elasticsearch/ActiveRecord::populateRecord*		public
>
 populateRecord($record, $row)
<
return (void)

    [$record] (\yii\elasticsearch\ActiveRecord) The record to be populated. In
    most cases this will be an instance created by 'instantiate()' beforehand.
    [$row] (array) Attribute values (name => value)


*yii/elasticsearch/ActiveRecord::instantiate*		public
>
 instantiate($row)
<
return (static) The newly created active record

 Creates an active record instance.

 This method is called together with 'populateRecord()' by 'ActiveQuery'. It
 is not meant to be used for creating new records directly.

 You may override this method if the instance being created depends on the row
 data to be populated into the record. For example, by creating a record based
 on the value of a column, you may implement the so-called single-table
 inheritance mapping.

    [$row] (array) Row data to be populated into the record. This array
    consists of the following keys:  
      - '_source': refers to the attributes of the record.  
      - '_type': the type this record is stored in.  
      - '_index': the index this record is stored in.


*yii/elasticsearch/ActiveRecord::insert*			public
>
 insert($runValidation='true', $attributes='null', $options='[\'op_type\'=>\'create\']')
<
return (bool) Whether the attributes are valid and the record is inserted
successfully.

 Inserts a document into the associated index using the attribute values of
 this record.

 This method performs the following steps in order:

 1. call 'beforeValidate()' when '$runValidation' is true. If validation   
 fails, it will skip the rest of the steps; 2. call 'afterValidate()' when
 '$runValidation' is true. 3. call 'beforeSave()'. If the method returns
 false, it will skip the    rest of the steps; 4. insert the record into
 database. If this fails, it will skip the rest of the steps; 5. call
 'afterSave()';

 In the above step 1, 2, 3 and 5, events 'EVENT_BEFORE_VALIDATE',
 'EVENT_BEFORE_INSERT', 'EVENT_AFTER_INSERT' and 'EVENT_AFTER_VALIDATE' will
 be raised by the corresponding methods.

 Only the 'dirtyAttributes|changed attribute values' will be inserted into
 database.

 If the 'primaryKey|primary key' is not set (null) during insertion, it will
 be populated with a [randomly generated
 value](http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html#_automatic_id_generation)
 after insertion.

 For example, to insert a customer record:

   $customer = new Customer;
   $customer->name = $name;
   $customer->email = $email;
   $customer->insert();



    [$runValidation] (bool) Whether to perform validation before saving the
    record. If the validation fails, the record will not be inserted into the
    database.
    [$attributes] (array) List of attributes that need to be saved. Defaults
    to null, meaning all attributes will be saved.
    [$options] (array) Options given in this parameter are passed to
    elasticsearch as request URI parameters. These are among others:


      - 'routing' define shard placement of this record. 
      - 'parent' by giving the primaryKey of another record this defines a
      parent-child relation 
      - 'timestamp' specifies the timestamp to store along with the
      document. Default is indexing time.

    Please refer to the [elasticsearch
    documentation](http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-index_.html)
    for more details on these options.

    By default the 'op_type' is set to 'create'.


*yii/elasticsearch/ActiveRecord::update*			public
>
 update($runValidation='true', $attributeNames='null', $options='[]')
<
return (int|bool) The number of rows affected, or false if validation fails or
'beforeSave()' stops the updating process.

    [$runValidation] (bool) Whether to perform validation before saving the
    record. If the validation fails, the record will not be inserted into the
    database.
    [$attributeNames] (array) List of attribute names that need to be saved.
    Defaults to null, meaning all attributes that are loaded from DB will be
    saved.
    [$options] (array) Options given in this parameter are passed to
    elasticsearch as request URI parameters. These are among others:


      - 'routing' define shard placement of this record. 
      - 'parent' by giving the primaryKey of another record this defines a
      parent-child relation 
      - 'timeout' timeout waiting for a shard to become available. 
      - 'replication' the replication type for the delete/index operation
      (sync or async). 
      - 'consistency' the write consistency of the index/delete operation. 
      - 'refresh' refresh the relevant primary and replica shards (not the
      whole index) immediately after the operation occurs, so that the
      updated document appears in search results immediately. 
      - 'detect_noop' this parameter will become part of the request body
      and will prevent the index from getting updated when nothing has
      changed.

    Please refer to the [elasticsearch
    documentation](http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-update.html#_parameters_3)
    for more details on these options.

    The following parameters are Yii specific:


      - 'optimistic_locking' set this to 'true' to enable optimistic
      locking, avoid updating when the record has changed since it   has been
    loaded from the database. Yii will set the 'version' parameter to the
    value stored in 'version'.   See the [elasticsearch
    documentation](http://www.elastic.co/guide/en/elasticsearch/guide/current/optimistic-concurrency-control.html)
    for details.

      Make sure the record has been fetched with a 'version' before. This is
    only the case   for records fetched via 'get()' and 'mget()' by default.
    For normal queries, the '_version' field has to be fetched explicitly.


*yii/elasticsearch/ActiveRecord::updateInternal*		protected
>
 updateInternal($attributes='null', $options='[]')
<
return (int|false) The number of rows affected, or false if 'beforeSave()' stops the
updating process.

    [$attributes] (array) Attributes to update
    [$options] (array) Options given in this parameter are passed to
    elasticsearch as request URI parameters. See 'update()' for details.


*yii/elasticsearch/ActiveRecord::primaryKeysByCondition*	protected
>
 primaryKeysByCondition($condition)
<
return (array) Primary keys that correspond to given conditions

 Performs a quick and highly efficient scroll/scan query to get the list of
 primary keys that satisfy the given condition. If condition is a list of
 primary keys (e.g.: '['_id' => ['1', '2', '3'''), the query is not performed
 for performance considerations.

    [$condition] (array) Please refer to 'ActiveQuery::where()' on how to
    specify this parameter


*yii/elasticsearch/ActiveRecord::updateAll*		public
>
 updateAll($attributes, $condition='[]')
<
return (int) The number of rows updated

 Updates all records whos primary keys are given.

 For example, to change the status to be 1 for all customers whose status is
 2:

   Customer::updateAll(['status' => 1], ['status' => 2]);



    [$attributes] (array) Attribute values (name-value pairs) to be saved into
    the table
    [$condition] (array) The conditions that will be passed to the 'where()'
    method when building the query. Please refer to 'ActiveQuery::where()' on
    how to specify this parameter.


*yii/elasticsearch/ActiveRecord::updateAllCounters*	public
>
 updateAllCounters($counters, $condition='[]')
<
return (int) The number of rows updated

 Updates all matching records using the provided counter changes and
 conditions.

 For example, to add 1 to age of all customers whose status is 2,

   Customer::updateAllCounters(['age' => 1], ['status' => 2]);



    [$counters] (array) The counters to be updated (attribute name =>
    increment value). Use negative values if you want to decrement the
    counters.
    [$condition] (array) The conditions that will be passed to the 'where()'
    method when building the query. Please refer to 'ActiveQuery::where()' on
    how to specify this parameter.


*yii/elasticsearch/ActiveRecord::delete*			public
>
 delete($options='[]')
<
return (int|bool) The number of rows deleted, or false if the deletion is
unsuccessful for some reason. Note that it is possible the number of rows
deleted is 0, even though the deletion execution is successful.

    [$options] (array) Options given in this parameter are passed to
    elasticsearch as request URI parameters. These are among others:


      - 'routing' define shard placement of this record. 
      - 'parent' by giving the primaryKey of another record this defines a
      parent-child relation 
      - 'timeout' timeout waiting for a shard to become available. 
      - 'replication' the replication type for the delete/index operation
      (sync or async). 
      - 'consistency' the write consistency of the index/delete operation. 
      - 'refresh' refresh the relevant primary and replica shards (not the
      whole index) immediately after the operation occurs, so that the
      updated document appears in search results immediately.

    Please refer to the [elasticsearch
    documentation](http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html)
    for more details on these options.

    The following parameters are Yii specific:


      - 'optimistic_locking' set this to 'true' to enable optimistic
      locking, avoid updating when the record has changed since it   has been
    loaded from the database. Yii will set the 'version' parameter to the
    value stored in 'version'.   See the [elasticsearch
    documentation](http://www.elastic.co/guide/en/elasticsearch/reference/current/docs-delete.html#delete-versioning)
    for details.

      Make sure the record has been fetched with a 'version' before. This is
    only the case   for records fetched via 'get()' and 'mget()' by default.
    For normal queries, the '_version' field has to be fetched explicitly.


*yii/elasticsearch/ActiveRecord::deleteAll*		public
>
 deleteAll($condition='[]')
<
return (int) The number of rows deleted

 Deletes rows in the table using the provided conditions.

 WARNING: If you do not specify any condition, this method will delete ALL
 rows in the table.

 For example, to delete all customers whose status is 3:

   Customer::deleteAll(['status' => 3]);



    [$condition] (array) The conditions that will be passed to the 'where()'
    method when building the query. Please refer to 'ActiveQuery::where()' on
    how to specify this parameter.


*yii/elasticsearch/ActiveRecord::optimisticLock*		public
>
 optimisticLock()
<
return (void)

 This method has no effect in Elasticsearch ActiveRecord.

 Elasticsearch ActiveRecord uses [native Optimistic
 locking](http://www.elastic.co/guide/en/elasticsearch/guide/current/optimistic-concurrency-control.html).
 See 'update()' for more details.


*yii/elasticsearch/ActiveRecord::unlinkAll*		public
>
 unlinkAll($name, $delete='false')
<
return (void)

 Destroys the relationship in current model.

 This method is not supported by elasticsearch.

    [$name] () 
    [$delete] () 



 vim:tw=78:ts=8:ft=help:norl:
