
*yii/widgets/MaskedInput*   >> |yii/widgets/InputWidget|
=========================

DESCRIPTION
------------------------------------------------------------------------------

 MaskedInput is similar to 'Html::textInput()' except that an input mask will
 be used to force users to enter properly formatted data, such as phone
 numbers, social security numbers.

 To use MaskedInput, you must set the 'mask' property. The following example
 shows how to use MaskedInput to collect phone numbers:

   echo MaskedInput::widget([
       'name' => 'phone',
       'mask' => '999-999-9999',
   ]);

 You can also use this widget in an 'ActiveForm' using the
 'ActiveField::widget()|widget()' method, for example like this:

   <?= $form->field($model,
 'from_date')->widget(\yii\widgets\MaskedInput::className(), [
       'mask' => '999-999-9999',
   ]) ?>

 The masked text field is implemented based on the [jQuery input masked
 plugin](https://github.com/RobinHerbots/Inputmask).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Widget::$counter|
 |yii/base/Widget::$autoIdPrefix|
 |yii/base/Widget::$stack|
 |yii/widgets/InputWidget::$field|
 |yii/widgets/InputWidget::$model|
 |yii/widgets/InputWidget::$attribute|
 |yii/widgets/InputWidget::$name|
 |yii/widgets/InputWidget::$value|


$options				*yii/widgets/MaskedInput::$options*

 (array) The HTML attributes for the input tag.

$mask					*yii/widgets/MaskedInput::$mask*

 (string|array|\yii\web\JsExpression) The input mask (e.g. '99/99/9999' for
 date input). The following characters can be used in the mask and are
 predefined:


   - 'a': represents an alpha character (A-Z, a-z) 
   - '9': represents a numeric character (0-9) 
   - '*': represents an alphanumeric character (A-Z, a-z, 0-9) 
   - '[' and ']': anything entered between the square brackets is
   considered optional user input. This is   based on the 'optionalmarker'
 setting in 'clientOptions'.

 Additional definitions can be set through the 'definitions' property.

$definitions				*yii/widgets/MaskedInput::$definitions*

 (array) Custom mask definitions to use. Should be configured as 'maskSymbol
 => settings', where


   - 'maskSymbol' is a string, containing a character to identify your
   mask definition and 
   - 'settings' is an array, consisting of the following entries:   
   - 'validator': string, a JS regular expression or a JS function.   
   - 'cardinality': int, specifies how many characters are represented
   and validated for the definition.   
   - 'prevalidator': array, validate the characters before the
   definition cardinality is reached.   
   - 'definitionSymbol': string, allows shifting values from other
   definitions, with this 'definitionSymbol'.

$aliases				*yii/widgets/MaskedInput::$aliases*

 (array) Custom aliases to use. Should be configured as 'maskAlias =>
 settings', where


   - 'maskAlias' is a string containing a text to identify your mask
   alias definition (e.g. 'phone') and 
   - 'settings' is an array containing settings for the mask symbol,
   exactly similar to parameters as passed in 'clientOptions'.

$clientOptions				*yii/widgets/MaskedInput::$clientOptions*

 (array) The JQuery plugin options for the input mask plugin.

$type					*yii/widgets/MaskedInput::$type*

 (string) The type of the input tag. Currently only 'text' and 'tel' are
 supported.

$_hashVar				*yii/widgets/MaskedInput::$_hashVar*

 (string) The hashed variable to store the pluginOptions



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Widget::begin|
 |yii/base/Widget::end|
 |yii/base/Widget::widget|
 |yii/base/Widget::getId|
 |yii/base/Widget::setId|
 |yii/base/Widget::getView|
 |yii/base/Widget::setView|
 |yii/base/Widget::render|
 |yii/base/Widget::renderFile|
 |yii/base/Widget::getViewPath|
 |yii/base/Widget::beforeRun|
 |yii/base/Widget::afterRun|
 |yii/widgets/InputWidget::hasModel|
 |yii/widgets/InputWidget::renderInputHtml|


*yii/widgets/MaskedInput::init*				public
>
 init()
<
return (void)

 Initializes the widget.


*yii/widgets/MaskedInput::run*				public
>
 run()
<
return (void)

 {@inheritdoc}


*yii/widgets/MaskedInput::hashPluginOptions*		protected
>
 hashPluginOptions($view)
<
return (void)

 Generates a hashed variable to store the plugin 'clientOptions'.

 Helps in reusing the variable for similar options passed for other widgets on
 the same page. The following special data attribute will also be added to the
 input field to allow accessing the client options via javascript:


   - 'data-plugin-inputmask' will store the hashed variable storing the
   plugin options.

    [$view] (\yii\web\View) The view instance


*yii/widgets/MaskedInput::initClientOptions*		protected
>
 initClientOptions()
<
return (void)

 Initializes client options.


*yii/widgets/MaskedInput::registerClientScript*		public
>
 registerClientScript()
<
return (void)

 Registers the needed client script and options.



 vim:tw=78:ts=8:ft=help:norl:
