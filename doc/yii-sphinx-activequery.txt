
*yii/sphinx/ActiveQuery*   >> |yii/sphinx/Query|
========================

DESCRIPTION
------------------------------------------------------------------------------

 An ActiveQuery can be a normal query or be used in a relational context.

 ActiveQuery instances are usually created by 'ActiveRecord::find()' and
 'ActiveRecord::findBySql()'. Relational queries are created by
 'ActiveRecord::hasOne()' and 'ActiveRecord::hasMany()'.

 Normal Query ------------

 Because ActiveQuery extends from 'Query', one can use query methods, such as
 'where()', 'orderBy()' to customize the query options.

 ActiveQuery also provides the following additional query options:


   - 'with()': list of relations that this query should be performed
   with. 
   - 'indexBy()': the name of the column by which the query result
   should be indexed. 
   - 'asArray()': whether to return each record as an array.

 These options can be configured using methods of the same name. For example:

   $articles = Article::find()->with('source')->asArray()->all();

 ActiveQuery allows to build the snippets using sources provided by
 ActiveRecord. You can use 'snippetByModel()' method to enable this. For
 example:

   class Article extends ActiveRecord
   {
       public function getSource()
       {
           return $this->hasOne('db', ArticleDb::className(), ['id' => 'id']);
       }

       public function getSnippetSource()
       {
           return $this->source->content;
       }

       ...
   }

   $articles = Article::find()->with('source')->snippetByModel()->all();

 Relational query ----------------

 In relational context ActiveQuery represents a relation between two Active
 Record classes.

 Relational ActiveQuery instances are usually created by calling
 'ActiveRecord::hasOne()' and 'ActiveRecord::hasMany()'. An Active Record
 class declares a relation by defining a getter method which calls one of the
 above methods and returns the created ActiveQuery object.

 A relation is specified by 'link' which represents the association between
 columns of different tables; and the multiplicity of the relation is
 indicated by 'multiple'.

 If a relation involves a junction table, it may be specified by 'via()'. This
 methods may only be called in a relational context. Same is true for
 'inverseOf()', which marks a relation as inverse of another relation.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/sphinx/Query::$match|
 |yii/sphinx/Query::$within|
 |yii/sphinx/Query::$options|
 |yii/sphinx/Query::$snippetCallback|
 |yii/sphinx/Query::$snippetOptions|
 |yii/sphinx/Query::$facets|
 |yii/sphinx/Query::$showMeta|
 |yii/sphinx/Query::$groupLimit|


$sql					*yii/sphinx/ActiveQuery::$sql*

 (string) The SQL statement to be executed for retrieving AR records. This is
 set by 'ActiveRecord::findBySql()'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/sphinx/Query::setConnection|
 |yii/sphinx/Query::getConnection|
 |yii/sphinx/Query::search|
 |yii/sphinx/Query::match|
 |yii/sphinx/Query::join|
 |yii/sphinx/Query::innerJoin|
 |yii/sphinx/Query::leftJoin|
 |yii/sphinx/Query::rightJoin|
 |yii/sphinx/Query::getTablesUsedInFrom|
 |yii/sphinx/Query::options|
 |yii/sphinx/Query::addOptions|
 |yii/sphinx/Query::within|
 |yii/sphinx/Query::addWithin|
 |yii/sphinx/Query::groupLimit|
 |yii/sphinx/Query::facets|
 |yii/sphinx/Query::addFacets|
 |yii/sphinx/Query::showMeta|
 |yii/sphinx/Query::snippetCallback|
 |yii/sphinx/Query::snippetOptions|
 |yii/sphinx/Query::fillUpSnippets|
 |yii/sphinx/Query::callSnippetsInternal|
 |yii/sphinx/Query::queryScalar|
 |yii/sphinx/Query::create|


*yii/sphinx/ActiveQuery::defaultConnection*		protected
>
 defaultConnection()
<
return (\yii\sphinx\Connection) Default connection value.








*yii/sphinx/ActiveQuery::createCommand*			public
>
 createCommand($db='null')
<
return (\yii\sphinx\Command) The created DB command instance.

 Creates a DB command that can be used to execute this query.

    [$db] (\yii\sphinx\Connection) The DB connection used to create the DB
    command. If null, the DB connection returned by 'modelClass' will be used.


*yii/sphinx/ActiveQuery::all*				public
>
 all($db='null')
<
return (array) The query results. If the query results in nothing, an empty array
will be returned.

 Executes query and returns all results as an array.

    [$db] (\yii\sphinx\Connection) The DB connection used to create the DB
    command. If null, the DB connection returned by 'modelClass' will be used.


*yii/sphinx/ActiveQuery::one*				public
>
 one($db='null')
<
return (\yii\sphinx\ActiveRecord|array|null) A single row of query result. Depending
on the setting of 'asArray', the query result may be either an array or an
ActiveRecord object. Null will be returned if the query results in nothing.

 Executes query and returns a single row of result.

    [$db] (\yii\sphinx\Connection) The DB connection used to create the DB
    command. If null, the DB connection returned by 'modelClass' will be used.


*yii/sphinx/ActiveQuery::callSnippets*			protected
>
 callSnippets($source)
<
return (array) Snippets list.

 Builds a snippets from provided source data.







    [$source] (array) The source data to extract a snippet from.


*yii/sphinx/ActiveQuery::__construct*			public
>
 __construct($modelClass, $config='[]')
<
return (void)

 Constructor.

    [$modelClass] (array) The model class associated with this query
    [$config] (array) Configurations to be applied to the newly created query
    object


*yii/sphinx/ActiveQuery::init*				public
>
 init()
<
return (void)

 Initializes the object.

 This method is called at the end of the constructor. The default
 implementation will trigger an 'EVENT_INIT' event. If you override this
 method, make sure you call the parent implementation at the end to ensure
 triggering of the event.


*yii/sphinx/ActiveQuery::snippetByModel*			public
>
 snippetByModel()
<
return ($this) The query object itself

 Sets the 'snippetCallback' to 'fetchSnippetSourceFromModels()', which allows
 to fetch the snippet source strings from the Active Record models, using
 method 'ActiveRecord::getSnippetSource()'.

 For example:

   class Article extends ActiveRecord
   {
       public function getSnippetSource()
       {
           return file_get_contents('/path/to/source/files/' . $this->id .
 '.txt');;
       }
   }

   $articles = Article::find()->snippetByModel()->all();

 Warning: this option should NOT be used with 'asArray' at the same time!


*yii/sphinx/ActiveQuery::populate*			public
>
 populate($rows)
<
return (void)

    [$rows] () 


*yii/sphinx/ActiveQuery::fetchSnippetSourceFromModels*	protected
>
 fetchSnippetSourceFromModels($models)
<
return (array) Snippet source strings

 Fetches the source for the snippets using 'ActiveRecord::getSnippetSource()'
 method.

    [$models] (\yii\sphinx\ActiveRecord[]) Raw query result rows.



 vim:tw=78:ts=8:ft=help:norl:
