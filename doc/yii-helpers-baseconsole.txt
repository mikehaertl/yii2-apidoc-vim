
*yii/helpers/BaseConsole*  
=========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/helpers/Console|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseConsole. Use 'Console' instead.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/helpers/BaseConsole::moveCursorUp*			public
>
 moveCursorUp($rows=1)
<
(void)

 If the cursor is already at the edge of the screen, this has no effect.
    [$rows] (integer) Number of rows the cursor should be moved up


*yii/helpers/BaseConsole::moveCursorDown*			public
>
 moveCursorDown($rows=1)
<
(void)

 If the cursor is already at the edge of the screen, this has no effect.
    [$rows] (integer) Number of rows the cursor should be moved down


*yii/helpers/BaseConsole::moveCursorForward*		public
>
 moveCursorForward($steps=1)
<
(void)

 If the cursor is already at the edge of the screen, this has no effect.
    [$steps] (integer) Number of steps the cursor should be moved forward


*yii/helpers/BaseConsole::moveCursorBackward*		public
>
 moveCursorBackward($steps=1)
<
(void)

 If the cursor is already at the edge of the screen, this has no effect.
    [$steps] (integer) Number of steps the cursor should be moved backward


*yii/helpers/BaseConsole::moveCursorNextLine*		public
>
 moveCursorNextLine($lines=1)
<
(void)

    [$lines] (integer) Number of lines the cursor should be moved down


*yii/helpers/BaseConsole::moveCursorPrevLine*		public
>
 moveCursorPrevLine($lines=1)
<
(void)

    [$lines] (integer) Number of lines the cursor should be moved up


*yii/helpers/BaseConsole::moveCursorTo*			public
>
 moveCursorTo($column, $row='null')
<
(void)

    [$column] (integer) 1-based column number, 1 is the left edge of the
    screen.
    [$row] (integer|null) 1-based row number, 1 is the top edge of the screen.
    if not set, will move cursor only in current line.


*yii/helpers/BaseConsole::scrollUp*			public
>
 scrollUp($lines=1)
<
(void)

 New lines are added at the bottom. This is not supported by ANSI.SYS used in
 windows.
    [$lines] (integer) Number of lines to scroll up


*yii/helpers/BaseConsole::scrollDown*			public
>
 scrollDown($lines=1)
<
(void)

 New lines are added at the top. This is not supported by ANSI.SYS used in
 windows.
    [$lines] (integer) Number of lines to scroll down


*yii/helpers/BaseConsole::saveCursorPosition*		public
>
 saveCursorPosition()
<
(void)

 Position can then be restored with 'restoreCursorPosition()'.


*yii/helpers/BaseConsole::restoreCursorPosition*		public
>
 restoreCursorPosition()
<
(void)



*yii/helpers/BaseConsole::hideCursor*			public
>
 hideCursor()
<
(void)

 Use 'showCursor()' to bring it back. Do not forget to show cursor when your
 application exits. Cursor might stay hidden in terminal after exit.


*yii/helpers/BaseConsole::showCursor*			public
>
 showCursor()
<
(void)



*yii/helpers/BaseConsole::clearScreen*			public
>
 clearScreen()
<
(void)

 Cursor position will not be changed. **Note:** ANSI.SYS implementation used
 in windows will reset cursor position to upper left corner of the screen.


*yii/helpers/BaseConsole::clearScreenBeforeCursor*	public
>
 clearScreenBeforeCursor()
<
(void)

 Cursor position will not be changed.


*yii/helpers/BaseConsole::clearScreenAfterCursor*		public
>
 clearScreenAfterCursor()
<
(void)

 Cursor position will not be changed.


*yii/helpers/BaseConsole::clearLine*			public
>
 clearLine()
<
(void)

 Cursor position will not be changed.


*yii/helpers/BaseConsole::clearLineBeforeCursor*		public
>
 clearLineBeforeCursor()
<
(void)

 Cursor position will not be changed.


*yii/helpers/BaseConsole::clearLineAfterCursor*		public
>
 clearLineAfterCursor()
<
(void)

 Cursor position will not be changed.


*yii/helpers/BaseConsole::ansiFormatCode*			public
>
 ansiFormatCode($format)
<
(string) The ANSI format code according to the given formatting constants.

    [$format] (array) An array containing formatting values. You can pass any
    of the FG_*, BG_* and TEXT_* constants and also 'xtermFgColor' and
    'xtermBgColor' to specify a format.


*yii/helpers/BaseConsole::beginAnsiFormat*		public
>
 beginAnsiFormat($format)
<
(void)

    [$format] (array) An array containing formatting values. You can pass any
    of the FG_*, BG_* and TEXT_* constants and also 'xtermFgColor' and
    'xtermBgColor' to specify a format.


*yii/helpers/BaseConsole::endAnsiFormat*			public
>
 endAnsiFormat()
<
(void)

 This is equal to calling

   [
       'class' => 'yii\caching\DbDependency',
       'sql' => 'SELECT MAX(lastModified) FROM Post',
   ]




*yii/helpers/BaseConsole::ansiFormat*			public
>
 ansiFormat($string, $format='[]')
<
(string) 

    [$string] (string) The string to be formatted
    [$format] (array) An array containing formatting values. You can pass any
    of the FG_*, BG_* and TEXT_* constants and also 'xtermFgColor' and
    'xtermBgColor' to specify a format.


*yii/helpers/BaseConsole::xtermFgColor*			public
>
 xtermFgColor($colorCode)
<
(string) 

 You can pass the return value of this to one of the formatting methods:
 'ansiFormat', 'ansiFormatCode', 'beginAnsiFormat'
    [$colorCode] (integer) Xterm color code


*yii/helpers/BaseConsole::xtermBgColor*			public
>
 xtermBgColor($colorCode)
<
(string) 

 You can pass the return value of this to one of the formatting methods:
 'ansiFormat', 'ansiFormatCode', 'beginAnsiFormat'
    [$colorCode] (integer) Xterm color code


*yii/helpers/BaseConsole::stripAnsiFormat*		public
>
 stripAnsiFormat($string)
<
(string) 

    [$string] (string) String to strip


*yii/helpers/BaseConsole::ansiToHtml*			public
>
 ansiToHtml($string)
<
(void)

    [$string] () 


*yii/helpers/BaseConsole::markdownToAnsi*			public
>
 markdownToAnsi()
<
(void)



*yii/helpers/BaseConsole::renderColoredString*		public
>
 renderColoredString($string, $colored='true')
<
(void)

    [$string] () 
    [$colored] () 


*yii/helpers/BaseConsole::escape*				public
>
 escape($string)
<
(void)

    [$string] () 


*yii/helpers/BaseConsole::streamSupportsAnsiColors*	public
>
 streamSupportsAnsiColors($stream)
<
(boolean) True if the stream supports ANSI colors, otherwise false.


   - windows without ansicon 
   - not tty consoles
    [$stream] (mixed) 


*yii/helpers/BaseConsole::isRunningOnWindows*		public
>
 isRunningOnWindows()
<
(bool) 



*yii/helpers/BaseConsole::getScreenSize*			public
>
 getScreenSize($refresh='false')
<
(array|boolean) An array of ($width, $height) or false when it was not able to
determine size.

    [$refresh] (boolean) Whether to force checking and not re-use cached size
    value. This is useful to detect changing window size while the application
    is running but may not get up to date values on every terminal.


*yii/helpers/BaseConsole::stdin*				public
>
 stdin($raw='false')
<
(string) The string read from stdin

    [$raw] (boolean) If set to true, returns the raw string without trimming


*yii/helpers/BaseConsole::stdout*				public
>
 stdout($string)
<
(int|boolean) Number of bytes printed or false on error

    [$string] (string) The string to print


*yii/helpers/BaseConsole::stderr*				public
>
 stderr($string)
<
(int|boolean) Number of bytes printed or false on error

    [$string] (string) The string to print


*yii/helpers/BaseConsole::input*				public
>
 input($prompt='null')
<
(string) The user's input

    [$prompt] (string) The prompt to display before waiting for input
    (optional)


*yii/helpers/BaseConsole::output*				public
>
 output($string='null')
<
(integer|boolean) Number of bytes printed or false on error.

    [$string] (string) The text to print


*yii/helpers/BaseConsole::error*				public
>
 error($string='null')
<
(integer|boolean) Number of bytes printed or false on error.

    [$string] (string) The text to print


*yii/helpers/BaseConsole::prompt*				public
>
 prompt($text, $options='[]')
<
(string) The user input

    [$text] (string) Prompt string
    [$options] (array) The options to validate the input:


      - 'required': whether it is required or not 
      - 'default': default value if no input is inserted by the user 
      - 'pattern': regular expression pattern to validate user input 
      - 'validator': a callable function to validate input. The function
      must accept two parameters: 
      - 'input': the user input to validate 
      - 'error': the error value passed by reference if validation failed.


*yii/helpers/BaseConsole::confirm*			public
>
 confirm($message, $default='true')
<
(boolean) Whether user confirmed

    [$message] (string) To echo out before waiting for user input
    [$default] (boolean) This value is returned if no selection is made.


*yii/helpers/BaseConsole::select*				public
>
 select($prompt, $options='[]')
<
(string) An option character the user chose

    [$prompt] (string) The prompt message
    [$options] (array) Key-value array of options to choose from


*yii/helpers/BaseConsole::startProgress*			public
>
 startProgress($done, $total, $prefix='''', $width='null')
<
(void)

 This bar will be updated by 'updateProgress()' and my be ended by
 'endProgress()'.

 The following example shows a simple usage of a progress bar:

   use yii\widgets\Pjax;

   Pjax::begin();
   echo GridView::widget([...]);
   Pjax::end();

 Git clone like progress (showing only status information):

   echo Console::ansiFormatCode([Console::RESET])


    [$done] (integer) The number of items that are completed.
    [$total] (integer) The total value of items that are to be done.
    [$prefix] (string) An optional string to display before the progress bar.
    Default to empty string which results in no prefix to be displayed.
    [$width] (integer|boolean) Optional width of the progressbar. This can be
    an integer representing the number of characters to display for the
    progress bar or a float between 0 and 1 representing the percentage of
    screen with the progress bar may take. It can also be set to false to
    disable the bar and only show progress information like percent, number of
    items and ETA. If not set, the bar will be as wide as the screen. Screen
    size will be detected using 'getScreenSize()'.


*yii/helpers/BaseConsole::updateProgress*			public
>
 updateProgress($done, $total, $prefix='null')
<
(void)

    [$done] (integer) The number of items that are completed.
    [$total] (integer) The total value of items that are to be done.
    [$prefix] (string) An optional string to display before the progress bar.
    Defaults to null meaning the prefix specified by 'startProgress()' will be
    used. If prefix is specified it will update the prefix that will be used
    by later calls.


*yii/helpers/BaseConsole::endProgress*			public
>
 endProgress($remove='false', $keepPrefix='true')
<
(void)

    [$remove] (string|boolean) This can be 'false' to leave the progress bar
    on screen and just print a newline. If set to 'true', the line of the
    progress bar will be cleared. This may also be a string to be displayed
    instead of the progress bar.
    [$keepPrefix] (boolean) Whether to keep the prefix that has been specified
    for the progressbar when progressbar gets removed. Defaults to true.



 vim:tw=78:ts=8:ft=help:norl:
