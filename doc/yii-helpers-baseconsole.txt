
*yii/helpers/BaseConsole*  
=========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/helpers/Console|

DESCRIPTION
------------------------------------------------------------------------------

 Do not use BaseConsole. Use 'Console' instead.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/helpers/BaseConsole::moveCursorUp*			public
>
 moveCursorUp($rows=1)
<
return (void)

 Moves the terminal cursor up by sending ANSI control code CUU to the
 terminal.

 If the cursor is already at the edge of the screen, this has no effect.

    [$rows] (int) Number of rows the cursor should be moved up


*yii/helpers/BaseConsole::moveCursorDown*			public
>
 moveCursorDown($rows=1)
<
return (void)

 Moves the terminal cursor down by sending ANSI control code CUD to the
 terminal.

 If the cursor is already at the edge of the screen, this has no effect.

    [$rows] (int) Number of rows the cursor should be moved down


*yii/helpers/BaseConsole::moveCursorForward*		public
>
 moveCursorForward($steps=1)
<
return (void)

 Moves the terminal cursor forward by sending ANSI control code CUF to the
 terminal.

 If the cursor is already at the edge of the screen, this has no effect.

    [$steps] (int) Number of steps the cursor should be moved forward


*yii/helpers/BaseConsole::moveCursorBackward*		public
>
 moveCursorBackward($steps=1)
<
return (void)

 Moves the terminal cursor backward by sending ANSI control code CUB to the
 terminal.

 If the cursor is already at the edge of the screen, this has no effect.

    [$steps] (int) Number of steps the cursor should be moved backward


*yii/helpers/BaseConsole::moveCursorNextLine*		public
>
 moveCursorNextLine($lines=1)
<
return (void)

 Moves the terminal cursor to the beginning of the next line by sending ANSI
 control code CNL to the terminal.

    [$lines] (int) Number of lines the cursor should be moved down


*yii/helpers/BaseConsole::moveCursorPrevLine*		public
>
 moveCursorPrevLine($lines=1)
<
return (void)

 Moves the terminal cursor to the beginning of the previous line by sending
 ANSI control code CPL to the terminal.

    [$lines] (int) Number of lines the cursor should be moved up


*yii/helpers/BaseConsole::moveCursorTo*			public
>
 moveCursorTo($column, $row='null')
<
return (void)

 Moves the cursor to an absolute position given as column and row by sending
 ANSI control code CUP or CHA to the terminal.

    [$column] (int) 1-based column number, 1 is the left edge of the screen.
    [$row] (int|null) 1-based row number, 1 is the top edge of the screen. if
    not set, will move cursor only in current line.


*yii/helpers/BaseConsole::scrollUp*			public
>
 scrollUp($lines=1)
<
return (void)

 Scrolls whole page up by sending ANSI control code SU to the terminal.

 New lines are added at the bottom. This is not supported by ANSI.SYS used in
 windows.

    [$lines] (int) Number of lines to scroll up


*yii/helpers/BaseConsole::scrollDown*			public
>
 scrollDown($lines=1)
<
return (void)

 Scrolls whole page down by sending ANSI control code SD to the terminal.

 New lines are added at the top. This is not supported by ANSI.SYS used in
 windows.

    [$lines] (int) Number of lines to scroll down


*yii/helpers/BaseConsole::saveCursorPosition*		public
>
 saveCursorPosition()
<
return (void)

 Saves the current cursor position by sending ANSI control code SCP to the
 terminal.

 Position can then be restored with 'restoreCursorPosition()'.


*yii/helpers/BaseConsole::restoreCursorPosition*		public
>
 restoreCursorPosition()
<
return (void)

 Restores the cursor position saved with 'saveCursorPosition()' by sending
 ANSI control code RCP to the terminal.


*yii/helpers/BaseConsole::hideCursor*			public
>
 hideCursor()
<
return (void)

 Hides the cursor by sending ANSI DECTCEM code ?25l to the terminal.

 Use 'showCursor()' to bring it back. Do not forget to show cursor when your
 application exits. Cursor might stay hidden in terminal after exit.


*yii/helpers/BaseConsole::showCursor*			public
>
 showCursor()
<
return (void)

 Will show a cursor again when it has been hidden by 'hideCursor()'  by
 sending ANSI DECTCEM code ?25h to the terminal.


*yii/helpers/BaseConsole::clearScreen*			public
>
 clearScreen()
<
return (void)

 Clears entire screen content by sending ANSI control code ED with argument 2
 to the terminal.

 Cursor position will not be changed. **Note:** ANSI.SYS implementation used
 in windows will reset cursor position to upper left corner of the screen.


*yii/helpers/BaseConsole::clearScreenBeforeCursor*	public
>
 clearScreenBeforeCursor()
<
return (void)

 Clears text from cursor to the beginning of the screen by sending ANSI
 control code ED with argument 1 to the terminal.

 Cursor position will not be changed.


*yii/helpers/BaseConsole::clearScreenAfterCursor*		public
>
 clearScreenAfterCursor()
<
return (void)

 Clears text from cursor to the end of the screen by sending ANSI control code
 ED with argument 0 to the terminal.

 Cursor position will not be changed.


*yii/helpers/BaseConsole::clearLine*			public
>
 clearLine()
<
return (void)

 Clears the line, the cursor is currently on by sending ANSI control code EL
 with argument 2 to the terminal.

 Cursor position will not be changed.


*yii/helpers/BaseConsole::clearLineBeforeCursor*		public
>
 clearLineBeforeCursor()
<
return (void)

 Clears text from cursor position to the beginning of the line by sending ANSI
 control code EL with argument 1 to the terminal.

 Cursor position will not be changed.


*yii/helpers/BaseConsole::clearLineAfterCursor*		public
>
 clearLineAfterCursor()
<
return (void)

 Clears text from cursor position to the end of the line by sending ANSI
 control code EL with argument 0 to the terminal.

 Cursor position will not be changed.


*yii/helpers/BaseConsole::ansiFormatCode*			public
>
 ansiFormatCode($format)
<
return (string) The ANSI format code according to the given formatting constants.

 Returns the ANSI format code.

    [$format] (array) An array containing formatting values. You can pass any
    of the 'FG_*', 'BG_*' and 'TEXT_*' constants and also 'xtermFgColor' and
    'xtermBgColor' to specify a format.


*yii/helpers/BaseConsole::beginAnsiFormat*		public
>
 beginAnsiFormat($format)
<
return (void)

 Echoes an ANSI format code that affects the formatting of any text that is
 printed afterwards.

    [$format] (array) An array containing formatting values. You can pass any
    of the 'FG_*', 'BG_*' and 'TEXT_*' constants and also 'xtermFgColor' and
    'xtermBgColor' to specify a format.


*yii/helpers/BaseConsole::endAnsiFormat*			public
>
 endAnsiFormat()
<
return (void)

 Resets any ANSI format set by previous method 'beginAnsiFormat()' Any output
 after this will have default text format.

 This is equal to calling.

   echo Console::ansiFormatCode([Console::RESET])




*yii/helpers/BaseConsole::ansiFormat*			public
>
 ansiFormat($string, $format='[]')
<
return (string) 

 Will return a string formatted with the given ANSI style.

    [$string] (string) The string to be formatted
    [$format] (array) An array containing formatting values. You can pass any
    of the 'FG_*', 'BG_*' and 'TEXT_*' constants and also 'xtermFgColor' and
    'xtermBgColor' to specify a format.


*yii/helpers/BaseConsole::xtermFgColor*			public
>
 xtermFgColor($colorCode)
<
return (string) 

 Returns the ansi format code for xterm foreground color.

 You can pass the return value of this to one of the formatting methods:
 'ansiFormat', 'ansiFormatCode', 'beginAnsiFormat'.

    [$colorCode] (int) Xterm color code


*yii/helpers/BaseConsole::xtermBgColor*			public
>
 xtermBgColor($colorCode)
<
return (string) 

 Returns the ansi format code for xterm background color.

 You can pass the return value of this to one of the formatting methods:
 'ansiFormat', 'ansiFormatCode', 'beginAnsiFormat'.

    [$colorCode] (int) Xterm color code


*yii/helpers/BaseConsole::stripAnsiFormat*		public
>
 stripAnsiFormat($string)
<
return (string) 

 Strips ANSI control codes from a string.

    [$string] (string) String to strip


*yii/helpers/BaseConsole::ansiStrlen*			public
>
 ansiStrlen($string)
<
return (int) The length of the string not counting ANSI format characters

 Returns the length of the string without ANSI color codes.

    [$string] (string) The string to measure


*yii/helpers/BaseConsole::ansiToHtml*			public
>
 ansiToHtml($string, $styleMap='[]')
<
return (string) HTML representation of the ANSI formatted string

 Converts an ANSI formatted string to HTML.

 Note: xTerm 256 bit colors are currently not supported.

    [$string] (string) The string to convert.
    [$styleMap] (array) An optional mapping of ANSI control codes such as
    FG\_*COLOR* or 'BOLD' to a set of css style definitions. The CSS style
    definitions are represented as an array where the array keys correspond to
    the css style attribute names and the values are the css values. values
    may be arrays that will be merged and imploded with '' '' when rendered.


*yii/helpers/BaseConsole::markdownToAnsi*			public
>
 markdownToAnsi($markdown)
<
return (string) The parsed result as ANSI formatted string.

 Converts Markdown to be better readable in console environments by applying
 some ANSI format.

    [$markdown] (string) The markdown string.


*yii/helpers/BaseConsole::renderColoredString*		public
>
 renderColoredString($string, $colored='true')
<
return (string) 

 Converts a string to ansi formatted by replacing patterns like %y (for
 yellow) with ansi control codes.

 Uses almost the same syntax as
 https://github.com/pear/Console_Color2/blob/master/Console/Color2.php The
 conversion table is: ('bold' meaning 'light' on some terminals). It's almost
 the same conversion table irssi uses. <pre>                  text      text  
          background      ------------------------------------------------    
  %k %K %0    black     dark grey       black      %r %R %1    red       bold
 red        red      %g %G %2    green     bold green      green      %y %Y %3
    yellow    bold yellow     yellow      %b %B %4    blue      bold blue     
  blue      %m %M %5    magenta   bold magenta    magenta      %p %P      
 magenta (think: purple)      %c %C %6    cyan      bold cyan       cyan     
 %w %W %7    white     bold white      white

      %F     Blinking, Flashing      %U     Underline      %8     Reverse     
 %_,%9  Bold

      %n     Resets the color      %%     A single % </pre> First param is the
 string to convert, second is an optional flag if colors should be used. It
 defaults to true, if set to false, the color codes will just be removed (And
 %% will be transformed into %)

    [$string] (string) String to convert
    [$colored] (bool) Should the string be colored?


*yii/helpers/BaseConsole::escape*				public
>
 escape($string)
<
return (string) 

 Escapes % so they don't get interpreted as color codes when the string is
 parsed by 'renderColoredString'.

    [$string] (string) String to escape


*yii/helpers/BaseConsole::streamSupportsAnsiColors*	public
>
 streamSupportsAnsiColors($stream)
<
return (bool) True if the stream supports ANSI colors, otherwise false.

 Returns true if the stream supports colorization. ANSI colors are disabled if
 not supported by the stream.


   - windows without ansicon 
   - not tty consoles

    [$stream] (mixed) 


*yii/helpers/BaseConsole::isRunningOnWindows*		public
>
 isRunningOnWindows()
<
return (bool) 

 Returns true if the console is running on windows.


*yii/helpers/BaseConsole::getScreenSize*			public
>
 getScreenSize($refresh='false')
<
return (array|bool) An array of ($width, $height) or false when it was not able to
determine size.

 Returns terminal screen size.

 Usage:

   list($width, $height) = ConsoleHelper::getScreenSize();



    [$refresh] (bool) Whether to force checking and not re-use cached size
    value. This is useful to detect changing window size while the application
    is running but may not get up to date values on every terminal.


*yii/helpers/BaseConsole::wrapText*			public
>
 wrapText($text, $indent=0, $refresh='false')
<
return (string) The wrapped text.

 Word wrap text with indentation to fit the screen size.

 If screen size could not be detected, or the indentation is greater than the
 screen size, the text will not be wrapped.

 The first line will **not** be indented, so 'Console::wrapText("Lorem ipsum
 dolor sit amet.", 4)' will result in the following output, given the screen
 width is 16 characters:

 ''' Lorem ipsum     dolor sit     amet. '''

    [$text] (string) The text to be wrapped
    [$indent] (int) Number of spaces to use for indentation.
    [$refresh] (bool) Whether to force refresh of screen size. This will be
    passed to 'getScreenSize()'.


*yii/helpers/BaseConsole::stdin*				public
>
 stdin($raw='false')
<
return (string) The string read from stdin

 Gets input from STDIN and returns a string right-trimmed for EOLs.

    [$raw] (bool) If set to true, returns the raw string without trimming


*yii/helpers/BaseConsole::stdout*				public
>
 stdout($string)
<
return (int|bool) Number of bytes printed or false on error

 Prints a string to STDOUT.

    [$string] (string) The string to print


*yii/helpers/BaseConsole::stderr*				public
>
 stderr($string)
<
return (int|bool) Number of bytes printed or false on error

 Prints a string to STDERR.

    [$string] (string) The string to print


*yii/helpers/BaseConsole::input*				public
>
 input($prompt='null')
<
return (string) The user's input

 Asks the user for input. Ends when the user types a carriage return
 (PHP_EOL). Optionally, It also provides a prompt.

    [$prompt] (string) The prompt to display before waiting for input
    (optional)


*yii/helpers/BaseConsole::output*				public
>
 output($string='null')
<
return (int|bool) Number of bytes printed or false on error.

 Prints text to STDOUT appended with a carriage return (PHP_EOL).

    [$string] (string) The text to print


*yii/helpers/BaseConsole::error*				public
>
 error($string='null')
<
return (int|bool) Number of bytes printed or false on error.

 Prints text to STDERR appended with a carriage return (PHP_EOL).

    [$string] (string) The text to print


*yii/helpers/BaseConsole::prompt*				public
>
 prompt($text, $options='[]')
<
return (string) The user input

 Prompts the user for input and validates it.

    [$text] (string) Prompt string
    [$options] (array) The options to validate the input:


      - 'required': whether it is required or not 
      - 'default': default value if no input is inserted by the user 
      - 'pattern': regular expression pattern to validate user input 
      - 'validator': a callable function to validate input. The function
      must accept two parameters: 
      - 'input': the user input to validate 
      - 'error': the error value passed by reference if validation failed.


*yii/helpers/BaseConsole::confirm*			public
>
 confirm($message, $default='false')
<
return (bool) Whether user confirmed

 Asks user to confirm by typing y or n.

 A typical usage looks like the following:

   if (Console::confirm("Are you sure?")) {
       echo "user typed yes\n";
   } else {
       echo "user typed no\n";
   }



    [$message] (string) To print out before waiting for user input
    [$default] (bool) This value is returned if no selection is made.


*yii/helpers/BaseConsole::select*				public
>
 select($prompt, $options='[]')
<
return (string) An option character the user chose

 Gives the user an option to choose from. Giving '?' as an input will show a
 list of options to choose from and their explanations.

    [$prompt] (string) The prompt message
    [$options] (array) Key-value array of options to choose from. Key is what
    is inputed and used, value is what's displayed to end user by help
    command.


*yii/helpers/BaseConsole::startProgress*			public
>
 startProgress($done, $total, $prefix='''', $width='null')
<
return (void)

 Starts display of a progress bar on screen.

 This bar will be updated by 'updateProgress()' and may be ended by
 'endProgress()'.

 The following example shows a simple usage of a progress bar:

   Console::startProgress(0, 1000);
   for ($n = 1; $n <= 1000; $n++) {
       usleep(1000);
       Console::updateProgress($n, 1000);
   }
   Console::endProgress();

 Git clone like progress (showing only status information):

   Console::startProgress(0, 1000, 'Counting objects: ', false);
   for ($n = 1; $n <= 1000; $n++) {
       usleep(1000);
       Console::updateProgress($n, 1000);
   }
   Console::endProgress("done." . PHP_EOL);



    [$done] (int) The number of items that are completed.
    [$total] (int) The total value of items that are to be done.
    [$prefix] (string) An optional string to display before the progress bar.
    Default to empty string which results in no prefix to be displayed.
    [$width] (int|bool) Optional width of the progressbar. This can be an
    integer representing the number of characters to display for the progress
    bar or a float between 0 and 1 representing the percentage of screen with
    the progress bar may take. It can also be set to false to disable the bar
    and only show progress information like percent, number of items and ETA.
    If not set, the bar will be as wide as the screen. Screen size will be
    detected using 'getScreenSize()'.


*yii/helpers/BaseConsole::updateProgress*			public
>
 updateProgress($done, $total, $prefix='null')
<
return (void)

 Updates a progress bar that has been started by 'startProgress()'.

    [$done] (int) The number of items that are completed.
    [$total] (int) The total value of items that are to be done.
    [$prefix] (string) An optional string to display before the progress bar.
    Defaults to null meaning the prefix specified by 'startProgress()' will be
    used. If prefix is specified it will update the prefix that will be used
    by later calls.


*yii/helpers/BaseConsole::endProgress*			public
>
 endProgress($remove='false', $keepPrefix='true')
<
return (void)

 Ends a progress bar that has been started by 'startProgress()'.

    [$remove] (string|bool) This can be 'false' to leave the progress bar on
    screen and just print a newline. If set to 'true', the line of the
    progress bar will be cleared. This may also be a string to be displayed
    instead of the progress bar.
    [$keepPrefix] (bool) Whether to keep the prefix that has been specified
    for the progressbar when progressbar gets removed. Defaults to true.


*yii/helpers/BaseConsole::errorSummary*			public
>
 errorSummary($models, $options='[]')
<
return (string) The generated error summary

 Generates a summary of the validation errors.

    [$models] (\yii\base\Model|\yii\base\Model[]) The model(s) whose
    validation errors are to be displayed.
    [$options] (array) The tag options in terms of name-value pairs. The
    following options are specially handled:


      - showAllErrors: boolean, if set to true every error message for
      each attribute will be shown otherwise   only the first error message
    for each attribute will be shown. Defaults to 'false'.



 vim:tw=78:ts=8:ft=help:norl:
