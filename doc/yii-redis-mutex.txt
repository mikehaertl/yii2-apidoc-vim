
*yii/redis/Mutex*   >> |yii/mutex/Mutex|
=================

DESCRIPTION
------------------------------------------------------------------------------

 Redis Mutex requires redis version 2.6.12 or higher to work properly.

 It needs to be configured with a redis 'Connection' that is also configured
 as an application component. By default it will use the 'redis' application
 component.

 To use redis Mutex as the application component, configure the application as
 follows:

   [
       'components' => [
           'mutex' => [
               'class' => 'yii\redis\Mutex',
               'redis' => [
                   'hostname' => 'localhost',
                   'port' => 6379,
                   'database' => 0,
               ]
           ],
       ],
   ]

 Or if you have configured the redis 'Connection' as an application component,
 the following is sufficient:

   [
       'components' => [
           'mutex' => [
               'class' => 'yii\redis\Mutex',
               // 'redis' => 'redis' // id of the connection application
 component
           ],
       ],
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/mutex/Mutex::$autoRelease|
 |yii/mutex/RetryAcquireTrait::$retryDelay|
 |yii/base/Component::$behaviors|


$expire					*yii/redis/Mutex::$expire*

 (int) The number of seconds in which the lock will be auto released.

$keyPrefix				*yii/redis/Mutex::$keyPrefix*

 (string) A string prefixed to every cache key so that it is unique. If not
 set, it will use a prefix generated from 'Application::id'. You may set this
 property to be an empty string if you don't want to use key prefix. It is
 recommended that you explicitly set this property to some static value if the
 cached data needs to be shared among multiple applications.

$redis					*yii/redis/Mutex::$redis*

 (\yii\redis\Connection|string|array) The Redis 'Connection' object or the
 application component ID of the Redis 'Connection'. This can also be an array
 that is used to create a redis 'Connection' instance in case you do not want
 do configure redis connection as an application component. After the Mutex
 object is created, if you want to change this property, you should only
 assign it with a Redis 'Connection' object.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/mutex/Mutex::acquire|
 |yii/mutex/Mutex::release|


*yii/redis/Mutex::init*					public
>
 init()
<
return (void)

 Initializes the redis Mutex component.

 This method will initialize the 'redis' property to make sure it refers to a
 valid redis connection.


*yii/redis/Mutex::acquireLock*				protected
>
 acquireLock($name, $timeout=0)
<
return (bool) Lock acquiring result.

 Acquires a lock by name.

    [$name] (string) Of the lock to be acquired. Must be unique.
    [$timeout] (int) Time (in seconds) to wait for lock to be released.
    Defaults to '0' meaning that method will return false immediately in case
    lock was already acquired.


*yii/redis/Mutex::releaseLock*				protected
>
 releaseLock($name)
<
return (bool) Lock release result: 'false' in case named lock was not found or Redis
command failed.

 Releases acquired lock. This method will return 'false' in case the lock was
 not found or Redis command failed.

    [$name] (string) Of the lock to be released. This lock must already exist.


*yii/redis/Mutex::calculateKey*				protected
>
 calculateKey($name)
<
return (string) A safe cache key associated with the mutex name.

 Generates a unique key used for storing the mutex in Redis.

    [$name] (string) Mutex name.



 vim:tw=78:ts=8:ft=help:norl:
