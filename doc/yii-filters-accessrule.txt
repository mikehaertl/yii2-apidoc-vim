
*yii/filters/AccessRule*   >> |yii/base/Component|
========================


PROPERTY DETAILS
------------------------------------------------------------------------------

$allow					*yii/filters/AccessRule::$allow*

 (bool) Whether this is an 'allow' rule or 'deny' rule.

$actions				*yii/filters/AccessRule::$actions*

 (array) List of action IDs that this rule applies to. The comparison is
 case-sensitive. If not set or empty, it means this rule applies to all
 actions.

$controllers				*yii/filters/AccessRule::$controllers*

 (array) List of the controller IDs that this rule applies to.

 The comparison uses '\yii\base\Controller::uniqueId', so each controller ID
 is prefixed with the module ID (if any). For a 'product' controller in the
 application, you would specify this property like '['product']' and if that
 controller is located in a 'shop' module, this would be '['shop/product']'.

 The comparison is case-sensitive.

 If not set or empty, it means this rule applies to all controllers.

 Since version 2.0.12 controller IDs can be specified as wildcards, e.g.
 'module/*'.

$roles					*yii/filters/AccessRule::$roles*

 (array) List of roles that this rule applies to (requires properly configured
 User component). Two special roles are recognized, and they are checked via
 'User::isGuest':


   - '?': matches a guest user (not authenticated yet) 
   - '@': matches an authenticated user

 If you are using RBAC (Role-Based Access Control), you may also specify role
 names. In this case, 'User::can()' will be called to check access.

 Note that it is preferred to check for permissions instead.

 If this property is not set or empty, it means this rule applies regardless
 of roles.

$permissions				*yii/filters/AccessRule::$permissions*

 (array) List of RBAC (Role-Based Access Control) permissions that this rules
 applies to. 'User::can()' will be called to check access.

 If this property is not set or empty, it means this rule applies regardless
 of permissions.

$roleParams				*yii/filters/AccessRule::$roleParams*

 (array|\Closure) Parameters to pass to the 'User::can()' function for
 evaluating user permissions in '$roles'.

 If this is an array, it will be passed directly to 'User::can()'. For example
 for passing an ID from the current request, you may use the following:

   ['postId' => Yii::$app->request->get('id')]

 You may also specify a closure that returns an array. This can be used to
 evaluate the array values only if they are needed, for example when a model
 needs to be loaded like in the following code:

   'rules' => [
       [
           'allow' => true,
           'actions' => ['update'],
           'roles' => ['updatePost'],
           'roleParams' => function($rule) {
               return ['post' =>
 Post::findOne(Yii::$app->request->get('id'))];
           },
       ],
   ],

 A reference to the 'AccessRule' instance will be passed to the closure as the
 first parameter.

$ips					*yii/filters/AccessRule::$ips*

 (array) List of user IP addresses that this rule applies to. An IP address
 can contain the wildcard '*' at the end so that it matches IP addresses with
 the same prefix. For example, '192.168.*' matches all IP addresses in the
 segment '192.168.'. If not set or empty, it means this rule applies to all IP
 addresses.

$verbs					*yii/filters/AccessRule::$verbs*

 (array) List of request methods (e.g. 'GET', 'POST') that this rule applies
 to. If not set or empty, it means this rule applies to all request methods.

$matchCallback				*yii/filters/AccessRule::$matchCallback*

 (callable) A callback that will be called to determine if the rule should be
 applied. The signature of the callback should be as follows:

   function ($rule, $action)

 where '$rule' is this rule, and '$action' is the current 'Action|action'
 object. The callback should return a boolean value indicating whether this
 rule should be applied.

$denyCallback				*yii/filters/AccessRule::$denyCallback*

 (callable) A callback that will be called if this rule determines the access
 to the current action should be denied. This is the case when this rule
 matches and '$allow' is set to 'false'.

 If not set, the behavior will be determined by 'AccessControl', either using
 'AccessControl::denyAccess()' or 'AccessControl::$denyCallback', if
 configured.

 The signature of the callback should be as follows:

   function ($rule, $action)

 where '$rule' is this rule, and '$action' is the current 'Action|action'
 object.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/filters/AccessRule::className*			public

 See |yii/base/BaseObject::className|


*yii/filters/AccessRule::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/filters/AccessRule::init*				public

 See |yii/base/BaseObject::init|


*yii/filters/AccessRule::__get*				public

 See |yii/base/Component::__get|


*yii/filters/AccessRule::__set*				public

 See |yii/base/Component::__set|


*yii/filters/AccessRule::__isset*				public

 See |yii/base/Component::__isset|


*yii/filters/AccessRule::__unset*				public

 See |yii/base/Component::__unset|


*yii/filters/AccessRule::__call*				public

 See |yii/base/Component::__call|


*yii/filters/AccessRule::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/filters/AccessRule::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/filters/AccessRule::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/filters/AccessRule::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/filters/AccessRule::__clone*				public

 See |yii/base/Component::__clone|


*yii/filters/AccessRule::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/filters/AccessRule::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/filters/AccessRule::on*				public

 See |yii/base/Component::on|


*yii/filters/AccessRule::off*				public

 See |yii/base/Component::off|


*yii/filters/AccessRule::trigger*				public

 See |yii/base/Component::trigger|


*yii/filters/AccessRule::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/filters/AccessRule::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/filters/AccessRule::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/filters/AccessRule::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/filters/AccessRule::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/filters/AccessRule::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/filters/AccessRule::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/filters/AccessRule::allows*				public
>
 allows($action, $user, $request)
<
return (bool|null) 'true' if the user is allowed, 'false' if the user is denied,
'null' if the rule does not apply to the user

    [$action] (\yii\base\Action) The action to be performed
    [$user] (\yii\web\User|false) The user object or 'false' in case of
    detached User component
    [$request] (\yii\web\Request) 


*yii/filters/AccessRule::matchAction*			protected
>
 matchAction($action)
<
return (bool) Whether the rule applies to the action

    [$action] (\yii\base\Action) The action


*yii/filters/AccessRule::matchController*			protected
>
 matchController($controller)
<
return (bool) Whether the rule applies to the controller

    [$controller] (\yii\base\Controller) The controller


*yii/filters/AccessRule::matchRole*			protected
>
 matchRole($user)
<
return (bool) Whether the rule applies to the role

    [$user] (\yii\web\User) The user object


*yii/filters/AccessRule::matchIP*				protected
>
 matchIP($ip)
<
return (bool) Whether the rule applies to the IP address

    [$ip] (string|null) The IP address


*yii/filters/AccessRule::matchVerb*			protected
>
 matchVerb($verb)
<
return (bool) Whether the rule applies to the request

    [$verb] (string) The request method.


*yii/filters/AccessRule::matchCustom*			protected
>
 matchCustom($action)
<
return (bool) Whether the rule should be applied

    [$action] (\yii\base\Action) The action to be performed



 vim:tw=78:ts=8:ft=help:norl:
