
*yii/mongodb/Migration*   >> |yii/base/Component|
=======================

DESCRIPTION
------------------------------------------------------------------------------

 Each child class of Migration represents an individual MongoDB migration
 which is identified by the child class name.

 Within each migration, the 'up()' method should be overridden to contain the
 logic for "upgrading" the database; while the 'down()' method for the
 "downgrading" logic.

 Migration provides a set of convenient methods for manipulating MongoDB data
 and schema. For example, the 'createIndex()' method can be used to create a
 collection index. Compared with the same methods in 'Collection', these
 methods will display extra information showing the method parameters and
 execution time, which may be useful when applying migrations.


PROPERTY DETAILS
------------------------------------------------------------------------------


$db					*yii/mongodb/Migration::$db*

 (\yii\mongodb\Connection|array|string) The MongoDB connection object or the
 application component ID of the MongoDB connection that this migration should
 work with. Starting from version 2.0.2, this can also be a configuration
 array for creating the object.

$compact				*yii/mongodb/Migration::$compact*

 (bool) Indicates whether the log output should be compacted. If this is set
 to true, the individual commands ran within the migration will not be output
 to the console log. Default is 'false', in other words the output is fully
 verbose by default.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/db/MigrationInterface::up|
 |yii/db/MigrationInterface::down|


*yii/mongodb/Migration::init*				public
>
 init()
<
return (void)

 Initializes the migration.

 This method will set 'db' to be the 'db' application component, if it is
 null.


*yii/mongodb/Migration::createCollection*			public
>
 createCollection($collection, $options='[]')
<
return (void)

 Creates new collection with the specified options.

    [$collection] (string|array) Name of the collection
    [$options] (array) Collection options in format: "name" => "value"


*yii/mongodb/Migration::dropCollection*			public
>
 dropCollection($collection)
<
return (void)

 Drops existing collection.

    [$collection] (string|array) Name of the collection


*yii/mongodb/Migration::createIndexes*			public
>
 createIndexes($collection, $indexes)
<
return (void)

 Creates indexes in the collection.

    [$collection] (string|array) Name of the collection
    [$indexes] (array) Indexes specifications.


*yii/mongodb/Migration::dropIndexes*			public
>
 dropIndexes($collection, $indexes)
<
return (void)

 Drops collection indexes by name.

    [$collection] (string|array) Name of the collection
    [$indexes] (string) Wildcard for name of the indexes to be dropped.


*yii/mongodb/Migration::createIndex*			public
>
 createIndex($collection, $columns, $options='[]')
<
return (void)

 Creates an index on the collection and the specified fields.

    [$collection] (string|array) Name of the collection
    [$columns] (array|string) Column name or list of column names.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Migration::dropIndex*			public
>
 dropIndex($collection, $columns)
<
return (void)

 Drop indexes for specified column(s).

    [$collection] (string|array) Name of the collection
    [$columns] (string|array) Column name or list of column names.


*yii/mongodb/Migration::dropAllIndexes*			public
>
 dropAllIndexes($collection)
<
return (void)

 Drops all indexes for specified collection.

    [$collection] (string|array) Name of the collection.


*yii/mongodb/Migration::insert*				public
>
 insert($collection, $data, $options='[]')
<
return (\MongoDB\BSON\ObjectID) New record id instance.

 Inserts new data into collection.

    [$collection] (array|string) Collection name.
    [$data] (array|object) Data to be inserted.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Migration::batchInsert*			public
>
 batchInsert($collection, $rows, $options='[]')
<
return (array) Inserted data, each row will have "_id" key assigned to it.

 Inserts several new rows into collection.

    [$collection] (array|string) Collection name.
    [$rows] (array) Array of arrays or objects to be inserted.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Migration::update*				public
>
 update($collection, $condition, $newData, $options='[]')
<
return (int|bool) Number of updated documents or whether operation was successful.

 Updates the rows, which matches given criteria by given data.

 Note: for "multiple" mode Mongo requires explicit strategy "$set" or "$inc"
 to be specified for the "newData". If no strategy is passed "$set" will be
 used.

    [$collection] (array|string) Collection name.
    [$condition] (array) Description of the objects to update.
    [$newData] (array) The object with which to update the matching records.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Migration::save*				public
>
 save($collection, $data, $options='[]')
<
return (\MongoDB\BSON\ObjectID) Updated/new record id instance.

 Update the existing database data, otherwise insert this data

    [$collection] (array|string) Collection name.
    [$data] (array|object) Data to be updated/inserted.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Migration::remove*				public
>
 remove($collection, $condition='[]', $options='[]')
<
return (int|bool) Number of updated documents or whether operation was successful.

 Removes data from the collection.

    [$collection] (array|string) Collection name.
    [$condition] (array) Description of records to remove.
    [$options] (array) List of options in format: optionName => optionValue.


*yii/mongodb/Migration::composeCollectionLogName*		protected
>
 composeCollectionLogName($collection)
<
return (string) Collection name.

 Composes string representing collection name.

    [$collection] (array|string) Collection name.


*yii/mongodb/Migration::log*				protected
>
 log($string)
<
return (void)

 Logs the incoming message.

 By default this method sends message to 'stdout'.

    [$string] (string) Message to be logged.


*yii/mongodb/Migration::beginProfile*			protected
>
 beginProfile($token)
<
return (void)

 Marks the beginning of a code block for profiling.

    [$token] (string) Token for the code block.


*yii/mongodb/Migration::endProfile*			protected
>
 endProfile($token)
<
return (void)

 Marks the end of a code block for profiling.

    [$token] (string) Token for the code block.



 vim:tw=78:ts=8:ft=help:norl:
