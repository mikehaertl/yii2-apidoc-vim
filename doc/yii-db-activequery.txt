
*yii/db/ActiveQuery*   >> |yii/db/Query|
====================

DESCRIPTION
------------------------------------------------------------------------------

 An ActiveQuery can be a normal query or be used in a relational context.

 ActiveQuery instances are usually created by 'ActiveRecord::find()' and
 'ActiveRecord::findBySql()'. Relational queries are created by
 'ActiveRecord::hasOne()' and 'ActiveRecord::hasMany()'.

 Normal Query ------------

 ActiveQuery mainly provides the following methods to retrieve the query
 results:


   - 'one()': returns a single record populated with the first row of
   data. 
   - 'all()': returns all records based on the query results. 
   - 'count()': returns the number of records. 
   - 'sum()': returns the sum over the specified column. 
   - 'average()': returns the average over the specified column. 
   - 'min()': returns the min over the specified column. 
   - 'max()': returns the max over the specified column. 
   - 'scalar()': returns the value of the first column in the first row
   of the query result. 
   - 'column()': returns the value of the first column in the query
   result. 
   - 'exists()': returns a value indicating whether the query result
   has data or not.

 Because ActiveQuery extends from 'Query', one can use query methods, such as
 'where()', 'orderBy()' to customize the query options.

 ActiveQuery also provides the following additional query options:


   - 'with()': list of relations that this query should be performed
   with. 
   - 'joinWith()': reuse a relation query definition to add a join to a
   query. 
   - 'indexBy()': the name of the column by which the query result
   should be indexed. 
   - 'asArray()': whether to return each record as an array.

 These options can be configured using methods of the same name. For example:

   $customers = Customer::find()->with('orders')->asArray()->all();

 Relational query ----------------

 In relational context ActiveQuery represents a relation between two Active
 Record classes.

 Relational ActiveQuery instances are usually created by calling
 'ActiveRecord::hasOne()' and 'ActiveRecord::hasMany()'. An Active Record
 class declares a relation by defining a getter method which calls one of the
 above methods and returns the created ActiveQuery object.

 A relation is specified by 'link' which represents the association between
 columns of different tables; and the multiplicity of the relation is
 indicated by 'multiple'.

 If a relation involves a junction table, it may be specified by 'via()' or
 'viaTable()' method. These methods may only be called in a relational
 context. Same is true for 'inverseOf()', which marks a relation as inverse of
 another relation and 'onCondition()' which adds a condition that is to be
 added to relational query join condition.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/QueryTrait::$where|
 |yii/db/QueryTrait::$limit|
 |yii/db/QueryTrait::$offset|
 |yii/db/QueryTrait::$orderBy|
 |yii/db/QueryTrait::$indexBy|
 |yii/db/QueryTrait::$emulateExecution|
 |yii/db/Query::$select|
 |yii/db/Query::$selectOption|
 |yii/db/Query::$distinct|
 |yii/db/Query::$from|
 |yii/db/Query::$groupBy|
 |yii/db/Query::$join|
 |yii/db/Query::$having|
 |yii/db/Query::$union|
 |yii/db/Query::$params|
 |yii/db/Query::$queryCacheDuration|
 |yii/db/Query::$queryCacheDependency|
 |yii/db/ActiveRelationTrait::$multiple|
 |yii/db/ActiveRelationTrait::$primaryModel|
 |yii/db/ActiveRelationTrait::$link|
 |yii/db/ActiveRelationTrait::$via|
 |yii/db/ActiveRelationTrait::$inverseOf|
 |yii/db/ActiveQueryTrait::$modelClass|
 |yii/db/ActiveQueryTrait::$with|
 |yii/db/ActiveQueryTrait::$asArray|


$sql					*yii/db/ActiveQuery::$sql*

 (string) The SQL statement to be executed for retrieving AR records. This is
 set by 'ActiveRecord::findBySql()'.

$on					*yii/db/ActiveQuery::$on*

 (string|array) The join condition to be used when this query is used in a
 relational context. The condition will be used in the ON part when
 'ActiveQuery::joinWith()' is called. Otherwise, the condition will be used in
 the WHERE part of a query. Please refer to 'Query::where()' on how to specify
 this parameter.

$joinWith				*yii/db/ActiveQuery::$joinWith*

 (array) A list of relations that this query should be joined with



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/db/ActiveRelationTrait::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/db/QueryTrait::indexBy|
 |yii/db/QueryTrait::where|
 |yii/db/QueryTrait::andWhere|
 |yii/db/QueryTrait::orWhere|
 |yii/db/QueryTrait::filterWhere|
 |yii/db/QueryTrait::andFilterWhere|
 |yii/db/QueryTrait::orFilterWhere|
 |yii/db/QueryTrait::filterCondition|
 |yii/db/QueryTrait::isEmpty|
 |yii/db/QueryTrait::orderBy|
 |yii/db/QueryTrait::addOrderBy|
 |yii/db/QueryTrait::normalizeOrderBy|
 |yii/db/QueryTrait::limit|
 |yii/db/QueryTrait::offset|
 |yii/db/QueryTrait::emulateExecution|
 |yii/db/Query::batch|
 |yii/db/Query::each|
 |yii/db/Query::scalar|
 |yii/db/Query::column|
 |yii/db/Query::count|
 |yii/db/Query::sum|
 |yii/db/Query::average|
 |yii/db/Query::min|
 |yii/db/Query::max|
 |yii/db/Query::exists|
 |yii/db/Query::cleanUpTableNames|
 |yii/db/Query::select|
 |yii/db/Query::addSelect|
 |yii/db/Query::getUniqueColumns|
 |yii/db/Query::getUnaliasedColumnsFromSelect|
 |yii/db/Query::distinct|
 |yii/db/Query::from|
 |yii/db/Query::andFilterCompare|
 |yii/db/Query::join|
 |yii/db/Query::innerJoin|
 |yii/db/Query::leftJoin|
 |yii/db/Query::rightJoin|
 |yii/db/Query::groupBy|
 |yii/db/Query::addGroupBy|
 |yii/db/Query::having|
 |yii/db/Query::andHaving|
 |yii/db/Query::orHaving|
 |yii/db/Query::filterHaving|
 |yii/db/Query::andFilterHaving|
 |yii/db/Query::orFilterHaving|
 |yii/db/Query::union|
 |yii/db/Query::params|
 |yii/db/Query::addParams|
 |yii/db/Query::cache|
 |yii/db/Query::noCache|
 |yii/db/Query::setCommandCache|
 |yii/db/Query::create|
 |yii/db/Query::__toString|
 |yii/db/ActiveRelationTrait::via|
 |yii/db/ActiveRelationTrait::inverseOf|
 |yii/db/ActiveRelationTrait::findFor|
 |yii/db/ActiveRelationTrait::populateRelation|
 |yii/db/ActiveQueryTrait::asArray|
 |yii/db/ActiveQueryTrait::with|
 |yii/db/ActiveQueryTrait::createModels|
 |yii/db/ActiveQueryTrait::findWith|


*yii/db/ActiveQuery::__construct*				public
>
 __construct($modelClass, $config='[]')
<
return (void)

 Constructor.

    [$modelClass] (string) The model class associated with this query
    [$config] (array) Configurations to be applied to the newly created query
    object


*yii/db/ActiveQuery::init*				public
>
 init()
<
return (void)

 Initializes the object.

 This method is called at the end of the constructor. The default
 implementation will trigger an 'EVENT_INIT' event. If you override this
 method, make sure you call the parent implementation at the end to ensure
 triggering of the event.


*yii/db/ActiveQuery::createCommand*			public
>
 createCommand($db='null')
<
return (\yii\db\Command) The created DB command instance.

 Creates a DB command that can be used to execute this query.

    [$db] (\yii\db\Connection|null) The DB connection used to create the DB
    command. If 'null', the DB connection returned by 'modelClass' will be
    used.


*yii/db/ActiveQuery::prepare*				public
>
 prepare($builder)
<
return (void)

 {@inheritdoc}

    [$builder] () 


*yii/db/ActiveQuery::all*					public
>
 all($db='null')
<
return (array|\yii\db\ActiveRecord[]) The query results. If the query results in
nothing, an empty array will be returned.

 Executes query and returns all results as an array.

    [$db] (\yii\db\Connection) The DB connection used to create the DB
    command. If null, the DB connection returned by 'modelClass' will be used.


*yii/db/ActiveQuery::populate*				public
>
 populate($rows)
<
return (void)

 {@inheritdoc}

    [$rows] () 


*yii/db/ActiveQuery::one*					public
>
 one($db='null')
<
return (\yii\db\ActiveRecord|array|null) A single row of query result. Depending on
the setting of 'asArray', the query result may be either an array or an
ActiveRecord object. 'null' will be returned if the query results in nothing.

 Executes query and returns a single row of result.

    [$db] (\yii\db\Connection|null) The DB connection used to create the DB
    command. If 'null', the DB connection returned by 'modelClass' will be
    used.


*yii/db/ActiveQuery::queryScalar*				protected
>
 queryScalar($selectExpression, $db)
<
return (void)

 {@inheritdoc}

    [$selectExpression] () 
    [$db] () 


*yii/db/ActiveQuery::getTablesUsedInFrom*			public
>
 getTablesUsedInFrom()
<
return (void)

 {@inheritdoc}


*yii/db/ActiveQuery::joinWith*				public
>
 joinWith($with, $eagerLoading='true', $joinType='\'LEFTJOIN\'')
<
return ($this) The query object itself

 Joins with the specified relations.

 This method allows you to reuse existing relation definitions to perform JOIN
 queries. Based on the definition of the specified relation(s), the method
 will append one or multiple JOIN statements to the current query.

 If the '$eagerLoading' parameter is true, the method will also perform eager
 loading for the specified relations, which is equivalent to calling 'with()'
 using the specified relations.

 Note that because a JOIN query will be performed, you are responsible to
 disambiguate column names.

 This method differs from 'with()' in that it will build up and execute a JOIN
 SQL statement for the primary table. And when '$eagerLoading' is true, it
 will call 'with()' in addition with the specified relations.

    [$with] (string|array) The relations to be joined. This can either be a
    string, representing a relation name or an array with the following
    semantics:


      - Each array element represents a single relation. 
      - You may specify the relation name as the array key and provide an
      anonymous functions that   can be used to modify the relation queries
    on-the-fly as the array value. 
      - If a relation query does not need modification, you may use the
      relation name as the array value.

    The relation name may optionally contain an alias for the relation table
    (e.g. 'books b').

    Sub-relations can also be specified, see 'with()' for the syntax.

    In the following you find some examples:

      // find all orders that contain books, and eager loading "books"
      Order::find()->joinWith('books', true, 'INNER JOIN')->all();
      // find all orders, eager loading "books", and sort the orders and books
    by the book names.
      Order::find()->joinWith([
          'books' => function (\yii\db\ActiveQuery $query) {
              $query->orderBy('item.name');
          }
      ])->all();
      // find all orders that contain books of the category 'Science fiction',
    using the alias "b" for the books table
      Order::find()->joinWith(['books b'], true, 'INNER
    JOIN')->where(['b.category' => 'Science fiction'])->all();

    The alias syntax is available since version 2.0.7.
    [$eagerLoading] (bool|array) Whether to eager load the relations specified
    in '$with'.  When this is a boolean, it applies to all relations specified
    in '$with'. Use an array to explicitly list which relations in '$with'
    need to be eagerly loaded.  Note, that this does not mean, that the
    relations are populated from the query result. An extra query will still
    be performed to bring in the related data. Defaults to 'true'.
    [$joinType] (string|array) The join type of the relations specified in
    '$with'. When this is a string, it applies to all relations specified in
    '$with'. Use an array in the format of 'relationName => joinType' to
    specify different join types for different relations.


*yii/db/ActiveQuery::innerJoinWith*			public
>
 innerJoinWith($with, $eagerLoading='true')
<
return ($this) The query object itself

 Inner joins with the specified relations.

 This is a shortcut method to 'joinWith()' with the join type set as "INNER
 JOIN". Please refer to 'joinWith()' for detailed usage of this method.

    [$with] (string|array) The relations to be joined with.
    [$eagerLoading] (bool|array) Whether to eager load the relations. Note,
    that this does not mean, that the relations are populated from the query
    result. An extra query will still be performed to bring in the related
    data.


*yii/db/ActiveQuery::onCondition*				public
>
 onCondition($condition, $params='[]')
<
return ($this) The query object itself

 Sets the ON condition for a relational query.

 The condition will be used in the ON part when 'ActiveQuery::joinWith()' is
 called. Otherwise, the condition will be used in the WHERE part of a query.

 Use this method to specify additional conditions when declaring a relation in
 the 'ActiveRecord' class:

   public function getActiveUsers()
   {
       return $this->hasMany(User::className(), ['id' => 'user_id'])
                   ->onCondition(['active' => true]);
   }

 Note that this condition is applied in case of a join as well as when
 fetching the related records. Thus only fields of the related table can be
 used in the condition. Trying to access fields of the primary record will
 cause an error in a non-join-query.

    [$condition] (string|array) The ON condition. Please refer to
    'Query::where()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/ActiveQuery::andOnCondition*			public
>
 andOnCondition($condition, $params='[]')
<
return ($this) The query object itself

 Adds an additional ON condition to the existing one.

 The new condition and the existing one will be joined using the 'AND'
 operator.

    [$condition] (string|array) The new ON condition. Please refer to
    'where()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/ActiveQuery::orOnCondition*			public
>
 orOnCondition($condition, $params='[]')
<
return ($this) The query object itself

 Adds an additional ON condition to the existing one.

 The new condition and the existing one will be joined using the 'OR'
 operator.

    [$condition] (string|array) The new ON condition. Please refer to
    'where()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/ActiveQuery::viaTable*				public
>
 viaTable($tableName, $link, $callable='null')
<
return ($this) The query object itself

 Specifies the junction table for a relational query.

 Use this method to specify a junction table when declaring a relation in the
 'ActiveRecord' class:

   public function getItems()
   {
       return $this->hasMany(Item::className(), ['id' => 'item_id'])
                   ->viaTable('order_item', ['order_id' => 'id']);
   }



    [$tableName] (string) The name of the junction table.
    [$link] (array) The link between the junction table and the table
    associated with 'primaryModel'. The keys of the array represent the
    columns in the junction table, and the values represent the columns in the
    'primaryModel' table.
    [$callable] (callable) A PHP callback for customizing the relation
    associated with the junction table. Its signature should be
    'function($query)', where '$query' is the query to be customized.


*yii/db/ActiveQuery::alias*				public
>
 alias($alias)
<
return ($this) The query object itself

 Define an alias for the table defined in 'modelClass'.

 This method will adjust 'from' so that an already defined alias will be
 overwritten. If none was defined, 'from' will be populated with the given
 alias.

    [$alias] (string) The table alias.


*yii/db/ActiveQuery::getPrimaryTableName*			protected
>
 getPrimaryTableName()
<
return (string) Primary table name




 vim:tw=78:ts=8:ft=help:norl:
