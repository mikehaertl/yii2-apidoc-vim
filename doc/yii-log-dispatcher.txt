
*yii/log/Dispatcher*   >> |yii/base/Component|
====================

DESCRIPTION
------------------------------------------------------------------------------

 Dispatcher implements the 'dispatch()'-method that forwards the log messages
 from a 'Logger' to the registered log 'targets'.

 An instance of Dispatcher is registered as a core application component and
 can be accessed using 'Yii::$app->log'.

 You may configure the targets in application configuration, like the
 following:

   [
       'components' => [
           'log' => [
               'targets' => [
                   'file' => [
                       'class' => 'yii\log\FileTarget',
                       'levels' => ['trace', 'info'],
                       'categories' => ['yii\*'],
                   ],
                   'email' => [
                       'class' => 'yii\log\EmailTarget',
                       'levels' => ['error', 'warning'],
                       'message' => [
                           'to' => 'admin@example.com',
                       ],
                   ],
               ],
           ],
       ],
   ]

 Each log target can have a name and can be referenced via the 'targets'
 property as follows:

   Yii::$app->log->targets['file']->enabled = false;




PROPERTY DETAILS
------------------------------------------------------------------------------

$targets				*yii/log/Dispatcher::$targets*
 (array|\yii\log\Target[]) The log targets. Each array element represents a
 single 'Target|log target' instance or the configuration for creating the log
 target instance.

$behaviors				*yii/log/Dispatcher::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$logger					*yii/log/Dispatcher::$logger*
 (\yii\log\Logger) The logger.

$traceLevel				*yii/log/Dispatcher::$traceLevel*
 (integer) How many application call stacks should be logged together with
 each message. This method returns the value of 'Logger::traceLevel'. Defaults
 to 0.

$flushInterval				*yii/log/Dispatcher::$flushInterval*
 (integer) How many messages should be logged before they are sent to targets.
 This method returns the value of 'Logger::flushInterval'.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/log/Dispatcher::className*				public
 See |yii/base/Object::className|


*yii/log/Dispatcher::__construct*				public
>
 __construct($config='[]')
<
(void)

 The default implementation does two things:


   - Initializes the object with the given configuration '$config'. 
   - Call 'init()'.

 If this method is overridden in a child class, it is recommended that


   - the last parameter of the constructor is a configuration array,
   like '$config' here. 
   - call the parent implementation at the end of the constructor.
    [$config] (array) Name-value pairs that will be used to initialize the
    object properties


*yii/log/Dispatcher::init*				public
>
 init()
<
(void)

 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.


*yii/log/Dispatcher::__get*				public
 See |yii/base/Component::__get|


*yii/log/Dispatcher::__set*				public
 See |yii/base/Component::__set|


*yii/log/Dispatcher::__isset*				public
 See |yii/base/Component::__isset|


*yii/log/Dispatcher::__unset*				public
 See |yii/base/Component::__unset|


*yii/log/Dispatcher::__call*				public
 See |yii/base/Component::__call|


*yii/log/Dispatcher::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/log/Dispatcher::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/log/Dispatcher::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/log/Dispatcher::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/log/Dispatcher::__clone*				public
 See |yii/base/Component::__clone|


*yii/log/Dispatcher::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/log/Dispatcher::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/log/Dispatcher::on*					public
 See |yii/base/Component::on|


*yii/log/Dispatcher::off*					public
 See |yii/base/Component::off|


*yii/log/Dispatcher::trigger*				public
 See |yii/base/Component::trigger|


*yii/log/Dispatcher::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/log/Dispatcher::getBehaviors*			public
 See |yii/base/Component::getBehaviors|


*yii/log/Dispatcher::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/log/Dispatcher::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/log/Dispatcher::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/log/Dispatcher::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/log/Dispatcher::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/log/Dispatcher::getLogger*				public
>
 getLogger()
<
(\yii\log\Logger) The logger.

 If not set, '\Yii::getLogger()' will be used.


*yii/log/Dispatcher::setLogger*				public
>
 setLogger($value)
<
(void)

    [$value] (\yii\log\Logger) The logger.


*yii/log/Dispatcher::getTraceLevel*			public
>
 getTraceLevel()
<
(integer) How many application call stacks should be logged together with each
message. This method returns the value of 'Logger::traceLevel'. Defaults to 0.



*yii/log/Dispatcher::setTraceLevel*			public
>
 setTraceLevel($value)
<
(void)

    [$value] (integer) How many application call stacks should be logged
    together with each message. This method will set the value of
    'Logger::traceLevel'. If the value is greater than 0, at most that number
    of call stacks will be logged. Note that only application call stacks are
    counted. Defaults to 0.


*yii/log/Dispatcher::getFlushInterval*			public
>
 getFlushInterval()
<
(integer) How many messages should be logged before they are sent to targets.
This method returns the value of 'Logger::flushInterval'.



*yii/log/Dispatcher::setFlushInterval*			public
>
 setFlushInterval($value)
<
(void)

    [$value] (integer) How many messages should be logged before they are sent
    to targets. This method will set the value of 'Logger::flushInterval'.
    Defaults to 1000, meaning the 'Logger::flush()' method will be invoked
    once every 1000 messages logged. Set this property to be 0 if you don't
    want to flush messages until the application terminates. This property
    mainly affects how much memory will be taken by the logged messages. A
    smaller value means less memory, but will increase the execution time due
    to the overhead of 'Logger::flush()'.


*yii/log/Dispatcher::dispatch*				public
>
 dispatch($messages, $final)
<
(void)

    [$messages] (array) The logged messages
    [$final] (boolean) Whether this method is called at the end of the current
    application



 vim:tw=78:ts=8:ft=help:norl:
