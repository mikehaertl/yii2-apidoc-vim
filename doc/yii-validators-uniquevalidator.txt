
*yii\validators\UniqueValidator*   >> yii\validators\Validator
================================

 UniqueValidator checks if the value being validated is unique in the table
 column specified by the ActiveRecord class [[targetClass]] and the attribute
 [[targetAttribute]].

 The followings are examples of validation rules using this validator:

   // a1 needs to be unique
   ['a1', 'unique']
   // a1 needs to be unique, but column a2 will be used to check the
 uniqueness of the a1 value
   ['a1', 'unique', 'targetAttribute' => 'a2']
   // a1 and a2 need to unique together, and they both will receive error
 message
   [['a1', 'a2'], 'unique', 'targetAttribute' => ['a1', 'a2']]
   // a1 and a2 need to unique together, only a1 will receive error message
   ['a1', 'unique', 'targetAttribute' => ['a1', 'a2']]
   // a1 needs to be unique by checking the uniqueness of both a2 and a3
 (using a1 value)
   ['a1', 'unique', 'targetAttribute' => ['a2', 'a1' => 'a3']]




PROPERTY DETAILS
------------------------------------------------------------------------------

<$builtInValidators>			*yii.validators.UniqueValidator::$builtInValidators*
 See |yii.validators.Validator::$builtInValidators|

<$attributes>				*yii.validators.UniqueValidator::$attributes*
 See |yii.validators.Validator::$attributes|

<$message>				*yii.validators.UniqueValidator::$message*
 See |yii.validators.Validator::$message|

<$on>					*yii.validators.UniqueValidator::$on*
 See |yii.validators.Validator::$on|

<$except>				*yii.validators.UniqueValidator::$except*
 See |yii.validators.Validator::$except|

<$skipOnError>				*yii.validators.UniqueValidator::$skipOnError*
 See |yii.validators.Validator::$skipOnError|

<$skipOnEmpty>				*yii.validators.UniqueValidator::$skipOnEmpty*
 See |yii.validators.Validator::$skipOnEmpty|

<$enableClientValidation>		*yii.validators.UniqueValidator::$enableClientValidation*
 See |yii.validators.Validator::$enableClientValidation|

<$isEmpty>				*yii.validators.UniqueValidator::$isEmpty*
 See |yii.validators.Validator::$isEmpty|

<$when> 				*yii.validators.UniqueValidator::$when*
 See |yii.validators.Validator::$when|

<$whenClient>				*yii.validators.UniqueValidator::$whenClient*
 See |yii.validators.Validator::$whenClient|

<$targetClass>				*yii.validators.UniqueValidator::$targetClass*
 (string) The name of the ActiveRecord class that should be used to validate
 the uniqueness of the current attribute value. It not set, it will use the
 ActiveRecord class of the attribute being validated.

<$targetAttribute>			*yii.validators.UniqueValidator::$targetAttribute*
 (string|array) The name of the ActiveRecord attribute that should be used to
 validate the uniqueness of the current attribute value. If not set, it will
 use the name of the attribute currently being validated. You may use an array
 to validate the uniqueness of multiple columns at the same time. The array
 values are the attributes that will be used to validate the uniqueness, while
 the array keys are the attributes whose values are to be validated. If the
 key and the value are the same, you can just specify the value.

<$filter>				*yii.validators.UniqueValidator::$filter*
 (string|array|\Closure) Additional filter to be applied to the DB query used
 to check the uniqueness of the attribute value. This can be a string or an
 array representing the additional query condition (refer to
 [[\yii\db\Query::where()]] on the format of query condition), or an anonymous
 function with the signature 'function ($query)', where '$query' is the
 [[\yii\db\Query|Query]] object that you can modify in the function.

<$behaviors>				*yii.validators.UniqueValidator::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component



METHOD DETAILS
------------------------------------------------------------------------------

*yii.validators.UniqueValidator::className*			 public
 See |yii.base.Object::className|


*yii.validators.UniqueValidator::__construct*			 public
 See |yii.base.Object::__construct|


*yii.validators.UniqueValidator::init*				 public
>
 init()
<
(void)




*yii.validators.UniqueValidator::__get* 			 public
 See |yii.base.Component::__get|


*yii.validators.UniqueValidator::__set* 			 public
 See |yii.base.Component::__set|


*yii.validators.UniqueValidator::__isset*			 public
 See |yii.base.Component::__isset|


*yii.validators.UniqueValidator::__unset*			 public
 See |yii.base.Component::__unset|


*yii.validators.UniqueValidator::__call*			 public
 See |yii.base.Component::__call|


*yii.validators.UniqueValidator::hasProperty*			 public
 See |yii.base.Component::hasProperty|


*yii.validators.UniqueValidator::canGetProperty*		 public
 See |yii.base.Component::canGetProperty|


*yii.validators.UniqueValidator::canSetProperty*		 public
 See |yii.base.Component::canSetProperty|


*yii.validators.UniqueValidator::hasMethod*			 public
 See |yii.base.Component::hasMethod|


*yii.validators.UniqueValidator::__clone*			 public
 See |yii.base.Component::__clone|


*yii.validators.UniqueValidator::behaviors*			 public
 See |yii.base.Component::behaviors|


*yii.validators.UniqueValidator::hasEventHandlers*		 public
 See |yii.base.Component::hasEventHandlers|


*yii.validators.UniqueValidator::on*				 public
 See |yii.base.Component::on|


*yii.validators.UniqueValidator::off*				 public
 See |yii.base.Component::off|


*yii.validators.UniqueValidator::trigger*			 public
 See |yii.base.Component::trigger|


*yii.validators.UniqueValidator::getBehavior*			 public
 See |yii.base.Component::getBehavior|


*yii.validators.UniqueValidator::getBehaviors*			 public
 See |yii.base.Component::getBehaviors|


*yii.validators.UniqueValidator::attachBehavior*		 public
 See |yii.base.Component::attachBehavior|


*yii.validators.UniqueValidator::attachBehaviors*		 public
 See |yii.base.Component::attachBehaviors|


*yii.validators.UniqueValidator::detachBehavior*		 public
 See |yii.base.Component::detachBehavior|


*yii.validators.UniqueValidator::detachBehaviors*		 public
 See |yii.base.Component::detachBehaviors|


*yii.validators.UniqueValidator::ensureBehaviors*		 public
 See |yii.base.Component::ensureBehaviors|


*yii.validators.UniqueValidator::createValidator*		 public
 See |yii.validators.Validator::createValidator|


*yii.validators.UniqueValidator::validateAttributes*		 public
 See |yii.validators.Validator::validateAttributes|


*yii.validators.UniqueValidator::validateAttribute*		 public
>
 validateAttribute($object, $attribute)
<
(void)


    [$object] () 
    [$attribute] () 


*yii.validators.UniqueValidator::validate*			 public
 See |yii.validators.Validator::validate|


*yii.validators.UniqueValidator::validateValue* 		 protected
 See |yii.validators.Validator::validateValue|


*yii.validators.UniqueValidator::clientValidateAttribute*	 public
 See |yii.validators.Validator::clientValidateAttribute|


*yii.validators.UniqueValidator::isActive*			 public
 See |yii.validators.Validator::isActive|


*yii.validators.UniqueValidator::addError*			 public
 See |yii.validators.Validator::addError|


*yii.validators.UniqueValidator::isEmpty*			 public
 See |yii.validators.Validator::isEmpty|



 vim:tw=78:ts=8:ft=help:norl:
