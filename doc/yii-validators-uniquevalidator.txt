
*yii/validators/UniqueValidator*   >> |yii/validators/Validator|
================================

DESCRIPTION
------------------------------------------------------------------------------

 UniqueValidator checks if the value being validated is unique in the table
 column specified by the ActiveRecord class 'targetClass' and the attribute
 'targetAttribute'.

 The following are examples of validation rules using this validator:

   // a1 needs to be unique
   ['a1', 'unique']
   // a1 needs to be unique, but column a2 will be used to check the
 uniqueness of the a1 value
   ['a1', 'unique', 'targetAttribute' => 'a2']
   // a1 and a2 need to be unique together, and they both will receive error
 message
   [['a1', 'a2'], 'unique', 'targetAttribute' => ['a1', 'a2']]
   // a1 and a2 need to be unique together, only a1 will receive error message
   ['a1', 'unique', 'targetAttribute' => ['a1', 'a2']]
   // a1 needs to be unique by checking the uniqueness of both a2 and a3
 (using a1 value)
   ['a1', 'unique', 'targetAttribute' => ['a2', 'a1' => 'a3']]




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/validators/Validator::$builtInValidators|
 |yii/validators/Validator::$attributes|
 |yii/validators/Validator::$on|
 |yii/validators/Validator::$except|
 |yii/validators/Validator::$skipOnError|
 |yii/validators/Validator::$skipOnEmpty|
 |yii/validators/Validator::$enableClientValidation|
 |yii/validators/Validator::$isEmpty|
 |yii/validators/Validator::$when|
 |yii/validators/Validator::$whenClient|
 |yii/base/Component::$behaviors|
 |yii/validators/Validator::$validationAttributes|
 |yii/validators/Validator::$attributeNames|


$message				*yii/validators/UniqueValidator::$message*

 (string) The user-defined error message.

 When validating single attribute, it may contain the following placeholders
 which will be replaced accordingly by the validator:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated

 When validating mutliple attributes, it may contain the following
 placeholders:


   - '{attributes}': the labels of the attributes being validated. 
   - '{values}': the values of the attributes being validated.

$targetClass				*yii/validators/UniqueValidator::$targetClass*

 (string) The name of the ActiveRecord class that should be used to validate
 the uniqueness of the current attribute value. If not set, it will use the
 ActiveRecord class of the attribute being validated.

$targetAttribute			*yii/validators/UniqueValidator::$targetAttribute*

 (string|array) The name of the '\yii\db\ActiveRecord|ActiveRecord' attribute
 that should be used to validate the uniqueness of the current attribute
 value. If not set, it will use the name of the attribute currently being
 validated. You may use an array to validate the uniqueness of multiple
 columns at the same time. The array values are the attributes that will be
 used to validate the uniqueness, while the array keys are the attributes
 whose values are to be validated.

$filter					*yii/validators/UniqueValidator::$filter*

 (string|array|\Closure) Additional filter to be applied to the DB query used
 to check the uniqueness of the attribute value. This can be a string or an
 array representing the additional query condition (refer to
 '\yii\db\Query::where()' on the format of query condition), or an anonymous
 function with the signature 'function ($query)', where '$query' is the
 '\yii\db\Query|Query' object that you can modify in the function.

$comboNotUnique				*yii/validators/UniqueValidator::$comboNotUnique*

 (string)

$targetAttributeJunction		*yii/validators/UniqueValidator::$targetAttributeJunction*

 (string) And|or define how target attributes are related

$forceMasterDb				*yii/validators/UniqueValidator::$forceMasterDb*

 (bool) Whether this validator is forced to always use master DB



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/validators/Validator::createValidator|
 |yii/validators/Validator::validateAttributes|
 |yii/validators/Validator::getValidationAttributes|
 |yii/validators/Validator::validate|
 |yii/validators/Validator::validateValue|
 |yii/validators/Validator::clientValidateAttribute|
 |yii/validators/Validator::getClientOptions|
 |yii/validators/Validator::isActive|
 |yii/validators/Validator::addError|
 |yii/validators/Validator::isEmpty|
 |yii/validators/Validator::formatMessage|
 |yii/validators/Validator::getAttributeNames|


*yii/validators/UniqueValidator::init*			public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/validators/UniqueValidator::validateAttribute*	public
>
 validateAttribute($model, $attribute)
<
return (void)

 Validates a single attribute.



 Child classes must implement this method to provide the actual validation
 logic.



    [$model] (\yii\base\Model) The data model to be validated
    [$attribute] (string) The name of the attribute to be validated.



 vim:tw=78:ts=8:ft=help:norl:
