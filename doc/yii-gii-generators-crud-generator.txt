
*yii/gii/generators/crud/Generator*   >> |yii/gii/Generator|
===================================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/gii/Generator::$templates|
 |yii/gii/Generator::$template|
 |yii/gii/Generator::$enableI18N|
 |yii/gii/Generator::$messageCategory|


$modelClass				*yii/gii/generators/crud/Generator::$modelClass*

 ()

$controllerClass			*yii/gii/generators/crud/Generator::$controllerClass*

 ()

$viewPath				*yii/gii/generators/crud/Generator::$viewPath*

 ()

$baseControllerClass			*yii/gii/generators/crud/Generator::$baseControllerClass*

 ()

$indexWidgetType			*yii/gii/generators/crud/Generator::$indexWidgetType*

 ()

$searchModelClass			*yii/gii/generators/crud/Generator::$searchModelClass*

 ()

$enablePjax				*yii/gii/generators/crud/Generator::$enablePjax*

 (bool) Whether to wrap the 'GridView' or 'ListView' widget with the
 'yii\widgets\Pjax' widget

$strictInflector			*yii/gii/generators/crud/Generator::$strictInflector*

 (bool) Whether to use strict inflection for controller IDs (insert a
 separator between two consecutive uppercase chars)



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/gii/Generator::init|
 |yii/gii/Generator::autoCompleteData|
 |yii/gii/Generator::successMessage|
 |yii/gii/Generator::formView|
 |yii/gii/Generator::defaultTemplate|
 |yii/gii/Generator::loadStickyAttributes|
 |yii/gii/Generator::saveStickyAttributes|
 |yii/gii/Generator::getStickyDataFile|
 |yii/gii/Generator::save|
 |yii/gii/Generator::getTemplatePath|
 |yii/gii/Generator::render|
 |yii/gii/Generator::validateTemplate|
 |yii/gii/Generator::validateClass|
 |yii/gii/Generator::validateNewClass|
 |yii/gii/Generator::validateMessageCategory|
 |yii/gii/Generator::isReservedKeyword|
 |yii/gii/Generator::generateString|


*yii/gii/generators/crud/Generator::getName*		public
>
 getName()
<
return (string) Name of the code generator








*yii/gii/generators/crud/Generator::generate*		public
>
 generate()
<
return (\yii\gii\CodeFile[]) A list of code files to be created.

 Generates the code based on the current user input and the specified code
 template files.



 This is the main method that child classes should implement. Please refer to
 '\yii\gii\generators\controller\Generator::generate()' as an example on how
 to implement this method.




*yii/gii/generators/crud/Generator::attributeLabels*	public
>
 attributeLabels()
<
return (void)








*yii/gii/generators/crud/Generator::requiredTemplates*	public
>
 requiredTemplates()
<
return (array) List of code template files that are required. They should be file
paths relative to 'templatePath'.

 Returns a list of code template files that are required.



 Derived classes usually should override this method if they require the
 existence of certain template files.




*yii/gii/generators/crud/Generator::stickyAttributes*	public
>
 stickyAttributes()
<
return (array) List of sticky attributes

 Returns the list of sticky attributes.



 A sticky attribute will remember its value and will initialize the attribute
 with this value when the generator is restarted.




*yii/gii/generators/crud/Generator::hints*		public
>
 hints()
<
return (array) The list of hint messages

 Returns the list of hint messages.



 The array keys are the attribute names, and the array values are the
 corresponding hint messages. Hint messages will be displayed to end users
 when they are filling the form for the generator.




*yii/gii/generators/crud/Generator::getDescription*	public
>
 getDescription()
<
return (string) The detailed description of the generator.








*yii/gii/generators/crud/Generator::rules*		public
>
 rules()
<
return (void)



 Child classes should override this method like the following so that the
 parent rules are included:

   return array_merge(parent::rules(), [
       ...rules for the child class...
   ]);




*yii/gii/generators/crud/Generator::validateModelClass*	public
>
 validateModelClass()
<
return (void)

 Checks if model class is valid


*yii/gii/generators/crud/Generator::getControllerID*	public
>
 getControllerID()
<
return (string) The controller ID (without the module ID prefix)



*yii/gii/generators/crud/Generator::getViewPath*		public
>
 getViewPath()
<
return (string) The controller view path



*yii/gii/generators/crud/Generator::getNameAttribute*	public
>
 getNameAttribute()
<
return (string) 



*yii/gii/generators/crud/Generator::generateActiveField*	public
>
 generateActiveField($attribute)
<
return (string) 

 Generates code for active field

    [$attribute] (string) 


*yii/gii/generators/crud/Generator::generateActiveSearchField*public
>
 generateActiveSearchField($attribute)
<
return (string) 

 Generates code for active search field

    [$attribute] (string) 


*yii/gii/generators/crud/Generator::generateColumnFormat*	public
>
 generateColumnFormat($column)
<
return (string) 

 Generates column format

    [$column] (\yii\db\ColumnSchema) 


*yii/gii/generators/crud/Generator::generateSearchRules*	public
>
 generateSearchRules()
<
return (array) The generated validation rules

 Generates validation rules for the search model.


*yii/gii/generators/crud/Generator::getSearchAttributes*	public
>
 getSearchAttributes()
<
return (array) Searchable attributes



*yii/gii/generators/crud/Generator::generateSearchLabels*	public
>
 generateSearchLabels()
<
return (array) The generated attribute labels (name => label)

 Generates the attribute labels for the search model.


*yii/gii/generators/crud/Generator::generateSearchConditions*public
>
 generateSearchConditions()
<
return (array) 

 Generates search conditions


*yii/gii/generators/crud/Generator::generateUrlParams*	public
>
 generateUrlParams()
<
return (string) 

 Generates URL parameters


*yii/gii/generators/crud/Generator::generateActionParams*	public
>
 generateActionParams()
<
return (string) 

 Generates action parameters


*yii/gii/generators/crud/Generator::generateActionParamComments*public
>
 generateActionParamComments()
<
return (array) Parameter tags for phpdoc

 Generates parameter tags for phpdoc


*yii/gii/generators/crud/Generator::getTableSchema*	public
>
 getTableSchema()
<
return (bool|\yii\db\TableSchema) 

 Returns table schema for current model class or false if it is not an active
 record


*yii/gii/generators/crud/Generator::getColumnNames*	public
>
 getColumnNames()
<
return (array) Model column names



*yii/gii/generators/crud/Generator::getClassDbDriverName*	protected
>
 getClassDbDriverName()
<
return (string|null) Driver name of modelClass db connection. In case db is not
instance of \yii\db\Connection null will be returned.




 vim:tw=78:ts=8:ft=help:norl:
