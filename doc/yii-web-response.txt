
*yii/web/Response*   >> |yii/base/Response|
==================

DESCRIPTION
------------------------------------------------------------------------------

 It holds the 'headers', 'cookies' and 'content' that is to be sent to the
 client. It also controls the HTTP 'statusCode|status code'.

 Response is configured as an application component in '\yii\web\Application'
 by default. You can access that instance via 'Yii::$app->response'.

 You can modify its configuration by adding an array to your application
 config under 'components' as it is shown in the following example:

   'response' => [
       'format' => yii\web\Response::FORMAT_JSON,
       'charset' => 'UTF-8',
       // ...
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

$exitStatus				*yii/web/Response::$exitStatus*
 See |yii/base/Response::$exitStatus|

$format					*yii/web/Response::$format*
 (string) The response format. This determines how to convert 'data' into
 'content' when the latter is not set. The value of this property must be one
 of the keys declared in the 'formatters] array. By default, the following
 formats are supported:


   - 'FORMAT_RAW': the data will be treated as the response content
   without any conversion.   No extra HTTP header will be added. 
   - 'FORMAT_HTML': the data will be treated as the response content
   without any conversion.   The "Content-Type" header will set as
 "text/html". 
   - 'FORMAT_JSON': the data will be converted into JSON format, and
   the "Content-Type"   header will be set as "application/json". 
   - 'FORMAT_JSONP': the data will be converted into JSONP format, and
   the "Content-Type"   header will be set as "text/javascript". Note that in
 this case '$data' must be an array   with "data" and "callback" elements. The
 former refers to the actual data to be sent,   while the latter refers to the
 name of the JavaScript callback. 
   - 'FORMAT_XML': the data will be converted into XML format. Please
   refer to 'XmlResponseFormatter'   for more details.

 You may customize the formatting process or support additional formats by
 configuring 'formatters'.

$acceptMimeType				*yii/web/Response::$acceptMimeType*
 (string) The MIME type (e.g. 'application/json') from the request ACCEPT
 header chosen for this response. This property is mainly set by
 '\yii\filters\ContentNegotiator'.

$acceptParams				*yii/web/Response::$acceptParams*
 (array) The parameters (e.g. '['q' => 1, 'version' => '1.0']') associated
 with the 'acceptMimeType|chosen MIME type'. This is a list of name-value
 pairs associated with 'acceptMimeType' from the ACCEPT HTTP header. This
 property is mainly set by '\yii\filters\ContentNegotiator'.

$formatters				*yii/web/Response::$formatters*
 (array) The formatters for converting data into the response content of the
 specified 'format'. The array keys are the format names, and the array values
 are the corresponding configurations for creating the formatter objects.

$data					*yii/web/Response::$data*
 (mixed) The original response data. When this is not null, it will be
 converted into 'content' according to 'format' when the response is being
 sent out.

$content				*yii/web/Response::$content*
 (string) The response content. When 'data' is not null, it will be converted
 into 'content' according to 'format' when the response is being sent out.

$stream					*yii/web/Response::$stream*
 (resource|array) The stream to be sent. This can be a stream handle or an
 array of stream handle, the begin position and the end position. Note that
 when this property is set, the 'data' and 'content' properties will be
 ignored by 'send()'.

$charset				*yii/web/Response::$charset*
 (string) The charset of the text response. If not set, it will use the value
 of 'Application::charset'.

$statusText				*yii/web/Response::$statusText*
 (string) The HTTP status description that comes together with the status
 code.

$version				*yii/web/Response::$version*
 (string) The version of the HTTP protocol to use. If not set, it will be
 determined via '$_SERVER['SERVER_PROTOCOL']', or '1.1' if that is not
 available.

$isSent					*yii/web/Response::$isSent*
 (boolean) Whether the response has been sent. If this is true, calling
 'send()' will do nothing.

$httpStatuses				*yii/web/Response::$httpStatuses*
 (array) List of HTTP status codes and the corresponding texts

$behaviors				*yii/web/Response::$behaviors*
 See |yii/base/Component::$behaviors|

$statusCode				*yii/web/Response::$statusCode*
 (integer) The HTTP status code to send with the response.

$headers				*yii/web/Response::$headers*
 (\yii\web\HeaderCollection) The header collection

$downloadHeaders			*yii/web/Response::$downloadHeaders*
 (string) The attachment file name

$cookies				*yii/web/Response::$cookies*
 (\yii\web\CookieCollection) The cookie collection.

$isInvalid				*yii/web/Response::$isInvalid*
 (boolean) Whether this response has a valid 'statusCode'.

$isInformational			*yii/web/Response::$isInformational*
 (boolean) Whether this response is informational

$isSuccessful				*yii/web/Response::$isSuccessful*
 (boolean) Whether this response is successful

$isRedirection				*yii/web/Response::$isRedirection*
 (boolean) Whether this response is a redirection

$isClientError				*yii/web/Response::$isClientError*
 (boolean) Whether this response indicates a client error

$isServerError				*yii/web/Response::$isServerError*
 (boolean) Whether this response indicates a server error

$isOk					*yii/web/Response::$isOk*
 (boolean) Whether this response is OK

$isForbidden				*yii/web/Response::$isForbidden*
 (boolean) Whether this response indicates the current request is forbidden

$isNotFound				*yii/web/Response::$isNotFound*
 (boolean) Whether this response indicates the currently requested resource is
 not found

$isEmpty				*yii/web/Response::$isEmpty*
 (boolean) Whether this response is empty



METHOD DETAILS
------------------------------------------------------------------------------

*yii/web/Response::className*				public
 See |yii/base/Object::className|


*yii/web/Response::__construct*				public
 See |yii/base/Object::__construct|


*yii/web/Response::init*					public
>
 init()
<
(void)



*yii/web/Response::__get*					public
 See |yii/base/Component::__get|


*yii/web/Response::__set*					public
 See |yii/base/Component::__set|


*yii/web/Response::__isset*				public
 See |yii/base/Component::__isset|


*yii/web/Response::__unset*				public
 See |yii/base/Component::__unset|


*yii/web/Response::__call*				public
 See |yii/base/Component::__call|


*yii/web/Response::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/web/Response::canGetProperty*			public
 See |yii/base/Component::canGetProperty|


*yii/web/Response::canSetProperty*			public
 See |yii/base/Component::canSetProperty|


*yii/web/Response::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/web/Response::__clone*				public
 See |yii/base/Component::__clone|


*yii/web/Response::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/web/Response::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/web/Response::on*					public
 See |yii/base/Component::on|


*yii/web/Response::off*					public
 See |yii/base/Component::off|


*yii/web/Response::trigger*				public
 See |yii/base/Component::trigger|


*yii/web/Response::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/web/Response::getBehaviors*				public
 See |yii/base/Component::getBehaviors|


*yii/web/Response::attachBehavior*			public
 See |yii/base/Component::attachBehavior|


*yii/web/Response::attachBehaviors*			public
 See |yii/base/Component::attachBehaviors|


*yii/web/Response::detachBehavior*			public
 See |yii/base/Component::detachBehavior|


*yii/web/Response::detachBehaviors*			public
 See |yii/base/Component::detachBehaviors|


*yii/web/Response::ensureBehaviors*			public
 See |yii/base/Component::ensureBehaviors|


*yii/web/Response::send*					public
>
 send()
<
(void)



*yii/web/Response::clearOutputBuffers*			public
 See |yii/base/Response::clearOutputBuffers|


*yii/web/Response::getStatusCode*				public
>
 getStatusCode()
<
(integer) The HTTP status code to send with the response.



*yii/web/Response::setStatusCode*				public
>
 setStatusCode($value, $text='null')
<
(void)

 This method will set the corresponding status text if '$text' is null.
    [$value] (integer) The status code
    [$text] (string) The status text. If not set, it will be set automatically
    based on the status code.


*yii/web/Response::getHeaders*				public
>
 getHeaders()
<
(\yii\web\HeaderCollection) The header collection

 The header collection contains the currently registered HTTP headers.


*yii/web/Response::clear*					public
>
 clear()
<
(void)



*yii/web/Response::sendHeaders*				protected
>
 sendHeaders()
<
(void)



*yii/web/Response::sendCookies*				protected
>
 sendCookies()
<
(void)



*yii/web/Response::sendContent*				protected
>
 sendContent()
<
(void)



*yii/web/Response::sendFile*				public
>
 sendFile($filePath, $attachmentName='null', $options='[]')
<
($this) The response object itself

 Note that this method only prepares the response for file sending. The file
 is not sent until 'send()' is called explicitly or implicitly. The latter is
 done after you return from a controller action.
    [$filePath] (string) The path of the file to be sent.
    [$attachmentName] (string) The file name shown to the user. If null, it
    will be determined from '$filePath'.
    [$options] (array) Additional options for sending the file. The following
    options are supported:

     
      - 'mimeType': the MIME type of the content. If not set, it will be
      guessed based on '$filePath'  
      - 'inline': boolean, whether the browser should open the file within
      the browser window. Defaults to false,    meaning a download dialog will
    pop up.


*yii/web/Response::sendContentAsFile*			public
>
 sendContentAsFile($content, $attachmentName, $options='[]')
<
($this) The response object itself

 Note that this method only prepares the response for file sending. The file
 is not sent until 'send()' is called explicitly or implicitly. The latter is
 done after you return from a controller action.
    [$content] (string) The content to be sent. The existing 'content' will be
    discarded.
    [$attachmentName] (string) The file name shown to the user.
    [$options] (array) Additional options for sending the file. The following
    options are supported:

     
      - 'mimeType': the MIME type of the content. Defaults to
      'application/octet-stream'.  
      - 'inline': boolean, whether the browser should open the file within
      the browser window. Defaults to false,    meaning a download dialog will
    pop up.


*yii/web/Response::sendStreamAsFile*			public
>
 sendStreamAsFile($handle, $attachmentName, $options='[]')
<
($this) The response object itself

 Note that this method only prepares the response for file sending. The file
 is not sent until 'send()' is called explicitly or implicitly. The latter is
 done after you return from a controller action.
    [$handle] (resource) The handle of the stream to be sent.
    [$attachmentName] (string) The file name shown to the user.
    [$options] (array) Additional options for sending the file. The following
    options are supported:

     
      - 'mimeType': the MIME type of the content. Defaults to
      'application/octet-stream'.  
      - 'inline': boolean, whether the browser should open the file within
      the browser window. Defaults to false,    meaning a download dialog will
    pop up.  
      - 'fileSize': the size of the content to stream this is useful when
      size of the content is known    and the content is not seekable.
    Defaults to content size using 'ftell()'.    This option is available
    since version 2.0.4.


*yii/web/Response::setDownloadHeaders*			public
>
 setDownloadHeaders($attachmentName, $mimeType='null', $inline='false', $contentLength=null)
<
($this) The response object itself

    [$attachmentName] (string) The attachment file name
    [$mimeType] (string) The MIME type for the response. If null,
    'Content-Type' header will NOT be set.
    [$inline] (boolean) Whether the browser should open the file within the
    browser window. Defaults to false, meaning a download dialog will pop up.
    [$contentLength] (integer) The byte length of the file being downloaded.
    If null, 'Content-Length' header will NOT be set.


*yii/web/Response::getHttpRange*				protected
>
 getHttpRange($fileSize)
<
(array|boolean) The range (begin, end), or false if the range request is
invalid.

    [$fileSize] (integer) The size of the file that will be used to validate
    the requested HTTP range.


*yii/web/Response::xSendFile*				public
>
 xSendFile($filePath, $attachmentName='null', $options='[]')
<
($this) The response object itself

 X-Sendfile is a feature allowing a web application to redirect the request
 for a file to the webserver that in turn processes the request, this way
 eliminating the need to perform tasks like reading the file and sending it to
 the user. When dealing with a lot of files (or very big files) this can lead
 to a great increase in performance as the web application is allowed to
 terminate earlier while the webserver is handling the request.

 The request is sent to the server through a special non-standard HTTP-header.
 When the web server encounters the presence of such header it will discard
 all output and send the file specified by that header using web server
 internals including all optimizations like caching-headers.

 As this header directive is non-standard different directives exists for
 different web servers applications:


   - Apache: [X-Sendfile](http://tn123.org/mod_xsendfile) 
   - Lighttpd v1.4:
  
 [X-LIGHTTPD-send-file](http://redmine.lighttpd.net/projects/lighttpd/wiki/X-LIGHTTPD-send-file)

   - Lighttpd v1.5:
  
 [X-Sendfile](http://redmine.lighttpd.net/projects/lighttpd/wiki/X-LIGHTTPD-send-file)

   - Nginx: [X-Accel-Redirect](http://wiki.nginx.org/XSendfile) 
   - Cherokee: [X-Sendfile and
  
 X-Accel-Redirect](http://www.cherokee-project.com/doc/other_goodies.html#x-sendfile)

 So for this method to work the X-SENDFILE option/module should be enabled by
 the web server and a proper xHeader should be sent.

 **Note**

 This option allows to download files that are not under web folders, and even
 files that are otherwise protected (deny from all) like '.htaccess'.

 **Side effects**

 If this option is disabled by the web server, when this method is called a
 download configuration dialog will open but the downloaded file will have 0
 bytes.

 **Known issues**

 There is a Bug with Internet Explorer 6, 7 and 8 when X-SENDFILE is used over
 an SSL connection, it will show an error message like this: "Internet
 Explorer was not able to open this Internet site. The requested site is
 either unavailable or cannot be found.". You can work around this problem by
 removing the 'Pragma'-header.

 **Example**

   Yii::$app->response->xSendFile('/home/user/Pictures/picture1.jpg');


    [$filePath] (string) File name with full path
    [$attachmentName] (string) File name shown to the user. If null, it will
    be determined from '$filePath'.
    [$options] (array) Additional options for sending the file. The following
    options are supported:

     
      - 'mimeType': the MIME type of the content. If not set, it will be
      guessed based on '$filePath'  
      - 'inline': boolean, whether the browser should open the file within
      the browser window. Defaults to false,    meaning a download dialog will
    pop up.  
      - xHeader: string, the name of the x-sendfile header. Defaults to
      "X-Sendfile".


*yii/web/Response::redirect*				public
>
 redirect($url, $statusCode=302, $checkAjax='true')
<
($this) The response object itself

 This method adds a "Location" header to the current response. Note that it
 does not send out the header until 'send()' is called. In a controller action
 you may use this method as follows:

   return Yii::$app->getResponse()->redirect($url);

 In other places, if you want to send out the "Location" header immediately,
 you should use the following code:

   Yii::$app->getResponse()->redirect($url)->send();
   return;

 In AJAX mode, this normally will not work as expected unless there are some
 client-side JavaScript code handling the redirection. To help achieve this
 goal, this method will send out a "X-Redirect" header instead of "Location".

 If you use the "yii" JavaScript module, it will handle the AJAX redirection
 as described above. Otherwise, you should write the following JavaScript code
 to handle the redirection:

 '''javascript $document.ajaxComplete(function (event, xhr, settings) {    
 var url = xhr.getResponseHeader('X-Redirect');     if (url) {        
 window.location = url;     } }); '''
    [$url] (string|array) The URL to be redirected to. This can be in one of
    the following formats:


      - a string representing a URL (e.g. "http://example.com") 
      - a string representing a URL alias (e.g. "@example.com") 
      - an array in the format of '[$route, ...name-value pairs...]' (e.g.
      '['site/index', 'ref' => 1]').   Note that the route is with respect to
    the whole application, instead of relative to a controller or module.  
    'Url::to()' will be used to convert the array into a URL.

    Any relative URL will be converted into an absolute one by prepending it
    with the host info of the current request.
    [$statusCode] (integer) The HTTP status code. Defaults to 302. See
    <http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html> for details about
    HTTP status code
    [$checkAjax] (boolean) Whether to specially handle AJAX (and PJAX)
    requests. Defaults to true, meaning if the current request is an AJAX or
    PJAX request, then calling this method will cause the browser to redirect
    to the given URL. If this is false, a 'Location' header will be sent,
    which when received as an AJAX/PJAX response, may NOT cause browser
    redirection. Takes effect only when request header
    'X-Ie-Redirect-Compatibility' is absent.


*yii/web/Response::refresh*				public
>
 refresh($anchor='''')
<
(\yii\web\Response) The response object itself

 The effect of this method call is the same as the user pressing the refresh
 button of his browser (without re-posting data).

 In a controller action you may use this method like this:

   return Yii::$app->getResponse()->refresh();


    [$anchor] (string) The anchor that should be appended to the redirection
    URL. Defaults to empty. Make sure the anchor starts with '#' if you want
    to specify it.


*yii/web/Response::getCookies*				public
>
 getCookies()
<
(\yii\web\CookieCollection) The cookie collection.

 Through the returned cookie collection, you add or remove cookies as follows,

   // add a cookie
   $response->cookies->add(new Cookie([
       'name' => $name,
       'value' => $value,
   ]);

   // remove a cookie
   $response->cookies->remove('name');
   // alternatively
   unset($response->cookies['name']);




*yii/web/Response::getIsInvalid*				public
>
 getIsInvalid()
<
(boolean) Whether this response has a valid 'statusCode'.



*yii/web/Response::getIsInformational*			public
>
 getIsInformational()
<
(boolean) Whether this response is informational



*yii/web/Response::getIsSuccessful*			public
>
 getIsSuccessful()
<
(boolean) Whether this response is successful



*yii/web/Response::getIsRedirection*			public
>
 getIsRedirection()
<
(boolean) Whether this response is a redirection



*yii/web/Response::getIsClientError*			public
>
 getIsClientError()
<
(boolean) Whether this response indicates a client error



*yii/web/Response::getIsServerError*			public
>
 getIsServerError()
<
(boolean) Whether this response indicates a server error



*yii/web/Response::getIsOk*				public
>
 getIsOk()
<
(boolean) Whether this response is OK



*yii/web/Response::getIsForbidden*			public
>
 getIsForbidden()
<
(boolean) Whether this response indicates the current request is forbidden



*yii/web/Response::getIsNotFound*				public
>
 getIsNotFound()
<
(boolean) Whether this response indicates the currently requested resource is
not found



*yii/web/Response::getIsEmpty*				public
>
 getIsEmpty()
<
(boolean) Whether this response is empty



*yii/web/Response::defaultFormatters*			protected
>
 defaultFormatters()
<
(array) The formatters that are supported by default



*yii/web/Response::prepare*				protected
>
 prepare()
<
(void)

 The default implementation will convert 'data' into 'content' and set headers
 accordingly.



 vim:tw=78:ts=8:ft=help:norl:
