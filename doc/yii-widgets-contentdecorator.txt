
*yii/widgets/ContentDecorator*   >> |yii/base/Widget|
==============================

DESCRIPTION
------------------------------------------------------------------------------



   <?php ContentDecorator::begin([
       'viewFile' => '@app/views/layouts/base.php',
       'params' => [],
       'view' => $this,
   ]) ?>

   some content here

   <?php ContentDecorator::end() ?>

 There are '\yii\base\View::beginContent()' and '\yii\base\View::endContent()'
 wrapper methods in the '\yii\base\View' component to make syntax more
 friendly. In the view these could be used as follows:

   <?php $this->beginContent('@app/views/layouts/base.php') ?>

   some content here

   <?php $this->endContent() ?>




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Widget::$counter|
 |yii/base/Widget::$autoIdPrefix|
 |yii/base/Widget::$stack|


$viewFile				*yii/widgets/ContentDecorator::$viewFile*

 (string) The view file that will be used to decorate the content enclosed by
 this widget. This can be specified as either the view file path or [path
 alias](guide:concept-aliases).

$params					*yii/widgets/ContentDecorator::$params*

 (array) The parameters (name => value) to be extracted and made available in
 the decorative view.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/base/Widget::begin|
 |yii/base/Widget::end|
 |yii/base/Widget::widget|
 |yii/base/Widget::getId|
 |yii/base/Widget::setId|
 |yii/base/Widget::getView|
 |yii/base/Widget::setView|
 |yii/base/Widget::render|
 |yii/base/Widget::renderFile|
 |yii/base/Widget::getViewPath|
 |yii/base/Widget::beforeRun|
 |yii/base/Widget::afterRun|


*yii/widgets/ContentDecorator::init*			public
>
 init()
<
return (void)

 Starts recording a clip.


*yii/widgets/ContentDecorator::run*			public
>
 run()
<
return (void)

 Ends recording a clip.

 This method stops output buffering and saves the rendering result as a named
 clip in the controller.



 vim:tw=78:ts=8:ft=help:norl:
