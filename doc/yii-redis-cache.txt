
*yii/redis/Cache*   >> |yii/caching/Cache|
=================

DESCRIPTION
------------------------------------------------------------------------------

 Redis Cache requires redis version 2.6.12 or higher to work properly.

 It needs to be configured with a redis 'Connection' that is also configured
 as an application component. By default it will use the 'redis' application
 component.

 See 'Cache' manual for common cache operations that redis Cache supports.

 Unlike the 'Cache', redis Cache allows the expire parameter of 'set', 'add',
 'mset' and 'madd' to be a floating point number, so you may specify the time
 in milliseconds (e.g. 0.1 will be 100 milliseconds).

 To use redis Cache as the cache application component, configure the
 application as follows,

   [
       'components' => [
           'cache' => [
               'class' => 'yii\redis\Cache',
               'redis' => [
                   'hostname' => 'localhost',
                   'port' => 6379,
                   'database' => 0,
               ]
           ],
       ],
   ]

 Or if you have configured the redis 'Connection' as an application component,
 the following is sufficient:

   [
       'components' => [
           'cache' => [
               'class' => 'yii\redis\Cache',
               // 'redis' => 'redis' // id of the connection application
 component
           ],
       ],
   ]

 If you have multiple redis replicas (e.g. AWS ElasticCache Redis) you can
 configure the cache to send read operations to the replicas. If no replicas
 are configured, all operations will be performed on the master connection
 configured via the 'redis' property.

   [
       'components' => [
           'cache' => [
               'class' => 'yii\redis\Cache',
               'enableReplicas' => true,
               'replicas' => [
                   // config for replica redis connections, (default class
 will be yii\redis\Connection if not provided)
                   // you can optionally put in master as hostname as well, as
 all GET operation will use replicas
                   'redis',//id of Redis [[Connection]] Component
                   ['hostname' =>
 'redis-slave-002.xyz.0001.apse1.cache.amazonaws.com'],
                   ['hostname' =>
 'redis-slave-003.xyz.0001.apse1.cache.amazonaws.com'],
               ],
           ],
       ],
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------


$redis					*yii/redis/Cache::$redis*

 (\yii\redis\Connection|string|array) The Redis 'Connection' object or the
 application component ID of the Redis 'Connection'. This can also be an array
 that is used to create a redis 'Connection' instance in case you do not want
 do configure redis connection as an application component. After the Cache
 object is created, if you want to change this property, you should only
 assign it with a Redis 'Connection' object.

$enableReplicas				*yii/redis/Cache::$enableReplicas*

 (bool) Whether to enable read / get from redis replicas.

$replicas				*yii/redis/Cache::$replicas*

 (array) The Redis 'Connection' configurations for redis replicas. Each entry
 is a class configuration, which will be used to instantiate a replica
 connection. The default class is 'Connection|yii\redis\Connection'. You
 should at least provide a hostname.

 Configuration example:

   'replicas' => [
       'redis',
       ['hostname' => 'redis-slave-002.xyz.0001.apse1.cache.amazonaws.com'],
       ['hostname' => 'redis-slave-003.xyz.0001.apse1.cache.amazonaws.com'],
   ],





METHOD DETAILS
------------------------------------------------------------------------------


*yii/redis/Cache::init*					public
>
 init()
<
return (void)

 Initializes the redis Cache component.

 This method will initialize the 'redis' property to make sure it refers to a
 valid redis connection.


*yii/redis/Cache::exists*					public
>
 exists($key)
<
return (bool) True if a value exists in cache, false if the value is not in the cache
or expired.

 Checks whether a specified key exists in the cache.

 This can be faster than getting the value from the cache if the data is big.
 Note that this method does not check whether the dependency associated with
 the cached data, if there is any, has changed. So a call to 'get' may return
 false while exists returns true.

    [$key] (mixed) A key identifying the cached value. This can be a simple
    string or a complex data structure consisting of factors representing the
    key.


*yii/redis/Cache::getValue*				protected
>
 getValue($key)
<
return (void)

    [$key] () 


*yii/redis/Cache::getValues*				protected
>
 getValues($keys)
<
return (void)

    [$keys] () 


*yii/redis/Cache::setValue*				protected
>
 setValue($key, $value, $expire)
<
return (void)

    [$key] () 
    [$value] () 
    [$expire] () 


*yii/redis/Cache::setValues*				protected
>
 setValues($data, $expire)
<
return (void)

    [$data] () 
    [$expire] () 


*yii/redis/Cache::addValue*				protected
>
 addValue($key, $value, $expire)
<
return (void)

    [$key] () 
    [$value] () 
    [$expire] () 


*yii/redis/Cache::deleteValue*				protected
>
 deleteValue($key)
<
return (void)

    [$key] () 


*yii/redis/Cache::flushValues*				protected
>
 flushValues()
<
return (void)



*yii/redis/Cache::getReplica*				protected
>
 getReplica()
<
return (array|string|\yii\redis\Connection) 

 It will return the current Replica Redis 'Connection', and fall back to
 default 'redis' 'Connection' defined in this instance. Only used in
 getValue() and getValues().



 vim:tw=78:ts=8:ft=help:norl:
