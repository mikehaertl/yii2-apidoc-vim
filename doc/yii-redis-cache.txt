
*yii/redis/Cache*   >> |yii/caching/Cache|
=================

DESCRIPTION
------------------------------------------------------------------------------

 Redis Cache requires redis version 2.6.12 or higher to work properly.

 It needs to be configured with a redis 'Connection' that is also configured
 as an application component. By default it will use the 'redis' application
 component.

 See 'Cache' manual for common cache operations that redis Cache supports.

 Unlike the 'Cache', redis Cache allows the expire parameter of 'set', 'add',
 'mset' and 'madd' to be a floating point number, so you may specify the time
 in milliseconds (e.g. 0.1 will be 100 milliseconds).

 To use redis Cache as the cache application component, configure the
 application as follows,

   [
       'components' => [
           'cache' => [
               'class' => 'yii\redis\Cache',
               'redis' => [
                   'hostname' => 'localhost',
                   'port' => 6379,
                   'database' => 0,
               ]
           ],
       ],
   ]

 Or if you have configured the redis 'Connection' as an application component,
 the following is sufficient:

   [
       'components' => [
           'cache' => [
               'class' => 'yii\redis\Cache',
               // 'redis' => 'redis' // id of the connection application
 component
           ],
       ],
   ]

 If you have multiple redis replicas (e.g. AWS ElasticCache Redis) you can
 configure the cache to send read operations to the replicas. If no replicas
 are configured, all operations will be performed on the master connection
 configured via the 'redis' property.

   [
       'components' => [
           'cache' => [
               'class' => 'yii\redis\Cache',
               'enableReplicas' => true,
               'replicas' => [
                   // config for replica redis connections, (default class
 will be yii\redis\Connection if not provided)
                   // you can optionally put in master as hostname as well, as
 all GET operation will use replicas
                   'redis',//id of Redis [[Connection]] Component
                   ['hostname' =>
 'redis-slave-002.xyz.0001.apse1.cache.amazonaws.com'],
                   ['hostname' =>
 'redis-slave-003.xyz.0001.apse1.cache.amazonaws.com'],
               ],
           ],
       ],
   ]

 If you're using redis in cluster mode and want to use 'MGET' and 'MSET'
 effectively, you will need to supply a [hash
 tag](https://redis.io/topics/cluster-spec#keys-hash-tags) to allocate cache
 keys to the same hash slot.

   \Yii::$app->cache->multiSet([
       'posts{user1}' => 123,
       'settings{user1}' => [
           'showNickname' => false,
           'sortBy' => 'created_at',
       ],
       'unreadMessages{user1}' => 5,
   ]);




PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/caching/Cache::$keyPrefix|
 |yii/caching/Cache::$serializer|
 |yii/caching/Cache::$defaultDuration|
 |yii/base/Component::$behaviors|


$redis					*yii/redis/Cache::$redis*

 (\yii\redis\Connection|string|array) The Redis 'Connection' object or the
 application component ID of the Redis 'Connection'. This can also be an array
 that is used to create a redis 'Connection' instance in case you do not want
 do configure redis connection as an application component. After the Cache
 object is created, if you want to change this property, you should only
 assign it with a Redis 'Connection' object.

$enableReplicas				*yii/redis/Cache::$enableReplicas*

 (bool) Whether to enable read / get from redis replicas.

$replicas				*yii/redis/Cache::$replicas*

 (array) The Redis 'Connection' configurations for redis replicas. Each entry
 is a class configuration, which will be used to instantiate a replica
 connection. The default class is 'Connection|yii\redis\Connection'. You
 should at least provide a hostname.

 Configuration example:

   'replicas' => [
       'redis',
       ['hostname' => 'redis-slave-002.xyz.0001.apse1.cache.amazonaws.com'],
       ['hostname' => 'redis-slave-003.xyz.0001.apse1.cache.amazonaws.com'],
   ],



$forceClusterMode			*yii/redis/Cache::$forceClusterMode*

 (bool|null) Force cluster mode, don't check on every request. If this is
 null, cluster mode will be checked once per request whenever the cache is
 accessed. To disable the check, set to true if cluster mode should be
 enabled, or false if it should be disabled.

$isCluster				*yii/redis/Cache::$isCluster*

 (bool) Whether redis is running in cluster mode or not



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/caching/Cache::get|
 |yii/caching/Cache::mget|
 |yii/caching/Cache::multiGet|
 |yii/caching/Cache::set|
 |yii/caching/Cache::mset|
 |yii/caching/Cache::multiSet|
 |yii/caching/Cache::madd|
 |yii/caching/Cache::multiAdd|
 |yii/caching/Cache::add|
 |yii/caching/Cache::delete|
 |yii/caching/Cache::flush|
 |yii/caching/Cache::addValues|
 |yii/caching/Cache::offsetExists|
 |yii/caching/Cache::offsetGet|
 |yii/caching/Cache::offsetSet|
 |yii/caching/Cache::offsetUnset|
 |yii/caching/Cache::getOrSet|


*yii/redis/Cache::init*					public
>
 init()
<
return (void)

 Initializes the redis Cache component.

 This method will initialize the 'redis' property to make sure it refers to a
 valid redis connection.


*yii/redis/Cache::buildKey*				public
>
 buildKey($key)
<
return (void)

    [$key] () 


*yii/redis/Cache::exists*					public
>
 exists($key)
<
return (bool) True if a value exists in cache, false if the value is not in the cache
or expired.

 Checks whether a specified key exists in the cache.

 This can be faster than getting the value from the cache if the data is big.
 Note that this method does not check whether the dependency associated with
 the cached data, if there is any, has changed. So a call to 'get' may return
 false while exists returns true.

    [$key] (mixed) A key identifying the cached value. This can be a simple
    string or a complex data structure consisting of factors representing the
    key.


*yii/redis/Cache::getValue*				protected
>
 getValue($key)
<
return (mixed|false) The value stored in cache, false if the value is not in the
cache or expired. Most often value is a string. If you have disabled
'serializer', it could be something else.

 Retrieves a value from cache with a specified key.



 This method should be implemented by child classes to retrieve the data from
 specific cache storage.



    [$key] (string) A unique key identifying the cached value


*yii/redis/Cache::setValue*				protected
>
 setValue($key, $value, $expire)
<
return (bool) True if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key in cache.



 This method should be implemented by child classes to store the data in
 specific cache storage.



    [$key] (string) The key identifying the value to be cached
    [$value] (mixed) The value to be cached. Most often it's a string. If you
    have disabled 'serializer', it could be something else.
    [$expire] () 


*yii/redis/Cache::addValue*				protected
>
 addValue($key, $value, $expire)
<
return (bool) True if the value is successfully stored into cache, false otherwise

 Stores a value identified by a key into cache if the cache does not contain
 this key.



 This method should be implemented by child classes to store the data in
 specific cache storage.



    [$key] (string) The key identifying the value to be cached
    [$value] (mixed) The value to be cached. Most often it's a string. If you
    have disabled 'serializer', it could be something else.
    [$expire] () 


*yii/redis/Cache::deleteValue*				protected
>
 deleteValue($key)
<
return (bool) If no error happens during deletion

 Deletes a value with the specified key from cache This method should be
 implemented by child classes to delete the data from actual cache storage.







    [$key] (string) The key of the value to be deleted


*yii/redis/Cache::flushValues*				protected
>
 flushValues()
<
return (bool) Whether the flush operation was successful.

 Deletes all values from cache.



 Child classes may implement this method to realize the flush operation.




*yii/redis/Cache::getValues*				protected
>
 getValues($keys)
<
return (array) A list of cached values indexed by the keys

 Retrieves multiple values from cache with the specified keys.



 The default implementation calls 'getValue()' multiple times to retrieve the
 cached values one by one. If the underlying cache storage supports multiget,
 this method should be overridden to exploit that feature.



    [$keys] (array) A list of keys identifying the cached values


*yii/redis/Cache::setValues*				protected
>
 setValues($data, $expire)
<
return (array) Array of failed keys

 Stores multiple key-value pairs in cache.



 The default implementation calls 'setValue()' multiple times store values one
 by one. If the underlying cache storage supports multi-set, this method
 should be overridden to exploit that feature.



    [$data] (array) Array where key corresponds to cache key while value is
    the value stored
    [$expire] () 


*yii/redis/Cache::getIsCluster*				public
>
 getIsCluster()
<
return (bool) Whether redis is running in cluster mode or not

 Returns 'true' if the redis extension is forced to run in cluster mode
 through config or the redis command 'CLUSTER INFO' executes successfully,
 'false' otherwise.

 Setting 'forceClusterMode' to either 'true' or 'false' is preferred.


*yii/redis/Cache::getReplica*				protected
>
 getReplica()
<
return (array|string|\yii\redis\Connection) 

 It will return the current Replica Redis 'Connection', and fall back to
 default 'redis' 'Connection' defined in this instance. Only used in
 getValue() and getValues().



 vim:tw=78:ts=8:ft=help:norl:
