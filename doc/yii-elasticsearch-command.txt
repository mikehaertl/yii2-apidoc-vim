
*yii/elasticsearch/Command*   >> |yii/base/Component|
===========================

DESCRIPTION
------------------------------------------------------------------------------

 Check the [elasticsearch
 guide](http://www.elastic.co/guide/en/elasticsearch/reference/current/index.html)
 for details on these commands.


PROPERTY DETAILS
------------------------------------------------------------------------------


$db					*yii/elasticsearch/Command::$db*

 (\yii\elasticsearch\Connection)

$index					*yii/elasticsearch/Command::$index*

 (string|array) The indexes to execute the query on. Defaults to null meaning
 all indexes

$type					*yii/elasticsearch/Command::$type*

 (string|array) The types to execute the query on. Defaults to null meaning
 all types

$queryParts				*yii/elasticsearch/Command::$queryParts*

 (array) List of arrays or json strings that become parts of a query

$options				*yii/elasticsearch/Command::$options*

 (array) Options to be appended to the query URL, such as "search_type" for
 search or "timeout" for delete



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/elasticsearch/Command::search*			public
>
 search($options='[]')
<
return (mixed) 

 Sends a request to the _search API and returns the result

    [$options] (array) 


*yii/elasticsearch/Command::deleteByQuery*		public
>
 deleteByQuery($options='[]')
<
return (mixed) 

 Sends a request to the delete by query

    [$options] (array) 


*yii/elasticsearch/Command::suggest*			public
>
 suggest($suggester, $options='[]')
<
return (mixed) 

 Sends a request to the _suggest API and returns the result

    [$suggester] (string|array) The suggester body
    [$options] (array) 


*yii/elasticsearch/Command::insert*			public
>
 insert($index, $type, $data, $id='null', $options='[]')
<
return (mixed) 

 Inserts a document into an index

    [$index] (string) 
    [$type] (string) 
    [$data] (string|array) Json string or array of data to store
    [$id] (null) The documents id. If not specified Id will be automatically
    chosen
    [$options] (array) 


*yii/elasticsearch/Command::get*				public
>
 get($index, $type, $id, $options='[]')
<
return (mixed) 

 Gets a document from the index

    [$index] () 
    [$type] () 
    [$id] () 
    [$options] (array) 


*yii/elasticsearch/Command::mget*				public
>
 mget($index, $type, $ids, $options='[]')
<
return (mixed) 

 Gets multiple documents from the index

 TODO allow specifying type and index + fields

    [$index] () 
    [$type] () 
    [$ids] () 
    [$options] (array) 


*yii/elasticsearch/Command::getSource*			public
>
 getSource($index, $type, $id)
<
return (mixed) 

 Gets a documents _source from the index (>=v0.90.1)

    [$index] () 
    [$type] () 
    [$id] () 


*yii/elasticsearch/Command::exists*			public
>
 exists($index, $type, $id)
<
return (mixed) 

 Gets a document from the index

    [$index] () 
    [$type] () 
    [$id] () 


*yii/elasticsearch/Command::delete*			public
>
 delete($index, $type, $id, $options='[]')
<
return (mixed) 

 Deletes a document from the index

    [$index] () 
    [$type] () 
    [$id] () 
    [$options] (array) 


*yii/elasticsearch/Command::update*			public
>
 update($index, $type, $id, $data, $options='[]')
<
return (mixed) 

 Updates a document

    [$index] () 
    [$type] () 
    [$id] () 
    [$data] () 
    [$options] (array) 


*yii/elasticsearch/Command::createIndex*			public
>
 createIndex($index, $configuration='null')
<
return (mixed) 

 Creates an index

    [$index] () 
    [$configuration] (array) 


*yii/elasticsearch/Command::deleteIndex*			public
>
 deleteIndex($index)
<
return (mixed) 

 Deletes an index

    [$index] () 


*yii/elasticsearch/Command::deleteAllIndexes*		public
>
 deleteAllIndexes()
<
return (mixed) 

 Deletes all indexes


*yii/elasticsearch/Command::indexExists*			public
>
 indexExists($index)
<
return (mixed) 

 Checks whether an index exists

    [$index] () 


*yii/elasticsearch/Command::typeExists*			public
>
 typeExists($index, $type)
<
return (mixed) 

    [$index] () 
    [$type] () 


*yii/elasticsearch/Command::aliasExists*			public
>
 aliasExists($alias)
<
return (bool) 

    [$alias] (string) 


*yii/elasticsearch/Command::getAliasInfo*			public
>
 getAliasInfo()
<
return (array) 



*yii/elasticsearch/Command::getIndexInfoByAlias*		public
>
 getIndexInfoByAlias($alias)
<
return (array) 

    [$alias] (string) 


*yii/elasticsearch/Command::getIndexesByAlias*		public
>
 getIndexesByAlias($alias)
<
return (array) 

    [$alias] (string) 


*yii/elasticsearch/Command::getIndexAliases*		public
>
 getIndexAliases($index)
<
return (array) 

    [$index] (string) 


*yii/elasticsearch/Command::addAlias*			public
>
 addAlias($index, $alias, $aliasParameters='[]')
<
return (bool) 

    [$index] () 
    [$alias] () 
    [$aliasParameters] (array) 


*yii/elasticsearch/Command::removeAlias*			public
>
 removeAlias($index, $alias)
<
return (bool) 

    [$index] (string) 
    [$alias] (string) 


*yii/elasticsearch/Command::aliasActions*			public
>
 aliasActions($actions)
<
return (bool) 

 Runs alias manipulations.

 If you want to add alias1 to index1 and remove alias2 from index2 you can use
 following commands:

   $actions = [
        ['add' => ['index' => 'index1', 'alias' => 'alias1']],
        ['remove' => ['index' => 'index2', 'alias' => 'alias2']],
   ];



    [$actions] (array) 


*yii/elasticsearch/Command::updateSettings*		public
>
 updateSettings($index, $setting, $options='[]')
<
return (mixed) 

 Change specific index level settings in real time.

 Note that update analyzers required to 'close()' the index first and 'open()'
 it after the changes are made, use 'updateAnalyzers()' for it.

    [$index] (string) 
    [$setting] (string|array) 
    [$options] (array) URL options


*yii/elasticsearch/Command::updateAnalyzers*		public
>
 updateAnalyzers($index, $setting, $options='[]')
<
return (mixed) 

 Define new analyzers for the index.

 For example if content analyzer hasnâ€™t been defined on "myindex" yet you
 can use the following commands to add it:

    $setting = [
        'analysis' => [
            'analyzer' => [
                'ngram_analyzer_with_filter' => [
                    'tokenizer' => 'ngram_tokenizer',
                    'filter' => 'lowercase, snowball'
                ],
            ],
            'tokenizer' => [
                'ngram_tokenizer' => [
                    'type' => 'nGram',
                    'min_gram' => 3,
                    'max_gram' => 10,
                    'token_chars' => ['letter', 'digit', 'whitespace',
 'punctuation', 'symbol']
                ],
            ],
        ]
   ];
   $elasticQuery->createCommand()->updateAnalyzers('myindex', $setting);



    [$index] (string) 
    [$setting] (string|array) 
    [$options] (array) URL options


*yii/elasticsearch/Command::openIndex*			public
>
 openIndex($index)
<
return (mixed) 

    [$index] () 


*yii/elasticsearch/Command::closeIndex*			public
>
 closeIndex($index)
<
return (mixed) 

    [$index] () 


*yii/elasticsearch/Command::scroll*			public
>
 scroll($options='[]')
<
return (mixed) 

    [$options] (array) 


*yii/elasticsearch/Command::clearScroll*			public
>
 clearScroll($options='[]')
<
return (mixed) 

    [$options] (array) 


*yii/elasticsearch/Command::getIndexStatus*		public
>
 getIndexStatus($index='\'_all\'')
<
return (mixed) 

    [$index] () 


*yii/elasticsearch/Command::clearIndexCache*		public
>
 clearIndexCache($index)
<
return (mixed) 

    [$index] () 


*yii/elasticsearch/Command::flushIndex*			public
>
 flushIndex($index='\'_all\'')
<
return (mixed) 

    [$index] () 


*yii/elasticsearch/Command::refreshIndex*			public
>
 refreshIndex($index)
<
return (mixed) 

    [$index] () 


*yii/elasticsearch/Command::setMapping*			public
>
 setMapping($index, $type, $mapping, $options='[]')
<
return (mixed) 

    [$index] (string) 
    [$type] (string) 
    [$mapping] (string|array) 
    [$options] (array) 


*yii/elasticsearch/Command::getMapping*			public
>
 getMapping($index=''_all'', $type='null')
<
return (mixed) 

    [$index] (string) 
    [$type] (string) 


*yii/elasticsearch/Command::deleteMapping*		public
>
 deleteMapping($index, $type)
<
return (mixed) 

    [$index] () 
    [$type] () 


*yii/elasticsearch/Command::createTemplate*		public
>
 createTemplate($name, $pattern, $settings, $mappings, $order=0)
<
return (mixed) 

    [$name] () 
    [$pattern] () 
    [$settings] () 
    [$mappings] () 
    [$order] (int) 


*yii/elasticsearch/Command::deleteTemplate*		public
>
 deleteTemplate($name)
<
return (mixed) 

    [$name] () 


*yii/elasticsearch/Command::getTemplate*			public
>
 getTemplate($name)
<
return (mixed) 

    [$name] () 



 vim:tw=78:ts=8:ft=help:norl:
