
*yii/rbac/BaseManager*   >> |yii/base/Component|
======================

SUBCLASSES
------------------------------------------------------------------------------

|yii/rbac/PhpManager|
|yii/rbac/DbManager|
|yii/mongodb/rbac/MongoDbManager|

DESCRIPTION
------------------------------------------------------------------------------

 For more details and usage information on DbManager, see the [guide article
 on security authorization](guide:security-authorization).


PROPERTY DETAILS
------------------------------------------------------------------------------


$defaultRoles				*yii/rbac/BaseManager::$defaultRoles*

 (array) A list of role names that are assigned to every user automatically
 without calling 'assign()'. Note that these roles are applied to users,
 regardless of their state of authentication.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/rbac/ManagerInterface::getRolesByUser|
 |yii/rbac/ManagerInterface::getChildRoles|
 |yii/rbac/ManagerInterface::getPermissionsByRole|
 |yii/rbac/ManagerInterface::getPermissionsByUser|
 |yii/rbac/ManagerInterface::getRule|
 |yii/rbac/ManagerInterface::getRules|
 |yii/rbac/ManagerInterface::canAddChild|
 |yii/rbac/ManagerInterface::addChild|
 |yii/rbac/ManagerInterface::removeChild|
 |yii/rbac/ManagerInterface::removeChildren|
 |yii/rbac/ManagerInterface::hasChild|
 |yii/rbac/ManagerInterface::getChildren|
 |yii/rbac/ManagerInterface::assign|
 |yii/rbac/ManagerInterface::revoke|
 |yii/rbac/ManagerInterface::revokeAll|
 |yii/rbac/ManagerInterface::getAssignment|
 |yii/rbac/ManagerInterface::getAssignments|
 |yii/rbac/ManagerInterface::getUserIdsByRole|
 |yii/rbac/ManagerInterface::removeAll|
 |yii/rbac/ManagerInterface::removeAllPermissions|
 |yii/rbac/ManagerInterface::removeAllRoles|
 |yii/rbac/ManagerInterface::removeAllRules|
 |yii/rbac/ManagerInterface::removeAllAssignments|


*yii/rbac/BaseManager::getItem*				protected
>
 getItem($name)
<
return (\yii\rbac\Item) The auth item corresponding to the specified name. Null is
returned if no such item.

 Returns the named auth item.

    [$name] (string) The auth item name.


*yii/rbac/BaseManager::getItems*				protected
>
 getItems($type)
<
return (\yii\rbac\Item[]) The auth items of the specified type.

 Returns the items of the specified type.

    [$type] (int) The auth item type (either 'Item::TYPE_ROLE' or
    'Item::TYPE_PERMISSION'


*yii/rbac/BaseManager::addItem*				protected
>
 addItem($item)
<
return (bool) Whether the auth item is successfully added to the system

 Adds an auth item to the RBAC system.

    [$item] (\yii\rbac\Item) The item to add


*yii/rbac/BaseManager::addRule*				protected
>
 addRule($rule)
<
return (bool) Whether the rule is successfully added to the system

 Adds a rule to the RBAC system.

    [$rule] (\yii\rbac\Rule) The rule to add


*yii/rbac/BaseManager::removeItem*			protected
>
 removeItem($item)
<
return (bool) Whether the role or permission is successfully removed

 Removes an auth item from the RBAC system.

    [$item] (\yii\rbac\Item) The item to remove


*yii/rbac/BaseManager::removeRule*			protected
>
 removeRule($rule)
<
return (bool) Whether the rule is successfully removed

 Removes a rule from the RBAC system.

    [$rule] (\yii\rbac\Rule) The rule to remove


*yii/rbac/BaseManager::updateItem*			protected
>
 updateItem($name, $item)
<
return (bool) Whether the auth item is successfully updated

 Updates an auth item in the RBAC system.

    [$name] (string) The name of the item being updated
    [$item] (\yii\rbac\Item) The updated item


*yii/rbac/BaseManager::updateRule*			protected
>
 updateRule($name, $rule)
<
return (bool) Whether the rule is successfully updated

 Updates a rule to the RBAC system.

    [$name] (string) The name of the rule being updated
    [$rule] (\yii\rbac\Rule) The updated rule


*yii/rbac/BaseManager::createRole*			public
>
 createRole($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/BaseManager::createPermission*			public
>
 createPermission($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/BaseManager::add*				public
>
 add($object)
<
return (void)

 {@inheritdoc}

    [$object] () 


*yii/rbac/BaseManager::remove*				public
>
 remove($object)
<
return (void)

 {@inheritdoc}

    [$object] () 


*yii/rbac/BaseManager::update*				public
>
 update($name, $object)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$object] () 


*yii/rbac/BaseManager::getRole*				public
>
 getRole($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/BaseManager::getPermission*			public
>
 getPermission($name)
<
return (void)

 {@inheritdoc}

    [$name] () 


*yii/rbac/BaseManager::getRoles*				public
>
 getRoles()
<
return (void)

 {@inheritdoc}


*yii/rbac/BaseManager::setDefaultRoles*			public
>
 setDefaultRoles($roles)
<
return (void)

 Set default roles

    [$roles] (string[]|\Closure) Either array of roles or a callable returning
    it


*yii/rbac/BaseManager::getDefaultRoles*			public
>
 getDefaultRoles()
<
return (string[]) Default roles

 Get default roles


*yii/rbac/BaseManager::getDefaultRoleInstances*		public
>
 getDefaultRoleInstances()
<
return (\yii\rbac\Role[]) Default roles. The array is indexed by the role names

 Returns defaultRoles as array of Role objects.


*yii/rbac/BaseManager::getPermissions*			public
>
 getPermissions()
<
return (void)

 {@inheritdoc}


*yii/rbac/BaseManager::executeRule*			protected
>
 executeRule($user, $item, $params)
<
return (bool) The return value of 'Rule::execute()'. If the auth item does not
specify a rule, true will be returned.

 Executes the rule associated with the specified auth item.

 If the item does not specify a rule, this method will return true. Otherwise,
 it will return the value of 'Rule::execute()'.

    [$user] (string|int) The user ID. This should be either an integer or a
    string representing the unique identifier of a user. See
    '\yii\web\User::id'.
    [$item] (\yii\rbac\Item) The auth item that needs to execute its rule
    [$params] (array) Parameters passed to
    'CheckAccessInterface::checkAccess()' and will be passed to the rule


*yii/rbac/BaseManager::hasNoAssignments*			protected
>
 hasNoAssignments($assignments)
<
return (bool) Whether array of $assignments is empty and 'defaultRoles' property is
empty as well

 Checks whether array of $assignments is empty and 'defaultRoles' property is
 empty as well.

    [$assignments] (\yii\rbac\Assignment[]) Array of user's assignments



 vim:tw=78:ts=8:ft=help:norl:
