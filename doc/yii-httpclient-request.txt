
*yii/httpclient/Request*   >> |yii/httpclient/Message|
========================



METHOD DETAILS
------------------------------------------------------------------------------


*yii/httpclient/Request::className*			public

 See |yii/base/BaseObject::className|


*yii/httpclient/Request::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/httpclient/Request::init*				public

 See |yii/base/BaseObject::init|


*yii/httpclient/Request::__get*				public

 See |yii/base/Component::__get|


*yii/httpclient/Request::__set*				public

 See |yii/base/Component::__set|


*yii/httpclient/Request::__isset*				public

 See |yii/base/Component::__isset|


*yii/httpclient/Request::__unset*				public

 See |yii/base/Component::__unset|


*yii/httpclient/Request::__call*				public

 See |yii/base/Component::__call|


*yii/httpclient/Request::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/httpclient/Request::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/httpclient/Request::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/httpclient/Request::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/httpclient/Request::__clone*				public

 See |yii/base/Component::__clone|


*yii/httpclient/Request::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/httpclient/Request::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/httpclient/Request::on*				public

 See |yii/base/Component::on|


*yii/httpclient/Request::off*				public

 See |yii/base/Component::off|


*yii/httpclient/Request::trigger*				public

 See |yii/base/Component::trigger|


*yii/httpclient/Request::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/httpclient/Request::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/httpclient/Request::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/httpclient/Request::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/httpclient/Request::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/httpclient/Request::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/httpclient/Request::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/httpclient/Request::setHeaders*			public

 See |yii/httpclient/Message::setHeaders|


*yii/httpclient/Request::getHeaders*			public

 See |yii/httpclient/Message::getHeaders|


*yii/httpclient/Request::addHeaders*			public

 See |yii/httpclient/Message::addHeaders|


*yii/httpclient/Request::hasHeaders*			public

 See |yii/httpclient/Message::hasHeaders|


*yii/httpclient/Request::setCookies*			public

 See |yii/httpclient/Message::setCookies|


*yii/httpclient/Request::getCookies*			public

 See |yii/httpclient/Message::getCookies|


*yii/httpclient/Request::addCookies*			public

 See |yii/httpclient/Message::addCookies|


*yii/httpclient/Request::hasCookies*			public

 See |yii/httpclient/Message::hasCookies|


*yii/httpclient/Request::setContent*			public

 See |yii/httpclient/Message::setContent|


*yii/httpclient/Request::getContent*			public

 See |yii/httpclient/Message::getContent|


*yii/httpclient/Request::setData*				public
>
 setData($data)
<
return (void)

 {@inheritdoc}

    [$data] () 


*yii/httpclient/Request::getData*				public

 See |yii/httpclient/Message::getData|


*yii/httpclient/Request::addData*				public
>
 addData($data)
<
return (void)

 {@inheritdoc}

    [$data] () 


*yii/httpclient/Request::setFormat*			public

 See |yii/httpclient/Message::setFormat|


*yii/httpclient/Request::getFormat*			public

 See |yii/httpclient/Message::getFormat|


*yii/httpclient/Request::defaultFormat*			protected

 See |yii/httpclient/Message::defaultFormat|


*yii/httpclient/Request::composeHeaderLines*		public
>
 composeHeaderLines()
<
return (void)

 {@inheritdoc}


*yii/httpclient/Request::toString*			public
>
 toString()
<
return (void)

 {@inheritdoc}


*yii/httpclient/Request::__toString*			public

 See |yii/httpclient/Message::__toString|


*yii/httpclient/Request::setUrl*				public
>
 setUrl($url)
<
return ($this) Self reference.

 Sets target URL.

    [$url] (string|array) Use a string to represent a URL (e.g.
    'http://some-domain.com', 'item/list'), or an array to represent a URL
    with query parameters (e.g. '['item/list', 'param1' => 'value1']').


*yii/httpclient/Request::getUrl*				public
>
 getUrl()
<
return (string|array) Target URL or URL parameters

 Returns target URL.


*yii/httpclient/Request::setFullUrl*			public
>
 setFullUrl($fullUrl)
<
return (void)

 Sets full target URL.

 This method can be use during request formatting and preparation. Do not use
 it for the target URL specification, use 'setUrl()' instead.

    [$fullUrl] (string) Full target URL.


*yii/httpclient/Request::getFullUrl*			public
>
 getFullUrl()
<
return (string) Full target URL.

 Returns full target URL, including 'Client::baseUrl' as a string.


*yii/httpclient/Request::setMethod*			public
>
 setMethod($method)
<
return ($this) Self reference.

    [$method] (string) Request method


*yii/httpclient/Request::getMethod*			public
>
 getMethod()
<
return (string) Request method



*yii/httpclient/Request::setOptions*			public
>
 setOptions($options)
<
return ($this) Self reference.

 Following options are supported: 
   - timeout: int, the maximum number of seconds to allow request to be
   executed.


   - proxy: string, URI specifying address of proxy server. (e.g.
   tcp://proxy.example.com:5100). 
   - userAgent: string, the contents of the "User-Agent: " header to be
   used in a HTTP request. 
   - followLocation: bool, whether to follow any "Location: " header
   that the server sends as part of the HTTP header. 
   - maxRedirects: int, the max number of redirects to follow. 
   - protocolVersion: float|string, HTTP protocol version. 
   - sslVerifyPeer: bool, whether verification of the peer's
   certificate should be performed. 
   - sslCafile: string, location of Certificate Authority file on local
   filesystem which should be used with   the 'sslVerifyPeer' option to
 authenticate the identity of the remote peer. 
   - sslCapath: string, a directory that holds multiple CA
   certificates.

 You may set options using keys, which are specific to particular transport,
 like '[CURLOPT_VERBOSE => true]' in case there is a necessity for it.

    [$options] (array) Request options.


*yii/httpclient/Request::getOptions*			public
>
 getOptions()
<
return (array) Request options.



*yii/httpclient/Request::addOptions*			public
>
 addOptions($options)
<
return ($this) Self reference.

 Adds more options to already defined ones.

 Please refer to 'setOptions()' on how to specify options.

    [$options] (array) Additional options


*yii/httpclient/Request::addContent*			public
>
 addContent($name, $content, $options='[]')
<
return ($this) Self reference.

 Adds a content part for multi-part content request.

    [$name] (string) Part (form input) name.
    [$content] (string) Content.
    [$options] (array) Content part options, valid options are:  
      - contentType - string, part content type  
      - fileName - string, name of the uploading file  
      - mimeType - string, part content type in case of file uploading


*yii/httpclient/Request::addFile*				public
>
 addFile($name, $fileName, $options='[]')
<
return ($this) 

 Adds a file for upload as multi-part content.

    [$name] (string) Part (form input) name
    [$fileName] (string) Full name of the source file.
    [$options] (array) Content part options, valid options are:  
      - fileName - string, base name of the uploading file, if not set it
      base name of the source file will be used.  
      - mimeType - string, file mime type, if not set it will be determine
      automatically from source file.


*yii/httpclient/Request::addFileContent*			public
>
 addFileContent($name, $content, $options='[]')
<
return ($this) 

 Adds a string as a file upload.

    [$name] (string) Part (form input) name
    [$content] (string) File content.
    [$options] (array) Content part options, valid options are:  
      - fileName - string, base name of the uploading file.  
      - mimeType - string, file mime type, if not set it
      'application/octet-stream' will be used.


*yii/httpclient/Request::prepare*				public
>
 prepare()
<
return ($this) Self reference.

 Prepares this request instance for sending.

 This method should be invoked by transport before sending a request. Do not
 call this method unless you know what you are doing.


*yii/httpclient/Request::send*				public
>
 send()
<
return (\yii\httpclient\Response) Response instance.

 Sends this request.


*yii/httpclient/Request::beforeSend*			public
>
 beforeSend()
<
return (void)

 This method is invoked right before this request is sent.

 The method will invoke 'Client::beforeSend()' and trigger the
 'EVENT_BEFORE_SEND' event.


*yii/httpclient/Request::afterSend*			public
>
 afterSend($response)
<
return (void)

 This method is invoked right after this request is sent.

 The method will invoke 'Client::afterSend()' and trigger the
 'EVENT_AFTER_SEND' event.

    [$response] (\yii\httpclient\Response) Received response instance.



 vim:tw=78:ts=8:ft=help:norl:
