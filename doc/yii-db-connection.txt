
*yii/db/Connection*   >> |yii/base/Component|
===================

SUBCLASSES
------------------------------------------------------------------------------

|yii/sphinx/Connection|

DESCRIPTION
------------------------------------------------------------------------------

 Connection works together with 'Command', 'DataReader' and 'Transaction' to
 provide data access to various DBMS in a common set of APIs. They are a thin
 wrapper of the [PDO PHP extension](http://php.net/manual/en/book.pdo.php).

 Connection supports database replication and read-write splitting. In
 particular, a Connection component can be configured with multiple 'masters'
 and 'slaves'. It will do load balancing and failover by choosing appropriate
 servers. It will also automatically direct read operations to the slaves and
 write operations to the masters.

 To establish a DB connection, set 'dsn', 'username' and 'password', and then
 call 'open()' to connect to the database server. The current state of the
 connection can be checked using '$isActive'.

 The following example shows how to create a Connection instance and establish
 the DB connection:

   $connection = new \yii\db\Connection([
       'dsn' => $dsn,
       'username' => $username,
       'password' => $password,
   ]);
   $connection->open();

 After the DB connection is established, one can execute SQL statements like
 the following:

   $command = $connection->createCommand('SELECT * FROM post');
   $posts = $command->queryAll();
   $command = $connection->createCommand('UPDATE post SET status=1');
   $command->execute();

 One can also do prepared SQL execution and bind parameters to the prepared
 SQL. When the parameters are coming from user input, you should use this
 approach to prevent SQL injection attacks. The following is an example:

   $command = $connection->createCommand('SELECT * FROM post WHERE id=:id');
   $command->bindValue(':id', $_GET['id']);
   $post = $command->query();

 For more information about how to perform various DB queries, please refer to
 'Command'.

 If the underlying DBMS supports transactions, you can perform transactional
 SQL queries like the following:

   $transaction = $connection->beginTransaction();
   try {
       $connection->createCommand($sql1)->execute();
       $connection->createCommand($sql2)->execute();
       // ... executing other SQL statements ...
       $transaction->commit();
   } catch (Exception $e) {
       $transaction->rollBack();
   }

 You also can use shortcut for the above like the following:

   $connection->transaction(function () {
       $order = new Order($customer);
       $order->save();
       $order->addItems($items);
   });

 If needed you can pass transaction isolation level as a second parameter:

   $connection->transaction(function (Connection $db) {
       //return $db->...
   }, Transaction::READ_UNCOMMITTED);

 Connection is often used as an application component and configured in the
 application configuration like the following:

   'components' => [
       'db' => [
           'class' => '\yii\db\Connection',
           'dsn' => 'mysql:host=127.0.0.1;dbname=demo',
           'username' => 'root',
           'password' => '',
           'charset' => 'utf8',
       ],
   ],




PROPERTY DETAILS
------------------------------------------------------------------------------


$dsn					*yii/db/Connection::$dsn*

 (string) The Data Source Name, or DSN, contains the information required to
 connect to the database. Please refer to the [PHP
 manual](http://php.net/manual/en/pdo.construct.php) on the format of the DSN
 string.

 For [SQLite](http://php.net/manual/en/ref.pdo-sqlite.connection.php) you may
 use a [path alias](guide:concept-aliases) for specifying the database path,
 e.g. 'sqlite:@app/data/db.sql'.

$username				*yii/db/Connection::$username*

 (string) The username for establishing DB connection. Defaults to 'null'
 meaning no username to use.

$password				*yii/db/Connection::$password*

 (string) The password for establishing DB connection. Defaults to 'null'
 meaning no password to use.

$attributes				*yii/db/Connection::$attributes*

 (array) PDO attributes (name => value) that should be set when calling
 'open()' to establish a DB connection. Please refer to the [PHP
 manual](http://php.net/manual/en/pdo.setattribute.php) for details about
 available attributes.

$pdo					*yii/db/Connection::$pdo*

 (\PDO) The PHP PDO instance associated with this DB connection. This property
 is mainly managed by 'open()' and 'close()' methods. When a DB connection is
 active, this property will represent a PDO instance; otherwise, it will be
 null.

$enableSchemaCache			*yii/db/Connection::$enableSchemaCache*

 (bool) Whether to enable schema caching. Note that in order to enable truly
 schema caching, a valid cache component as specified by 'schemaCache' must be
 enabled and 'enableSchemaCache' must be set true.

$schemaCacheDuration			*yii/db/Connection::$schemaCacheDuration*

 (int) Number of seconds that table metadata can remain valid in cache. Use 0
 to indicate that the cached data will never expire.

$schemaCacheExclude			*yii/db/Connection::$schemaCacheExclude*

 (array) List of tables whose metadata should NOT be cached. Defaults to empty
 array. The table names may contain schema prefix, if any. Do not quote the
 table names.

$schemaCache				*yii/db/Connection::$schemaCache*

 (\yii\caching\CacheInterface|string) The cache object or the ID of the cache
 application component that is used to cache the table metadata.

$enableQueryCache			*yii/db/Connection::$enableQueryCache*

 (bool) Whether to enable query caching. Note that in order to enable query
 caching, a valid cache component as specified by 'queryCache' must be enabled
 and 'enableQueryCache' must be set true. Also, only the results of the
 queries enclosed within 'cache()' will be cached.

$queryCacheDuration			*yii/db/Connection::$queryCacheDuration*

 (int) The default number of seconds that query results can remain valid in
 cache. Defaults to 3600, meaning 3600 seconds, or one hour. Use 0 to indicate
 that the cached data will never expire. The value of this property will be
 used when 'cache()' is called without a cache duration.

$queryCache				*yii/db/Connection::$queryCache*

 (\yii\caching\CacheInterface|string) The cache object or the ID of the cache
 application component that is used for query caching.

$charset				*yii/db/Connection::$charset*

 (string) The charset used for database connection. The property is only used
 for MySQL, PostgreSQL and CUBRID databases. Defaults to null, meaning using
 default charset as configured by the database.

 For Oracle Database, the charset must be specified in the 'dsn', for example
 for UTF-8 by appending ';charset=UTF-8' to the DSN string.

 The same applies for if you're using GBK or BIG5 charset with MySQL, then
 it's highly recommended to specify charset via 'dsn' like
 ''mysql:dbname=mydatabase;host=127.0.0.1;charset=GBK;''.

$emulatePrepare				*yii/db/Connection::$emulatePrepare*

 (bool) Whether to turn on prepare emulation. Defaults to false, meaning PDO
 will use the native prepare support if available. For some databases (such as
 MySQL), this may need to be set true so that PDO can emulate the prepare
 support to bypass the buggy native prepare support. The default value is
 null, which means the PDO ATTR_EMULATE_PREPARES value will not be changed.

$tablePrefix				*yii/db/Connection::$tablePrefix*

 (string) The common prefix or suffix for table names. If a table name is
 given as '{{%TableName}}', then the percentage character '%' will be replaced
 with this property value. For example, '{{%post}}' becomes '{{tbl_post}}'.

$schemaMap				*yii/db/Connection::$schemaMap*

 (array) Mapping between PDO driver names and 'Schema' classes. The keys of
 the array are PDO driver names while the values are either the corresponding
 schema class names or configurations. Please refer to 'Yii::createObject()'
 for details on how to specify a configuration.

 This property is mainly used by 'getSchema()' when fetching the database
 schema information. You normally do not need to set this property unless you
 want to use your own 'Schema' class to support DBMS that is not supported by
 Yii.

$pdoClass				*yii/db/Connection::$pdoClass*

 (string) Custom PDO wrapper class. If not set, it will use 'PDO' or
 '\yii\db\mssql\PDO' when MSSQL is used.

$commandClass				*yii/db/Connection::$commandClass*

 (string) The class used to create new database 'Command' objects. If you want
 to extend the 'Command' class, you may configure this property to use your
 extended version of the class. Since version 2.0.14 '$commandMap' is used if
 this property is set to its default value.

$commandMap				*yii/db/Connection::$commandMap*

 (array) Mapping between PDO driver names and 'Command' classes. The keys of
 the array are PDO driver names while the values are either the corresponding
 command class names or configurations. Please refer to 'Yii::createObject()'
 for details on how to specify a configuration.

 This property is mainly used by 'createCommand()' to create new database
 'Command' objects. You normally do not need to set this property unless you
 want to use your own 'Command' class or support DBMS that is not supported by
 Yii.

$enableSavepoint			*yii/db/Connection::$enableSavepoint*

 (bool) Whether to enable [savepoint](http://en.wikipedia.org/wiki/Savepoint).
 Note that if the underlying DBMS does not support savepoint, setting this
 property to be true will have no effect.

$serverStatusCache			*yii/db/Connection::$serverStatusCache*

 (\yii\caching\CacheInterface|string|false) The cache object or the ID of the
 cache application component that is used to store the health status of the DB
 servers specified in 'masters' and 'slaves'. This is used only when
 read/write splitting is enabled or 'masters' is not empty. Set boolean
 'false' to disabled server status caching.

$serverRetryInterval			*yii/db/Connection::$serverRetryInterval*

 (int) The retry interval in seconds for dead servers listed in 'masters' and
 'slaves'. This is used together with 'serverStatusCache'.

$enableSlaves				*yii/db/Connection::$enableSlaves*

 (bool) Whether to enable read/write splitting by using 'slaves' to read data.
 Note that if 'slaves' is empty, read/write splitting will NOT be enabled no
 matter what value this property takes.

$slaves					*yii/db/Connection::$slaves*

 (array) List of slave connection configurations. Each configuration is used
 to create a slave DB connection. When 'enableSlaves' is true, one of these
 configurations will be chosen and used to create a DB connection for
 performing read queries only.

$slaveConfig				*yii/db/Connection::$slaveConfig*

 (array) The configuration that should be merged with every slave
 configuration listed in 'slaves'. For example,

   [
       'username' => 'slave',
       'password' => 'slave',
       'attributes' => [
           // use a smaller connection timeout
           PDO::ATTR_TIMEOUT => 10,
       ],
   ]



$masters				*yii/db/Connection::$masters*

 (array) List of master connection configurations. Each configuration is used
 to create a master DB connection. When 'open()' is called, one of these
 configurations will be chosen and used to create a DB connection which will
 be used by this object. Note that when this property is not empty, the
 connection setting (e.g. "dsn", "username") of this object will be ignored.

$masterConfig				*yii/db/Connection::$masterConfig*

 (array) The configuration that should be merged with every master
 configuration listed in 'masters'. For example,

   [
       'username' => 'master',
       'password' => 'master',
       'attributes' => [
           // use a smaller connection timeout
           PDO::ATTR_TIMEOUT => 10,
       ],
   ]



$shuffleMasters				*yii/db/Connection::$shuffleMasters*

 (bool) Whether to shuffle 'masters' before getting one.

$enableLogging				*yii/db/Connection::$enableLogging*

 (bool) Whether to enable logging of database queries. Defaults to true. You
 may want to disable this option in a production environment to gain
 performance if you do not need the information being logged.

$enableProfiling			*yii/db/Connection::$enableProfiling*

 (bool) Whether to enable profiling of opening database connection and
 database queries. Defaults to true. You may want to disable this option in a
 production environment to gain performance if you do not need the information
 being logged.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/db/Connection::__clone*				public
>
 __clone()
<
return (void)

 Reset the connection after cloning.


*yii/db/Connection::getIsActive*				public
>
 getIsActive()
<
return (bool) Whether the DB connection is established

 Returns a value indicating whether the DB connection is established.


*yii/db/Connection::cache*				public
>
 cache($callable, $duration=null, $dependency='null')
<
return (mixed) The return result of the callable

 Uses query cache for the queries performed with the callable.

 When query caching is enabled ('enableQueryCache' is true and 'queryCache'
 refers to a valid cache), queries performed within the callable will be
 cached and their results will be fetched from cache if available. For
 example,

   // The customer will be fetched from cache if available.
   // If not, the query will be made against DB and cached for use next time.
   $customer = $db->cache(function (Connection $db) {
       return $db->createCommand('SELECT * FROM customer WHERE
 id=1')->queryOne();
   });

 Note that query cache is only meaningful for queries that return results. For
 queries performed with 'Command::execute()', query cache will not be used.

    [$callable] (callable) A PHP callable that contains DB queries which will
    make use of query cache. The signature of the callable is 'function
    (Connection $db)'.
    [$duration] (int) The number of seconds that query results can remain
    valid in the cache. If this is not set, the value of 'queryCacheDuration'
    will be used instead. Use 0 to indicate that the cached data will never
    expire.
    [$dependency] (\yii\caching\Dependency) The cache dependency associated
    with the cached query results.


*yii/db/Connection::noCache*				public
>
 noCache($callable)
<
return (mixed) The return result of the callable

 Disables query cache temporarily.

 Queries performed within the callable will not use query cache at all. For
 example,

   $db->cache(function (Connection $db) {

       // ... queries that use query cache ...

       return $db->noCache(function (Connection $db) {
           // this query will not use query cache
           return $db->createCommand('SELECT * FROM customer WHERE
 id=1')->queryOne();
       });
   });



    [$callable] (callable) A PHP callable that contains DB queries which
    should not use query cache. The signature of the callable is 'function
    (Connection $db)'.


*yii/db/Connection::getQueryCacheInfo*			public
>
 getQueryCacheInfo($duration, $dependency)
<
return (array) The current query cache information, or null if query cache is not
enabled.

 Returns the current query cache information.

 This method is used internally by 'Command'.

    [$duration] (int) The preferred caching duration. If null, it will be
    ignored.
    [$dependency] (\yii\caching\Dependency) The preferred caching dependency.
    If null, it will be ignored.


*yii/db/Connection::open*					public
>
 open()
<
return (void)

 Establishes a DB connection.

 It does nothing if a DB connection has already been established.


*yii/db/Connection::close*				public
>
 close()
<
return (void)

 Closes the currently active DB connection.

 It does nothing if the connection is already closed.


*yii/db/Connection::createPdoInstance*			protected
>
 createPdoInstance()
<
return (\PDO) The pdo instance

 Creates the PDO instance.

 This method is called by 'open' to establish a DB connection. The default
 implementation will create a PHP PDO instance. You may override this method
 if the default PDO needs to be adapted for certain DBMS.


*yii/db/Connection::initConnection*			protected
>
 initConnection()
<
return (void)

 Initializes the DB connection.

 This method is invoked right after the DB connection is established. The
 default implementation turns on 'PDO::ATTR_EMULATE_PREPARES' if
 'emulatePrepare' is true, and sets the database 'charset' if it is not empty.
 It then triggers an 'EVENT_AFTER_OPEN' event.


*yii/db/Connection::createCommand*			public
>
 createCommand($sql='null', $params='[]')
<
return (\yii\db\Command) The DB command

 Creates a command for execution.

    [$sql] (string) The SQL statement to be executed
    [$params] (array) The parameters to be bound to the SQL statement


*yii/db/Connection::getTransaction*			public
>
 getTransaction()
<
return (\yii\db\Transaction|null) The currently active transaction. Null if no active
transaction.

 Returns the currently active transaction.


*yii/db/Connection::beginTransaction*			public
>
 beginTransaction($isolationLevel='null')
<
return (\yii\db\Transaction) The transaction initiated

 Starts a transaction.

    [$isolationLevel] (string|null) The isolation level to use for this
    transaction. See 'Transaction::begin()' for details.


*yii/db/Connection::transaction*				public
>
 transaction($callback, $isolationLevel='null')
<
return (mixed) Result of callback function

 Executes callback provided in a transaction.

    [$callback] (callable) A valid PHP callback that performs the job. Accepts
    connection instance as parameter.
    [$isolationLevel] (string|null) The isolation level to use for this
    transaction. See 'Transaction::begin()' for details.


*yii/db/Connection::getSchema*				public
>
 getSchema()
<
return (\yii\db\Schema) The schema information for the database opened by this
connection.

 Returns the schema information for the database opened by this connection.


*yii/db/Connection::getQueryBuilder*			public
>
 getQueryBuilder()
<
return (\yii\db\QueryBuilder) The query builder for the current DB connection.

 Returns the query builder for the current DB connection.


*yii/db/Connection::setQueryBuilder*			public
>
 setQueryBuilder($value)
<
return (void)

 Can be used to set 'QueryBuilder' configuration via Connection configuration
 array.

    [$value] (array) The 'QueryBuilder' properties to be configured.


*yii/db/Connection::getTableSchema*			public
>
 getTableSchema($name, $refresh='false')
<
return (\yii\db\TableSchema) Table schema information. Null if the named table does
not exist.

 Obtains the schema information for the named table.

    [$name] (string) Table name.
    [$refresh] (bool) Whether to reload the table schema even if it is found
    in the cache.


*yii/db/Connection::getLastInsertID*			public
>
 getLastInsertID($sequenceName='''')
<
return (string) The row ID of the last row inserted, or the last value retrieved from
the sequence object

 Returns the ID of the last inserted row or sequence value.

    [$sequenceName] (string) Name of the sequence object (required by some
    DBMS)


*yii/db/Connection::quoteValue*				public
>
 quoteValue($value)
<
return (string) The properly quoted string

 Quotes a string value for use in a query.

 Note that if the parameter is not a string, it will be returned without
 change.

    [$value] (string) String to be quoted


*yii/db/Connection::quoteTableName*			public
>
 quoteTableName($name)
<
return (string) The properly quoted table name

 Quotes a table name for use in a query.

 If the table name contains schema prefix, the prefix will also be properly
 quoted. If the table name is already quoted or contains special characters
 including '(', ''' and '{{', then this method will do nothing.

    [$name] (string) Table name


*yii/db/Connection::quoteColumnName*			public
>
 quoteColumnName($name)
<
return (string) The properly quoted column name

 Quotes a column name for use in a query.

 If the column name contains prefix, the prefix will also be properly quoted.
 If the column name is already quoted or contains special characters including
 '(', ''' and '{{', then this method will do nothing.

    [$name] (string) Column name


*yii/db/Connection::quoteSql*				public
>
 quoteSql($sql)
<
return (string) The quoted SQL

 Processes a SQL statement by quoting table and column names that are enclosed
 within double brackets.

 Tokens enclosed within double curly brackets are treated as table names,
 while tokens enclosed within double square brackets are column names. They
 will be quoted accordingly. Also, the percentage character "%" at the
 beginning or ending of a table name will be replaced with 'tablePrefix'.

    [$sql] (string) The SQL to be quoted


*yii/db/Connection::getDriverName*			public
>
 getDriverName()
<
return (string) Name of the DB driver

 Returns the name of the DB driver. Based on the the current 'dsn', in case it
 was not set explicitly by an end user.


*yii/db/Connection::setDriverName*			public
>
 setDriverName($driverName)
<
return (void)

 Changes the current driver name.

    [$driverName] (string) Name of the DB driver


*yii/db/Connection::getServerVersion*			public
>
 getServerVersion()
<
return (string) Server version as a string.

 Returns a server version as a string comparable by '\version_compare()'.


*yii/db/Connection::getSlavePdo*				public
>
 getSlavePdo($fallbackToMaster='true')
<
return (\PDO) The PDO instance for the currently active slave connection. 'null' is
returned if no slave connection is available and '$fallbackToMaster' is false.

 Returns the PDO instance for the currently active slave connection.

 When 'enableSlaves' is true, one of the slaves will be used for read queries,
 and its PDO instance will be returned by this method.

    [$fallbackToMaster] (bool) Whether to return a master PDO in case none of
    the slave connections is available.


*yii/db/Connection::getMasterPdo*				public
>
 getMasterPdo()
<
return (\PDO) The PDO instance for the currently active master connection.

 Returns the PDO instance for the currently active master connection.

 This method will open the master DB connection and then return 'pdo'.


*yii/db/Connection::getSlave*				public
>
 getSlave($fallbackToMaster='true')
<
return (\yii\db\Connection) The currently active slave connection. 'null' is returned
if there is no slave available and '$fallbackToMaster' is false.

 Returns the currently active slave connection.

 If this method is called for the first time, it will try to open a slave
 connection when 'enableSlaves' is true.

    [$fallbackToMaster] (bool) Whether to return a master connection in case
    there is no slave connection available.


*yii/db/Connection::getMaster*				public
>
 getMaster()
<
return (\yii\db\Connection) The currently active master connection. 'null' is
returned if there is no master available.

 Returns the currently active master connection.

 If this method is called for the first time, it will try to open a master
 connection.


*yii/db/Connection::useMaster*				public
>
 useMaster($callback)
<
return (mixed) The return value of the callback

 Executes the provided callback by using the master connection.

 This method is provided so that you can temporarily force using the master
 connection to perform DB operations even if they are read queries. For
 example,

   $result = $db->useMaster(function ($db) {
       return $db->createCommand('SELECT * FROM user LIMIT 1')->queryOne();
   });



    [$callback] (callable) A PHP callable to be executed by this method. Its
    signature is 'function (Connection $db)'. Its return value will be
    returned by this method.


*yii/db/Connection::openFromPool*				protected
>
 openFromPool($pool, $sharedConfig)
<
return (\yii\db\Connection) The opened DB connection, or 'null' if no server is
available

 Opens the connection to a server in the pool.

 This method implements the load balancing among the given list of the
 servers. Connections will be tried in random order.

    [$pool] (array) The list of connection configurations in the server pool
    [$sharedConfig] (array) The configuration common to those given in
    '$pool'.


*yii/db/Connection::openFromPoolSequentially*		protected
>
 openFromPoolSequentially($pool, $sharedConfig)
<
return (\yii\db\Connection) The opened DB connection, or 'null' if no server is
available

 Opens the connection to a server in the pool.

 This method implements the load balancing among the given list of the
 servers. Connections will be tried in sequential order.

    [$pool] (array) The list of connection configurations in the server pool
    [$sharedConfig] (array) The configuration common to those given in
    '$pool'.


*yii/db/Connection::__sleep*				public
>
 __sleep()
<
return (array) 

 Close the connection before serializing.



 vim:tw=78:ts=8:ft=help:norl:
