
*yii\db\Connection*   >> yii\base\Component
===================

 Connection works together with [[Command]], [[DataReader]] and
 [[Transaction]] to provide data access to various DBMS in a common set of
 APIs. They are a thin wrapper of the [[PDO PHP
 extension]](http://www.php.net/manual/en/ref.pdo.php).

 To establish a DB connection, set [[dsn]], [[username]] and [[password]], and
 then call [[open()]] to be true.

 The following example shows how to create a Connection instance and establish
 the DB connection:

   $connection = new \yii\db\Connection([
       'dsn' => $dsn,
       'username' => $username,
       'password' => $password,
   ]);
   $connection->open();

 After the DB connection is established, one can execute SQL statements like
 the following:

   $command = $connection->createCommand('SELECT * FROM post');
   $posts = $command->queryAll();
   $command = $connection->createCommand('UPDATE post SET status=1');
   $command->execute();

 One can also do prepared SQL execution and bind parameters to the prepared
 SQL. When the parameters are coming from user input, you should use this
 approach to prevent SQL injection attacks. The following is an example:

   $command = $connection->createCommand('SELECT * FROM post WHERE id=:id');
   $command->bindValue(':id', $_GET['id']);
   $post = $command->query();

 For more information about how to perform various DB queries, please refer to
 [[Command]].

 If the underlying DBMS supports transactions, you can perform transactional
 SQL queries like the following:

   $transaction = $connection->beginTransaction();
   try {
       $connection->createCommand($sql1)->execute();
       $connection->createCommand($sql2)->execute();
       // ... executing other SQL statements ...
       $transaction->commit();
   } catch (Exception $e) {
       $transaction->rollBack();
   }

 Connection is often used as an application component and configured in the
 application configuration like the following:

   [
    'components' => [
   	 'db' => [
   		 'class' => '\yii\db\Connection',
   		 'dsn' => 'mysql:host=127.0.0.1;dbname=demo',
   		 'username' => 'root',
   		 'password' => '',
   		 'charset' => 'utf8',
   	 ],
    ],
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

<$dsn>					*yii\db\Connection::$dsn*
 (string) The Data Source Name, or DSN, contains the information required to
 connect to the database. Please refer to the [PHP
 manual](http://www.php.net/manual/en/function.PDO-construct.php) on the
 format of the DSN string.

<$username>				*yii\db\Connection::$username*
 (string) The username for establishing DB connection. Defaults to 'null'
 meaning no username to use.

<$password>				*yii\db\Connection::$password*
 (string) The password for establishing DB connection. Defaults to 'null'
 meaning no password to use.

<$attributes>				*yii\db\Connection::$attributes*
 (array) PDO attributes (name => value) that should be set when calling
 [[open()]] to establish a DB connection. Please refer to the [PHP
 manual](http://www.php.net/manual/en/function.PDO-setAttribute.php) for
 details about available attributes.

<$pdo>					*yii\db\Connection::$pdo*
 (\PDO) The PHP PDO instance associated with this DB connection. This property
 is mainly managed by [[open()]] and [[close()]] methods. When a DB connection
 is active, this property will represent a PDO instance; otherwise, it will be
 null.

<$enableSchemaCache>			*yii\db\Connection::$enableSchemaCache*
 (boolean) Whether to enable schema caching. Note that in order to enable
 truly schema caching, a valid cache component as specified by [[schemaCache]]
 must be enabled and [[enableSchemaCache]] must be set true.

<$schemaCacheDuration>			*yii\db\Connection::$schemaCacheDuration*
 (integer) Number of seconds that table metadata can remain valid in cache.
 Use 0 to indicate that the cached data will never expire.

<$schemaCacheExclude>			*yii\db\Connection::$schemaCacheExclude*
 (array) List of tables whose metadata should NOT be cached. Defaults to empty
 array. The table names may contain schema prefix, if any. Do not quote the
 table names.

<$schemaCache>				*yii\db\Connection::$schemaCache*
 (\yii\caching\Cache|string) The cache object or the ID of the cache
 application component that is used to cache the table metadata.

<$enableQueryCache>			*yii\db\Connection::$enableQueryCache*
 (boolean) Whether to enable query caching. Note that in order to enable query
 caching, a valid cache component as specified by [[queryCache]] must be
 enabled and [[enableQueryCache]] must be set true.

 Methods [[beginCache()]] and [[endCache()]] can be used as shortcuts to turn
 on and off query caching on the fly.

<$queryCacheDuration>			*yii\db\Connection::$queryCacheDuration*
 (integer) Number of seconds that query results can remain valid in cache.
 Defaults to 3600, meaning 3600 seconds, or one hour. Use 0 to indicate that
 the cached data will never expire.

<$queryCacheDependency> 		*yii\db\Connection::$queryCacheDependency*
 (\yii\caching\Dependency) The dependency that will be used when saving query
 results into cache. Defaults to null, meaning no dependency.

<$queryCache>				*yii\db\Connection::$queryCache*
 (\yii\caching\Cache|string) The cache object or the ID of the cache
 application component that is used for query caching.

<$charset>				*yii\db\Connection::$charset*
 (string) The charset used for database connection. The property is only used
 for MySQL, PostgreSQL and CUBRID databases. Defaults to null, meaning using
 default charset as specified by the database.

 Note that if you're using GBK or BIG5 then it's highly recommended to specify
 charset via DSN like 'mysql:dbname=mydatabase;host=127.0.0.1;charset=GBK;'.

<$emulatePrepare>			*yii\db\Connection::$emulatePrepare*
 (boolean) Whether to turn on prepare emulation. Defaults to false, meaning
 PDO will use the native prepare support if available. For some databases
 (such as MySQL), this may need to be set true so that PDO can emulate the
 prepare support to bypass the buggy native prepare support. The default value
 is null, which means the PDO ATTR_EMULATE_PREPARES value will not be changed.

<$tablePrefix>				*yii\db\Connection::$tablePrefix*
 (string) The common prefix or suffix for table names. If a table name is
 given as '{{%TableName}}', then the percentage character '%' will be replaced
 with this property value. For example, '{{%post}}' becomes '{{tbl_post}}'.

<$schemaMap>				*yii\db\Connection::$schemaMap*
 (array) Mapping between PDO driver names and [[Schema]] classes. The keys of
 the array are PDO driver names while the values the corresponding schema
 class name or configuration. Please refer to [[Yii::createObject()]] for
 details on how to specify a configuration.

 This property is mainly used by [[getSchema()]] when fetching the database
 schema information. You normally do not need to set this property unless you
 want to use your own [[Schema]] class to support DBMS that is not supported
 by Yii.

<$pdoClass>				*yii\db\Connection::$pdoClass*
 (string) Custom PDO wrapper class. If not set, it will use "PDO" or
 "yii\db\mssql\PDO" when MSSQL is used.

<$enableSavepoint>			*yii\db\Connection::$enableSavepoint*
 (boolean) Whether to enable
 [savepoint](http://en.wikipedia.org/wiki/Savepoint). Note that if the
 underlying DBMS does not support savepoint, setting this property to be true
 will have no effect.

<$behaviors>				*yii\db\Connection::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

<$isActive>				*yii\db\Connection::$isActive*
 (boolean) Whether the DB connection is established

<$transaction>				*yii\db\Connection::$transaction*
 (\yii\db\Transaction) The currently active transaction. Null if no active
 transaction.

<$schema>				*yii\db\Connection::$schema*
 (\yii\db\Schema) The schema information for the database opened by this
 connection.

<$queryBuilder> 			*yii\db\Connection::$queryBuilder*
 (\yii\db\QueryBuilder) The query builder for the current DB connection.

<$lastInsertID> 			*yii\db\Connection::$lastInsertID*
 (string) The row ID of the last row inserted, or the last value retrieved
 from the sequence object

<$driverName>				*yii\db\Connection::$driverName*
 (string) Name of the DB driver



METHOD DETAILS
------------------------------------------------------------------------------

*yii\db\Connection::className*					 public
 See |yii\base\Object::className|


*yii\db\Connection::__construct*				 public
 See |yii\base\Object::__construct|


*yii\db\Connection::init*					 public
 See |yii\base\Object::init|


*yii\db\Connection::__get*					 public
 See |yii\base\Component::__get|


*yii\db\Connection::__set*					 public
 See |yii\base\Component::__set|


*yii\db\Connection::__isset*					 public
 See |yii\base\Component::__isset|


*yii\db\Connection::__unset*					 public
 See |yii\base\Component::__unset|


*yii\db\Connection::__call*					 public
 See |yii\base\Component::__call|


*yii\db\Connection::hasProperty*				 public
 See |yii\base\Component::hasProperty|


*yii\db\Connection::canGetProperty*				 public
 See |yii\base\Component::canGetProperty|


*yii\db\Connection::canSetProperty*				 public
 See |yii\base\Component::canSetProperty|


*yii\db\Connection::hasMethod*					 public
 See |yii\base\Component::hasMethod|


*yii\db\Connection::__clone*					 public
 See |yii\base\Component::__clone|


*yii\db\Connection::behaviors*					 public
 See |yii\base\Component::behaviors|


*yii\db\Connection::hasEventHandlers*				 public
 See |yii\base\Component::hasEventHandlers|


*yii\db\Connection::on* 					 public
 See |yii\base\Component::on|


*yii\db\Connection::off*					 public
 See |yii\base\Component::off|


*yii\db\Connection::trigger*					 public
 See |yii\base\Component::trigger|


*yii\db\Connection::getBehavior*				 public
 See |yii\base\Component::getBehavior|


*yii\db\Connection::getBehaviors*				 public
 See |yii\base\Component::getBehaviors|


*yii\db\Connection::attachBehavior*				 public
 See |yii\base\Component::attachBehavior|


*yii\db\Connection::attachBehaviors*				 public
 See |yii\base\Component::attachBehaviors|


*yii\db\Connection::detachBehavior*				 public
 See |yii\base\Component::detachBehavior|


*yii\db\Connection::detachBehaviors*				 public
 See |yii\base\Component::detachBehaviors|


*yii\db\Connection::ensureBehaviors*				 public
 See |yii\base\Component::ensureBehaviors|


*yii\db\Connection::getIsActive*				 public
>
 getIsActive()
<
(boolean) Whether the DB connection is established




*yii\db\Connection::beginCache* 				 public
>
 beginCache($duration=null, $dependency='null')
<
(void)

 This method is provided as a shortcut to setting two properties that are
 related with query caching: [[queryCacheDuration]] and
 [[queryCacheDependency]].
    [$duration] (integer) The number of seconds that query results may remain
    valid in cache. If not set, it will use the value of
    [[queryCacheDuration]]. See [[queryCacheDuration]] for more details.
    [$dependency] (\yii\caching\Dependency) The dependency for the cached
    query result. See [[queryCacheDependency]] for more details.


*yii\db\Connection::endCache*					 public
>
 endCache()
<
(void)




*yii\db\Connection::open*					 public
>
 open()
<
(void)

 It does nothing if a DB connection has already been established.


*yii\db\Connection::close*					 public
>
 close()
<
(void)

 It does nothing if the connection is already closed.


*yii\db\Connection::createPdoInstance*				 protected
>
 createPdoInstance()
<
(\PDO) The pdo instance

 This method is called by [[open]] to establish a DB connection. The default
 implementation will create a PHP PDO instance. You may override this method
 if the default PDO needs to be adapted for certain DBMS.


*yii\db\Connection::initConnection*				 protected
>
 initConnection()
<
(void)

 This method is invoked right after the DB connection is established. The
 default implementation turns on 'PDO::ATTR_EMULATE_PREPARES' if
 [[emulatePrepare]] is true, and sets the database [[charset]] if it is not
 empty. It then triggers an [[EVENT_AFTER_OPEN]] event.


*yii\db\Connection::createCommand*				 public
>
 createCommand($sql='null', $params='[]')
<
(\yii\db\Command) The DB command


    [$sql] (string) The SQL statement to be executed
    [$params] (array) The parameters to be bound to the SQL statement


*yii\db\Connection::getTransaction*				 public
>
 getTransaction()
<
(\yii\db\Transaction) The currently active transaction. Null if no active
transaction.




*yii\db\Connection::beginTransaction*				 public
>
 beginTransaction()
<
(\yii\db\Transaction) The transaction initiated




*yii\db\Connection::getSchema*					 public
>
 getSchema()
<
(\yii\db\Schema) The schema information for the database opened by this
connection.




*yii\db\Connection::getQueryBuilder*				 public
>
 getQueryBuilder()
<
(\yii\db\QueryBuilder) The query builder for the current DB connection.




*yii\db\Connection::getTableSchema*				 public
>
 getTableSchema($name, $refresh='false')
<
(\yii\db\TableSchema) Table schema information. Null if the named table does
not exist.


    [$name] (string) Table name.
    [$refresh] (boolean) Whether to reload the table schema even if it is
    found in the cache.


*yii\db\Connection::getLastInsertID*				 public
>
 getLastInsertID($sequenceName='''')
<
(string) The row ID of the last row inserted, or the last value retrieved from
the sequence object


    [$sequenceName] (string) Name of the sequence object (required by some
    DBMS)


*yii\db\Connection::quoteValue* 				 public
>
 quoteValue($str)
<
(string) The properly quoted string

 Note that if the parameter is not a string, it will be returned without
 change.
    [$str] (string) String to be quoted


*yii\db\Connection::quoteTableName*				 public
>
 quoteTableName($name)
<
(string) The properly quoted table name

 If the table name contains schema prefix, the prefix will also be properly
 quoted. If the table name is already quoted or contains special characters
 including '(', '[[' and '{{', then this method will do nothing.
    [$name] (string) Table name


*yii\db\Connection::quoteColumnName*				 public
>
 quoteColumnName($name)
<
(string) The properly quoted column name

 If the column name contains prefix, the prefix will also be properly quoted.
 If the column name is already quoted or contains special characters including
 '(', '[[' and '{{', then this method will do nothing.
    [$name] (string) Column name


*yii\db\Connection::quoteSql*					 public
>
 quoteSql($sql)
<
(string) The quoted SQL

 Tokens enclosed within double curly brackets are treated as table names,
 while tokens enclosed within double square brackets are column names. They
 will be quoted accordingly. Also, the percentage character "%" at the
 beginning or ending of a table name will be replaced with [[tablePrefix]].
    [$sql] (string) The SQL to be quoted


*yii\db\Connection::getDriverName*				 public
>
 getDriverName()
<
(string) Name of the DB driver





 vim:tw=78:ts=8:ft=help:norl:
