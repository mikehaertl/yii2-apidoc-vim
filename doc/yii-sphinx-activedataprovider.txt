
*yii/sphinx/ActiveDataProvider*   >> |yii/data/ActiveDataProvider|
===============================

DESCRIPTION
------------------------------------------------------------------------------

 It allows to fetch not only rows and total rows count, but also a meta
 information and facet results.

 The following is an example of using ActiveDataProvider to provide facet
 results:

   $provider = new ActiveDataProvider([
       'query' => Post::find()->facets(['author_id', 'category_id']),
       'pagination' => [
           'pageSize' => 20,
       ],
   ]);

   // get the posts in the current page
   $posts = $provider->getModels();

   // get all facets
   $facets = $provider->getFacets();

   // get particular facet
   $authorFacet = $provider->getFacet('author_id');

 In case 'Query::showMeta' is set ActiveDataProvider will fetch total count
 value from the query meta information, avoiding extra counting query:

   $provider = new ActiveDataProvider([
       'query' => Post::find()->showMeta(true),
       'pagination' => [
           'pageSize' => 20,
       ],
   ]);

   $totalCount = $provider->getTotalCount(); // fetched from meta information

 Note: when using 'meta' information results total count will be fetched after
 pagination limit applying, which eliminates ability to verify if requested
 page number actually exist. Data provider disables
 'yii\data\Pagination::validatePage' automatically in this case.

 Note: because pagination offset and limit may exceed Sphinx 'max_matches'
 bounds, data provider will set 'max_matches' option automatically based on
 those values. However, if 'Query::showMeta' is set, such adjustment is not
 performed as it will break total count calculation, so you'll have to deal
 with 'max_matches' bounds on your own.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/data/ActiveDataProvider::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/data/ActiveDataProvider::prepareKeys|
 |yii/data/BaseDataProvider::prepare|
 |yii/data/BaseDataProvider::getModels|
 |yii/data/BaseDataProvider::setModels|
 |yii/data/BaseDataProvider::getKeys|
 |yii/data/BaseDataProvider::setKeys|
 |yii/data/BaseDataProvider::getCount|
 |yii/data/BaseDataProvider::getTotalCount|
 |yii/data/BaseDataProvider::setTotalCount|
 |yii/data/BaseDataProvider::getPagination|
 |yii/data/BaseDataProvider::setPagination|
 |yii/data/BaseDataProvider::getSort|
 |yii/data/ActiveDataProvider::setSort|
 |yii/data/BaseDataProvider::refresh|


*yii/sphinx/ActiveDataProvider::prepareModels*		protected
>
 prepareModels()
<
return (void)

 {@inheritdoc}


*yii/sphinx/ActiveDataProvider::prepareTotalCount*	protected
>
 prepareTotalCount()
<
return (void)

 {@inheritdoc}


*yii/sphinx/ActiveDataProvider::setFacets*		public
>
 setFacets($facets)
<
return (void)

    [$facets] (array) Query facet results.


*yii/sphinx/ActiveDataProvider::getFacets*		public
>
 getFacets()
<
return (array) Query facet results.



*yii/sphinx/ActiveDataProvider::setMeta*			public
>
 setMeta($meta)
<
return (void)

    [$meta] (array) Search query meta info


*yii/sphinx/ActiveDataProvider::getMeta*			public
>
 getMeta()
<
return (array) Search query meta info



*yii/sphinx/ActiveDataProvider::getFacet*			public
>
 getFacet($name)
<
return (array) Facet results.

 Returns results of the specified facet.

    [$name] (string) Facet name



 vim:tw=78:ts=8:ft=help:norl:
