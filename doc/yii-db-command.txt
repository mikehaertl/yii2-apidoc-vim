
*yii/db/Command*   >> |yii/base/Component|
================

DESCRIPTION
------------------------------------------------------------------------------

 A command object is usually created by calling 'Connection::createCommand()'.
 The SQL statement it represents can be set via the 'sql' property.

 To execute a non-query SQL (such as INSERT, DELETE, UPDATE), call
 'execute()'. To execute a SQL statement that returns result data set (such as
 SELECT), use 'queryAll()', 'queryOne()', 'queryColumn()', 'queryScalar()', or
 'query()'. For example,

   $users = $connection->createCommand('SELECT * FROM user')->queryAll();

 Command supports SQL statement preparation and parameter binding. Call
 'bindValue()' to bind a value to a SQL parameter; Call 'bindParam()' to bind
 a PHP variable to a SQL parameter. When binding a parameter, the SQL
 statement is automatically prepared. You may also call 'prepare()' explicitly
 to prepare a SQL statement.

 Command also supports building SQL statements by providing methods such as
 'insert()', 'update()', etc. For example,

   $connection->createCommand()->insert('user', [
       'name' => 'Sam',
       'age' => 30,
   ])->execute();

 To build SELECT SQL statements, please use 'QueryBuilder' instead.


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/Command::$db*
 (\yii\db\Connection) The DB connection that this command is associated with

$pdoStatement				*yii/db/Command::$pdoStatement*
 (\PDOStatement) The PDOStatement object that this command is associated with

$fetchMode				*yii/db/Command::$fetchMode*
 (integer) The default fetch mode for this command.

$params					*yii/db/Command::$params*
 (array) The parameters (name => value) that are bound to the current PDO
 statement. This property is maintained by methods such as 'bindValue()'. Do
 not modify it directly.

$behaviors				*yii/db/Command::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$sql					*yii/db/Command::$sql*
 (string) The SQL statement to be executed

$rawSql					*yii/db/Command::$rawSql*
 (string) The raw SQL with parameter values inserted into the corresponding
 placeholders in 'sql'.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/db/Command::className*				public
 See |yii/base/Object::className|


*yii/db/Command::__construct*				public
 See |yii/base/Object::__construct|


*yii/db/Command::init*					public
 See |yii/base/Object::init|


*yii/db/Command::__get*					public
 See |yii/base/Component::__get|


*yii/db/Command::__set*					public
 See |yii/base/Component::__set|


*yii/db/Command::__isset*					public
 See |yii/base/Component::__isset|


*yii/db/Command::__unset*					public
 See |yii/base/Component::__unset|


*yii/db/Command::__call*					public
 See |yii/base/Component::__call|


*yii/db/Command::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/db/Command::canGetProperty*				public
 See |yii/base/Component::canGetProperty|


*yii/db/Command::canSetProperty*				public
 See |yii/base/Component::canSetProperty|


*yii/db/Command::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/db/Command::__clone*					public
 See |yii/base/Component::__clone|


*yii/db/Command::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/db/Command::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/db/Command::on*					public
 See |yii/base/Component::on|


*yii/db/Command::off*					public
 See |yii/base/Component::off|


*yii/db/Command::trigger*					public
 See |yii/base/Component::trigger|


*yii/db/Command::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/db/Command::getBehaviors*				public
 See |yii/base/Component::getBehaviors|


*yii/db/Command::attachBehavior*				public
 See |yii/base/Component::attachBehavior|


*yii/db/Command::attachBehaviors*				public
 See |yii/base/Component::attachBehaviors|


*yii/db/Command::detachBehavior*				public
 See |yii/base/Component::detachBehavior|


*yii/db/Command::detachBehaviors*				public
 See |yii/base/Component::detachBehaviors|


*yii/db/Command::ensureBehaviors*				public
 See |yii/base/Component::ensureBehaviors|


*yii/db/Command::getSql*					public
>
 getSql()
<
(string) The SQL statement to be executed




*yii/db/Command::setSql*					public
>
 setSql($sql)
<
(static) This command instance

 The previous SQL execution (if any) will be cancelled, and 'params' will be
 cleared as well.
    [$sql] (string) The SQL statement to be set.


*yii/db/Command::getRawSql*				public
>
 getRawSql()
<
(string) The raw SQL with parameter values inserted into the corresponding
placeholders in 'sql'.

 Note that the return value of this method should mainly be used for logging
 purpose. It is likely that this method returns an invalid SQL due to improper
 replacement of parameter placeholders.


*yii/db/Command::prepare*					public
>
 prepare()
<
(void)

 For complex SQL statement that is to be executed multiple times, this may
 improve performance. For SQL statement with binding parameters, this method
 is invoked automatically.


*yii/db/Command::cancel*					public
>
 cancel()
<
(void)

 This method mainly sets 'pdoStatement' to be null.


*yii/db/Command::bindParam*				public
>
 bindParam($name, $value, $dataType=null, $length=null, $driverOptions='null')
<
(static) The current command being executed


    [$name] (string|integer) Parameter identifier. For a prepared statement
    using named placeholders, this will be a parameter name of the form
    ':name'. For a prepared statement using question mark placeholders, this
    will be the 1-indexed position of the parameter.
    [$value] (mixed) Name of the PHP variable to bind to the SQL statement
    parameter
    [$dataType] (integer) SQL data type of the parameter. If null, the type is
    determined by the PHP type of the value.
    [$length] (integer) Length of the data type
    [$driverOptions] (mixed) The driver-specific options


*yii/db/Command::bindValue*				public
>
 bindValue($name, $value, $dataType=null)
<
(static) The current command being executed


    [$name] (string|integer) Parameter identifier. For a prepared statement
    using named placeholders, this will be a parameter name of the form
    ':name'. For a prepared statement using question mark placeholders, this
    will be the 1-indexed position of the parameter.
    [$value] (mixed) The value to bind to the parameter
    [$dataType] (integer) SQL data type of the parameter. If null, the type is
    determined by the PHP type of the value.


*yii/db/Command::bindValues*				public
>
 bindValues($values)
<
(static) The current command being executed

 This is similar to 'bindValue()' except that it binds multiple values at a
 time. Note that the SQL data type of each value is determined by its PHP
 type.
    [$values] (array) The values to be bound. This must be given in terms of
    an associative array with array keys being the parameter names, and array
    values the corresponding parameter values, e.g. '[':name' => 'John',
    ':age' => 25]'. By default, the PDO type of each value is determined by
    its PHP type. You may explicitly specify the PDO type by using an array:
    '[value, type]', e.g. '[':name' => 'John', ':profile' => [$profile,
    \PDO::PARAM_LOB''.


*yii/db/Command::execute*					public
>
 execute()
<
(integer) Number of rows affected by the execution.

 This method should only be used for executing non-query SQL statement, such
 as 'INSERT', 'DELETE', 'UPDATE' SQLs. No result set will be returned.


*yii/db/Command::query*					public
>
 query()
<
(\yii\db\DataReader) The reader object for fetching the query result

 This method is for executing a SQL query that returns result set, such as
 'SELECT'.


*yii/db/Command::queryAll*				public
>
 queryAll($fetchMode=null)
<
(array) All rows of the query result. Each array element is an array
representing a row of data. An empty array is returned if the query results in
nothing.


    [$fetchMode] (integer) The result fetch mode. Please refer to [PHP
    manual](http://www.php.net/manual/en/function.PDOStatement-setFetchMode.php)
    for valid fetch modes. If this parameter is null, the value set in
    'fetchMode' will be used.


*yii/db/Command::queryOne*				public
>
 queryOne($fetchMode=null)
<
(array|boolean) The first row (in terms of an array) of the query result.
False is returned if the query results in nothing.

 This method is best used when only the first row of result is needed for a
 query.
    [$fetchMode] (integer) The result fetch mode. Please refer to [PHP
    manual](http://www.php.net/manual/en/function.PDOStatement-setFetchMode.php)
    for valid fetch modes. If this parameter is null, the value set in
    'fetchMode' will be used.


*yii/db/Command::queryScalar*				public
>
 queryScalar()
<
(string|null|boolean) The value of the first column in the first row of the
query result. False is returned if there is no value.

 This method is best used when only a single value is needed for a query.


*yii/db/Command::queryColumn*				public
>
 queryColumn()
<
(array) The first column of the query result. Empty array is returned if the
query results in nothing.

 This method is best used when only the first column of result (i.e. the first
 element in each row) is needed for a query.


*yii/db/Command::insert*					public
>
 insert($table, $columns)
<
(\yii\db\Command) The command object itself

 For example,

   $connection->createCommand()->insert('user', [
       'name' => 'Sam',
       'age' => 30,
   ])->execute();

 The method will properly escape the column names, and bind the values to be
 inserted.

 Note that the created command is not executed until 'execute()' is called.
    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column data (name => value) to be inserted into the
    table.


*yii/db/Command::batchInsert*				public
>
 batchInsert($table, $columns, $rows)
<
(\yii\db\Command) The command object itself

 For example,

   $connection->createCommand()->batchInsert('user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ])->execute();

 Note that the values in each row must match the corresponding column names.
    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column names
    [$rows] (array) The rows to be batch inserted into the table


*yii/db/Command::update*					public
>
 update($table, $columns, $condition='\'\'', $params='[]')
<
(\yii\db\Command) The command object itself

 For example,

   $connection->createCommand()->update('user', ['status' => 1], 'age >
 30')->execute();

 The method will properly escape the column names and bind the values to be
 updated.

 Note that the created command is not executed until 'execute()' is called.
    [$table] (string) The table to be updated.
    [$columns] (array) The column data (name => value) to be updated.
    [$condition] (string|array) The condition that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify condition.
    [$params] (array) The parameters to be bound to the command


*yii/db/Command::delete*					public
>
 delete($table, $condition='\'\'', $params='[]')
<
(\yii\db\Command) The command object itself

 For example,

   $connection->createCommand()->delete('user', 'status = 0')->execute();

 The method will properly escape the table and column names.

 Note that the created command is not executed until 'execute()' is called.
    [$table] (string) The table where the data will be deleted from.
    [$condition] (string|array) The condition that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify condition.
    [$params] (array) The parameters to be bound to the command


*yii/db/Command::createTable*				public
>
 createTable($table, $columns, $options='null')
<
(\yii\db\Command) The command object itself

 The columns in the new table should be specified as name-definition pairs
 (e.g. 'name' => 'string'), where name stands for a column name which will be
 properly quoted by the method, and definition stands for the column type
 which can contain an abstract DB type. The method
 'QueryBuilder::getColumnType()' will be called to convert the abstract column
 types to physical ones. For example, 'string' will be converted as
 'varchar(255)', and 'string not null' becomes 'varchar(255) not null'.

 If a column is specified with definition only (e.g. 'PRIMARY KEY (name,
 type)'), it will be directly inserted into the generated SQL.
    [$table] (string) The name of the table to be created. The name will be
    properly quoted by the method.
    [$columns] (array) The columns (name => definition) in the new table.
    [$options] (string) Additional SQL fragment that will be appended to the
    generated SQL.


*yii/db/Command::renameTable*				public
>
 renameTable($table, $newName)
<
(\yii\db\Command) The command object itself


    [$table] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/Command::dropTable*				public
>
 dropTable($table)
<
(\yii\db\Command) The command object itself


    [$table] (string) The table to be dropped. The name will be properly
    quoted by the method.


*yii/db/Command::truncateTable*				public
>
 truncateTable($table)
<
(\yii\db\Command) The command object itself


    [$table] (string) The table to be truncated. The name will be properly
    quoted by the method.


*yii/db/Command::addColumn*				public
>
 addColumn($table, $column, $type)
<
(\yii\db\Command) The command object itself


    [$table] (string) The table that the new column will be added to. The
    table name will be properly quoted by the method.
    [$column] (string) The name of the new column. The name will be properly
    quoted by the method.
    [$type] (string) The column type. '\yii\db\QueryBuilder::getColumnType()'
    will be called to convert the give column type to the physical one. For
    example, 'string' will be converted as 'varchar(255)', and 'string not
    null' becomes 'varchar(255) not null'.


*yii/db/Command::dropColumn*				public
>
 dropColumn($table, $column)
<
(\yii\db\Command) The command object itself


    [$table] (string) The table whose column is to be dropped. The name will
    be properly quoted by the method.
    [$column] (string) The name of the column to be dropped. The name will be
    properly quoted by the method.


*yii/db/Command::renameColumn*				public
>
 renameColumn($table, $oldName, $newName)
<
(\yii\db\Command) The command object itself


    [$table] (string) The table whose column is to be renamed. The name will
    be properly quoted by the method.
    [$oldName] (string) The old name of the column. The name will be properly
    quoted by the method.
    [$newName] (string) The new name of the column. The name will be properly
    quoted by the method.


*yii/db/Command::alterColumn*				public
>
 alterColumn($table, $column, $type)
<
(\yii\db\Command) The command object itself


    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The column type. '\yii\db\QueryBuilder::getColumnType()'
    will be called to convert the give column type to the physical one. For
    example, 'string' will be converted as 'varchar(255)', and 'string not
    null' becomes 'varchar(255) not null'.


*yii/db/Command::addPrimaryKey*				public
>
 addPrimaryKey($name, $table, $columns)
<
(\yii\db\Command) The command object itself.

 The method will properly quote the table and column names.
    [$name] (string) The name of the primary key constraint.
    [$table] (string) The table that the primary key constraint will be added
    to.
    [$columns] (string|array) Comma separated string or array of columns that
    the primary key will consist of.


*yii/db/Command::dropPrimaryKey*				public
>
 dropPrimaryKey($name, $table)
<
(\yii\db\Command) The command object itself


    [$name] (string) The name of the primary key constraint to be removed.
    [$table] (string) The table that the primary key constraint will be
    removed from.


*yii/db/Command::addForeignKey*				public
>
 addForeignKey($name, $table, $columns, $refTable, $refColumns, $delete='null', $update='null')
<
(\yii\db\Command) The command object itself

 The method will properly quote the table and column names.
    [$name] (string) The name of the foreign key constraint.
    [$table] (string) The table that the foreign key constraint will be added
    to.
    [$columns] (string) The name of the column to that the constraint will be
    added on. If there are multiple columns, separate them with commas.
    [$refTable] (string) The table that the foreign key references to.
    [$refColumns] (string) The name of the column that the foreign key
    references to. If there are multiple columns, separate them with commas.
    [$delete] (string) The ON DELETE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL
    [$update] (string) The ON UPDATE option. Most DBMS support these options:
    RESTRICT, CASCADE, NO ACTION, SET DEFAULT, SET NULL


*yii/db/Command::dropForeignKey*				public
>
 dropForeignKey($name, $table)
<
(\yii\db\Command) The command object itself


    [$name] (string) The name of the foreign key constraint to be dropped. The
    name will be properly quoted by the method.
    [$table] (string) The table whose foreign is to be dropped. The name will
    be properly quoted by the method.


*yii/db/Command::createIndex*				public
>
 createIndex($name, $table, $columns, $unique='false')
<
(\yii\db\Command) The command object itself


    [$name] (string) The name of the index. The name will be properly quoted
    by the method.
    [$table] (string) The table that the new index will be created for. The
    table name will be properly quoted by the method.
    [$columns] (string|array) The column(s) that should be included in the
    index. If there are multiple columns, please separate them by commas. The
    column names will be properly quoted by the method.
    [$unique] (boolean) Whether to add UNIQUE constraint on the created index.


*yii/db/Command::dropIndex*				public
>
 dropIndex($name, $table)
<
(\yii\db\Command) The command object itself


    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/db/Command::resetSequence*				public
>
 resetSequence($table, $value='null')
<
(\yii\db\Command) The command object itself

 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.
    [$table] (string) The name of the table whose primary key sequence will be
    reset
    [$value] (mixed) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/Command::checkIntegrity*				public
>
 checkIntegrity($check='true', $schema='''', $table='''')
<
(\yii\db\Command) The command object itself


    [$check] (boolean) Whether to turn on or off the integrity check.
    [$schema] (string) The schema name of the tables. Defaults to empty
    string, meaning the current or default schema.
    [$table] (string) The table name.



 vim:tw=78:ts=8:ft=help:norl:
