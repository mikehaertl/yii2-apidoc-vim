
*yii/db/pgsql/QueryBuilder*   >> |yii/db/QueryBuilder|
===========================


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/pgsql/QueryBuilder::$db*

 See |yii/db/QueryBuilder::$db|

$separator				*yii/db/pgsql/QueryBuilder::$separator*

 See |yii/db/QueryBuilder::$separator|

$typeMap				*yii/db/pgsql/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).

$conditionBuilders			*yii/db/pgsql/QueryBuilder::$conditionBuilders*

 (array) Map of query condition to builder methods. These methods are used by
 'buildCondition' to build SQL conditions from array syntax.

$likeEscapingReplacements		*yii/db/pgsql/QueryBuilder::$likeEscapingReplacements*

 See |yii/db/QueryBuilder::$likeEscapingReplacements|

$likeEscapeCharacter			*yii/db/pgsql/QueryBuilder::$likeEscapeCharacter*

 See |yii/db/QueryBuilder::$likeEscapeCharacter|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/pgsql/QueryBuilder::className*			public

 See |yii/base/BaseObject::className|


*yii/db/pgsql/QueryBuilder::__construct*			public

 See |yii/db/QueryBuilder::__construct|


*yii/db/pgsql/QueryBuilder::init*				public

 See |yii/base/BaseObject::init|


*yii/db/pgsql/QueryBuilder::__get*			public

 See |yii/base/BaseObject::__get|


*yii/db/pgsql/QueryBuilder::__set*			public

 See |yii/base/BaseObject::__set|


*yii/db/pgsql/QueryBuilder::__isset*			public

 See |yii/base/BaseObject::__isset|


*yii/db/pgsql/QueryBuilder::__unset*			public

 See |yii/base/BaseObject::__unset|


*yii/db/pgsql/QueryBuilder::__call*			public

 See |yii/base/BaseObject::__call|


*yii/db/pgsql/QueryBuilder::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/db/pgsql/QueryBuilder::canGetProperty*		public

 See |yii/base/BaseObject::canGetProperty|


*yii/db/pgsql/QueryBuilder::canSetProperty*		public

 See |yii/base/BaseObject::canSetProperty|


*yii/db/pgsql/QueryBuilder::hasMethod*			public

 See |yii/base/BaseObject::hasMethod|


*yii/db/pgsql/QueryBuilder::build*			public

 See |yii/db/QueryBuilder::build|


*yii/db/pgsql/QueryBuilder::insert*			public
>
 insert($table, $columns, $params)
<
return (string) The INSERT SQL



 For example,

   $sql = $queryBuilder->insert('user', [
       'name' => 'Sam',
       'age' => 30,
   ], $params);

 The method will properly escape the table and column names.



    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array|\yii\db\Query) The column data (name => value) to be
    inserted into the table or instance of 'yii\db\Query|Query' to perform
    INSERT INTO ... SELECT SQL statement. Passing of 'yii\db\Query|Query' is
    available since version 2.0.11.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the DB command later.


*yii/db/pgsql/QueryBuilder::prepareInsertSelectSubQuery*	protected

 See |yii/db/QueryBuilder::prepareInsertSelectSubQuery|


*yii/db/pgsql/QueryBuilder::batchInsert*			public
>
 batchInsert($table, $columns, $rows)
<
return (string) The batch INSERT SQL statement



 For example,

   $sql = $queryBuilder->batchInsert('user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ]);

 Note that the values in each row must match the corresponding column names.

 The method will properly escape the column names, and quote the values to be
 inserted.



    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column names
    [$rows] (array|\Generator) The rows to be batch inserted into the table


*yii/db/pgsql/QueryBuilder::update*			public
>
 update($table, $columns, $condition, $params)
<
return (string) The UPDATE SQL



 For example,

   $params = [];
   $sql = $queryBuilder->update('user', ['status' => 1], 'age > 30', $params);

 The method will properly escape the table and column names.



    [$table] (string) The table to be updated.
    [$columns] (array) The column data (name => value) to be updated.
    [$condition] (array|string) The condition that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify condition.
    [$params] (array) The binding parameters that will be modified by this
    method so that they can be bound to the DB command later.


*yii/db/pgsql/QueryBuilder::delete*			public

 See |yii/db/QueryBuilder::delete|


*yii/db/pgsql/QueryBuilder::createTable*			public

 See |yii/db/QueryBuilder::createTable|


*yii/db/pgsql/QueryBuilder::renameTable*			public
>
 renameTable($oldName, $newName)
<
return (string) The SQL statement for renaming a DB table.

    [$oldName] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/pgsql/QueryBuilder::dropTable*			public

 See |yii/db/QueryBuilder::dropTable|


*yii/db/pgsql/QueryBuilder::addPrimaryKey*		public

 See |yii/db/QueryBuilder::addPrimaryKey|


*yii/db/pgsql/QueryBuilder::dropPrimaryKey*		public

 See |yii/db/QueryBuilder::dropPrimaryKey|


*yii/db/pgsql/QueryBuilder::truncateTable*		public
>
 truncateTable($table)
<
return (string) The SQL statement for truncating a DB table.

 Explicitly restarts identity for PGSQL to be consistent with other databases
 which all do this by default.

    [$table] (string) The table to be truncated. The name will be properly
    quoted by the method.


*yii/db/pgsql/QueryBuilder::addColumn*			public

 See |yii/db/QueryBuilder::addColumn|


*yii/db/pgsql/QueryBuilder::dropColumn*			public

 See |yii/db/QueryBuilder::dropColumn|


*yii/db/pgsql/QueryBuilder::renameColumn*			public

 See |yii/db/QueryBuilder::renameColumn|


*yii/db/pgsql/QueryBuilder::alterColumn*			public
>
 alterColumn($table, $column, $type)
<
return (string) The SQL statement for changing the definition of a column.

    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The new column type. The 'getColumnType()' method will be
    invoked to convert abstract column type (if any) into the physical one.
    Anything that is not recognized as abstract type will be kept in the
    generated SQL. For example, 'string' will be turned into 'varchar(255)',
    while 'string not null' will become 'varchar(255) not null'. You can also
    use PostgreSQL-specific syntax such as 'SET NOT NULL'.


*yii/db/pgsql/QueryBuilder::addForeignKey*		public

 See |yii/db/QueryBuilder::addForeignKey|


*yii/db/pgsql/QueryBuilder::dropForeignKey*		public

 See |yii/db/QueryBuilder::dropForeignKey|


*yii/db/pgsql/QueryBuilder::createIndex*			public
>
 createIndex($name, $table, $columns, $unique='false')
<
return (string) The SQL statement for creating a new index.

    [$name] (string) The name of the index. The name will be properly quoted
    by the method.
    [$table] (string) The table that the new index will be created for. The
    table name will be properly quoted by the method.
    [$columns] (string|array) The column(s) that should be included in the
    index. If there are multiple columns, separate them with commas or use an
    array to represent them. Each column name will be properly quoted by the
    method, unless a parenthesis is found in the name.
    [$unique] (bool|string) Whether to make this a UNIQUE index constraint.
    You can pass 'true' or 'INDEX_UNIQUE' to create a unique index, 'false' to
    make a non-unique index using the default index type, or one of the
    following constants to specify the index method to use: 'INDEX_B_TREE',
    'INDEX_HASH', 'INDEX_GIST', 'INDEX_GIN'.


*yii/db/pgsql/QueryBuilder::dropIndex*			public
>
 dropIndex($name, $table)
<
return (string) The SQL statement for dropping an index.

    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/db/pgsql/QueryBuilder::addUnique*			public

 See |yii/db/QueryBuilder::addUnique|


*yii/db/pgsql/QueryBuilder::dropUnique*			public

 See |yii/db/QueryBuilder::dropUnique|


*yii/db/pgsql/QueryBuilder::addCheck*			public

 See |yii/db/QueryBuilder::addCheck|


*yii/db/pgsql/QueryBuilder::dropCheck*			public

 See |yii/db/QueryBuilder::dropCheck|


*yii/db/pgsql/QueryBuilder::addDefaultValue*		public

 See |yii/db/QueryBuilder::addDefaultValue|


*yii/db/pgsql/QueryBuilder::dropDefaultValue*		public

 See |yii/db/QueryBuilder::dropDefaultValue|


*yii/db/pgsql/QueryBuilder::resetSequence*		public
>
 resetSequence($tableName, $value='null')
<
return (string) The SQL statement for resetting sequence

 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.

    [$tableName] (string) The name of the table whose primary key sequence
    will be reset
    [$value] (mixed) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/pgsql/QueryBuilder::checkIntegrity*		public
>
 checkIntegrity($check='true', $schema='''', $table='''')
<
return (string) The SQL statement for checking integrity

    [$check] (bool) Whether to turn on or off the integrity check.
    [$schema] (string) The schema of the tables.
    [$table] (string) The table name.


*yii/db/pgsql/QueryBuilder::addCommentOnColumn*		public

 See |yii/db/QueryBuilder::addCommentOnColumn|


*yii/db/pgsql/QueryBuilder::addCommentOnTable*		public

 See |yii/db/QueryBuilder::addCommentOnTable|


*yii/db/pgsql/QueryBuilder::dropCommentFromColumn*	public

 See |yii/db/QueryBuilder::dropCommentFromColumn|


*yii/db/pgsql/QueryBuilder::dropCommentFromTable*		public

 See |yii/db/QueryBuilder::dropCommentFromTable|


*yii/db/pgsql/QueryBuilder::getColumnType*		public

 See |yii/db/QueryBuilder::getColumnType|


*yii/db/pgsql/QueryBuilder::buildSelect*			public

 See |yii/db/QueryBuilder::buildSelect|


*yii/db/pgsql/QueryBuilder::buildFrom*			public

 See |yii/db/QueryBuilder::buildFrom|


*yii/db/pgsql/QueryBuilder::buildJoin*			public

 See |yii/db/QueryBuilder::buildJoin|


*yii/db/pgsql/QueryBuilder::buildWhere*			public

 See |yii/db/QueryBuilder::buildWhere|


*yii/db/pgsql/QueryBuilder::buildGroupBy*			public

 See |yii/db/QueryBuilder::buildGroupBy|


*yii/db/pgsql/QueryBuilder::buildHaving*			public

 See |yii/db/QueryBuilder::buildHaving|


*yii/db/pgsql/QueryBuilder::buildOrderByAndLimit*		public

 See |yii/db/QueryBuilder::buildOrderByAndLimit|


*yii/db/pgsql/QueryBuilder::buildOrderBy*			public

 See |yii/db/QueryBuilder::buildOrderBy|


*yii/db/pgsql/QueryBuilder::buildLimit*			public

 See |yii/db/QueryBuilder::buildLimit|


*yii/db/pgsql/QueryBuilder::hasLimit*			protected

 See |yii/db/QueryBuilder::hasLimit|


*yii/db/pgsql/QueryBuilder::hasOffset*			protected

 See |yii/db/QueryBuilder::hasOffset|


*yii/db/pgsql/QueryBuilder::buildUnion*			public

 See |yii/db/QueryBuilder::buildUnion|


*yii/db/pgsql/QueryBuilder::buildColumns*			public

 See |yii/db/QueryBuilder::buildColumns|


*yii/db/pgsql/QueryBuilder::buildCondition*		public

 See |yii/db/QueryBuilder::buildCondition|


*yii/db/pgsql/QueryBuilder::buildHashCondition*		public

 See |yii/db/QueryBuilder::buildHashCondition|


*yii/db/pgsql/QueryBuilder::buildAndCondition*		public

 See |yii/db/QueryBuilder::buildAndCondition|


*yii/db/pgsql/QueryBuilder::buildNotCondition*		public

 See |yii/db/QueryBuilder::buildNotCondition|


*yii/db/pgsql/QueryBuilder::buildBetweenCondition*	public

 See |yii/db/QueryBuilder::buildBetweenCondition|


*yii/db/pgsql/QueryBuilder::buildInCondition*		public

 See |yii/db/QueryBuilder::buildInCondition|


*yii/db/pgsql/QueryBuilder::buildSubqueryInCondition*	protected

 See |yii/db/QueryBuilder::buildSubqueryInCondition|


*yii/db/pgsql/QueryBuilder::buildCompositeInCondition*	protected

 See |yii/db/QueryBuilder::buildCompositeInCondition|


*yii/db/pgsql/QueryBuilder::buildLikeCondition*		public

 See |yii/db/QueryBuilder::buildLikeCondition|


*yii/db/pgsql/QueryBuilder::buildExistsCondition*		public

 See |yii/db/QueryBuilder::buildExistsCondition|


*yii/db/pgsql/QueryBuilder::buildSimpleCondition*		public

 See |yii/db/QueryBuilder::buildSimpleCondition|


*yii/db/pgsql/QueryBuilder::selectExists*			public

 See |yii/db/QueryBuilder::selectExists|



 vim:tw=78:ts=8:ft=help:norl:
