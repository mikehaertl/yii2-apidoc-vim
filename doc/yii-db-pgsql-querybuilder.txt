
*yii/db/pgsql/QueryBuilder*   >> |yii/db/QueryBuilder|
===========================


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/pgsql/QueryBuilder::$db*

 See |yii/db/QueryBuilder::$db|

$separator				*yii/db/pgsql/QueryBuilder::$separator*

 See |yii/db/QueryBuilder::$separator|

$typeMap				*yii/db/pgsql/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).

$conditionBuilders			*yii/db/pgsql/QueryBuilder::$conditionBuilders*

 See |yii/db/QueryBuilder::$conditionBuilders|

$conditionClasses			*yii/db/pgsql/QueryBuilder::$conditionClasses*

 See |yii/db/QueryBuilder::$conditionClasses|

$expressionBuilders			*yii/db/pgsql/QueryBuilder::$expressionBuilders*

 See |yii/db/QueryBuilder::$expressionBuilders|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/pgsql/QueryBuilder::className*			public

 See |yii/base/BaseObject::className|


*yii/db/pgsql/QueryBuilder::__construct*			public

 See |yii/db/QueryBuilder::__construct|


*yii/db/pgsql/QueryBuilder::init*				public

 See |yii/db/QueryBuilder::init|


*yii/db/pgsql/QueryBuilder::__get*			public

 See |yii/base/BaseObject::__get|


*yii/db/pgsql/QueryBuilder::__set*			public

 See |yii/base/BaseObject::__set|


*yii/db/pgsql/QueryBuilder::__isset*			public

 See |yii/base/BaseObject::__isset|


*yii/db/pgsql/QueryBuilder::__unset*			public

 See |yii/base/BaseObject::__unset|


*yii/db/pgsql/QueryBuilder::__call*			public

 See |yii/base/BaseObject::__call|


*yii/db/pgsql/QueryBuilder::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/db/pgsql/QueryBuilder::canGetProperty*		public

 See |yii/base/BaseObject::canGetProperty|


*yii/db/pgsql/QueryBuilder::canSetProperty*		public

 See |yii/base/BaseObject::canSetProperty|


*yii/db/pgsql/QueryBuilder::hasMethod*			public

 See |yii/base/BaseObject::hasMethod|


*yii/db/pgsql/QueryBuilder::defaultConditionClasses*	protected
>
 defaultConditionClasses()
<
return (void)

 {@inheritdoc}


*yii/db/pgsql/QueryBuilder::defaultExpressionBuilders*	protected
>
 defaultExpressionBuilders()
<
return (void)

 {@inheritdoc}


*yii/db/pgsql/QueryBuilder::setExpressionBuilders*	public

 See |yii/db/QueryBuilder::setExpressionBuilders|


*yii/db/pgsql/QueryBuilder::setConditionClasses*		public

 See |yii/db/QueryBuilder::setConditionClasses|


*yii/db/pgsql/QueryBuilder::build*			public

 See |yii/db/QueryBuilder::build|


*yii/db/pgsql/QueryBuilder::buildExpression*		public

 See |yii/db/QueryBuilder::buildExpression|


*yii/db/pgsql/QueryBuilder::getExpressionBuilder*		public

 See |yii/db/QueryBuilder::getExpressionBuilder|


*yii/db/pgsql/QueryBuilder::insert*			public
>
 insert($table, $columns, $params)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$columns] () 
    [$params] () 


*yii/db/pgsql/QueryBuilder::prepareInsertValues*		protected

 See |yii/db/QueryBuilder::prepareInsertValues|


*yii/db/pgsql/QueryBuilder::prepareInsertSelectSubQuery*	protected

 See |yii/db/QueryBuilder::prepareInsertSelectSubQuery|


*yii/db/pgsql/QueryBuilder::batchInsert*			public
>
 batchInsert($table, $columns, $rows, $params='[]')
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$columns] () 
    [$rows] () 
    [$params] () 


*yii/db/pgsql/QueryBuilder::upsert*			public
>
 upsert($table, $insertColumns, $updateColumns, $params)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$insertColumns] () 
    [$updateColumns] () 
    [$params] () 


*yii/db/pgsql/QueryBuilder::prepareUpsertColumns*		protected

 See |yii/db/QueryBuilder::prepareUpsertColumns|


*yii/db/pgsql/QueryBuilder::update*			public
>
 update($table, $columns, $condition, $params)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$columns] () 
    [$condition] () 
    [$params] () 


*yii/db/pgsql/QueryBuilder::prepareUpdateSets*		protected

 See |yii/db/QueryBuilder::prepareUpdateSets|


*yii/db/pgsql/QueryBuilder::delete*			public

 See |yii/db/QueryBuilder::delete|


*yii/db/pgsql/QueryBuilder::createTable*			public

 See |yii/db/QueryBuilder::createTable|


*yii/db/pgsql/QueryBuilder::renameTable*			public
>
 renameTable($oldName, $newName)
<
return (string) The SQL statement for renaming a DB table.

 Builds a SQL statement for renaming a DB table.

    [$oldName] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/pgsql/QueryBuilder::dropTable*			public

 See |yii/db/QueryBuilder::dropTable|


*yii/db/pgsql/QueryBuilder::addPrimaryKey*		public

 See |yii/db/QueryBuilder::addPrimaryKey|


*yii/db/pgsql/QueryBuilder::dropPrimaryKey*		public

 See |yii/db/QueryBuilder::dropPrimaryKey|


*yii/db/pgsql/QueryBuilder::truncateTable*		public
>
 truncateTable($table)
<
return (string) The SQL statement for truncating a DB table.

 Builds a SQL statement for truncating a DB table.

 Explicitly restarts identity for PGSQL to be consistent with other databases
 which all do this by default.

    [$table] (string) The table to be truncated. The name will be properly
    quoted by the method.


*yii/db/pgsql/QueryBuilder::addColumn*			public

 See |yii/db/QueryBuilder::addColumn|


*yii/db/pgsql/QueryBuilder::dropColumn*			public

 See |yii/db/QueryBuilder::dropColumn|


*yii/db/pgsql/QueryBuilder::renameColumn*			public

 See |yii/db/QueryBuilder::renameColumn|


*yii/db/pgsql/QueryBuilder::alterColumn*			public
>
 alterColumn($table, $column, $type)
<
return (string) The SQL statement for changing the definition of a column.

 Builds a SQL statement for changing the definition of a column.

    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The new column type. The 'getColumnType()' method will be
    invoked to convert abstract column type (if any) into the physical one.
    Anything that is not recognized as abstract type will be kept in the
    generated SQL. For example, 'string' will be turned into 'varchar(255)',
    while 'string not null' will become 'varchar(255) not null'. You can also
    use PostgreSQL-specific syntax such as 'SET NOT NULL'.


*yii/db/pgsql/QueryBuilder::addForeignKey*		public

 See |yii/db/QueryBuilder::addForeignKey|


*yii/db/pgsql/QueryBuilder::dropForeignKey*		public

 See |yii/db/QueryBuilder::dropForeignKey|


*yii/db/pgsql/QueryBuilder::createIndex*			public
>
 createIndex($name, $table, $columns, $unique='false')
<
return (string) The SQL statement for creating a new index.

 Builds a SQL statement for creating a new index.

    [$name] (string) The name of the index. The name will be properly quoted
    by the method.
    [$table] (string) The table that the new index will be created for. The
    table name will be properly quoted by the method.
    [$columns] (string|array) The column(s) that should be included in the
    index. If there are multiple columns, separate them with commas or use an
    array to represent them. Each column name will be properly quoted by the
    method, unless a parenthesis is found in the name.
    [$unique] (bool|string) Whether to make this a UNIQUE index constraint.
    You can pass 'true' or 'INDEX_UNIQUE' to create a unique index, 'false' to
    make a non-unique index using the default index type, or one of the
    following constants to specify the index method to use: 'INDEX_B_TREE',
    'INDEX_HASH', 'INDEX_GIST', 'INDEX_GIN'.


*yii/db/pgsql/QueryBuilder::dropIndex*			public
>
 dropIndex($name, $table)
<
return (string) The SQL statement for dropping an index.

 Builds a SQL statement for dropping an index.

    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/db/pgsql/QueryBuilder::addUnique*			public

 See |yii/db/QueryBuilder::addUnique|


*yii/db/pgsql/QueryBuilder::dropUnique*			public

 See |yii/db/QueryBuilder::dropUnique|


*yii/db/pgsql/QueryBuilder::addCheck*			public

 See |yii/db/QueryBuilder::addCheck|


*yii/db/pgsql/QueryBuilder::dropCheck*			public

 See |yii/db/QueryBuilder::dropCheck|


*yii/db/pgsql/QueryBuilder::addDefaultValue*		public

 See |yii/db/QueryBuilder::addDefaultValue|


*yii/db/pgsql/QueryBuilder::dropDefaultValue*		public

 See |yii/db/QueryBuilder::dropDefaultValue|


*yii/db/pgsql/QueryBuilder::resetSequence*		public
>
 resetSequence($tableName, $value='null')
<
return (string) The SQL statement for resetting sequence

 Creates a SQL statement for resetting the sequence value of a table's primary
 key.

 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.

    [$tableName] (string) The name of the table whose primary key sequence
    will be reset
    [$value] (mixed) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/pgsql/QueryBuilder::checkIntegrity*		public
>
 checkIntegrity($check='true', $schema='''', $table='''')
<
return (string) The SQL statement for checking integrity

 Builds a SQL statement for enabling or disabling integrity check.

    [$check] (bool) Whether to turn on or off the integrity check.
    [$schema] (string) The schema of the tables.
    [$table] (string) The table name.


*yii/db/pgsql/QueryBuilder::addCommentOnColumn*		public

 See |yii/db/QueryBuilder::addCommentOnColumn|


*yii/db/pgsql/QueryBuilder::addCommentOnTable*		public

 See |yii/db/QueryBuilder::addCommentOnTable|


*yii/db/pgsql/QueryBuilder::dropCommentFromColumn*	public

 See |yii/db/QueryBuilder::dropCommentFromColumn|


*yii/db/pgsql/QueryBuilder::dropCommentFromTable*		public

 See |yii/db/QueryBuilder::dropCommentFromTable|


*yii/db/pgsql/QueryBuilder::createView*			public

 See |yii/db/QueryBuilder::createView|


*yii/db/pgsql/QueryBuilder::dropView*			public

 See |yii/db/QueryBuilder::dropView|


*yii/db/pgsql/QueryBuilder::getColumnType*		public

 See |yii/db/QueryBuilder::getColumnType|


*yii/db/pgsql/QueryBuilder::buildSelect*			public

 See |yii/db/QueryBuilder::buildSelect|


*yii/db/pgsql/QueryBuilder::buildFrom*			public

 See |yii/db/QueryBuilder::buildFrom|


*yii/db/pgsql/QueryBuilder::buildJoin*			public

 See |yii/db/QueryBuilder::buildJoin|


*yii/db/pgsql/QueryBuilder::buildWhere*			public

 See |yii/db/QueryBuilder::buildWhere|


*yii/db/pgsql/QueryBuilder::buildGroupBy*			public

 See |yii/db/QueryBuilder::buildGroupBy|


*yii/db/pgsql/QueryBuilder::buildHaving*			public

 See |yii/db/QueryBuilder::buildHaving|


*yii/db/pgsql/QueryBuilder::buildOrderByAndLimit*		public

 See |yii/db/QueryBuilder::buildOrderByAndLimit|


*yii/db/pgsql/QueryBuilder::buildOrderBy*			public

 See |yii/db/QueryBuilder::buildOrderBy|


*yii/db/pgsql/QueryBuilder::buildLimit*			public

 See |yii/db/QueryBuilder::buildLimit|


*yii/db/pgsql/QueryBuilder::hasLimit*			protected

 See |yii/db/QueryBuilder::hasLimit|


*yii/db/pgsql/QueryBuilder::hasOffset*			protected

 See |yii/db/QueryBuilder::hasOffset|


*yii/db/pgsql/QueryBuilder::buildUnion*			public

 See |yii/db/QueryBuilder::buildUnion|


*yii/db/pgsql/QueryBuilder::buildColumns*			public

 See |yii/db/QueryBuilder::buildColumns|


*yii/db/pgsql/QueryBuilder::buildCondition*		public

 See |yii/db/QueryBuilder::buildCondition|


*yii/db/pgsql/QueryBuilder::createConditionFromArray*	public

 See |yii/db/QueryBuilder::createConditionFromArray|


*yii/db/pgsql/QueryBuilder::buildHashCondition*		public

 See |yii/db/QueryBuilder::buildHashCondition|


*yii/db/pgsql/QueryBuilder::buildAndCondition*		public

 See |yii/db/QueryBuilder::buildAndCondition|


*yii/db/pgsql/QueryBuilder::buildNotCondition*		public

 See |yii/db/QueryBuilder::buildNotCondition|


*yii/db/pgsql/QueryBuilder::buildBetweenCondition*	public

 See |yii/db/QueryBuilder::buildBetweenCondition|


*yii/db/pgsql/QueryBuilder::buildInCondition*		public

 See |yii/db/QueryBuilder::buildInCondition|


*yii/db/pgsql/QueryBuilder::buildLikeCondition*		public

 See |yii/db/QueryBuilder::buildLikeCondition|


*yii/db/pgsql/QueryBuilder::buildExistsCondition*		public

 See |yii/db/QueryBuilder::buildExistsCondition|


*yii/db/pgsql/QueryBuilder::buildSimpleCondition*		public

 See |yii/db/QueryBuilder::buildSimpleCondition|


*yii/db/pgsql/QueryBuilder::selectExists*			public

 See |yii/db/QueryBuilder::selectExists|


*yii/db/pgsql/QueryBuilder::bindParam*			public

 See |yii/db/QueryBuilder::bindParam|



 vim:tw=78:ts=8:ft=help:norl:
