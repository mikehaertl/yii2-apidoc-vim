
*yii/db/pgsql/QueryBuilder*   >> |yii/db/QueryBuilder|
===========================


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/QueryBuilder::$db|
 |yii/db/QueryBuilder::$separator|
 |yii/db/QueryBuilder::$conditionBuilders|
 |yii/db/QueryBuilder::$conditionClasses|
 |yii/db/QueryBuilder::$expressionBuilders|


$typeMap				*yii/db/pgsql/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/db/QueryBuilder::__construct|
 |yii/db/QueryBuilder::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|
 |yii/db/QueryBuilder::setExpressionBuilders|
 |yii/db/QueryBuilder::setConditionClasses|
 |yii/db/QueryBuilder::build|
 |yii/db/QueryBuilder::buildExpression|
 |yii/db/QueryBuilder::getExpressionBuilder|
 |yii/db/QueryBuilder::prepareInsertValues|
 |yii/db/QueryBuilder::prepareInsertSelectSubQuery|
 |yii/db/QueryBuilder::prepareUpsertColumns|
 |yii/db/QueryBuilder::prepareUpdateSets|
 |yii/db/QueryBuilder::delete|
 |yii/db/QueryBuilder::createTable|
 |yii/db/QueryBuilder::dropTable|
 |yii/db/QueryBuilder::addPrimaryKey|
 |yii/db/QueryBuilder::dropPrimaryKey|
 |yii/db/QueryBuilder::addColumn|
 |yii/db/QueryBuilder::dropColumn|
 |yii/db/QueryBuilder::renameColumn|
 |yii/db/QueryBuilder::addForeignKey|
 |yii/db/QueryBuilder::dropForeignKey|
 |yii/db/QueryBuilder::addUnique|
 |yii/db/QueryBuilder::dropUnique|
 |yii/db/QueryBuilder::addCheck|
 |yii/db/QueryBuilder::dropCheck|
 |yii/db/QueryBuilder::addDefaultValue|
 |yii/db/QueryBuilder::dropDefaultValue|
 |yii/db/QueryBuilder::executeResetSequence|
 |yii/db/QueryBuilder::addCommentOnColumn|
 |yii/db/QueryBuilder::addCommentOnTable|
 |yii/db/QueryBuilder::dropCommentFromColumn|
 |yii/db/QueryBuilder::dropCommentFromTable|
 |yii/db/QueryBuilder::createView|
 |yii/db/QueryBuilder::dropView|
 |yii/db/QueryBuilder::getColumnType|
 |yii/db/QueryBuilder::buildSelect|
 |yii/db/QueryBuilder::buildFrom|
 |yii/db/QueryBuilder::buildJoin|
 |yii/db/QueryBuilder::buildWhere|
 |yii/db/QueryBuilder::buildGroupBy|
 |yii/db/QueryBuilder::buildHaving|
 |yii/db/QueryBuilder::buildOrderByAndLimit|
 |yii/db/QueryBuilder::buildOrderBy|
 |yii/db/QueryBuilder::buildLimit|
 |yii/db/QueryBuilder::hasLimit|
 |yii/db/QueryBuilder::hasOffset|
 |yii/db/QueryBuilder::buildUnion|
 |yii/db/QueryBuilder::buildColumns|
 |yii/db/QueryBuilder::buildCondition|
 |yii/db/QueryBuilder::createConditionFromArray|
 |yii/db/QueryBuilder::buildHashCondition|
 |yii/db/QueryBuilder::buildAndCondition|
 |yii/db/QueryBuilder::buildNotCondition|
 |yii/db/QueryBuilder::buildBetweenCondition|
 |yii/db/QueryBuilder::buildInCondition|
 |yii/db/QueryBuilder::buildLikeCondition|
 |yii/db/QueryBuilder::buildExistsCondition|
 |yii/db/QueryBuilder::buildSimpleCondition|
 |yii/db/QueryBuilder::selectExists|
 |yii/db/QueryBuilder::bindParam|


*yii/db/pgsql/QueryBuilder::defaultConditionClasses*	protected
>
 defaultConditionClasses()
<
return (array) 

 Contains array of default condition classes. Extend this method, if you want
 to change default condition classes for the query builder. See
 'conditionClasses' docs for details.








*yii/db/pgsql/QueryBuilder::defaultExpressionBuilders*	protected
>
 defaultExpressionBuilders()
<
return (array) 

 Contains array of default expression builders. Extend this method and
 override it, if you want to change default expression builders for this query
 builder. See 'expressionBuilders' docs for details.








*yii/db/pgsql/QueryBuilder::insert*			public
>
 insert($table, $columns, $params)
<
return (string) The INSERT SQL

 Creates an INSERT SQL statement.



 For example,

   $sql = $queryBuilder->insert('user', [
       'name' => 'Sam',
       'age' => 30,
   ], $params);

 The method will properly escape the table and column names.



    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array|\yii\db\Query) The column data (name => value) to be
    inserted into the table or instance of 'yii\db\Query|Query' to perform
    INSERT INTO ... SELECT SQL statement. Passing of 'yii\db\Query|Query' is
    available since version 2.0.11.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the DB command later.


*yii/db/pgsql/QueryBuilder::batchInsert*			public
>
 batchInsert($table, $columns, $rows, $params='[]')
<
return (string) The batch INSERT SQL statement

 Generates a batch INSERT SQL statement.



 For example,

   $sql = $queryBuilder->batchInsert('user', ['name', 'age'], [
       ['Tom', 30],
       ['Jane', 20],
       ['Linda', 25],
   ]);

 Note that the values in each row must match the corresponding column names.

 The method will properly escape the column names, and quote the values to be
 inserted.



    [$table] (string) The table that new rows will be inserted into.
    [$columns] (array) The column names
    [$rows] (array|\Generator) The rows to be batch inserted into the table
    [$params] (array) The binding parameters. This parameter exists since
    2.0.14


*yii/db/pgsql/QueryBuilder::upsert*			public
>
 upsert($table, $insertColumns, $updateColumns, $params)
<
return (string) The resulting SQL.

 Creates an SQL statement to insert rows into a database table if they do not
 already exist (matching unique constraints), or update them if they do.



 For example,

   $sql = $queryBuilder->upsert('pages', [
       'name' => 'Front page',
       'url' => 'http://example.com/', // url is unique
       'visits' => 0,
   ], [
       'visits' => new \yii\db\Expression('visits + 1'),
   ], $params);

 The method will properly escape the table and column names.



    [$table] (string) The table that new rows will be inserted into/updated
    in.
    [$insertColumns] (array|\yii\db\Query) The column data (name => value) to
    be inserted into the table or instance of 'Query' to perform 'INSERT INTO
    ... SELECT' SQL statement.
    [$updateColumns] (array|bool) The column data (name => value) to be
    updated if they already exist. If 'true' is passed, the column data will
    be updated to match the insert column data. If 'false' is passed, no
    update will be performed if the column data already exists.
    [$params] (array) The binding parameters that will be generated by this
    method. They should be bound to the DB command later.


*yii/db/pgsql/QueryBuilder::update*			public
>
 update($table, $columns, $condition, $params)
<
return (string) The UPDATE SQL

 Creates an UPDATE SQL statement.



 For example,

   $params = [];
   $sql = $queryBuilder->update('user', ['status' => 1], 'age > 30', $params);

 The method will properly escape the table and column names.



    [$table] (string) The table to be updated.
    [$columns] (array) The column data (name => value) to be updated.
    [$condition] (array|string) The condition that will be put in the WHERE
    part. Please refer to 'Query::where()' on how to specify condition.
    [$params] (array) The binding parameters that will be modified by this
    method so that they can be bound to the DB command later.


*yii/db/pgsql/QueryBuilder::renameTable*			public
>
 renameTable($oldName, $newName)
<
return (string) The SQL statement for renaming a DB table.

 Builds a SQL statement for renaming a DB table.

    [$oldName] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/pgsql/QueryBuilder::truncateTable*		public
>
 truncateTable($table)
<
return (string) The SQL statement for truncating a DB table.

 Builds a SQL statement for truncating a DB table.

 Explicitly restarts identity for PGSQL to be consistent with other databases
 which all do this by default.

    [$table] (string) The table to be truncated. The name will be properly
    quoted by the method.


*yii/db/pgsql/QueryBuilder::alterColumn*			public
>
 alterColumn($table, $column, $type)
<
return (string) The SQL statement for changing the definition of a column.

 Builds a SQL statement for changing the definition of a column.

    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The new column type. The 'getColumnType()' method will be
    invoked to convert abstract column type (if any) into the physical one.
    Anything that is not recognized as abstract type will be kept in the
    generated SQL. For example, 'string' will be turned into 'varchar(255)',
    while 'string not null' will become 'varchar(255) not null'. You can also
    use PostgreSQL-specific syntax such as 'SET NOT NULL'.


*yii/db/pgsql/QueryBuilder::createIndex*			public
>
 createIndex($name, $table, $columns, $unique='false')
<
return (string) The SQL statement for creating a new index.

 Builds a SQL statement for creating a new index.

    [$name] (string) The name of the index. The name will be properly quoted
    by the method.
    [$table] (string) The table that the new index will be created for. The
    table name will be properly quoted by the method.
    [$columns] (string|array) The column(s) that should be included in the
    index. If there are multiple columns, separate them with commas or use an
    array to represent them. Each column name will be properly quoted by the
    method, unless a parenthesis is found in the name.
    [$unique] (bool|string) Whether to make this a UNIQUE index constraint.
    You can pass 'true' or 'INDEX_UNIQUE' to create a unique index, 'false' to
    make a non-unique index using the default index type, or one of the
    following constants to specify the index method to use: 'INDEX_B_TREE',
    'INDEX_HASH', 'INDEX_GIST', 'INDEX_GIN'.


*yii/db/pgsql/QueryBuilder::dropIndex*			public
>
 dropIndex($name, $table)
<
return (string) The SQL statement for dropping an index.

 Builds a SQL statement for dropping an index.

    [$name] (string) The name of the index to be dropped. The name will be
    properly quoted by the method.
    [$table] (string) The table whose index is to be dropped. The name will be
    properly quoted by the method.


*yii/db/pgsql/QueryBuilder::resetSequence*		public
>
 resetSequence($tableName, $value='null')
<
return (string) The SQL statement for resetting sequence

 Creates a SQL statement for resetting the sequence value of a table's primary
 key.

 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.

    [$tableName] (string) The name of the table whose primary key sequence
    will be reset
    [$value] (mixed) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/pgsql/QueryBuilder::checkIntegrity*		public
>
 checkIntegrity($check='true', $schema='''', $table='''')
<
return (string) The SQL statement for checking integrity

 Builds a SQL statement for enabling or disabling integrity check.

    [$check] (bool) Whether to turn on or off the integrity check.
    [$schema] (string) The schema of the tables.
    [$table] (string) The table name.



 vim:tw=78:ts=8:ft=help:norl:
