
*yii/jui/Widget*   >> |yii/base/Widget|
================

SUBCLASSES
------------------------------------------------------------------------------

|yii/jui/Droppable|
|yii/jui/InputWidget|
|yii/jui/ProgressBar|
|yii/jui/Spinner|
|yii/jui/Tabs|
|yii/jui/Accordion|
|yii/jui/Resizable|
|yii/jui/Selectable|
|yii/jui/AutoComplete|
|yii/jui/SliderInput|
|yii/jui/Draggable|
|yii/jui/Dialog|
|yii/jui/Sortable|
|yii/jui/Slider|
|yii/jui/DatePicker|


PROPERTY DETAILS
------------------------------------------------------------------------------

$counter				*yii/jui/Widget::$counter*
 See |yii/base/Widget::$counter|

$autoIdPrefix				*yii/jui/Widget::$autoIdPrefix*
 See |yii/base/Widget::$autoIdPrefix|

$stack					*yii/jui/Widget::$stack*
 See |yii/base/Widget::$stack|

$options				*yii/jui/Widget::$options*
 (array) The HTML attributes for the widget container tag.

$clientOptions				*yii/jui/Widget::$clientOptions*
 (array) The options for the underlying jQuery UI widget. Please refer to the
 corresponding jQuery UI widget Web page for possible options. For example,
 [this page](http://api.jqueryui.com/accordion/) shows how to use the
 "Accordion" widget and the supported options (e.g. "header").

$clientEvents				*yii/jui/Widget::$clientEvents*
 (array) The event handlers for the underlying jQuery UI widget. Please refer
 to the corresponding jQuery UI widget Web page for possible events. For
 example, [this page](http://api.jqueryui.com/accordion/) shows how to use the
 "Accordion" widget and the supported events (e.g. "create"). Keys are the
 event names and values are javascript code that is passed to the '.on()'
 function as the event handler.

 For example you could write the following in your widget configuration:

   'clientEvents' => [
       'change' => 'function () { alert('event "change" occured.'); }'
   ],



$clientEventMap				*yii/jui/Widget::$clientEventMap*
 (array) Event names mapped to what should be specified in '.on()'. If empty,
 it is assumed that event passed to clientEvents is prefixed with widget name.

$behaviors				*yii/jui/Widget::$behaviors*
 See |yii/base/Component::$behaviors|

$id					*yii/jui/Widget::$id*
 See |yii/base/Widget::$id|

$view					*yii/jui/Widget::$view*
 See |yii/base/Widget::$view|

$viewPath				*yii/jui/Widget::$viewPath*
 See |yii/base/Widget::$viewPath|



METHOD DETAILS
------------------------------------------------------------------------------

*yii/jui/Widget::className*				public
 See |yii/base/Object::className|


*yii/jui/Widget::__construct*				public
 See |yii/base/Object::__construct|


*yii/jui/Widget::init*					public
>
 init()
<
(void)

 If you override this method, make sure you call the parent implementation
 first.


*yii/jui/Widget::__get*					public
 See |yii/base/Component::__get|


*yii/jui/Widget::__set*					public
 See |yii/base/Component::__set|


*yii/jui/Widget::__isset*					public
 See |yii/base/Component::__isset|


*yii/jui/Widget::__unset*					public
 See |yii/base/Component::__unset|


*yii/jui/Widget::__call*					public
 See |yii/base/Component::__call|


*yii/jui/Widget::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/jui/Widget::canGetProperty*				public
 See |yii/base/Component::canGetProperty|


*yii/jui/Widget::canSetProperty*				public
 See |yii/base/Component::canSetProperty|


*yii/jui/Widget::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/jui/Widget::__clone*					public
 See |yii/base/Component::__clone|


*yii/jui/Widget::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/jui/Widget::hasEventHandlers*			public
 See |yii/base/Component::hasEventHandlers|


*yii/jui/Widget::on*					public
 See |yii/base/Component::on|


*yii/jui/Widget::off*					public
 See |yii/base/Component::off|


*yii/jui/Widget::trigger*					public
 See |yii/base/Component::trigger|


*yii/jui/Widget::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/jui/Widget::getBehaviors*				public
 See |yii/base/Component::getBehaviors|


*yii/jui/Widget::attachBehavior*				public
 See |yii/base/Component::attachBehavior|


*yii/jui/Widget::attachBehaviors*				public
 See |yii/base/Component::attachBehaviors|


*yii/jui/Widget::detachBehavior*				public
 See |yii/base/Component::detachBehavior|


*yii/jui/Widget::detachBehaviors*				public
 See |yii/base/Component::detachBehaviors|


*yii/jui/Widget::ensureBehaviors*				public
 See |yii/base/Component::ensureBehaviors|


*yii/jui/Widget::begin*					public
 See |yii/base/Widget::begin|


*yii/jui/Widget::end*					public
 See |yii/base/Widget::end|


*yii/jui/Widget::widget*					public
 See |yii/base/Widget::widget|


*yii/jui/Widget::getId*					public
 See |yii/base/Widget::getId|


*yii/jui/Widget::setId*					public
 See |yii/base/Widget::setId|


*yii/jui/Widget::getView*					public
 See |yii/base/Widget::getView|


*yii/jui/Widget::setView*					public
 See |yii/base/Widget::setView|


*yii/jui/Widget::run*					public
 See |yii/base/Widget::run|


*yii/jui/Widget::render*					public
 See |yii/base/Widget::render|


*yii/jui/Widget::renderFile*				public
 See |yii/base/Widget::renderFile|


*yii/jui/Widget::getViewPath*				public
 See |yii/base/Widget::getViewPath|


*yii/jui/Widget::registerClientOptions*			protected
>
 registerClientOptions($name, $id)
<
(void)

    [$name] (string) The name of the jQuery UI widget
    [$id] (string) The ID of the widget


*yii/jui/Widget::registerClientEvents*			protected
>
 registerClientEvents($name, $id)
<
(void)

    [$name] (string) The name of the jQuery UI widget
    [$id] (string) The ID of the widget


*yii/jui/Widget::registerWidget*				protected
>
 registerWidget($name, $id='null')
<
(void)

    [$name] (string) The name of the jQuery UI widget
    [$id] (string) The ID of the widget. If null, it will use the 'id' value
    of 'options'.



 vim:tw=78:ts=8:ft=help:norl:
