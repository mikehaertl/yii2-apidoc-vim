
*yii/i18n/I18N*   >> |yii/base/Component|
===============

DESCRIPTION
------------------------------------------------------------------------------

 I18N is configured as an application component in '\yii\base\Application' by
 default. You can access that instance via 'Yii::$app->i18n'.


PROPERTY DETAILS
------------------------------------------------------------------------------

$translations				*yii/i18n/I18N::$translations*
 (array) List of 'MessageSource' configurations or objects. The array keys are
 message category patterns, and the array values are the corresponding
 'MessageSource' objects or the configurations for creating the
 'MessageSource' objects.

 The message category patterns can contain the wildcard '*' at the end to
 match multiple categories with the same prefix. For example, 'app/*' matches
 both 'app/cat1' and 'app/cat2'.

 The '*' category pattern will match all categories that do not match any
 other category patterns.

 This property may be modified on the fly by extensions who want to have their
 own message sources registered under their own namespaces.

 The category "yii" and "app" are always defined. The former refers to the
 messages used in the Yii core framework code, while the latter refers to the
 default message category for custom application code. By default, both of
 these categories use 'PhpMessageSource' and the corresponding message files
 are stored under "@yii/messages" and "@app/messages", respectively.

 You may override the configuration of both categories.

$behaviors				*yii/i18n/I18N::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$messageFormatter			*yii/i18n/I18N::$messageFormatter*
 (\yii\i18n\MessageFormatter) The message formatter to be used to format
 message via ICU message format.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/i18n/I18N::className*				public
 See |yii/base/Object::className|


*yii/i18n/I18N::__construct*				public
 See |yii/base/Object::__construct|


*yii/i18n/I18N::init*					public
>
 init()
<
(void)



*yii/i18n/I18N::__get*					public
 See |yii/base/Component::__get|


*yii/i18n/I18N::__set*					public
 See |yii/base/Component::__set|


*yii/i18n/I18N::__isset*					public
 See |yii/base/Component::__isset|


*yii/i18n/I18N::__unset*					public
 See |yii/base/Component::__unset|


*yii/i18n/I18N::__call*					public
 See |yii/base/Component::__call|


*yii/i18n/I18N::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/i18n/I18N::canGetProperty*				public
 See |yii/base/Component::canGetProperty|


*yii/i18n/I18N::canSetProperty*				public
 See |yii/base/Component::canSetProperty|


*yii/i18n/I18N::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/i18n/I18N::__clone*					public
 See |yii/base/Component::__clone|


*yii/i18n/I18N::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/i18n/I18N::hasEventHandlers*				public
 See |yii/base/Component::hasEventHandlers|


*yii/i18n/I18N::on*					public
 See |yii/base/Component::on|


*yii/i18n/I18N::off*					public
 See |yii/base/Component::off|


*yii/i18n/I18N::trigger*					public
 See |yii/base/Component::trigger|


*yii/i18n/I18N::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/i18n/I18N::getBehaviors*				public
 See |yii/base/Component::getBehaviors|


*yii/i18n/I18N::attachBehavior*				public
 See |yii/base/Component::attachBehavior|


*yii/i18n/I18N::attachBehaviors*				public
 See |yii/base/Component::attachBehaviors|


*yii/i18n/I18N::detachBehavior*				public
 See |yii/base/Component::detachBehavior|


*yii/i18n/I18N::detachBehaviors*				public
 See |yii/base/Component::detachBehaviors|


*yii/i18n/I18N::ensureBehaviors*				public
 See |yii/base/Component::ensureBehaviors|


*yii/i18n/I18N::translate*				public
>
 translate($category, $message, $params, $language)
<
(string) The translated and formatted message.

 After translation the message will be formatted using 'MessageFormatter' if
 it contains ICU message format and '$params' are not empty.
    [$category] (string) The message category.
    [$message] (string) The message to be translated.
    [$params] (array) The parameters that will be used to replace the
    corresponding placeholders in the message.
    [$language] (string) The language code (e.g. 'en-US', 'en').


*yii/i18n/I18N::format*					public
>
 format($message, $params, $language)
<
(string) The formatted message.

    [$message] (string) The message to be formatted.
    [$params] (array) The parameters that will be used to replace the
    corresponding placeholders in the message.
    [$language] (string) The language code (e.g. 'en-US', 'en').


*yii/i18n/I18N::getMessageFormatter*			public
>
 getMessageFormatter()
<
(\yii\i18n\MessageFormatter) The message formatter to be used to format
message via ICU message format.



*yii/i18n/I18N::setMessageFormatter*			public
>
 setMessageFormatter($value)
<
(void)

    [$value] (string|array|\yii\i18n\MessageFormatter) The message formatter
    to be used to format message via ICU message format. Can be given as array
    or string configuration that will be given to 'Yii::createObject' to
    create an instance or a 'MessageFormatter' instance.


*yii/i18n/I18N::getMessageSource*				public
>
 getMessageSource($category)
<
(\yii\i18n\MessageSource) The message source for the given category.

    [$category] (string) The category name.



 vim:tw=78:ts=8:ft=help:norl:
