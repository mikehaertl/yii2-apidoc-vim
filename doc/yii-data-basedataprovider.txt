
*yii/data/BaseDataProvider*   >> |yii/base/Component|
===========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/data/ActiveDataProvider|
|yii/data/ArrayDataProvider|
|yii/data/SqlDataProvider|
|yii/sphinx/ActiveDataProvider|


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/data/BaseDataProvider::$id*

 (string) An ID that uniquely identifies the data provider among all data
 providers. You should set this property if the same page contains two or more
 different data providers. Otherwise, the 'pagination' and 'sort' may not work
 properly.

$behaviors				*yii/data/BaseDataProvider::$behaviors*

 See |yii/base/Component::$behaviors|

$models					*yii/data/BaseDataProvider::$models*

 (array) The list of data models in the current page.

$keys					*yii/data/BaseDataProvider::$keys*

 (array) The list of key values corresponding to 'models'. Each data model in
 'models' is uniquely identified by the corresponding key value in this array.

$count					*yii/data/BaseDataProvider::$count*

 (integer) The number of data models in the current page.

$totalCount				*yii/data/BaseDataProvider::$totalCount*

 (integer) Total number of possible data models.

$pagination				*yii/data/BaseDataProvider::$pagination*

 (\yii\data\Pagination|boolean) The pagination object. If this is false, it
 means the pagination is disabled.

$sort					*yii/data/BaseDataProvider::$sort*

 (\yii\data\Sort|boolean) The sorting object. If this is false, it means the
 sorting is disabled.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/data/BaseDataProvider::className*			public

 See |yii/base/Object::className|


*yii/data/BaseDataProvider::__construct*			public

 See |yii/base/Object::__construct|


*yii/data/BaseDataProvider::init*				public

 See |yii/base/Object::init|


*yii/data/BaseDataProvider::__get*			public

 See |yii/base/Component::__get|


*yii/data/BaseDataProvider::__set*			public

 See |yii/base/Component::__set|


*yii/data/BaseDataProvider::__isset*			public

 See |yii/base/Component::__isset|


*yii/data/BaseDataProvider::__unset*			public

 See |yii/base/Component::__unset|


*yii/data/BaseDataProvider::__call*			public

 See |yii/base/Component::__call|


*yii/data/BaseDataProvider::hasProperty*			public

 See |yii/base/Component::hasProperty|


*yii/data/BaseDataProvider::canGetProperty*		public

 See |yii/base/Component::canGetProperty|


*yii/data/BaseDataProvider::canSetProperty*		public

 See |yii/base/Component::canSetProperty|


*yii/data/BaseDataProvider::hasMethod*			public

 See |yii/base/Component::hasMethod|


*yii/data/BaseDataProvider::__clone*			public

 See |yii/base/Component::__clone|


*yii/data/BaseDataProvider::behaviors*			public

 See |yii/base/Component::behaviors|


*yii/data/BaseDataProvider::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/data/BaseDataProvider::on*				public

 See |yii/base/Component::on|


*yii/data/BaseDataProvider::off*				public

 See |yii/base/Component::off|


*yii/data/BaseDataProvider::trigger*			public

 See |yii/base/Component::trigger|


*yii/data/BaseDataProvider::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/data/BaseDataProvider::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/data/BaseDataProvider::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/data/BaseDataProvider::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/data/BaseDataProvider::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/data/BaseDataProvider::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/data/BaseDataProvider::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/data/BaseDataProvider::prepareModels*		protected
>
 prepareModels()
<
return (array) The available data models



*yii/data/BaseDataProvider::prepareKeys*			protected
>
 prepareKeys($models)
<
return (array) The keys

    [$models] (array) The available data models


*yii/data/BaseDataProvider::prepareTotalCount*		protected
>
 prepareTotalCount()
<
return (integer) Total number of data models in this data provider.



*yii/data/BaseDataProvider::prepare*			public
>
 prepare($forcePrepare='false')
<
return (void)

 This method will prepare the data models and keys that can be retrieved via
 'getModels()' and 'getKeys()'.

 This method will be implicitly called by 'getModels()' and 'getKeys()' if it
 has not been called before.

    [$forcePrepare] (boolean) Whether to force data preparation even if it has
    been done before.


*yii/data/BaseDataProvider::getModels*			public
>
 getModels()
<
return (array) The list of data models in the current page.



*yii/data/BaseDataProvider::setModels*			public
>
 setModels($models)
<
return (void)

    [$models] (array) The models in the current page


*yii/data/BaseDataProvider::getKeys*			public
>
 getKeys()
<
return (array) The list of key values corresponding to 'models'. Each data model in
'models' is uniquely identified by the corresponding key value in this array.



*yii/data/BaseDataProvider::setKeys*			public
>
 setKeys($keys)
<
return (void)

    [$keys] (array) The list of key values corresponding to 'models'.


*yii/data/BaseDataProvider::getCount*			public
>
 getCount()
<
return (integer) The number of data models in the current page.



*yii/data/BaseDataProvider::getTotalCount*		public
>
 getTotalCount()
<
return (integer) Total number of possible data models.

 When 'pagination' is false, this returns the same value as 'count'.
 Otherwise, it will call 'prepareTotalCount()' to get the count.


*yii/data/BaseDataProvider::setTotalCount*		public
>
 setTotalCount($value)
<
return (void)

    [$value] (integer) The total number of data models.


*yii/data/BaseDataProvider::getPagination*		public
>
 getPagination()
<
return (\yii\data\Pagination|boolean) The pagination object. If this is false, it
means the pagination is disabled.

 Note that you should call 'prepare()' or 'getModels()' first to get correct
 values of 'Pagination::totalCount' and 'Pagination::pageCount'.


*yii/data/BaseDataProvider::setPagination*		public
>
 setPagination($value)
<
return (void)

    [$value] (array|\yii\data\Pagination|boolean) The pagination to be used by
    this data provider. This can be one of the following:


      - a configuration array for creating the pagination object. The
      "class" element defaults   to 'yii\data\Pagination' 
      - an instance of 'Pagination' or its subclass 
      - false, if pagination needs to be disabled.


*yii/data/BaseDataProvider::getSort*			public
>
 getSort()
<
return (\yii\data\Sort|boolean) The sorting object. If this is false, it means the
sorting is disabled.



*yii/data/BaseDataProvider::setSort*			public
>
 setSort($value)
<
return (void)

    [$value] (array|\yii\data\Sort|boolean) The sort definition to be used by
    this data provider. This can be one of the following:


      - a configuration array for creating the sort definition object. The
      "class" element defaults   to 'yii\data\Sort' 
      - an instance of 'Sort' or its subclass 
      - false, if sorting needs to be disabled.


*yii/data/BaseDataProvider::refresh*			public
>
 refresh()
<
return (void)

 After calling this method, if 'getModels()', 'getKeys()' or 'getTotalCount()'
 is called again, they will re-execute the query and return the latest data
 available.



 vim:tw=78:ts=8:ft=help:norl:
