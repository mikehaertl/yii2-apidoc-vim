
*yii/data/BaseDataProvider*   >> |yii/base/Component|
===========================

SUBCLASSES
------------------------------------------------------------------------------

|yii/data/ActiveDataProvider|
|yii/data/SqlDataProvider|
|yii/data/ArrayDataProvider|
|yii/debug/models/timeline/DataProvider|
|yii/elasticsearch/ActiveDataProvider|
|yii/sphinx/ActiveDataProvider|

DESCRIPTION
------------------------------------------------------------------------------

 For more details and usage information on BaseDataProvider, see the [guide
 article on data providers](guide:output-data-providers).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/base/Component::$behaviors|


$id					*yii/data/BaseDataProvider::$id*

 (string) An ID that uniquely identifies the data provider among all data
 providers. Generated automatically the following way in case it is not set:


   - First data provider ID is empty. 
   - Second and all subsequent data provider IDs are: "dp-1", "dp-2",
   etc.

$models					*yii/data/BaseDataProvider::$models*

 (array) The list of data models in the current page.

$keys					*yii/data/BaseDataProvider::$keys*

 (array) The list of key values corresponding to 'models'. Each data model in
 'models' is uniquely identified by the corresponding key value in this array.

$count					*yii/data/BaseDataProvider::$count*

 (int) The number of data models in the current page.

$totalCount				*yii/data/BaseDataProvider::$totalCount*

 (int) Total number of possible data models.

$pagination				*yii/data/BaseDataProvider::$pagination*

 (\yii\data\Pagination|false) The pagination object. If this is false, it
 means the pagination is disabled.

$sort					*yii/data/BaseDataProvider::$sort*

 (\yii\data\Sort|bool) The sorting object. If this is false, it means the
 sorting is disabled.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|


*yii/data/BaseDataProvider::init*				public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/data/BaseDataProvider::prepareModels*		protected
>
 prepareModels()
<
return (array) The available data models

 Prepares the data models that will be made available in the current page.


*yii/data/BaseDataProvider::prepareKeys*			protected
>
 prepareKeys($models)
<
return (array) The keys

 Prepares the keys associated with the currently available data models.

    [$models] (array) The available data models


*yii/data/BaseDataProvider::prepareTotalCount*		protected
>
 prepareTotalCount()
<
return (int) Total number of data models in this data provider.

 Returns a value indicating the total number of data models in this data
 provider.


*yii/data/BaseDataProvider::prepare*			public
>
 prepare($forcePrepare='false')
<
return (void)

 Prepares the data models and keys.

 This method will prepare the data models and keys that can be retrieved via
 'getModels()' and 'getKeys()'.

 This method will be implicitly called by 'getModels()' and 'getKeys()' if it
 has not been called before.

    [$forcePrepare] (bool) Whether to force data preparation even if it has
    been done before.


*yii/data/BaseDataProvider::getModels*			public
>
 getModels()
<
return (array) The list of data models in the current page.

 Returns the data models in the current page.


*yii/data/BaseDataProvider::setModels*			public
>
 setModels($models)
<
return (void)

 Sets the data models in the current page.

    [$models] (array) The models in the current page


*yii/data/BaseDataProvider::getKeys*			public
>
 getKeys()
<
return (array) The list of key values corresponding to 'models'. Each data model in
'models' is uniquely identified by the corresponding key value in this array.

 Returns the key values associated with the data models.


*yii/data/BaseDataProvider::setKeys*			public
>
 setKeys($keys)
<
return (void)

 Sets the key values associated with the data models.

    [$keys] (array) The list of key values corresponding to 'models'.


*yii/data/BaseDataProvider::getCount*			public
>
 getCount()
<
return (int) The number of data models in the current page.

 Returns the number of data models in the current page.


*yii/data/BaseDataProvider::getTotalCount*		public
>
 getTotalCount()
<
return (int) Total number of possible data models.

 Returns the total number of data models.

 When 'pagination' is false, this returns the same value as 'count'.
 Otherwise, it will call 'prepareTotalCount()' to get the count.


*yii/data/BaseDataProvider::setTotalCount*		public
>
 setTotalCount($value)
<
return (void)

 Sets the total number of data models.

    [$value] (int) The total number of data models.


*yii/data/BaseDataProvider::getPagination*		public
>
 getPagination()
<
return (\yii\data\Pagination|false) The pagination object. If this is false, it means
the pagination is disabled.

 Returns the pagination object used by this data provider.

 Note that you should call 'prepare()' or 'getModels()' first to get correct
 values of 'Pagination::totalCount' and 'Pagination::pageCount'.


*yii/data/BaseDataProvider::setPagination*		public
>
 setPagination($value)
<
return (void)

 Sets the pagination for this data provider.

    [$value] (array|\yii\data\Pagination|bool) The pagination to be used by
    this data provider. This can be one of the following:


      - a configuration array for creating the pagination object. The
      "class" element defaults   to 'yii\data\Pagination' 
      - an instance of 'Pagination' or its subclass 
      - false, if pagination needs to be disabled.


*yii/data/BaseDataProvider::getSort*			public
>
 getSort()
<
return (\yii\data\Sort|bool) The sorting object. If this is false, it means the
sorting is disabled.

 Returns the sorting object used by this data provider.


*yii/data/BaseDataProvider::setSort*			public
>
 setSort($value)
<
return (void)

 Sets the sort definition for this data provider.

    [$value] (array|\yii\data\Sort|bool) The sort definition to be used by
    this data provider. This can be one of the following:


      - a configuration array for creating the sort definition object. The
      "class" element defaults   to 'yii\data\Sort' 
      - an instance of 'Sort' or its subclass 
      - false, if sorting needs to be disabled.


*yii/data/BaseDataProvider::refresh*			public
>
 refresh()
<
return (void)

 Refreshes the data provider.

 After calling this method, if 'getModels()', 'getKeys()' or 'getTotalCount()'
 is called again, they will re-execute the query and return the latest data
 available.



 vim:tw=78:ts=8:ft=help:norl:
