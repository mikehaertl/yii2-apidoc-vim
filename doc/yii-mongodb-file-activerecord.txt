
*yii/mongodb/file/ActiveRecord*   >> |yii/mongodb/ActiveRecord|
===============================

DESCRIPTION
------------------------------------------------------------------------------

 To specify source file use the 'file' attribute. It can be specified in one
 of the following ways:  
   - string - full name of the file, which content should be stored in
   GridFS  
   - \yii\web\UploadedFile - uploaded file instance, which content
   should be stored in GridFS

 For example:

   $record = new ImageFile();
   $record->file = '/path/to/some/file.jpg';
   $record->save();

 You can also specify file content via 'newFileContent' attribute:

   $record = new ImageFile();
   $record->newFileContent = 'New file content';
   $record->save();

 Note: 'newFileContent' always takes precedence over 'file'.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/mongodb/file/ActiveRecord::className*		public

 See |yii/base/BaseObject::className|


*yii/mongodb/file/ActiveRecord::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/mongodb/file/ActiveRecord::init*			public

 See |yii/db/BaseActiveRecord::init|


*yii/mongodb/file/ActiveRecord::__get*			public

 See |yii/db/BaseActiveRecord::__get|


*yii/mongodb/file/ActiveRecord::__set*			public

 See |yii/db/BaseActiveRecord::__set|


*yii/mongodb/file/ActiveRecord::__isset*			public

 See |yii/db/BaseActiveRecord::__isset|


*yii/mongodb/file/ActiveRecord::__unset*			public

 See |yii/db/BaseActiveRecord::__unset|


*yii/mongodb/file/ActiveRecord::__call*			public

 See |yii/base/Component::__call|


*yii/mongodb/file/ActiveRecord::hasProperty*		public

 See |yii/base/Component::hasProperty|


*yii/mongodb/file/ActiveRecord::canGetProperty*		public

 See |yii/db/BaseActiveRecord::canGetProperty|


*yii/mongodb/file/ActiveRecord::canSetProperty*		public

 See |yii/db/BaseActiveRecord::canSetProperty|


*yii/mongodb/file/ActiveRecord::hasMethod*		public

 See |yii/base/Component::hasMethod|


*yii/mongodb/file/ActiveRecord::__clone*			public

 See |yii/base/Component::__clone|


*yii/mongodb/file/ActiveRecord::behaviors*		public

 See |yii/base/Component::behaviors|


*yii/mongodb/file/ActiveRecord::hasEventHandlers*		public

 See |yii/base/Component::hasEventHandlers|


*yii/mongodb/file/ActiveRecord::on*			public

 See |yii/base/Component::on|


*yii/mongodb/file/ActiveRecord::off*			public

 See |yii/base/Component::off|


*yii/mongodb/file/ActiveRecord::trigger*			public

 See |yii/base/Component::trigger|


*yii/mongodb/file/ActiveRecord::getBehavior*		public

 See |yii/base/Component::getBehavior|


*yii/mongodb/file/ActiveRecord::getBehaviors*		public

 See |yii/base/Component::getBehaviors|


*yii/mongodb/file/ActiveRecord::attachBehavior*		public

 See |yii/base/Component::attachBehavior|


*yii/mongodb/file/ActiveRecord::attachBehaviors*		public

 See |yii/base/Component::attachBehaviors|


*yii/mongodb/file/ActiveRecord::detachBehavior*		public

 See |yii/base/Component::detachBehavior|


*yii/mongodb/file/ActiveRecord::detachBehaviors*		public

 See |yii/base/Component::detachBehaviors|


*yii/mongodb/file/ActiveRecord::ensureBehaviors*		public

 See |yii/base/Component::ensureBehaviors|


*yii/mongodb/file/ActiveRecord::instance*			public

 See |yii/base/StaticInstanceTrait::instance|


*yii/mongodb/file/ActiveRecord::fields*			public

 See |yii/base/ArrayableTrait::fields|


*yii/mongodb/file/ActiveRecord::extraFields*		public

 See |yii/base/ArrayableTrait::extraFields|


*yii/mongodb/file/ActiveRecord::toArray*			public

 See |yii/base/ArrayableTrait::toArray|


*yii/mongodb/file/ActiveRecord::resolveFields*		protected

 See |yii/base/ArrayableTrait::resolveFields|


*yii/mongodb/file/ActiveRecord::rules*			public

 See |yii/base/Model::rules|


*yii/mongodb/file/ActiveRecord::scenarios*		public

 See |yii/base/Model::scenarios|


*yii/mongodb/file/ActiveRecord::formName*			public

 See |yii/base/Model::formName|


*yii/mongodb/file/ActiveRecord::attributes*		public
>
 attributes()
<
return (array) List of attribute names.

 Returns the list of all attribute names of the model.

 This method could be overridden by child classes to define available
 attributes. Note: all attributes defined in base Active Record class should
 be always present in returned array. For example:

   public function attributes()
   {
       return array_merge(
           parent::attributes(),
           ['tags', 'status']
       );
   }




*yii/mongodb/file/ActiveRecord::attributeLabels*		public

 See |yii/base/Model::attributeLabels|


*yii/mongodb/file/ActiveRecord::attributeHints*		public

 See |yii/base/Model::attributeHints|


*yii/mongodb/file/ActiveRecord::validate*			public

 See |yii/base/Model::validate|


*yii/mongodb/file/ActiveRecord::beforeValidate*		public

 See |yii/base/Model::beforeValidate|


*yii/mongodb/file/ActiveRecord::afterValidate*		public

 See |yii/base/Model::afterValidate|


*yii/mongodb/file/ActiveRecord::getValidators*		public

 See |yii/base/Model::getValidators|


*yii/mongodb/file/ActiveRecord::getActiveValidators*	public

 See |yii/base/Model::getActiveValidators|


*yii/mongodb/file/ActiveRecord::createValidators*		public

 See |yii/base/Model::createValidators|


*yii/mongodb/file/ActiveRecord::isAttributeRequired*	public

 See |yii/base/Model::isAttributeRequired|


*yii/mongodb/file/ActiveRecord::isAttributeSafe*		public

 See |yii/base/Model::isAttributeSafe|


*yii/mongodb/file/ActiveRecord::isAttributeActive*	public

 See |yii/base/Model::isAttributeActive|


*yii/mongodb/file/ActiveRecord::getAttributeLabel*	public

 See |yii/db/BaseActiveRecord::getAttributeLabel|


*yii/mongodb/file/ActiveRecord::getAttributeHint*		public

 See |yii/db/BaseActiveRecord::getAttributeHint|


*yii/mongodb/file/ActiveRecord::hasErrors*		public

 See |yii/base/Model::hasErrors|


*yii/mongodb/file/ActiveRecord::getErrors*		public

 See |yii/base/Model::getErrors|


*yii/mongodb/file/ActiveRecord::getFirstErrors*		public

 See |yii/base/Model::getFirstErrors|


*yii/mongodb/file/ActiveRecord::getFirstError*		public

 See |yii/base/Model::getFirstError|


*yii/mongodb/file/ActiveRecord::addError*			public

 See |yii/base/Model::addError|


*yii/mongodb/file/ActiveRecord::addErrors*		public

 See |yii/base/Model::addErrors|


*yii/mongodb/file/ActiveRecord::clearErrors*		public

 See |yii/base/Model::clearErrors|


*yii/mongodb/file/ActiveRecord::generateAttributeLabel*	public

 See |yii/base/Model::generateAttributeLabel|


*yii/mongodb/file/ActiveRecord::getAttributes*		public

 See |yii/base/Model::getAttributes|


*yii/mongodb/file/ActiveRecord::setAttributes*		public

 See |yii/base/Model::setAttributes|


*yii/mongodb/file/ActiveRecord::onUnsafeAttribute*	public

 See |yii/base/Model::onUnsafeAttribute|


*yii/mongodb/file/ActiveRecord::getScenario*		public

 See |yii/base/Model::getScenario|


*yii/mongodb/file/ActiveRecord::setScenario*		public

 See |yii/base/Model::setScenario|


*yii/mongodb/file/ActiveRecord::safeAttributes*		public

 See |yii/base/Model::safeAttributes|


*yii/mongodb/file/ActiveRecord::activeAttributes*		public

 See |yii/base/Model::activeAttributes|


*yii/mongodb/file/ActiveRecord::load*			public

 See |yii/base/Model::load|


*yii/mongodb/file/ActiveRecord::loadMultiple*		public

 See |yii/base/Model::loadMultiple|


*yii/mongodb/file/ActiveRecord::validateMultiple*		public

 See |yii/base/Model::validateMultiple|


*yii/mongodb/file/ActiveRecord::getIterator*		public

 See |yii/base/Model::getIterator|


*yii/mongodb/file/ActiveRecord::offsetExists*		public

 See |yii/db/BaseActiveRecord::offsetExists|


*yii/mongodb/file/ActiveRecord::offsetGet*		public

 See |yii/base/Model::offsetGet|


*yii/mongodb/file/ActiveRecord::offsetSet*		public

 See |yii/base/Model::offsetSet|


*yii/mongodb/file/ActiveRecord::offsetUnset*		public

 See |yii/db/BaseActiveRecord::offsetUnset|


*yii/mongodb/file/ActiveRecord::findOne*			public

 See |yii/db/ActiveRecordInterface::findOne|


*yii/mongodb/file/ActiveRecord::findAll*			public

 See |yii/db/ActiveRecordInterface::findAll|


*yii/mongodb/file/ActiveRecord::findByCondition*		protected

 See |yii/db/BaseActiveRecord::findByCondition|


*yii/mongodb/file/ActiveRecord::updateAll*		public

 See |yii/db/ActiveRecordInterface::updateAll|


*yii/mongodb/file/ActiveRecord::updateAllCounters*	public

 See |yii/db/BaseActiveRecord::updateAllCounters|


*yii/mongodb/file/ActiveRecord::deleteAll*		public

 See |yii/db/ActiveRecordInterface::deleteAll|


*yii/mongodb/file/ActiveRecord::optimisticLock*		public

 See |yii/db/BaseActiveRecord::optimisticLock|


*yii/mongodb/file/ActiveRecord::hasOne*			public

 See |yii/db/BaseActiveRecord::hasOne|


*yii/mongodb/file/ActiveRecord::hasMany*			public

 See |yii/db/BaseActiveRecord::hasMany|


*yii/mongodb/file/ActiveRecord::createRelationQuery*	protected

 See |yii/db/BaseActiveRecord::createRelationQuery|


*yii/mongodb/file/ActiveRecord::populateRelation*		public

 See |yii/db/ActiveRecordInterface::populateRelation|


*yii/mongodb/file/ActiveRecord::isRelationPopulated*	public

 See |yii/db/BaseActiveRecord::isRelationPopulated|


*yii/mongodb/file/ActiveRecord::getRelatedRecords*	public

 See |yii/db/BaseActiveRecord::getRelatedRecords|


*yii/mongodb/file/ActiveRecord::hasAttribute*		public

 See |yii/db/ActiveRecordInterface::hasAttribute|


*yii/mongodb/file/ActiveRecord::getAttribute*		public

 See |yii/db/ActiveRecordInterface::getAttribute|


*yii/mongodb/file/ActiveRecord::setAttribute*		public

 See |yii/db/ActiveRecordInterface::setAttribute|


*yii/mongodb/file/ActiveRecord::getOldAttributes*		public

 See |yii/db/BaseActiveRecord::getOldAttributes|


*yii/mongodb/file/ActiveRecord::setOldAttributes*		public

 See |yii/db/BaseActiveRecord::setOldAttributes|


*yii/mongodb/file/ActiveRecord::getOldAttribute*		public

 See |yii/db/BaseActiveRecord::getOldAttribute|


*yii/mongodb/file/ActiveRecord::setOldAttribute*		public

 See |yii/db/BaseActiveRecord::setOldAttribute|


*yii/mongodb/file/ActiveRecord::markAttributeDirty*	public

 See |yii/db/BaseActiveRecord::markAttributeDirty|


*yii/mongodb/file/ActiveRecord::isAttributeChanged*	public

 See |yii/db/BaseActiveRecord::isAttributeChanged|


*yii/mongodb/file/ActiveRecord::getDirtyAttributes*	public

 See |yii/db/BaseActiveRecord::getDirtyAttributes|


*yii/mongodb/file/ActiveRecord::save*			public

 See |yii/db/ActiveRecordInterface::save|


*yii/mongodb/file/ActiveRecord::update*			public

 See |yii/db/ActiveRecordInterface::update|


*yii/mongodb/file/ActiveRecord::updateAttributes*		public

 See |yii/db/BaseActiveRecord::updateAttributes|


*yii/mongodb/file/ActiveRecord::updateInternal*		protected
>
 updateInternal($attributes='null')
<
return (void)

    [$attributes] () 


*yii/mongodb/file/ActiveRecord::updateCounters*		public

 See |yii/db/BaseActiveRecord::updateCounters|


*yii/mongodb/file/ActiveRecord::delete*			public

 See |yii/db/ActiveRecordInterface::delete|


*yii/mongodb/file/ActiveRecord::getIsNewRecord*		public

 See |yii/db/ActiveRecordInterface::getIsNewRecord|


*yii/mongodb/file/ActiveRecord::setIsNewRecord*		public

 See |yii/db/BaseActiveRecord::setIsNewRecord|


*yii/mongodb/file/ActiveRecord::afterFind*		public

 See |yii/db/BaseActiveRecord::afterFind|


*yii/mongodb/file/ActiveRecord::beforeSave*		public

 See |yii/db/BaseActiveRecord::beforeSave|


*yii/mongodb/file/ActiveRecord::afterSave*		public

 See |yii/db/BaseActiveRecord::afterSave|


*yii/mongodb/file/ActiveRecord::beforeDelete*		public

 See |yii/db/BaseActiveRecord::beforeDelete|


*yii/mongodb/file/ActiveRecord::afterDelete*		public

 See |yii/db/BaseActiveRecord::afterDelete|


*yii/mongodb/file/ActiveRecord::refresh*			public

 See |yii/db/BaseActiveRecord::refresh|


*yii/mongodb/file/ActiveRecord::refreshInternal*		protected

 See |yii/db/BaseActiveRecord::refreshInternal|


*yii/mongodb/file/ActiveRecord::afterRefresh*		public

 See |yii/db/BaseActiveRecord::afterRefresh|


*yii/mongodb/file/ActiveRecord::equals*			public

 See |yii/db/ActiveRecordInterface::equals|


*yii/mongodb/file/ActiveRecord::getPrimaryKey*		public

 See |yii/db/ActiveRecordInterface::getPrimaryKey|


*yii/mongodb/file/ActiveRecord::getOldPrimaryKey*		public

 See |yii/db/ActiveRecordInterface::getOldPrimaryKey|


*yii/mongodb/file/ActiveRecord::populateRecord*		public

 See |yii/db/BaseActiveRecord::populateRecord|


*yii/mongodb/file/ActiveRecord::instantiate*		public

 See |yii/db/BaseActiveRecord::instantiate|


*yii/mongodb/file/ActiveRecord::getRelation*		public

 See |yii/db/ActiveRecordInterface::getRelation|


*yii/mongodb/file/ActiveRecord::link*			public

 See |yii/db/ActiveRecordInterface::link|


*yii/mongodb/file/ActiveRecord::unlink*			public

 See |yii/db/ActiveRecordInterface::unlink|


*yii/mongodb/file/ActiveRecord::unlinkAll*		public

 See |yii/db/BaseActiveRecord::unlinkAll|


*yii/mongodb/file/ActiveRecord::isPrimaryKey*		public

 See |yii/db/ActiveRecordInterface::isPrimaryKey|


*yii/mongodb/file/ActiveRecord::primaryKey*		public

 See |yii/db/ActiveRecordInterface::primaryKey|


*yii/mongodb/file/ActiveRecord::find*			public
>
 find()
<
return (\yii\mongodb\file\ActiveQuery) The newly created 'ActiveQuery' instance.

 Creates an 'ActiveQueryInterface' instance for query purpose.



 The returned 'ActiveQueryInterface' instance can be further customized by
 calling methods defined in 'ActiveQueryInterface' before 'one()' or 'all()'
 is called to return populated ActiveRecord instances. For example,

   // find the customer whose ID is 1
   $customer = Customer::find()->where(['id' => 1])->one();

   // find all active customers and order them by their age:
   $customers = Customer::find()
       ->where(['status' => 1])
       ->orderBy('age')
       ->all();

 This method is also called by 'BaseActiveRecord::hasOne()' and
 'BaseActiveRecord::hasMany()' to create a relational query.

 You may override this method to return a customized query. For example,

   class Customer extends ActiveRecord
   {
       public static function find()
       {
           // use CustomerQuery instead of the default ActiveQuery
           return new CustomerQuery(get_called_class());
       }
   }

 The following code shows how to apply a default condition for all queries:

 '''php class Customer extends ActiveRecord {     public static function
 find()     {         return parent::find()->where(['deleted' => false]);    
 } }

 // Use andWhere()/orWhere() to apply the default condition // SELECT FROM
 customer WHERE 'deleted'=:deleted AND age>30 $customers =
 Customer::find()->andWhere('age>30')->all();

 // Use where() to ignore the default condition // SELECT FROM customer WHERE
 age>30 $customers = Customer::find()->where('age>30')->all();




*yii/mongodb/file/ActiveRecord::insert*			public

 See |yii/db/ActiveRecordInterface::insert|


*yii/mongodb/file/ActiveRecord::getDb*			public

 See |yii/db/ActiveRecordInterface::getDb|


*yii/mongodb/file/ActiveRecord::collectionName*		public

 See |yii/mongodb/ActiveRecord::collectionName|


*yii/mongodb/file/ActiveRecord::getCollection*		public
>
 getCollection()
<
return (\yii\mongodb\file\Collection) Collection instance.

 Return the Mongo GridFS collection instance for this AR class.


*yii/mongodb/file/ActiveRecord::insertInternal*		protected
>
 insertInternal($attributes='null')
<
return (void)

    [$attributes] () 


*yii/mongodb/file/ActiveRecord::deleteInternal*		protected

 See |yii/mongodb/ActiveRecord::deleteInternal|


*yii/mongodb/file/ActiveRecord::extractFileName*		protected
>
 extractFileName($file)
<
return (string) File name.

 Extracts filename from given raw file value.

    [$file] (mixed) Raw file value.


*yii/mongodb/file/ActiveRecord::refreshFile*		public
>
 refreshFile()
<
return (\MongoGridFSFile|null) Refreshed file value.

 Refreshes the 'file' attribute from file collection, using current primary
 key.


*yii/mongodb/file/ActiveRecord::getFileContent*		public
>
 getFileContent()
<
return (null|string) File content.

 Returns the associated file content.


*yii/mongodb/file/ActiveRecord::writeFile*		public
>
 writeFile($filename)
<
return (bool) Whether the operation was successful.

 Writes the the internal file content into the given filename.

    [$filename] (string) Full filename to be written.


*yii/mongodb/file/ActiveRecord::getFileResource*		public
>
 getFileResource()
<
return (resource) File stream resource.

 This method returns a stream resource that can be used with all file
 functions in PHP, which deal with reading files. The contents of the file are
 pulled out of MongoDB on the fly, so that the whole file does not have to be
 loaded into memory first.



 vim:tw=78:ts=8:ft=help:norl:
