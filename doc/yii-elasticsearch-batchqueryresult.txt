
*yii/elasticsearch/BatchQueryResult*   >> |yii/base/BaseObject|
====================================

DESCRIPTION
------------------------------------------------------------------------------

 You usually do not instantiate BatchQueryResult directly. Instead, you obtain
 it by calling 'Query::batch()' or 'Query::each()'. Because BatchQueryResult
 implements the '\Iterator' interface, you can iterate it to obtain a batch of
 data in each iteration.

 Batch size is determined by the 'Query::$limit' setting. 'Query::$offset'
 setting is ignored. New batches will be obtained until the server runs out of
 results.

 If 'Query::$orderBy' parameter is not set, batches will be processed using
 the highly efficient "scan" mode. In this case, 'Query::$limit' setting
 determines batch size per shard. See [elasticsearch
 guide](https://www.elastic.co/guide/en/elasticsearch/reference/current/search-request-scroll.html)
 for more information.

 Example:

   $query = (new Query)->from('user');
   foreach ($query->batch() as $i => $users) {
       // $users represents the rows in the $i-th batch
   }
   foreach ($query->each() as $user) {
   }




PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/elasticsearch/BatchQueryResult::$db*

 (\yii\elasticsearch\Connection) The DB connection to be used when performing
 batch query. If null, the 'elasticsearch' application component will be used.

$query					*yii/elasticsearch/BatchQueryResult::$query*

 (\yii\elasticsearch\Query) The query object associated with this batch query.
 Do not modify this property directly unless after 'reset()' is called
 explicitly.

$each					*yii/elasticsearch/BatchQueryResult::$each*

 (boolean) Whether to return a single row during each iteration. If false, a
 whole batch of rows will be returned in each iteration.

$scrollWindow				*yii/elasticsearch/BatchQueryResult::$scrollWindow*

 (string) The amount of time to keep the scroll window open (in ElasticSearch
 [time
 units](https://www.elastic.co/guide/en/elasticsearch/reference/current/common-options.html#time-units).



METHOD DETAILS
------------------------------------------------------------------------------


*yii/elasticsearch/BatchQueryResult::className*		public

 See |yii/base/BaseObject::className|


*yii/elasticsearch/BatchQueryResult::__construct*		public

 See |yii/base/BaseObject::__construct|


*yii/elasticsearch/BatchQueryResult::init*		public

 See |yii/base/BaseObject::init|


*yii/elasticsearch/BatchQueryResult::__get*		public

 See |yii/base/BaseObject::__get|


*yii/elasticsearch/BatchQueryResult::__set*		public

 See |yii/base/BaseObject::__set|


*yii/elasticsearch/BatchQueryResult::__isset*		public

 See |yii/base/BaseObject::__isset|


*yii/elasticsearch/BatchQueryResult::__unset*		public

 See |yii/base/BaseObject::__unset|


*yii/elasticsearch/BatchQueryResult::__call*		public

 See |yii/base/BaseObject::__call|


*yii/elasticsearch/BatchQueryResult::hasProperty*		public

 See |yii/base/BaseObject::hasProperty|


*yii/elasticsearch/BatchQueryResult::canGetProperty*	public

 See |yii/base/BaseObject::canGetProperty|


*yii/elasticsearch/BatchQueryResult::canSetProperty*	public

 See |yii/base/BaseObject::canSetProperty|


*yii/elasticsearch/BatchQueryResult::hasMethod*		public

 See |yii/base/BaseObject::hasMethod|


*yii/elasticsearch/BatchQueryResult::__destruct*		public
>
 __destruct()
<
return (void)

 Destructor.


*yii/elasticsearch/BatchQueryResult::reset*		public
>
 reset()
<
return (void)

 Resets the batch query.

 This method will clean up the existing batch query so that a new batch query
 can be performed.


*yii/elasticsearch/BatchQueryResult::rewind*		public
>
 rewind()
<
return (void)

 Resets the iterator to the initial state.

 This method is required by the interface '\Iterator'.


*yii/elasticsearch/BatchQueryResult::next*		public
>
 next()
<
return (void)

 Moves the internal pointer to the next dataset.

 This method is required by the interface '\Iterator'.


*yii/elasticsearch/BatchQueryResult::fetchData*		protected
>
 fetchData()
<
return (array) The data fetched

 Fetches the next batch of data.


*yii/elasticsearch/BatchQueryResult::key*			public
>
 key()
<
return (int) The index of the current row.

 Returns the index of the current dataset.

 This method is required by the interface '\Iterator'.


*yii/elasticsearch/BatchQueryResult::current*		public
>
 current()
<
return (mixed) The current dataset.

 Returns the current dataset.

 This method is required by the interface '\Iterator'.


*yii/elasticsearch/BatchQueryResult::valid*		public
>
 valid()
<
return (bool) Whether there is a valid dataset at the current position.

 Returns whether there is a valid dataset at the current position.

 This method is required by the interface '\Iterator'.



 vim:tw=78:ts=8:ft=help:norl:
