
*yii/redis/Session*   >> |yii/web/Session|
===================

DESCRIPTION
------------------------------------------------------------------------------

 Redis Session requires redis version 2.6.12 or higher to work properly.

 It needs to be configured with a redis 'Connection' that is also configured
 as an application component. By default it will use the 'redis' application
 component.

 To use redis Session as the session application component, configure the
 application as follows,

   [
       'components' => [
           'session' => [
               'class' => 'yii\redis\Session',
               'redis' => [
                   'hostname' => 'localhost',
                   'port' => 6379,
                   'database' => 0,
               ]
           ],
       ],
   ]

 Or if you have configured the redis 'Connection' as an application component,
 the following is sufficient:

   [
       'components' => [
           'session' => [
               'class' => 'yii\redis\Session',
               // 'redis' => 'redis' // id of the connection application
 component
           ],
       ],
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

$flashParam				*yii/redis/Session::$flashParam*

 See |yii/web/Session::$flashParam|

$handler				*yii/redis/Session::$handler*

 See |yii/web/Session::$handler|

$redis					*yii/redis/Session::$redis*

 (\yii\redis\Connection|string|array) The Redis 'Connection' object or the
 application component ID of the Redis 'Connection'. This can also be an array
 that is used to create a redis 'Connection' instance in case you do not want
 do configure redis connection as an application component. After the Session
 object is created, if you want to change this property, you should only
 assign it with a Redis 'Connection' object.

$keyPrefix				*yii/redis/Session::$keyPrefix*

 (string) A string prefixed to every cache key so that it is unique. If not
 set, it will use a prefix generated from 'Application::id'. You may set this
 property to be an empty string if you don't want to use key prefix. It is
 recommended that you explicitly set this property to some static value if the
 cached data needs to be shared among multiple applications.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/redis/Session::className*				public

 See |yii/base/BaseObject::className|


*yii/redis/Session::__construct*				public

 See |yii/base/BaseObject::__construct|


*yii/redis/Session::init*					public
>
 init()
<
return (void)

 This method will initialize the 'redis' property to make sure it refers to a
 valid redis connection.


*yii/redis/Session::__get*				public

 See |yii/base/Component::__get|


*yii/redis/Session::__set*				public

 See |yii/base/Component::__set|


*yii/redis/Session::__isset*				public

 See |yii/base/Component::__isset|


*yii/redis/Session::__unset*				public

 See |yii/base/Component::__unset|


*yii/redis/Session::__call*				public

 See |yii/base/Component::__call|


*yii/redis/Session::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/redis/Session::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/redis/Session::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/redis/Session::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/redis/Session::__clone*				public

 See |yii/base/Component::__clone|


*yii/redis/Session::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/redis/Session::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/redis/Session::on*					public

 See |yii/base/Component::on|


*yii/redis/Session::off*					public

 See |yii/base/Component::off|


*yii/redis/Session::trigger*				public

 See |yii/base/Component::trigger|


*yii/redis/Session::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/redis/Session::getBehaviors*				public

 See |yii/base/Component::getBehaviors|


*yii/redis/Session::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/redis/Session::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/redis/Session::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/redis/Session::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/redis/Session::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/redis/Session::getUseCustomStorage*			public
>
 getUseCustomStorage()
<
return (bool) Whether to use custom storage.

 This method overrides the parent implementation and always returns true.


*yii/redis/Session::open*					public

 See |yii/web/Session::open|


*yii/redis/Session::registerSessionHandler*		protected

 See |yii/web/Session::registerSessionHandler|


*yii/redis/Session::close*				public

 See |yii/web/Session::close|


*yii/redis/Session::destroy*				public

 See |yii/web/Session::destroy|


*yii/redis/Session::getIsActive*				public

 See |yii/web/Session::getIsActive|


*yii/redis/Session::getHasSessionId*			public

 See |yii/web/Session::getHasSessionId|


*yii/redis/Session::setHasSessionId*			public

 See |yii/web/Session::setHasSessionId|


*yii/redis/Session::getId*				public

 See |yii/web/Session::getId|


*yii/redis/Session::setId*				public

 See |yii/web/Session::setId|


*yii/redis/Session::regenerateID*				public

 See |yii/web/Session::regenerateID|


*yii/redis/Session::getName*				public

 See |yii/web/Session::getName|


*yii/redis/Session::setName*				public

 See |yii/web/Session::setName|


*yii/redis/Session::getSavePath*				public

 See |yii/web/Session::getSavePath|


*yii/redis/Session::setSavePath*				public

 See |yii/web/Session::setSavePath|


*yii/redis/Session::getCookieParams*			public

 See |yii/web/Session::getCookieParams|


*yii/redis/Session::setCookieParams*			public

 See |yii/web/Session::setCookieParams|


*yii/redis/Session::getUseCookies*			public

 See |yii/web/Session::getUseCookies|


*yii/redis/Session::setUseCookies*			public

 See |yii/web/Session::setUseCookies|


*yii/redis/Session::getGCProbability*			public

 See |yii/web/Session::getGCProbability|


*yii/redis/Session::setGCProbability*			public

 See |yii/web/Session::setGCProbability|


*yii/redis/Session::getUseTransparentSessionID*		public

 See |yii/web/Session::getUseTransparentSessionID|


*yii/redis/Session::setUseTransparentSessionID*		public

 See |yii/web/Session::setUseTransparentSessionID|


*yii/redis/Session::getTimeout*				public

 See |yii/web/Session::getTimeout|


*yii/redis/Session::setTimeout*				public

 See |yii/web/Session::setTimeout|


*yii/redis/Session::openSession*				public

 See |yii/web/Session::openSession|


*yii/redis/Session::closeSession*				public

 See |yii/web/Session::closeSession|


*yii/redis/Session::readSession*				public
>
 readSession($id)
<
return (string) The session data

 Do not call this method directly.

    [$id] (string) Session ID


*yii/redis/Session::writeSession*				public
>
 writeSession($id, $data)
<
return (bool) Whether session write is successful

 Do not call this method directly.

    [$id] (string) Session ID
    [$data] (string) Session data


*yii/redis/Session::destroySession*			public
>
 destroySession($id)
<
return (bool) Whether session is destroyed successfully

 Do not call this method directly.

    [$id] (string) Session ID


*yii/redis/Session::gcSession*				public

 See |yii/web/Session::gcSession|


*yii/redis/Session::getIterator*				public

 See |yii/web/Session::getIterator|


*yii/redis/Session::getCount*				public

 See |yii/web/Session::getCount|


*yii/redis/Session::count*				public

 See |yii/web/Session::count|


*yii/redis/Session::get*					public

 See |yii/web/Session::get|


*yii/redis/Session::set*					public

 See |yii/web/Session::set|


*yii/redis/Session::remove*				public

 See |yii/web/Session::remove|


*yii/redis/Session::removeAll*				public

 See |yii/web/Session::removeAll|


*yii/redis/Session::has*					public

 See |yii/web/Session::has|


*yii/redis/Session::updateFlashCounters*			protected

 See |yii/web/Session::updateFlashCounters|


*yii/redis/Session::getFlash*				public

 See |yii/web/Session::getFlash|


*yii/redis/Session::getAllFlashes*			public

 See |yii/web/Session::getAllFlashes|


*yii/redis/Session::setFlash*				public

 See |yii/web/Session::setFlash|


*yii/redis/Session::addFlash*				public

 See |yii/web/Session::addFlash|


*yii/redis/Session::removeFlash*				public

 See |yii/web/Session::removeFlash|


*yii/redis/Session::removeAllFlashes*			public

 See |yii/web/Session::removeAllFlashes|


*yii/redis/Session::hasFlash*				public

 See |yii/web/Session::hasFlash|


*yii/redis/Session::offsetExists*				public

 See |yii/web/Session::offsetExists|


*yii/redis/Session::offsetGet*				public

 See |yii/web/Session::offsetGet|


*yii/redis/Session::offsetSet*				public

 See |yii/web/Session::offsetSet|


*yii/redis/Session::offsetUnset*				public

 See |yii/web/Session::offsetUnset|


*yii/redis/Session::calculateKey*				protected
>
 calculateKey($id)
<
return (string) A safe cache key associated with the session variable name

    [$id] (string) Session variable name



 vim:tw=78:ts=8:ft=help:norl:
