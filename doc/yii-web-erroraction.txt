
*yii/web/ErrorAction*   >> |yii/base/Action|
=====================

DESCRIPTION
------------------------------------------------------------------------------

 To use ErrorAction, you need to do the following steps:

 First, declare an action of ErrorAction type in the 'actions()' method of
 your 'SiteController' class (or whatever controller you prefer), like the
 following:

   public function actions()
   {
       return [
           'error' => ['class' => 'yii\web\ErrorAction'],
       ];
   }

 Then, create a view file for this action. If the route of your error action
 is 'site/error', then the view file should be 'views/site/error.php'. In this
 view file, the following variables are available:


   - '$name': the error name 
   - '$message': the error message 
   - '$exception': the exception being handled

 Finally, configure the "errorHandler" application component as follows,

   'errorHandler' => [
       'errorAction' => 'site/error',
   ]




PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/web/ErrorAction::$id*

 See |yii/base/Action::$id|

$controller				*yii/web/ErrorAction::$controller*

 See |yii/base/Action::$controller|

$view					*yii/web/ErrorAction::$view*

 (string) The view file to be rendered. If not set, it will take the value of
 'id'. That means, if you name the action as "error" in "SiteController", then
 the view name would be "error", and the corresponding view file would be
 "views/site/error.php".

$defaultName				*yii/web/ErrorAction::$defaultName*

 (string) The name of the error when the exception name cannot be determined.
 Defaults to "Error".

$defaultMessage				*yii/web/ErrorAction::$defaultMessage*

 (string) The message to be displayed when the exception message contains
 sensitive information. Defaults to "An internal server error occurred.".

$layout					*yii/web/ErrorAction::$layout*

 (string|false|null) The name of the layout to be applied to this error action
 view. If not set, the layout configured in the controller will be used.

$exception				*yii/web/ErrorAction::$exception*

 (\Exception) The exception object, normally is filled on 'init()' method
 call.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/web/ErrorAction::className*				public

 See |yii/base/BaseObject::className|


*yii/web/ErrorAction::__construct*			public

 See |yii/base/Action::__construct|


*yii/web/ErrorAction::init*				public
>
 init()
<
return (void)

 {@inheritdoc}


*yii/web/ErrorAction::__get*				public

 See |yii/base/BaseObject::__get|


*yii/web/ErrorAction::__set*				public

 See |yii/base/BaseObject::__set|


*yii/web/ErrorAction::__isset*				public

 See |yii/base/BaseObject::__isset|


*yii/web/ErrorAction::__unset*				public

 See |yii/base/BaseObject::__unset|


*yii/web/ErrorAction::__call*				public

 See |yii/base/BaseObject::__call|


*yii/web/ErrorAction::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/web/ErrorAction::canGetProperty*			public

 See |yii/base/BaseObject::canGetProperty|


*yii/web/ErrorAction::canSetProperty*			public

 See |yii/base/BaseObject::canSetProperty|


*yii/web/ErrorAction::hasMethod*				public

 See |yii/base/BaseObject::hasMethod|


*yii/web/ErrorAction::__clone*				public

 See |yii/base/Component::__clone|


*yii/web/ErrorAction::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/web/ErrorAction::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/web/ErrorAction::on*					public

 See |yii/base/Component::on|


*yii/web/ErrorAction::off*				public

 See |yii/base/Component::off|


*yii/web/ErrorAction::trigger*				public

 See |yii/base/Component::trigger|


*yii/web/ErrorAction::getBehavior*			public

 See |yii/base/Component::getBehavior|


*yii/web/ErrorAction::getBehaviors*			public

 See |yii/base/Component::getBehaviors|


*yii/web/ErrorAction::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/web/ErrorAction::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/web/ErrorAction::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/web/ErrorAction::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/web/ErrorAction::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/web/ErrorAction::getUniqueId*			public

 See |yii/base/Action::getUniqueId|


*yii/web/ErrorAction::runWithParams*			public

 See |yii/base/Action::runWithParams|


*yii/web/ErrorAction::beforeRun*				protected

 See |yii/base/Action::beforeRun|


*yii/web/ErrorAction::afterRun*				protected

 See |yii/base/Action::afterRun|


*yii/web/ErrorAction::run*				public
>
 run()
<
return (string) Result content

 Runs the action.


*yii/web/ErrorAction::renderAjaxResponse*			protected
>
 renderAjaxResponse()
<
return (string) 

 Builds string that represents the exception.

 Normally used to generate a response to AJAX request.


*yii/web/ErrorAction::renderHtmlResponse*			protected
>
 renderHtmlResponse()
<
return (string) 

 Renders a view that represents the exception.


*yii/web/ErrorAction::getViewRenderParams*		protected
>
 getViewRenderParams()
<
return (array) 

 Builds array of parameters that will be passed to the view.


*yii/web/ErrorAction::findException*			protected
>
 findException()
<
return (\Exception) 

 Gets exception from the 'yii\web\ErrorHandler|ErrorHandler' component.

 In case there is no exception in the component, treat as the action has been
 invoked not from error handler, but by direct route, so '404 Not Found' error
 will be displayed.


*yii/web/ErrorAction::getExceptionCode*			protected
>
 getExceptionCode()
<
return (mixed) 

 Gets the code from the 'exception'.


*yii/web/ErrorAction::getExceptionName*			protected
>
 getExceptionName()
<
return (string) 

 Returns the exception name, followed by the code (if present).


*yii/web/ErrorAction::getExceptionMessage*		protected
>
 getExceptionMessage()
<
return (string) 

 Returns the 'exception' message for 'yii\base\UserException' only.

 For other cases 'defaultMessage' will be returned.



 vim:tw=78:ts=8:ft=help:norl:
