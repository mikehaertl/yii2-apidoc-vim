
*yii/db/Transaction*   >> |yii/base/BaseObject|
====================

DESCRIPTION
------------------------------------------------------------------------------

 It is usually created by calling 'Connection::beginTransaction()'.

 The following code is a typical example of using transactions (note that some
 DBMS may not support transactions):

   $transaction = $connection->beginTransaction();
   try {
       $connection->createCommand($sql1)->execute();
       $connection->createCommand($sql2)->execute();
       //.... other SQL executions
       $transaction->commit();
   } catch (\Exception $e) {
       $transaction->rollBack();
       throw $e;
   } catch (\Throwable $e) {
       $transaction->rollBack();
       throw $e;
   }

 > Note: in the above code we have two catch-blocks for compatibility > with
 PHP 5.x and PHP 7.x. '\Exception' implements the ['\Throwable'
 interface](http://php.net/manual/en/class.throwable.php) > since PHP 7.0, so
 you can skip the part with '\Exception' if your app uses only PHP 7.0 and
 higher.


PROPERTY DETAILS
------------------------------------------------------------------------------


$db					*yii/db/Transaction::$db*

 (\yii\db\Connection) The database connection that this transaction is
 associated with.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/BaseObject::__get|
 |yii/base/BaseObject::__set|
 |yii/base/BaseObject::__isset|
 |yii/base/BaseObject::__unset|
 |yii/base/BaseObject::__call|
 |yii/base/BaseObject::hasProperty|
 |yii/base/BaseObject::canGetProperty|
 |yii/base/BaseObject::canSetProperty|
 |yii/base/BaseObject::hasMethod|


*yii/db/Transaction::getIsActive*				public
>
 getIsActive()
<
return (bool) Whether this transaction is active. Only an active transaction can
'commit()' or 'rollBack()'.

 Returns a value indicating whether this transaction is active.


*yii/db/Transaction::begin*				public
>
 begin($isolationLevel='null')
<
return (void)

 Begins a transaction.

    [$isolationLevel] (string|null) The [isolation level][] to use for this
    transaction. This can be one of 'READ_UNCOMMITTED', 'READ_COMMITTED',
    'REPEATABLE_READ' and 'SERIALIZABLE' but also a string containing DBMS
    specific syntax to be used after 'SET TRANSACTION ISOLATION LEVEL'. If not
    specified ('null') the isolation level will not be set explicitly and the
    DBMS default will be used.

    > Note: This setting does not work for PostgreSQL, where setting the
    isolation level before the transaction has no effect. You have to call
    'setIsolationLevel()' in this case after the transaction has started.

    > Note: Some DBMS allow setting of the isolation level only for the whole
    connection so subsequent transactions may get the same isolation level
    even if you did not specify any. When using this feature you may need to
    set the isolation level for all transactions explicitly to avoid
    conflicting settings. At the time of this writing affected DBMS are MSSQL
    and SQLite.

    [isolation level]:
    http://en.wikipedia.org/wiki/Isolation_%28database_systems%29#Isolation_levels


*yii/db/Transaction::commit*				public
>
 commit()
<
return (void)

 Commits a transaction.


*yii/db/Transaction::rollBack*				public
>
 rollBack()
<
return (void)

 Rolls back a transaction.


*yii/db/Transaction::setIsolationLevel*			public
>
 setIsolationLevel($level)
<
return (void)

 Sets the transaction isolation level for this transaction.

 This method can be used to set the isolation level while the transaction is
 already active. However this is not supported by all DBMS so you might rather
 specify the isolation level directly when calling 'begin()'.

    [$level] (string) The transaction isolation level to use for this
    transaction. This can be one of 'READ_UNCOMMITTED', 'READ_COMMITTED',
    'REPEATABLE_READ' and 'SERIALIZABLE' but also a string containing DBMS
    specific syntax to be used after 'SET TRANSACTION ISOLATION LEVEL'.


*yii/db/Transaction::getLevel*				public
>
 getLevel()
<
return (int) The current nesting level of the transaction.




 vim:tw=78:ts=8:ft=help:norl:
