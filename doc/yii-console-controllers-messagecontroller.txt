
*yii/console/controllers/MessageController*   >> |yii/console/Controller|
===========================================

DESCRIPTION
------------------------------------------------------------------------------

 The extracted messages can be saved the following depending on 'format'
 setting in config file:


   - PHP message source files. 
   - ".po" files. 
   - Database.

 Usage: 1. Create a configuration file using the 'message/config' command:   
 yii message/config /path/to/myapp/messages/config.php 2. Edit the created
 config file, adjusting it for your web application needs. 3. Run the
 'message/extract' command, using created config:    yii message
 /path/to/myapp/messages/config.php


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/console/controllers/MessageController::$id*
 See |yii/base/Controller::$id|

$module					*yii/console/controllers/MessageController::$module*
 See |yii/base/Controller::$module|

$defaultAction				*yii/console/controllers/MessageController::$defaultAction*
 (string) Controller default action ID.

$layout					*yii/console/controllers/MessageController::$layout*
 See |yii/base/Controller::$layout|

$action					*yii/console/controllers/MessageController::$action*
 See |yii/base/Controller::$action|

$interactive				*yii/console/controllers/MessageController::$interactive*
 See |yii/console/Controller::$interactive|

$color					*yii/console/controllers/MessageController::$color*
 See |yii/console/Controller::$color|

$behaviors				*yii/console/controllers/MessageController::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$modules				*yii/console/controllers/MessageController::$modules*
 (\yii\base\Module[]) All ancestor modules that this controller is located
 within.

$uniqueId				*yii/console/controllers/MessageController::$uniqueId*
 (string) The controller ID that is prefixed with the module ID (if any).

$route					*yii/console/controllers/MessageController::$route*
 (string) The route (module ID, controller ID and action ID) of the current
 request.

$view					*yii/console/controllers/MessageController::$view*
 (\yii\base\View|\yii\web\View) The view object that can be used to render
 views or view files.

$viewPath				*yii/console/controllers/MessageController::$viewPath*
 (string) The directory containing the view files for this controller.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/console/controllers/MessageController::className*	public
 See |yii/base/Object::className|


*yii/console/controllers/MessageController::__construct*	public
 See |yii/base/Controller::__construct|


*yii/console/controllers/MessageController::init*		public
 See |yii/base/Object::init|


*yii/console/controllers/MessageController::__get*	public
 See |yii/base/Component::__get|


*yii/console/controllers/MessageController::__set*	public
 See |yii/base/Component::__set|


*yii/console/controllers/MessageController::__isset*	public
 See |yii/base/Component::__isset|


*yii/console/controllers/MessageController::__unset*	public
 See |yii/base/Component::__unset|


*yii/console/controllers/MessageController::__call*	public
 See |yii/base/Component::__call|


*yii/console/controllers/MessageController::hasProperty*	public
 See |yii/base/Component::hasProperty|


*yii/console/controllers/MessageController::canGetProperty*public
 See |yii/base/Component::canGetProperty|


*yii/console/controllers/MessageController::canSetProperty*public
 See |yii/base/Component::canSetProperty|


*yii/console/controllers/MessageController::hasMethod*	public
 See |yii/base/Component::hasMethod|


*yii/console/controllers/MessageController::__clone*	public
 See |yii/base/Component::__clone|


*yii/console/controllers/MessageController::behaviors*	public
 See |yii/base/Component::behaviors|


*yii/console/controllers/MessageController::hasEventHandlers*public
 See |yii/base/Component::hasEventHandlers|


*yii/console/controllers/MessageController::on*		public
 See |yii/base/Component::on|


*yii/console/controllers/MessageController::off*		public
 See |yii/base/Component::off|


*yii/console/controllers/MessageController::trigger*	public
 See |yii/base/Component::trigger|


*yii/console/controllers/MessageController::getBehavior*	public
 See |yii/base/Component::getBehavior|


*yii/console/controllers/MessageController::getBehaviors*	public
 See |yii/base/Component::getBehaviors|


*yii/console/controllers/MessageController::attachBehavior*public
 See |yii/base/Component::attachBehavior|


*yii/console/controllers/MessageController::attachBehaviors*public
 See |yii/base/Component::attachBehaviors|


*yii/console/controllers/MessageController::detachBehavior*public
 See |yii/base/Component::detachBehavior|


*yii/console/controllers/MessageController::detachBehaviors*public
 See |yii/base/Component::detachBehaviors|


*yii/console/controllers/MessageController::ensureBehaviors*public
 See |yii/base/Component::ensureBehaviors|


*yii/console/controllers/MessageController::actions*	public
 See |yii/base/Controller::actions|


*yii/console/controllers/MessageController::runAction*	public
 See |yii/console/Controller::runAction|


*yii/console/controllers/MessageController::run*		public
 See |yii/base/Controller::run|


*yii/console/controllers/MessageController::bindActionParams*public
 See |yii/console/Controller::bindActionParams|


*yii/console/controllers/MessageController::createAction*	public
 See |yii/base/Controller::createAction|


*yii/console/controllers/MessageController::beforeAction*	public
 See |yii/base/Controller::beforeAction|


*yii/console/controllers/MessageController::afterAction*	public
 See |yii/base/Controller::afterAction|


*yii/console/controllers/MessageController::getModules*	public
 See |yii/base/Controller::getModules|


*yii/console/controllers/MessageController::getUniqueId*	public
 See |yii/base/Controller::getUniqueId|


*yii/console/controllers/MessageController::getRoute*	public
 See |yii/base/Controller::getRoute|


*yii/console/controllers/MessageController::render*	public
 See |yii/base/Controller::render|


*yii/console/controllers/MessageController::renderPartial*public
 See |yii/base/Controller::renderPartial|


*yii/console/controllers/MessageController::renderFile*	public
 See |yii/base/Controller::renderFile|


*yii/console/controllers/MessageController::getView*	public
 See |yii/base/Controller::getView|


*yii/console/controllers/MessageController::setView*	public
 See |yii/base/Controller::setView|


*yii/console/controllers/MessageController::getViewPath*	public
 See |yii/base/Controller::getViewPath|


*yii/console/controllers/MessageController::findLayoutFile*public
 See |yii/base/Controller::findLayoutFile|


*yii/console/controllers/MessageController::isColorEnabled*public
 See |yii/console/Controller::isColorEnabled|


*yii/console/controllers/MessageController::ansiFormat*	public
 See |yii/console/Controller::ansiFormat|


*yii/console/controllers/MessageController::stdout*	public
 See |yii/console/Controller::stdout|


*yii/console/controllers/MessageController::stderr*	public
 See |yii/console/Controller::stderr|


*yii/console/controllers/MessageController::prompt*	public
 See |yii/console/Controller::prompt|


*yii/console/controllers/MessageController::confirm*	public
 See |yii/console/Controller::confirm|


*yii/console/controllers/MessageController::select*	public
 See |yii/console/Controller::select|


*yii/console/controllers/MessageController::options*	public
 See |yii/console/Controller::options|


*yii/console/controllers/MessageController::actionConfig*	public
>
 actionConfig($filePath)
<
(void)

 The generated configuration file contains detailed instructions on how to
 customize it to fit for your needs. After customization, you may use this
 configuration file with the "extract" command.
    [$filePath] (string) Output file name or alias.


*yii/console/controllers/MessageController::actionExtract*public
>
 actionExtract($configFile)
<
(void)

 This command will search through source code files and extract messages that
 need to be translated in different languages.
    [$configFile] (string) The path or alias of the configuration file. You
    may use the "yii message/config" command to generate this file and then
    customize it for your needs.


*yii/console/controllers/MessageController::saveMessagesToDb*protected
>
 saveMessagesToDb($messages, $db, $sourceMessageTable, $messageTable, $removeUnused, $languages)
<
(void)

    [$messages] (array) 
    [$db] (\yii\db\Connection) 
    [$sourceMessageTable] (string) 
    [$messageTable] (string) 
    [$removeUnused] (boolean) 
    [$languages] (array) 


*yii/console/controllers/MessageController::extractMessages*protected
>
 extractMessages($fileName, $translator)
<
(array) 

    [$fileName] (string) Name of the file to extract messages from
    [$translator] (string) Name of the function used to translate messages


*yii/console/controllers/MessageController::saveMessagesToPHP*protected
>
 saveMessagesToPHP($messages, $dirName, $overwrite, $removeUnused, $sort)
<
(void)

    [$messages] (array) 
    [$dirName] (string) Name of the directory to write to
    [$overwrite] (boolean) If existing file should be overwritten without
    backup
    [$removeUnused] (boolean) If obsolete translations should be removed
    [$sort] (boolean) If translations should be sorted


*yii/console/controllers/MessageController::saveMessagesCategoryToPHP*protected
>
 saveMessagesCategoryToPHP($messages, $fileName, $overwrite, $removeUnused, $sort, $category)
<
(void)

    [$messages] (array) 
    [$fileName] (string) Name of the file to write to
    [$overwrite] (boolean) If existing file should be overwritten without
    backup
    [$removeUnused] (boolean) If obsolete translations should be removed
    [$sort] (boolean) If translations should be sorted
    [$category] (string) Message category


*yii/console/controllers/MessageController::saveMessagesToPO*protected
>
 saveMessagesToPO($messages, $dirName, $overwrite, $removeUnused, $sort, $catalog)
<
(void)

    [$messages] (array) 
    [$dirName] (string) Name of the directory to write to
    [$overwrite] (boolean) If existing file should be overwritten without
    backup
    [$removeUnused] (boolean) If obsolete translations should be removed
    [$sort] (boolean) If translations should be sorted
    [$catalog] (string) Message catalog



 vim:tw=78:ts=8:ft=help:norl:
