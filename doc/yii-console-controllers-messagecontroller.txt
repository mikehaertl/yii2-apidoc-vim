
*yii/console/controllers/MessageController*   >> |yii/console/Controller|
===========================================

DESCRIPTION
------------------------------------------------------------------------------

 The extracted messages can be saved the following depending on 'format'
 setting in config file:


   - PHP message source files. 
   - ".po" files. 
   - Database.

 Usage: 1. Create a configuration file using the 'message/config' command:   
 yii message/config /path/to/myapp/messages/config.php 2. Edit the created
 config file, adjusting it for your web application needs. 3. Run the
 'message/extract' command, using created config:    yii message
 /path/to/myapp/messages/config.php


PROPERTY DETAILS
------------------------------------------------------------------------------

$id					*yii/console/controllers/MessageController::$id*

 See |yii/base/Controller::$id|

$module					*yii/console/controllers/MessageController::$module*

 See |yii/base/Controller::$module|

$defaultAction				*yii/console/controllers/MessageController::$defaultAction*

 (string) Controller default action ID.

$layout					*yii/console/controllers/MessageController::$layout*

 See |yii/base/Controller::$layout|

$action					*yii/console/controllers/MessageController::$action*

 See |yii/base/Controller::$action|

$interactive				*yii/console/controllers/MessageController::$interactive*

 See |yii/console/Controller::$interactive|

$color					*yii/console/controllers/MessageController::$color*

 See |yii/console/Controller::$color|

$help					*yii/console/controllers/MessageController::$help*

 See |yii/console/Controller::$help|

$sourcePath				*yii/console/controllers/MessageController::$sourcePath*

 (string) Required, root directory of all source files.

$messagePath				*yii/console/controllers/MessageController::$messagePath*

 (string) Required, root directory containing message translations.

$languages				*yii/console/controllers/MessageController::$languages*

 (array) Required, list of language codes that the extracted messages should
 be translated to. For example, ['zh-CN', 'de'].

$translator				*yii/console/controllers/MessageController::$translator*

 (string) The name of the function for translating messages. Defaults to
 'Yii::t'. This is used as a mark to find the messages to be translated. You
 may use a string for single function name or an array for multiple function
 names.

$sort					*yii/console/controllers/MessageController::$sort*

 (bool) Whether to sort messages by keys when merging new messages with the
 existing ones. Defaults to false, which means the new (untranslated) messages
 will be separated from the old (translated) ones.

$overwrite				*yii/console/controllers/MessageController::$overwrite*

 (bool) Whether the message file should be overwritten with the merged
 messages

$removeUnused				*yii/console/controllers/MessageController::$removeUnused*

 (bool) Whether to remove messages that no longer appear in the source code.
 Defaults to false, which means these messages will NOT be removed.

$markUnused				*yii/console/controllers/MessageController::$markUnused*

 (bool) Whether to mark messages that no longer appear in the source code.
 Defaults to true, which means each of these messages will be enclosed with a
 pair of '@@' marks.

$except					*yii/console/controllers/MessageController::$except*

 (array) List of patterns that specify which files/directories should NOT be
 processed. If empty or not set, all files/directories will be processed. See
 helpers/FileHelper::findFiles() description for pattern matching rules. If a
 file/directory matches both a pattern in "only" and "except", it will NOT be
 processed.

$only					*yii/console/controllers/MessageController::$only*

 (array) List of patterns that specify which files (not directories) should be
 processed. If empty or not set, all files will be processed. See
 helpers/FileHelper::findFiles() description for pattern matching rules. If a
 file/directory matches both a pattern in "only" and "except", it will NOT be
 processed.

$format					*yii/console/controllers/MessageController::$format*

 (string) Generated file format. Can be "php", "db", "po" or "pot".

$db					*yii/console/controllers/MessageController::$db*

 (string) Connection component ID for "db" format.

$sourceMessageTable			*yii/console/controllers/MessageController::$sourceMessageTable*

 (string) Custom name for source message table for "db" format.

$messageTable				*yii/console/controllers/MessageController::$messageTable*

 (string) Custom name for translation message table for "db" format.

$catalog				*yii/console/controllers/MessageController::$catalog*

 (string) Name of the file that will be used for translations for "po" format.

$ignoreCategories			*yii/console/controllers/MessageController::$ignoreCategories*

 (array) Message categories to ignore. For example, 'yii', 'app*',
 'widgets/menu', etc.

$phpFileHeader				*yii/console/controllers/MessageController::$phpFileHeader*

 (string) File header in generated PHP file with messages. This property is
 used only if '$format' is "php".

$phpDocBlock				*yii/console/controllers/MessageController::$phpDocBlock*

 (string|null) DocBlock used for messages array in generated PHP file. If
 'null', default DocBlock will be used. This property is used only if
 '$format' is "php".

$config					*yii/console/controllers/MessageController::$config*

 (array) Config for messages extraction.



METHOD DETAILS
------------------------------------------------------------------------------


*yii/console/controllers/MessageController::className*	public

 See |yii/base/BaseObject::className|


*yii/console/controllers/MessageController::__construct*	public

 See |yii/base/Controller::__construct|


*yii/console/controllers/MessageController::init*		public

 See |yii/base/BaseObject::init|


*yii/console/controllers/MessageController::__get*	public

 See |yii/base/Component::__get|


*yii/console/controllers/MessageController::__set*	public

 See |yii/base/Component::__set|


*yii/console/controllers/MessageController::__isset*	public

 See |yii/base/Component::__isset|


*yii/console/controllers/MessageController::__unset*	public

 See |yii/base/Component::__unset|


*yii/console/controllers/MessageController::__call*	public

 See |yii/base/Component::__call|


*yii/console/controllers/MessageController::hasProperty*	public

 See |yii/base/Component::hasProperty|


*yii/console/controllers/MessageController::canGetProperty*public

 See |yii/base/Component::canGetProperty|


*yii/console/controllers/MessageController::canSetProperty*public

 See |yii/base/Component::canSetProperty|


*yii/console/controllers/MessageController::hasMethod*	public

 See |yii/base/Component::hasMethod|


*yii/console/controllers/MessageController::__clone*	public

 See |yii/base/Component::__clone|


*yii/console/controllers/MessageController::behaviors*	public

 See |yii/base/Component::behaviors|


*yii/console/controllers/MessageController::hasEventHandlers*public

 See |yii/base/Component::hasEventHandlers|


*yii/console/controllers/MessageController::on*		public

 See |yii/base/Component::on|


*yii/console/controllers/MessageController::off*		public

 See |yii/base/Component::off|


*yii/console/controllers/MessageController::trigger*	public

 See |yii/base/Component::trigger|


*yii/console/controllers/MessageController::getBehavior*	public

 See |yii/base/Component::getBehavior|


*yii/console/controllers/MessageController::getBehaviors*	public

 See |yii/base/Component::getBehaviors|


*yii/console/controllers/MessageController::attachBehavior*public

 See |yii/base/Component::attachBehavior|


*yii/console/controllers/MessageController::attachBehaviors*public

 See |yii/base/Component::attachBehaviors|


*yii/console/controllers/MessageController::detachBehavior*public

 See |yii/base/Component::detachBehavior|


*yii/console/controllers/MessageController::detachBehaviors*public

 See |yii/base/Component::detachBehaviors|


*yii/console/controllers/MessageController::ensureBehaviors*public

 See |yii/base/Component::ensureBehaviors|


*yii/console/controllers/MessageController::actions*	public

 See |yii/base/Controller::actions|


*yii/console/controllers/MessageController::runAction*	public

 See |yii/console/Controller::runAction|


*yii/console/controllers/MessageController::run*		public

 See |yii/base/Controller::run|


*yii/console/controllers/MessageController::bindActionParams*public

 See |yii/console/Controller::bindActionParams|


*yii/console/controllers/MessageController::createAction*	public

 See |yii/base/Controller::createAction|


*yii/console/controllers/MessageController::beforeAction*	public

 See |yii/base/Controller::beforeAction|


*yii/console/controllers/MessageController::afterAction*	public

 See |yii/base/Controller::afterAction|


*yii/console/controllers/MessageController::getModules*	public

 See |yii/base/Controller::getModules|


*yii/console/controllers/MessageController::getUniqueId*	public

 See |yii/base/Controller::getUniqueId|


*yii/console/controllers/MessageController::getRoute*	public

 See |yii/base/Controller::getRoute|


*yii/console/controllers/MessageController::render*	public

 See |yii/base/Controller::render|


*yii/console/controllers/MessageController::renderContent*public

 See |yii/base/Controller::renderContent|


*yii/console/controllers/MessageController::renderPartial*public

 See |yii/base/Controller::renderPartial|


*yii/console/controllers/MessageController::renderFile*	public

 See |yii/base/Controller::renderFile|


*yii/console/controllers/MessageController::getView*	public

 See |yii/base/Controller::getView|


*yii/console/controllers/MessageController::setView*	public

 See |yii/base/Controller::setView|


*yii/console/controllers/MessageController::getViewPath*	public

 See |yii/base/Controller::getViewPath|


*yii/console/controllers/MessageController::setViewPath*	public

 See |yii/base/Controller::setViewPath|


*yii/console/controllers/MessageController::findLayoutFile*public

 See |yii/base/Controller::findLayoutFile|


*yii/console/controllers/MessageController::isColorEnabled*public

 See |yii/console/Controller::isColorEnabled|


*yii/console/controllers/MessageController::ansiFormat*	public

 See |yii/console/Controller::ansiFormat|


*yii/console/controllers/MessageController::stdout*	public

 See |yii/console/Controller::stdout|


*yii/console/controllers/MessageController::stderr*	public

 See |yii/console/Controller::stderr|


*yii/console/controllers/MessageController::prompt*	public

 See |yii/console/Controller::prompt|


*yii/console/controllers/MessageController::confirm*	public

 See |yii/console/Controller::confirm|


*yii/console/controllers/MessageController::select*	public

 See |yii/console/Controller::select|


*yii/console/controllers/MessageController::options*	public
>
 options($actionID)
<
return (string[]) The names of the options valid for the action

 Returns the names of valid options for the action (id) An option requires the
 existence of a public member variable whose name is the option name.



 Child classes may override this method to specify possible options.

 Note that the values setting via options are not available until
 'beforeAction()' is being called.



    [$actionID] (string) The action id of the current request


*yii/console/controllers/MessageController::optionAliases*public
>
 optionAliases()
<
return (array) The options alias names valid for the action where the keys is alias
name for option and value is option name.

 Returns option alias names.



 Child classes may override this method to specify alias options.




*yii/console/controllers/MessageController::getOptionValues*public

 See |yii/console/Controller::getOptionValues|


*yii/console/controllers/MessageController::getPassedOptions*public

 See |yii/console/Controller::getPassedOptions|


*yii/console/controllers/MessageController::getPassedOptionValues*public

 See |yii/console/Controller::getPassedOptionValues|


*yii/console/controllers/MessageController::getHelpSummary*public

 See |yii/console/Controller::getHelpSummary|


*yii/console/controllers/MessageController::getHelp*	public

 See |yii/console/Controller::getHelp|


*yii/console/controllers/MessageController::getActionHelpSummary*public

 See |yii/console/Controller::getActionHelpSummary|


*yii/console/controllers/MessageController::getActionHelp*public

 See |yii/console/Controller::getActionHelp|


*yii/console/controllers/MessageController::getActionArgsHelp*public

 See |yii/console/Controller::getActionArgsHelp|


*yii/console/controllers/MessageController::getActionOptionsHelp*public

 See |yii/console/Controller::getActionOptionsHelp|


*yii/console/controllers/MessageController::getActionMethodReflection*protected

 See |yii/console/Controller::getActionMethodReflection|


*yii/console/controllers/MessageController::parseDocCommentTags*protected

 See |yii/console/Controller::parseDocCommentTags|


*yii/console/controllers/MessageController::parseDocCommentSummary*protected

 See |yii/console/Controller::parseDocCommentSummary|


*yii/console/controllers/MessageController::parseDocCommentDetail*protected

 See |yii/console/Controller::parseDocCommentDetail|


*yii/console/controllers/MessageController::actionConfig*	public
>
 actionConfig($filePath)
<
return (int) CLI exit code

 Creates a configuration file for the "extract" command using command line
 options specified.

 The generated configuration file contains parameters required for source code
 messages extraction. You may use this configuration file with the "extract"
 command.

    [$filePath] (string) Output file name or alias.


*yii/console/controllers/MessageController::actionConfigTemplate*public
>
 actionConfigTemplate($filePath)
<
return (int) CLI exit code

 Creates a configuration file template for the "extract" command.

 The created configuration file contains detailed instructions on how to
 customize it to fit for your needs. After customization, you may use this
 configuration file with the "extract" command.

    [$filePath] (string) Output file name or alias.


*yii/console/controllers/MessageController::actionExtract*public
>
 actionExtract($configFile='null')
<
return (void)

 Extracts messages to be translated from source code.

 This command will search through source code files and extract messages that
 need to be translated in different languages.

    [$configFile] (string) The path or alias of the configuration file. You
    may use the "yii message/config" command to generate this file and then
    customize it for your needs.


*yii/console/controllers/MessageController::saveMessagesToDb*protected
>
 saveMessagesToDb($messages, $db, $sourceMessageTable, $messageTable, $removeUnused, $languages, $markUnused)
<
return (void)

 Saves messages to database.

    [$messages] (array) 
    [$db] (\yii\db\Connection) 
    [$sourceMessageTable] (string) 
    [$messageTable] (string) 
    [$removeUnused] (bool) 
    [$languages] (array) 
    [$markUnused] (bool) 


*yii/console/controllers/MessageController::extractMessages*protected
>
 extractMessages($fileName, $translator, $ignoreCategories='[]')
<
return (array) 

 Extracts messages from a file.

    [$fileName] (string) Name of the file to extract messages from
    [$translator] (string) Name of the function used to translate messages
    [$ignoreCategories] (array) Message categories to ignore. This parameter
    is available since version 2.0.4.


*yii/console/controllers/MessageController::extractMessagesFromTokens*protected
>
 extractMessagesFromTokens($tokens, $translatorTokens, $ignoreCategories)
<
return (array) Messages.

 Extracts messages from a parsed PHP tokens list.

    [$tokens] (array) Tokens to be processed.
    [$translatorTokens] (array) Translator tokens.
    [$ignoreCategories] (array) Message categories to ignore.


*yii/console/controllers/MessageController::isCategoryIgnored*protected
>
 isCategoryIgnored($category, $ignoreCategories)
<
return (bool) 

 The method checks, whether the $category is ignored according to
 $ignoreCategories array.

 Examples:


   - 'myapp' - will be ignored only 'myapp' category; 
   - 'myapp*' - will be ignored by all categories beginning with
   'myapp' ('myapp', 'myapplication', 'myapprove', 'myapp/widgets',
   'myapp.widgets', etc).

    [$category] (string) Category that is checked
    [$ignoreCategories] (array) Message categories to ignore.


*yii/console/controllers/MessageController::tokensEqual*	protected
>
 tokensEqual($a, $b)
<
return (bool) 

 Finds out if two PHP tokens are equal.

    [$a] (array|string) 
    [$b] (array|string) 


*yii/console/controllers/MessageController::getLine*	protected
>
 getLine($tokens)
<
return (int|string) 

 Finds out a line of the first non-char PHP token found.

    [$tokens] (array) 


*yii/console/controllers/MessageController::saveMessagesToPHP*protected
>
 saveMessagesToPHP($messages, $dirName, $overwrite, $removeUnused, $sort, $markUnused)
<
return (void)

 Writes messages into PHP files.

    [$messages] (array) 
    [$dirName] (string) Name of the directory to write to
    [$overwrite] (bool) If existing file should be overwritten without backup
    [$removeUnused] (bool) If obsolete translations should be removed
    [$sort] (bool) If translations should be sorted
    [$markUnused] (bool) If obsolete translations should be marked


*yii/console/controllers/MessageController::saveMessagesCategoryToPHP*protected
>
 saveMessagesCategoryToPHP($messages, $fileName, $overwrite, $removeUnused, $sort, $category, $markUnused)
<
return (int) Exit code

 Writes category messages into PHP file.

    [$messages] (array) 
    [$fileName] (string) Name of the file to write to
    [$overwrite] (bool) If existing file should be overwritten without backup
    [$removeUnused] (bool) If obsolete translations should be removed
    [$sort] (bool) If translations should be sorted
    [$category] (string) Message category
    [$markUnused] (bool) If obsolete translations should be marked


*yii/console/controllers/MessageController::saveMessagesToPO*protected
>
 saveMessagesToPO($messages, $dirName, $overwrite, $removeUnused, $sort, $catalog, $markUnused)
<
return (void)

 Writes messages into PO file.

    [$messages] (array) 
    [$dirName] (string) Name of the directory to write to
    [$overwrite] (bool) If existing file should be overwritten without backup
    [$removeUnused] (bool) If obsolete translations should be removed
    [$sort] (bool) If translations should be sorted
    [$catalog] (string) Message catalog
    [$markUnused] (bool) If obsolete translations should be marked


*yii/console/controllers/MessageController::saveMessagesToPOT*protected
>
 saveMessagesToPOT($messages, $dirName, $catalog)
<
return (void)

 Writes messages into POT file.

    [$messages] (array) 
    [$dirName] (string) Name of the directory to write to
    [$catalog] (string) Message catalog


*yii/console/controllers/MessageController::initConfig*	protected
>
 initConfig($configFile)
<
return (void)

    [$configFile] (string) 



 vim:tw=78:ts=8:ft=help:norl:
