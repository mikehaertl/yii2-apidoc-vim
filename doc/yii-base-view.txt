
*yii/base/View*   >> |yii/base/Component|
===============

SUBCLASSES
------------------------------------------------------------------------------

|yii/web/View|

DESCRIPTION
------------------------------------------------------------------------------

 View provides a set of methods (e.g. 'render()') for rendering purpose.


PROPERTY DETAILS
------------------------------------------------------------------------------

$context				*yii/base/View::$context*
 (\yii\base\ViewContextInterface) The context under which the 'renderFile()'
 method is being invoked.

$params					*yii/base/View::$params*
 (mixed) Custom parameters that are shared among view templates.

$renderers				*yii/base/View::$renderers*
 (array) A list of available renderers indexed by their corresponding
 supported file extensions. Each renderer may be a view renderer object or the
 configuration for creating the renderer object. For example, the following
 configuration enables both Smarty and Twig view renderers:

   [
       'tpl' => ['class' => 'yii\smarty\ViewRenderer'],
       'twig' => ['class' => 'yii\twig\ViewRenderer'],
   ]

 If no renderer is available for the given view file, the view file will be
 treated as a normal PHP and rendered via 'renderPhpFile()'.

$defaultExtension			*yii/base/View::$defaultExtension*
 (string) The default view file extension. This will be appended to view file
 names if they don't have file extensions.

$theme					*yii/base/View::$theme*
 (\yii\base\Theme|array|string) The theme object or the configuration for
 creating the theme object. If not set, it means theming is not enabled.

$blocks					*yii/base/View::$blocks*
 (array) A list of named output blocks. The keys are the block names and the
 values are the corresponding block content. You can call 'beginBlock()' and
 'endBlock()' to capture small fragments of a view. They can be later accessed
 somewhere else through this property.

$cacheStack				*yii/base/View::$cacheStack*
 (array) A list of currently active fragment cache widgets. This property is
 used internally to implement the content caching feature. Do not modify it
 directly.

$dynamicPlaceholders			*yii/base/View::$dynamicPlaceholders*
 (array) A list of placeholders for embedding dynamic contents. This property
 is used internally to implement the content caching feature. Do not modify it
 directly.

$behaviors				*yii/base/View::$behaviors*
 (\yii\base\Behavior[]) List of behaviors attached to this component

$viewFile				*yii/base/View::$viewFile*
 (string|boolean) The view file currently being rendered. False if no view
 file is being rendered.



METHOD DETAILS
------------------------------------------------------------------------------

*yii/base/View::className*				public
 See |yii/base/Object::className|


*yii/base/View::__construct*				public
 See |yii/base/Object::__construct|


*yii/base/View::init*					public
>
 init()
<
(void)



*yii/base/View::__get*					public
 See |yii/base/Component::__get|


*yii/base/View::__set*					public
 See |yii/base/Component::__set|


*yii/base/View::__isset*					public
 See |yii/base/Component::__isset|


*yii/base/View::__unset*					public
 See |yii/base/Component::__unset|


*yii/base/View::__call*					public
 See |yii/base/Component::__call|


*yii/base/View::hasProperty*				public
 See |yii/base/Component::hasProperty|


*yii/base/View::canGetProperty*				public
 See |yii/base/Component::canGetProperty|


*yii/base/View::canSetProperty*				public
 See |yii/base/Component::canSetProperty|


*yii/base/View::hasMethod*				public
 See |yii/base/Component::hasMethod|


*yii/base/View::__clone*					public
 See |yii/base/Component::__clone|


*yii/base/View::behaviors*				public
 See |yii/base/Component::behaviors|


*yii/base/View::hasEventHandlers*				public
 See |yii/base/Component::hasEventHandlers|


*yii/base/View::on*					public
 See |yii/base/Component::on|


*yii/base/View::off*					public
 See |yii/base/Component::off|


*yii/base/View::trigger*					public
 See |yii/base/Component::trigger|


*yii/base/View::getBehavior*				public
 See |yii/base/Component::getBehavior|


*yii/base/View::getBehaviors*				public
 See |yii/base/Component::getBehaviors|


*yii/base/View::attachBehavior*				public
 See |yii/base/Component::attachBehavior|


*yii/base/View::attachBehaviors*				public
 See |yii/base/Component::attachBehaviors|


*yii/base/View::detachBehavior*				public
 See |yii/base/Component::detachBehavior|


*yii/base/View::detachBehaviors*				public
 See |yii/base/Component::detachBehaviors|


*yii/base/View::ensureBehaviors*				public
 See |yii/base/Component::ensureBehaviors|


*yii/base/View::render*					public
>
 render($view, $params='[]', $context='null')
<
(string) The rendering result

 The view to be rendered can be specified in one of the following formats:


   - path alias (e.g. "@app/views/site/index"); 
   - absolute path within application (e.g. "//site/index"): the view
   name starts with double slashes.   The actual view file will be looked for
 under the 'Application::viewPath|view path' of the application. 
   - absolute path within current module (e.g. "/site/index"): the view
   name starts with a single slash.   The actual view file will be looked for
 under the 'Module::viewPath|view path' of the 'Controller::module|current
 module'. 
   - relative view (e.g. "index"): the view name does not start with
   '@' or '/'. The corresponding view file will be   looked for under the
 'ViewContextInterface::getViewPath()|view path' of the view '$context'.   If
 '$context' is not given, it will be looked for under the directory containing
 the view currently   being rendered (i.e., this happens when rendering a view
 within another view).
    [$view] (string) The view name.
    [$params] (array) The parameters (name-value pairs) that will be extracted
    and made available in the view file.
    [$context] (object) The context to be assigned to the view and can later
    be accessed via 'context' in the view. If the context implements
    'ViewContextInterface', it may also be used to locate the view file
    corresponding to a relative view name.


*yii/base/View::findViewFile*				protected
>
 findViewFile($view, $context='null')
<
(string) The view file path. Note that the file may not exist.

    [$view] (string) The view name or the path alias of the view file. Please
    refer to 'render()' on how to specify this parameter.
    [$context] (object) The context to be assigned to the view and can later
    be accessed via 'context' in the view. If the context implements
    'ViewContextInterface', it may also be used to locate the view file
    corresponding to a relative view name.


*yii/base/View::renderFile*				public
>
 renderFile($viewFile, $params='[]', $context='null')
<
(string) The rendering result

 If 'theme' is enabled (not null), it will try to render the themed version of
 the view file as long as it is available.

 The method will call 'FileHelper::localize()' to localize the view file.

 If 'renderers|renderer' is enabled (not null), the method will use it to
 render the view file. Otherwise, it will simply include the view file as a
 normal PHP file, capture its output and return it as a string.
    [$viewFile] (string) The view file. This can be either an absolute file
    path or an alias of it.
    [$params] (array) The parameters (name-value pairs) that will be extracted
    and made available in the view file.
    [$context] (object) The context that the view should use for rendering the
    view. If null, existing 'context' will be used.


*yii/base/View::getViewFile*				public
>
 getViewFile()
<
(string|boolean) The view file currently being rendered. False if no view file
is being rendered.



*yii/base/View::beforeRender*				public
>
 beforeRender()
<
(boolean) Whether to continue rendering the view file.

 The default implementation will trigger the 'EVENT_BEFORE_RENDER' event. If
 you override this method, make sure you call the parent implementation first.


*yii/base/View::afterRender*				public
>
 afterRender($output)
<
(void)

 The default implementation will trigger the 'EVENT_AFTER_RENDER' event. If
 you override this method, make sure you call the parent implementation first.
    [$output] (string) The rendering result of the view file. Updates to this
    parameter will be passed back and returned by 'renderFile()'.


*yii/base/View::renderPhpFile*				public
>
 renderPhpFile($_file_, $_params_='[]')
<
(string) The rendering result

 This method treats the view file as a PHP script and includes the file. It
 extracts the given parameters and makes them available in the view file. The
 method captures the output of the included view file and returns it as a
 string.

 This method should mainly be called by view renderer or 'renderFile()'.
    [$_file_] (string) The view file.
    [$_params_] (array) The parameters (name-value pairs) that will be
    extracted and made available in the view file.


*yii/base/View::renderDynamic*				public
>
 renderDynamic($statements)
<
(string) The placeholder of the dynamic content, or the dynamic content if
there is no active content cache currently.

 This method is mainly used together with content caching (fragment caching
 and page caching) when some portions of the content (called *dynamic
 content*) should not be cached. The dynamic content must be returned by some
 PHP statements.
    [$statements] (string) The PHP statements for generating the dynamic
    content.


*yii/base/View::addDynamicPlaceholder*			public
>
 addDynamicPlaceholder($placeholder, $statements)
<
(void)

 This method is internally used.
    [$placeholder] (string) The placeholder name
    [$statements] (string) The PHP statements for generating the dynamic
    content


*yii/base/View::evaluateDynamicContent*			public
>
 evaluateDynamicContent($statements)
<
(mixed) The return value of the PHP statements.

 This method is mainly used internally to implement dynamic content feature.
    [$statements] (string) The PHP statements to be evaluated.


*yii/base/View::beginBlock*				public
>
 beginBlock($id, $renderInPlace='false')
<
(\yii\widgets\Block) The Block widget instance

 This method is a shortcut to beginning 'Block'
    [$id] (string) The block ID.
    [$renderInPlace] (boolean) Whether to render the block content in place.
    Defaults to false, meaning the captured block will not be displayed.


*yii/base/View::endBlock*					public
>
 endBlock()
<
(void)



*yii/base/View::beginContent*				public
>
 beginContent($viewFile, $params='[]')
<
(\yii\widgets\ContentDecorator) The ContentDecorator widget instance

 This method can be used to implement nested layout. For example, a layout can
 be embedded in another layout file specified as '@app/views/layouts/base.php'
 like the following:

   <?php $this->beginContent('@app/views/layouts/base.php'); ?>
   ...layout content here...
   <?php $this->endContent(); ?>


    [$viewFile] (string) The view file that will be used to decorate the
    content enclosed by this widget. This can be specified as either the view
    file path or path alias.
    [$params] (array) The variables (name => value) to be extracted and made
    available in the decorative view.


*yii/base/View::endContent*				public
>
 endContent()
<
(void)



*yii/base/View::beginCache*				public
>
 beginCache($id, $properties='[]')
<
(boolean) Whether you should generate the content for caching. False if the
cached version is available.

 This method will display cached content if it is available. If not, it will
 start caching and would expect an 'endCache()' call to end the cache and save
 the content into cache. A typical usage of fragment caching is as follows,

   if ($this->beginCache($id)) {
       // ...generate content here
       $this->endCache();
   }


    [$id] (string) A unique ID identifying the fragment to be cached.
    [$properties] (array) Initial property values for 'FragmentCache'


*yii/base/View::endCache*					public
>
 endCache()
<
(void)



*yii/base/View::beginPage*				public
>
 beginPage()
<
(void)



*yii/base/View::endPage*					public
>
 endPage()
<
(void)




 vim:tw=78:ts=8:ft=help:norl:
