
*yii/validators/CompareValidator*   >> |yii/validators/Validator|
=================================

DESCRIPTION
------------------------------------------------------------------------------

 The value being compared with can be another attribute value (specified via
 'compareAttribute') or a constant (specified via 'compareValue'. When both
 are specified, the latter takes precedence. If neither is specified, the
 attribute will be compared with another attribute whose name is by appending
 "_repeat" to the source attribute name.

 CompareValidator supports different comparison operators, specified via the
 'operator' property.

 The default comparison function is based on string values, which means the
 values are compared byte by byte. When comparing numbers, make sure to set
 the '$type' to 'TYPE_NUMBER' to enable numeric comparison.


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/validators/Validator::$builtInValidators|
 |yii/validators/Validator::$attributes|
 |yii/validators/Validator::$on|
 |yii/validators/Validator::$except|
 |yii/validators/Validator::$skipOnError|
 |yii/validators/Validator::$skipOnEmpty|
 |yii/validators/Validator::$enableClientValidation|
 |yii/validators/Validator::$isEmpty|
 |yii/validators/Validator::$when|
 |yii/validators/Validator::$whenClient|
 |yii/base/Component::$behaviors|
 |yii/validators/Validator::$validationAttributes|
 |yii/validators/Validator::$attributeNames|


$message				*yii/validators/CompareValidator::$message*

 (string) The user-defined error message. It may contain the following
 placeholders which will be replaced accordingly by the validator:


   - '{attribute}': the label of the attribute being validated 
   - '{value}': the value of the attribute being validated 
   - '{compareValue}': the value or the attribute label to be compared
   with 
   - '{compareAttribute}': the label of the attribute to be compared
   with 
   - '{compareValueOrAttribute}': the value or the attribute label to
   be compared with

$compareAttribute			*yii/validators/CompareValidator::$compareAttribute*

 (string) The name of the attribute to be compared with. When both this
 property and 'compareValue' are set, the latter takes precedence. If neither
 is set, it assumes the comparison is against another attribute whose name is
 formed by appending '_repeat' to the attribute being validated. For example,
 if 'password' is being validated, then the attribute to be compared would be
 'password_repeat'.

$compareValue				*yii/validators/CompareValidator::$compareValue*

 (mixed) The constant value to be compared with. When both this property and
 'compareAttribute' are set, this property takes precedence.

$type					*yii/validators/CompareValidator::$type*

 (string) The type of the values being compared. The follow types are
 supported:


   - 'TYPE_STRING|string': the values are being compared as strings. No
   conversion will be done before comparison. 
   - 'TYPE_NUMBER|number': the values are being compared as numbers.
   String values will be converted into numbers before comparison.

$operator				*yii/validators/CompareValidator::$operator*

 (string) The operator for comparison. The following operators are supported:


   - '==': check if two values are equal. The comparison is done is
   non-strict mode. 
   - '===': check if two values are equal. The comparison is done is
   strict mode. 
   - '!=': check if two values are NOT equal. The comparison is done is
   non-strict mode. 
   - '!==': check if two values are NOT equal. The comparison is done
   is strict mode. 
   - '>': check if value being validated is greater than the value
   being compared with. 
   - '>=': check if value being validated is greater than or equal to
   the value being compared with. 
   - '<': check if value being validated is less than the value being
   compared with. 
   - '<=': check if value being validated is less than or equal to the
   value being compared with.

 When you want to compare numbers, make sure to also set 'type' to 'number'.



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/validators/Validator::createValidator|
 |yii/validators/Validator::validateAttributes|
 |yii/validators/Validator::getValidationAttributes|
 |yii/validators/Validator::validate|
 |yii/validators/Validator::isActive|
 |yii/validators/Validator::addError|
 |yii/validators/Validator::isEmpty|
 |yii/validators/Validator::formatMessage|
 |yii/validators/Validator::getAttributeNames|


*yii/validators/CompareValidator::init*			public
>
 init()
<
return (void)

 Initializes the object.



 This method is invoked at the end of the constructor after the object is
 initialized with the given configuration.




*yii/validators/CompareValidator::validateAttribute*	public
>
 validateAttribute($model, $attribute)
<
return (void)

 Validates a single attribute.



 Child classes must implement this method to provide the actual validation
 logic.



    [$model] (\yii\base\Model) The data model to be validated
    [$attribute] (string) The name of the attribute to be validated.


*yii/validators/CompareValidator::validateValue*		protected
>
 validateValue($value)
<
return (array|null) The error message and the array of parameters to be inserted into
the error message.

  if (!$valid) {
      return [$this->message, [
          'param1' => $this->param1,
          'formattedLimit' =>
Yii::$app->formatter->asShortSize($this->getSizeLimit()),
          'mimeTypes' => implode(', ', $this->mimeTypes),
          'param4' => 'etc...',
      ]];
  }

  return null;

for this example 'message' template can contain '{param1}',
'{formattedLimit}', '{mimeTypes}', '{param4}'

Null should be returned if the data is valid.

 Validates a value.



 A validator class can implement this method to support data validation out of
 the context of a data model.



    [$value] (mixed) The data value to be validated.


*yii/validators/CompareValidator::clientValidateAttribute*public
>
 clientValidateAttribute($model, $attribute, $view)
<
return (string|null) The client-side validation script. Null if the validator does
not support client-side validation.

 Returns the JavaScript needed for performing client-side validation.



 Calls 'getClientOptions()' to generate options array for client-side
 validation.

 You may override this method to return the JavaScript validation code if the
 validator can support client-side validation.

 The following JavaScript variables are predefined and can be used in the
 validation code:


   - 'attribute': an object describing the the attribute being
   validated. 
   - 'value': the value being validated. 
   - 'messages': an array used to hold the validation error messages
   for the attribute. 
   - 'deferred': an array used to hold deferred objects for
   asynchronous validation 
   - '$form': a jQuery object containing the form element

 The 'attribute' object contains the following properties: 
   - 'id': a unique ID identifying the attribute (e.g.
   "loginform-username") in the form 
   - 'name': attribute name or expression (e.g. "[0]content" for
   tabular input) 
   - 'container': the jQuery selector of the container of the input
   field 
   - 'input': the jQuery selector of the input field under the context
   of the form 
   - 'error': the jQuery selector of the error tag under the context of
   the container 
   - 'status': status of the input field, 0: empty, not entered before,
   1: validated, 2: pending validation, 3: validating



    [$model] (\yii\base\Model) The data model being validated
    [$attribute] (string) The name of the attribute to be validated.
    [$view] (\yii\web\View) The view object that is going to be used to render
    views or view files containing a model form with this validator applied.


*yii/validators/CompareValidator::getClientOptions*	public
>
 getClientOptions($model, $attribute)
<
return (array) The client-side validation options

 Returns the client-side validation options.



 This method is usually called from 'clientValidateAttribute()'. You may
 override this method to modify options that will be passed to the client-side
 validation.



    [$model] (\yii\base\Model) The model being validated
    [$attribute] (string) The attribute name being validated


*yii/validators/CompareValidator::compareValues*		protected
>
 compareValues($operator, $type, $value, $compareValue)
<
return (bool) Whether the comparison using the specified operator is true.

 Compares two values with the specified operator.

    [$operator] (string) The comparison operator
    [$type] (string) The type of the values being compared
    [$value] (mixed) The value being compared
    [$compareValue] (mixed) Another value being compared



 vim:tw=78:ts=8:ft=help:norl:
