
*yii/db/mssql/QueryBuilder*   >> |yii/db/QueryBuilder|
===========================


PROPERTY DETAILS
------------------------------------------------------------------------------

$db					*yii/db/mssql/QueryBuilder::$db*

 See |yii/db/QueryBuilder::$db|

$separator				*yii/db/mssql/QueryBuilder::$separator*

 See |yii/db/QueryBuilder::$separator|

$typeMap				*yii/db/mssql/QueryBuilder::$typeMap*

 (array) Mapping from abstract column types (keys) to physical column types
 (values).

$conditionBuilders			*yii/db/mssql/QueryBuilder::$conditionBuilders*

 See |yii/db/QueryBuilder::$conditionBuilders|

$conditionClasses			*yii/db/mssql/QueryBuilder::$conditionClasses*

 See |yii/db/QueryBuilder::$conditionClasses|

$expressionBuilders			*yii/db/mssql/QueryBuilder::$expressionBuilders*

 See |yii/db/QueryBuilder::$expressionBuilders|



METHOD DETAILS
------------------------------------------------------------------------------


*yii/db/mssql/QueryBuilder::className*			public

 See |yii/base/BaseObject::className|


*yii/db/mssql/QueryBuilder::__construct*			public

 See |yii/base/BaseObject::__construct|


*yii/db/mssql/QueryBuilder::init*				public

 See |yii/base/BaseObject::init|


*yii/db/mssql/QueryBuilder::__get*			public

 See |yii/base/BaseObject::__get|


*yii/db/mssql/QueryBuilder::__set*			public

 See |yii/base/BaseObject::__set|


*yii/db/mssql/QueryBuilder::__isset*			public

 See |yii/base/BaseObject::__isset|


*yii/db/mssql/QueryBuilder::__unset*			public

 See |yii/base/BaseObject::__unset|


*yii/db/mssql/QueryBuilder::__call*			public

 See |yii/base/BaseObject::__call|


*yii/db/mssql/QueryBuilder::hasProperty*			public

 See |yii/base/BaseObject::hasProperty|


*yii/db/mssql/QueryBuilder::canGetProperty*		public

 See |yii/base/BaseObject::canGetProperty|


*yii/db/mssql/QueryBuilder::canSetProperty*		public

 See |yii/base/BaseObject::canSetProperty|


*yii/db/mssql/QueryBuilder::hasMethod*			public

 See |yii/base/BaseObject::hasMethod|


*yii/db/mssql/QueryBuilder::defaultConditionClasses*	protected

 See |yii/db/QueryBuilder::defaultConditionClasses|


*yii/db/mssql/QueryBuilder::defaultExpressionBuilders*	protected
>
 defaultExpressionBuilders()
<
return (void)

 {@inheritdoc}


*yii/db/mssql/QueryBuilder::setExpressionBuilders*	public

 See |yii/db/QueryBuilder::setExpressionBuilders|


*yii/db/mssql/QueryBuilder::setConditionClasses*		public

 See |yii/db/QueryBuilder::setConditionClasses|


*yii/db/mssql/QueryBuilder::build*			public

 See |yii/db/QueryBuilder::build|


*yii/db/mssql/QueryBuilder::buildExpression*		public

 See |yii/db/QueryBuilder::buildExpression|


*yii/db/mssql/QueryBuilder::getExpressionBuilder*		public

 See |yii/db/QueryBuilder::getExpressionBuilder|


*yii/db/mssql/QueryBuilder::insert*			public
>
 insert($table, $columns, $params)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$columns] () 
    [$params] () 


*yii/db/mssql/QueryBuilder::prepareInsertValues*		protected

 See |yii/db/QueryBuilder::prepareInsertValues|


*yii/db/mssql/QueryBuilder::prepareInsertSelectSubQuery*	protected

 See |yii/db/QueryBuilder::prepareInsertSelectSubQuery|


*yii/db/mssql/QueryBuilder::batchInsert*			public

 See |yii/db/QueryBuilder::batchInsert|


*yii/db/mssql/QueryBuilder::upsert*			public
>
 upsert($table, $insertColumns, $updateColumns, $params)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$insertColumns] () 
    [$updateColumns] () 
    [$params] () 


*yii/db/mssql/QueryBuilder::prepareUpsertColumns*		protected

 See |yii/db/QueryBuilder::prepareUpsertColumns|


*yii/db/mssql/QueryBuilder::update*			public
>
 update($table, $columns, $condition, $params)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$columns] () 
    [$condition] () 
    [$params] () 


*yii/db/mssql/QueryBuilder::prepareUpdateSets*		protected

 See |yii/db/QueryBuilder::prepareUpdateSets|


*yii/db/mssql/QueryBuilder::delete*			public

 See |yii/db/QueryBuilder::delete|


*yii/db/mssql/QueryBuilder::createTable*			public

 See |yii/db/QueryBuilder::createTable|


*yii/db/mssql/QueryBuilder::renameTable*			public
>
 renameTable($oldName, $newName)
<
return (string) The SQL statement for renaming a DB table.

 Builds a SQL statement for renaming a DB table.

    [$oldName] (string) The table to be renamed. The name will be properly
    quoted by the method.
    [$newName] (string) The new table name. The name will be properly quoted
    by the method.


*yii/db/mssql/QueryBuilder::dropTable*			public

 See |yii/db/QueryBuilder::dropTable|


*yii/db/mssql/QueryBuilder::addPrimaryKey*		public

 See |yii/db/QueryBuilder::addPrimaryKey|


*yii/db/mssql/QueryBuilder::dropPrimaryKey*		public

 See |yii/db/QueryBuilder::dropPrimaryKey|


*yii/db/mssql/QueryBuilder::truncateTable*		public

 See |yii/db/QueryBuilder::truncateTable|


*yii/db/mssql/QueryBuilder::addColumn*			public

 See |yii/db/QueryBuilder::addColumn|


*yii/db/mssql/QueryBuilder::dropColumn*			public

 See |yii/db/QueryBuilder::dropColumn|


*yii/db/mssql/QueryBuilder::renameColumn*			public
>
 renameColumn($table, $oldName, $newName)
<
return (string) The SQL statement for renaming a DB column.

 Builds a SQL statement for renaming a column.

    [$table] (string) The table whose column is to be renamed. The name will
    be properly quoted by the method.
    [$oldName] (string) The old name of the column. The name will be properly
    quoted by the method.
    [$newName] (string) The new name of the column. The name will be properly
    quoted by the method.


*yii/db/mssql/QueryBuilder::alterColumn*			public
>
 alterColumn($table, $column, $type)
<
return (string) The SQL statement for changing the definition of a column.

 Builds a SQL statement for changing the definition of a column.

    [$table] (string) The table whose column is to be changed. The table name
    will be properly quoted by the method.
    [$column] (string) The name of the column to be changed. The name will be
    properly quoted by the method.
    [$type] (string) The new column type. The 'getColumnType' method will be
    invoked to convert abstract column type (if any) into the physical one.
    Anything that is not recognized as abstract type will be kept in the
    generated SQL. For example, 'string' will be turned into 'varchar(255)',
    while 'string not null' will become 'varchar(255) not null'.


*yii/db/mssql/QueryBuilder::addForeignKey*		public

 See |yii/db/QueryBuilder::addForeignKey|


*yii/db/mssql/QueryBuilder::dropForeignKey*		public

 See |yii/db/QueryBuilder::dropForeignKey|


*yii/db/mssql/QueryBuilder::createIndex*			public

 See |yii/db/QueryBuilder::createIndex|


*yii/db/mssql/QueryBuilder::dropIndex*			public

 See |yii/db/QueryBuilder::dropIndex|


*yii/db/mssql/QueryBuilder::addUnique*			public

 See |yii/db/QueryBuilder::addUnique|


*yii/db/mssql/QueryBuilder::dropUnique*			public

 See |yii/db/QueryBuilder::dropUnique|


*yii/db/mssql/QueryBuilder::addCheck*			public

 See |yii/db/QueryBuilder::addCheck|


*yii/db/mssql/QueryBuilder::dropCheck*			public

 See |yii/db/QueryBuilder::dropCheck|


*yii/db/mssql/QueryBuilder::addDefaultValue*		public
>
 addDefaultValue($name, $table, $column, $value)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 
    [$column] () 
    [$value] () 


*yii/db/mssql/QueryBuilder::dropDefaultValue*		public
>
 dropDefaultValue($name, $table)
<
return (void)

 {@inheritdoc}

    [$name] () 
    [$table] () 


*yii/db/mssql/QueryBuilder::resetSequence*		public
>
 resetSequence($tableName, $value='null')
<
return (string) The SQL statement for resetting sequence

 Creates a SQL statement for resetting the sequence value of a table's primary
 key.

 The sequence will be reset such that the primary key of the next new row
 inserted will have the specified value or 1.

    [$tableName] (string) The name of the table whose primary key sequence
    will be reset
    [$value] (mixed) The value for the primary key of the next new row
    inserted. If this is not set, the next new row's primary key will have a
    value 1.


*yii/db/mssql/QueryBuilder::checkIntegrity*		public
>
 checkIntegrity($check='true', $schema='''', $table='''')
<
return (string) The SQL statement for checking integrity

 Builds a SQL statement for enabling or disabling integrity check.

    [$check] (bool) Whether to turn on or off the integrity check.
    [$schema] (string) The schema of the tables.
    [$table] (string) The table name.


*yii/db/mssql/QueryBuilder::addCommentOnColumn*		public
>
 addCommentOnColumn($table, $column, $comment)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$column] () 
    [$comment] () 


*yii/db/mssql/QueryBuilder::addCommentOnTable*		public
>
 addCommentOnTable($table, $comment)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$comment] () 


*yii/db/mssql/QueryBuilder::dropCommentFromColumn*	public
>
 dropCommentFromColumn($table, $column)
<
return (void)

 {@inheritdoc}

    [$table] () 
    [$column] () 


*yii/db/mssql/QueryBuilder::dropCommentFromTable*		public
>
 dropCommentFromTable($table)
<
return (void)

 {@inheritdoc}

    [$table] () 


*yii/db/mssql/QueryBuilder::createView*			public

 See |yii/db/QueryBuilder::createView|


*yii/db/mssql/QueryBuilder::dropView*			public

 See |yii/db/QueryBuilder::dropView|


*yii/db/mssql/QueryBuilder::getColumnType*		public

 See |yii/db/QueryBuilder::getColumnType|


*yii/db/mssql/QueryBuilder::buildSelect*			public

 See |yii/db/QueryBuilder::buildSelect|


*yii/db/mssql/QueryBuilder::buildFrom*			public

 See |yii/db/QueryBuilder::buildFrom|


*yii/db/mssql/QueryBuilder::buildJoin*			public

 See |yii/db/QueryBuilder::buildJoin|


*yii/db/mssql/QueryBuilder::buildWhere*			public

 See |yii/db/QueryBuilder::buildWhere|


*yii/db/mssql/QueryBuilder::buildGroupBy*			public

 See |yii/db/QueryBuilder::buildGroupBy|


*yii/db/mssql/QueryBuilder::buildHaving*			public

 See |yii/db/QueryBuilder::buildHaving|


*yii/db/mssql/QueryBuilder::buildOrderByAndLimit*		public
>
 buildOrderByAndLimit($sql, $orderBy, $limit, $offset)
<
return (void)

 {@inheritdoc}

    [$sql] () 
    [$orderBy] () 
    [$limit] () 
    [$offset] () 


*yii/db/mssql/QueryBuilder::buildOrderBy*			public

 See |yii/db/QueryBuilder::buildOrderBy|


*yii/db/mssql/QueryBuilder::buildLimit*			public

 See |yii/db/QueryBuilder::buildLimit|


*yii/db/mssql/QueryBuilder::hasLimit*			protected

 See |yii/db/QueryBuilder::hasLimit|


*yii/db/mssql/QueryBuilder::hasOffset*			protected

 See |yii/db/QueryBuilder::hasOffset|


*yii/db/mssql/QueryBuilder::buildUnion*			public

 See |yii/db/QueryBuilder::buildUnion|


*yii/db/mssql/QueryBuilder::buildColumns*			public

 See |yii/db/QueryBuilder::buildColumns|


*yii/db/mssql/QueryBuilder::buildCondition*		public

 See |yii/db/QueryBuilder::buildCondition|


*yii/db/mssql/QueryBuilder::createConditionFromArray*	public

 See |yii/db/QueryBuilder::createConditionFromArray|


*yii/db/mssql/QueryBuilder::buildHashCondition*		public

 See |yii/db/QueryBuilder::buildHashCondition|


*yii/db/mssql/QueryBuilder::buildAndCondition*		public

 See |yii/db/QueryBuilder::buildAndCondition|


*yii/db/mssql/QueryBuilder::buildNotCondition*		public

 See |yii/db/QueryBuilder::buildNotCondition|


*yii/db/mssql/QueryBuilder::buildBetweenCondition*	public

 See |yii/db/QueryBuilder::buildBetweenCondition|


*yii/db/mssql/QueryBuilder::buildInCondition*		public

 See |yii/db/QueryBuilder::buildInCondition|


*yii/db/mssql/QueryBuilder::buildLikeCondition*		public

 See |yii/db/QueryBuilder::buildLikeCondition|


*yii/db/mssql/QueryBuilder::buildExistsCondition*		public

 See |yii/db/QueryBuilder::buildExistsCondition|


*yii/db/mssql/QueryBuilder::buildSimpleCondition*		public

 See |yii/db/QueryBuilder::buildSimpleCondition|


*yii/db/mssql/QueryBuilder::selectExists*			public
>
 selectExists($rawSql)
<
return (void)

 {@inheritdoc}

    [$rawSql] () 


*yii/db/mssql/QueryBuilder::bindParam*			public

 See |yii/db/QueryBuilder::bindParam|


*yii/db/mssql/QueryBuilder::newBuildOrderByAndLimit*	protected
>
 newBuildOrderByAndLimit($sql, $orderBy, $limit, $offset)
<
return (string) The SQL completed with ORDER BY/LIMIT/OFFSET (if any)

 Builds the ORDER BY/LIMIT/OFFSET clauses for SQL SERVER 2012 or newer.

    [$sql] (string) The existing SQL (without ORDER BY/LIMIT/OFFSET)
    [$orderBy] (array) The order by columns. See '\yii\db\Query::orderBy' for
    more details on how to specify this parameter.
    [$limit] (int) The limit number. See '\yii\db\Query::limit' for more
    details.
    [$offset] (int) The offset number. See '\yii\db\Query::offset' for more
    details.


*yii/db/mssql/QueryBuilder::oldBuildOrderByAndLimit*	protected
>
 oldBuildOrderByAndLimit($sql, $orderBy, $limit, $offset)
<
return (string) The SQL completed with ORDER BY/LIMIT/OFFSET (if any)

 Builds the ORDER BY/LIMIT/OFFSET clauses for SQL SERVER 2005 to 2008.

    [$sql] (string) The existing SQL (without ORDER BY/LIMIT/OFFSET)
    [$orderBy] (array) The order by columns. See '\yii\db\Query::orderBy' for
    more details on how to specify this parameter.
    [$limit] (int) The limit number. See '\yii\db\Query::limit' for more
    details.
    [$offset] (int) The offset number. See '\yii\db\Query::offset' for more
    details.


*yii/db/mssql/QueryBuilder::getAllColumnNames*		protected
>
 getAllColumnNames($modelClass='null')
<
return (array|null) Array of column names

 Returns an array of column names given model name.

    [$modelClass] (string) Name of the model class


*yii/db/mssql/QueryBuilder::isOldMssql*			protected
>
 isOldMssql()
<
return (bool) Whether the version of the MSSQL being used is older than 2012.




 vim:tw=78:ts=8:ft=help:norl:
