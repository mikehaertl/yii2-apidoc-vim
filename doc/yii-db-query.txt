
*yii/db/Query*   >> |yii/base/Component|
==============

SUBCLASSES
------------------------------------------------------------------------------

|yii/sphinx/ActiveQuery|
|yii/sphinx/Query|
|yii/db/ActiveQuery|

DESCRIPTION
------------------------------------------------------------------------------

 Query provides a set of methods to facilitate the specification of different
 clauses in a SELECT statement. These methods can be chained together.

 By calling 'createCommand()', we can get a 'Command' instance which can be
 further used to perform/execute the DB query against a database.

 For example,

   $query = new Query;
   // compose the query
   $query->select('id, name')
       ->from('user')
       ->limit(10);
   // build and execute the query
   $rows = $query->all();
   // alternatively, you can create DB command and execute it
   $command = $query->createCommand();
   // $command->sql returns the actual SQL
   $rows = $command->queryAll();

 Query internally uses the 'QueryBuilder' class to generate the SQL statement.

 A more detailed usage guide on how to work with Query can be found in the
 [guide article on Query Builder](guide:db-query-builder).


PROPERTY DETAILS
------------------------------------------------------------------------------

Inherited properties:

 |yii/db/QueryTrait::$where|
 |yii/db/QueryTrait::$limit|
 |yii/db/QueryTrait::$offset|
 |yii/db/QueryTrait::$orderBy|
 |yii/db/QueryTrait::$indexBy|
 |yii/db/QueryTrait::$emulateExecution|
 |yii/base/Component::$behaviors|


$select					*yii/db/Query::$select*

 (array) The columns being selected. For example, '['id', 'name']'. This is
 used to construct the SELECT clause in a SQL statement. If not set, it means
 selecting all columns.

$selectOption				*yii/db/Query::$selectOption*

 (string) Additional option that should be appended to the 'SELECT' keyword.
 For example, in MySQL, the option 'SQL_CALC_FOUND_ROWS' can be used.

$distinct				*yii/db/Query::$distinct*

 (bool) Whether to select distinct rows of data only. If this is set true, the
 SELECT clause would be changed to SELECT DISTINCT.

$from					*yii/db/Query::$from*

 (array) The table(s) to be selected from. For example, '['user', 'post']'.
 This is used to construct the FROM clause in a SQL statement.

$groupBy				*yii/db/Query::$groupBy*

 (array) How to group the query results. For example, '['company',
 'department']'. This is used to construct the GROUP BY clause in a SQL
 statement.

$join					*yii/db/Query::$join*

 (array) How to join with other tables. Each array element represents the
 specification of one join which has the following structure:

   [$joinType, $tableName, $joinCondition]

 For example,

   [
       ['INNER JOIN', 'user', 'user.id = author_id'],
       ['LEFT JOIN', 'team', 'team.id = team_id'],
   ]



$having					*yii/db/Query::$having*

 (string|array|\yii\db\ExpressionInterface) The condition to be applied in the
 GROUP BY clause. It can be either a string or an array. Please refer to
 'where()' on how to specify the condition.

$union					*yii/db/Query::$union*

 (array) This is used to construct the UNION clause(s) in a SQL statement.
 Each array element is an array of the following structure:


   - 'query': either a string or a 'Query' object representing a query 
   - 'all': boolean, whether it should be 'UNION ALL' or 'UNION'

$params					*yii/db/Query::$params*

 (array) List of query parameter values indexed by parameter placeholders. For
 example, '[':name' => 'Dan', ':age' => 31]'.

$queryCacheDuration			*yii/db/Query::$queryCacheDuration*

 (int|true) The default number of seconds that query results can remain valid
 in cache. Use 0 to indicate that the cached data will never expire. Use a
 negative number to indicate that query cache should not be used. Use boolean
 'true' to indicate that 'Connection::queryCacheDuration' should be used.

$queryCacheDependency			*yii/db/Query::$queryCacheDependency*

 (\yii\caching\Dependency) The dependency to be associated with the cached
 query result for this query

$tablesUsedInFrom			*yii/db/Query::$tablesUsedInFrom*

 (string[]) Table names indexed by aliases



METHOD DETAILS
------------------------------------------------------------------------------

Inherited methods:

 |yii/base/BaseObject::className|
 |yii/base/BaseObject::__construct|
 |yii/base/BaseObject::init|
 |yii/base/Component::__get|
 |yii/base/Component::__set|
 |yii/base/Component::__isset|
 |yii/base/Component::__unset|
 |yii/base/Component::__call|
 |yii/base/Component::hasProperty|
 |yii/base/Component::canGetProperty|
 |yii/base/Component::canSetProperty|
 |yii/base/Component::hasMethod|
 |yii/base/Component::__clone|
 |yii/base/Component::behaviors|
 |yii/base/Component::hasEventHandlers|
 |yii/base/Component::on|
 |yii/base/Component::off|
 |yii/base/Component::trigger|
 |yii/base/Component::getBehavior|
 |yii/base/Component::getBehaviors|
 |yii/base/Component::attachBehavior|
 |yii/base/Component::attachBehaviors|
 |yii/base/Component::detachBehavior|
 |yii/base/Component::detachBehaviors|
 |yii/base/Component::ensureBehaviors|
 |yii/db/QueryTrait::indexBy|
 |yii/db/QueryTrait::filterWhere|
 |yii/db/QueryTrait::andFilterWhere|
 |yii/db/QueryTrait::orFilterWhere|
 |yii/db/QueryTrait::filterCondition|
 |yii/db/QueryTrait::isEmpty|
 |yii/db/QueryTrait::orderBy|
 |yii/db/QueryTrait::addOrderBy|
 |yii/db/QueryTrait::normalizeOrderBy|
 |yii/db/QueryTrait::limit|
 |yii/db/QueryTrait::offset|
 |yii/db/QueryTrait::emulateExecution|


*yii/db/Query::where*					public
>
 where($condition, $params='[]')
<
return ($this) The query object itself

 Sets the WHERE part of the query.

 The method requires a '$condition' parameter, and optionally a '$params'
 parameter specifying the values to be bound to the query.

 The '$condition' parameter should be either a string (e.g. ''id=1'') or an
 array.

 {@inheritdoc}

    [$condition] (string|array|\yii\db\ExpressionInterface) The conditions
    that should be put in the WHERE part.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/Query::andWhere*					public
>
 andWhere($condition, $params='[]')
<
return ($this) The query object itself

 Adds an additional WHERE condition to the existing one.

 The new condition and the existing one will be joined using the 'AND'
 operator.

    [$condition] (string|array|\yii\db\ExpressionInterface) The new WHERE
    condition. Please refer to 'where()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/Query::orWhere*					public
>
 orWhere($condition, $params='[]')
<
return ($this) The query object itself

 Adds an additional WHERE condition to the existing one.

 The new condition and the existing one will be joined using the 'OR'
 operator.

    [$condition] (string|array|\yii\db\ExpressionInterface) The new WHERE
    condition. Please refer to 'where()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/Query::createCommand*				public
>
 createCommand($db='null')
<
return (\yii\db\Command) The created DB command instance.

 Creates a DB command that can be used to execute this query.

    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::prepare*					public
>
 prepare($builder)
<
return ($this) A prepared query instance which will be used by 'QueryBuilder' to
build the SQL

 Prepares for building SQL.

 This method is called by 'QueryBuilder' when it starts to build SQL from a
 query object. You may override this method to do some final preparation work
 when converting a query into a SQL statement.

    [$builder] (\yii\db\QueryBuilder) 


*yii/db/Query::batch*					public
>
 batch($batchSize=100, $db='null')
<
return (\yii\db\BatchQueryResult) The batch query result. It implements the
'\Iterator' interface and can be traversed to retrieve the data in batches.

 Starts a batch query.

 A batch query supports fetching data in batches, which can keep the memory
 usage under a limit. This method will return a 'BatchQueryResult' object
 which implements the '\Iterator' interface and can be traversed to retrieve
 the data in batches.

 For example,

   $query = (new Query)->from('user');
   foreach ($query->batch() as $rows) {
       // $rows is an array of 100 or fewer rows from user table
   }



    [$batchSize] (int) The number of records to be fetched in each batch.
    [$db] (\yii\db\Connection) The database connection. If not set, the "db"
    application component will be used.


*yii/db/Query::each*					public
>
 each($batchSize=100, $db='null')
<
return (\yii\db\BatchQueryResult) The batch query result. It implements the
'\Iterator' interface and can be traversed to retrieve the data in batches.

 Starts a batch query and retrieves data row by row.

 This method is similar to 'batch()' except that in each iteration of the
 result, only one row of data is returned. For example,

   $query = (new Query)->from('user');
   foreach ($query->each() as $row) {
   }



    [$batchSize] (int) The number of records to be fetched in each batch.
    [$db] (\yii\db\Connection) The database connection. If not set, the "db"
    application component will be used.


*yii/db/Query::all*					public
>
 all($db='null')
<
return (array) The query results. If the query results in nothing, an empty array
will be returned.

 Executes the query and returns all results as an array.

    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::populate*					public
>
 populate($rows)
<
return (array) The converted query result

 Converts the raw query results into the format as specified by this query.

 This method is internally used to convert the data fetched from database into
 the format as required by this query.

    [$rows] (array) The raw query result from database


*yii/db/Query::one*					public
>
 one($db='null')
<
return (array|bool) The first row (in terms of an array) of the query result. False
is returned if the query results in nothing.

 Executes the query and returns a single row of result.

    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::scalar*					public
>
 scalar($db='null')
<
return (string|null|false) The value of the first column in the first row of the
query result. False is returned if the query result is empty.

 Returns the query result as a scalar value.

 The value returned will be the first column in the first row of the query
 results.

    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::column*					public
>
 column($db='null')
<
return (array) The first column of the query result. An empty array is returned if
the query results in nothing.

 Executes the query and returns the first column of the result.

    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::count*					public
>
 count($q=''*'', $db='null')
<
return (int|string) Number of records. The result may be a string depending on the
underlying database engine and to support integer values higher than a 32bit
PHP integer can handle.

 Returns the number of records.

    [$q] (string) The COUNT expression. Defaults to '*'. Make sure you
    properly [quote](guide:db-dao#quoting-table-and-column-names) column names
    in the expression.
    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given (or null), the 'db'
    application component will be used.


*yii/db/Query::sum*					public
>
 sum($q, $db='null')
<
return (mixed) The sum of the specified column values.

 Returns the sum of the specified column values.

    [$q] (string) The column name or expression. Make sure you properly
    [quote](guide:db-dao#quoting-table-and-column-names) column names in the
    expression.
    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::average*					public
>
 average($q, $db='null')
<
return (mixed) The average of the specified column values.

 Returns the average of the specified column values.

    [$q] (string) The column name or expression. Make sure you properly
    [quote](guide:db-dao#quoting-table-and-column-names) column names in the
    expression.
    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::min*					public
>
 min($q, $db='null')
<
return (mixed) The minimum of the specified column values.

 Returns the minimum of the specified column values.

    [$q] (string) The column name or expression. Make sure you properly
    [quote](guide:db-dao#quoting-table-and-column-names) column names in the
    expression.
    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::max*					public
>
 max($q, $db='null')
<
return (mixed) The maximum of the specified column values.

 Returns the maximum of the specified column values.

    [$q] (string) The column name or expression. Make sure you properly
    [quote](guide:db-dao#quoting-table-and-column-names) column names in the
    expression.
    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::exists*					public
>
 exists($db='null')
<
return (bool) Whether the query result contains any row of data.

 Returns a value indicating whether the query result contains any row of data.

    [$db] (\yii\db\Connection) The database connection used to generate the
    SQL statement. If this parameter is not given, the 'db' application
    component will be used.


*yii/db/Query::queryScalar*				protected
>
 queryScalar($selectExpression, $db)
<
return (bool|string) 

 Queries a scalar value by setting 'select' first.

 Restores the value of select to make this query reusable.

    [$selectExpression] (string|\yii\db\ExpressionInterface) 
    [$db] (\yii\db\Connection|null) 


*yii/db/Query::getTablesUsedInFrom*			public
>
 getTablesUsedInFrom()
<
return (string[]) Table names indexed by aliases

 Returns table names used in 'from' indexed by aliases.

 Both aliases and names are enclosed into {{ and }}.


*yii/db/Query::cleanUpTableNames*				protected
>
 cleanUpTableNames($tableNames)
<
return (string[]) Table names indexed by aliases

 Clean up table names and aliases Both aliases and names are enclosed into {{
 and }}.

    [$tableNames] (array) Non-empty array


*yii/db/Query::select*					public
>
 select($columns, $option='null')
<
return ($this) The query object itself

 Sets the SELECT part of the query.

    [$columns] (string|array|\yii\db\ExpressionInterface) The columns to be
    selected. Columns can be specified in either a string (e.g. "id, name") or
    an array (e.g. ['id', 'name']). Columns can be prefixed with table names
    (e.g. "user.id") and/or contain column aliases (e.g. "user.id AS
    user_id"). The method will automatically quote the column names unless a
    column contains some parenthesis (which means the column contains a DB
    expression). A DB expression may also be passed in form of an
    'ExpressionInterface' object.

    Note that if you are selecting an expression like 'CONCAT(first_name, ' ',
    last_name)', you should use an array to specify the columns. Otherwise,
    the expression may be incorrectly split into several parts.

    When the columns are specified as an array, you may also use array keys as
    the column aliases (if a column does not need alias, do not use a string
    key).

    Starting from version 2.0.1, you may also select sub-queries as columns by
    specifying each such column as a 'Query' instance representing the
    sub-query.
    [$option] (string) Additional option that should be appended to the
    'SELECT' keyword. For example, in MySQL, the option 'SQL_CALC_FOUND_ROWS'
    can be used.


*yii/db/Query::addSelect*					public
>
 addSelect($columns)
<
return ($this) The query object itself

 Add more columns to the SELECT part of the query.

 Note, that if 'select' has not been specified before, you should include '*'
 explicitly if you want to select all remaining columns too:

   $query->addSelect(["*", "CONCAT(first_name, ' ', last_name) AS
 full_name"])->one();



    [$columns] (string|array|\yii\db\ExpressionInterface) The columns to add
    to the select. See 'select()' for more details about the format of this
    parameter.


*yii/db/Query::normalizeSelect*				protected
>
 normalizeSelect($columns)
<
return (array) 

 Normalizes the SELECT columns passed to 'select()' or 'addSelect()'.

    [$columns] (string|array|\yii\db\ExpressionInterface) 


*yii/db/Query::getUniqueColumns*				protected
>
 getUniqueColumns($columns)
<
return (void)

 Returns unique column names excluding duplicates.

 Columns to be removed: 
   - if column definition already present in SELECT part with same
   alias 
   - if column definition without alias already present in SELECT part
   without alias too

    [$columns] (array) The columns to be merged to the select.


*yii/db/Query::getUnaliasedColumnsFromSelect*		protected
>
 getUnaliasedColumnsFromSelect()
<
return (array) List of columns without aliases from SELECT statement.



*yii/db/Query::distinct*					public
>
 distinct($value='true')
<
return ($this) The query object itself

 Sets the value indicating whether to SELECT DISTINCT or not.

    [$value] (bool) Whether to SELECT DISTINCT or not.


*yii/db/Query::from*					public
>
 from($tables)
<
return ($this) The query object itself

 Sets the FROM part of the query.

    [$tables] (string|array|\yii\db\ExpressionInterface) The table(s) to be
    selected from. This can be either a string (e.g. ''user'') or an array
    (e.g. '['user', 'profile']') specifying one or several table names. Table
    names can contain schema prefixes (e.g. ''public.user'') and/or table
    aliases (e.g. ''user u''). The method will automatically quote the table
    names unless it contains some parenthesis (which means the table is given
    as a sub-query or DB expression).

    When the tables are specified as an array, you may also use the array keys
    as the table aliases (if a table does not need alias, do not use a string
    key).

    Use a Query object to represent a sub-query. In this case, the
    corresponding array key will be used as the alias for the sub-query.

    To specify the 'FROM' part in plain SQL, you may pass an instance of
    'ExpressionInterface'.

    Here are some examples:

      // SELECT * FROM  `user` `u`, `profile`;
      $query = (new \yii\db\Query)->from(['u' => 'user', 'profile']);

      // SELECT * FROM (SELECT * FROM `user` WHERE `active` = 1)
    `activeusers`;
      $subquery = (new \yii\db\Query)->from('user')->where(['active' => true])
      $query = (new \yii\db\Query)->from(['activeusers' => $subquery]);

      // subquery can also be a string with plain SQL wrapped in parenthesis
      // SELECT * FROM (SELECT * FROM `user` WHERE `active` = 1)
    `activeusers`;
      $subquery = "(SELECT * FROM `user` WHERE `active` = 1)";
      $query = (new \yii\db\Query)->from(['activeusers' => $subquery]);




*yii/db/Query::andFilterCompare*				public
>
 andFilterCompare($name, $value, $defaultOperator=''='')
<
return ($this) The query object itself

 Adds a filtering condition for a specific column and allow the user to choose
 a filter operator.

 It adds an additional WHERE condition for the given field and determines the
 comparison operator based on the first few characters of the given value. The
 condition is added in the same way as in 'andFilterWhere' so 'isEmpty()|empty
 values' are ignored. The new condition and the existing one will be joined
 using the 'AND' operator.

 The comparison operator is intelligently determined based on the first few
 characters in the given value. In particular, it recognizes the following
 operators if they appear as the leading characters in the given value:


   - '<': the column must be less than the given value. 
   - '>': the column must be greater than the given value. 
   - '<=': the column must be less than or equal to the given value. 
   - '>=': the column must be greater than or equal to the given value. 
   - '<>': the column must not be the same as the given value. 
   - '=': the column must be equal to the given value. 
   - If none of the above operators is detected, the '$defaultOperator'
   will be used.

    [$name] (string) The column name.
    [$value] (string) The column value optionally prepended with the
    comparison operator.
    [$defaultOperator] (string) The operator to use, when no operator is given
    in '$value'. Defaults to '=', performing an exact match.


*yii/db/Query::join*					public
>
 join($type, $table, $on='\'\'', $params='[]')
<
return ($this) The query object itself

 Appends a JOIN part to the query.

 The first parameter specifies what type of join it is.

    [$type] (string) The type of join, such as INNER JOIN, LEFT JOIN.
    [$table] (string|array) The table to be joined.

    Use a string to represent the name of the table to be joined. The table
    name can contain a schema prefix (e.g. 'public.user') and/or table alias
    (e.g. 'user u'). The method will automatically quote the table name unless
    it contains some parenthesis (which means the table is given as a
    sub-query or DB expression).

    Use an array to represent joining with a sub-query. The array must contain
    only one element. The value must be a 'Query' object representing the
    sub-query while the corresponding key represents the alias for the
    sub-query.
    [$on] (string|array) The join condition that should appear in the ON part.
    Please refer to 'where()' on how to specify this parameter.

    Note that the array format of 'where()' is designed to match columns to
    values instead of columns to columns, so the following would **not** work
    as expected: '['post.author_id' => 'user.id']', it would match the
    'post.author_id' column value against the string ''user.id''. It is
    recommended to use the string syntax here which is more suited for a join:

      'post.author_id = user.id'


    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/Query::innerJoin*					public
>
 innerJoin($table, $on='\'\'', $params='[]')
<
return ($this) The query object itself

 Appends an INNER JOIN part to the query.

    [$table] (string|array) The table to be joined.

    Use a string to represent the name of the table to be joined. The table
    name can contain a schema prefix (e.g. 'public.user') and/or table alias
    (e.g. 'user u'). The method will automatically quote the table name unless
    it contains some parenthesis (which means the table is given as a
    sub-query or DB expression).

    Use an array to represent joining with a sub-query. The array must contain
    only one element. The value must be a 'Query' object representing the
    sub-query while the corresponding key represents the alias for the
    sub-query.
    [$on] (string|array) The join condition that should appear in the ON part.
    Please refer to 'join()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/Query::leftJoin*					public
>
 leftJoin($table, $on='\'\'', $params='[]')
<
return ($this) The query object itself

 Appends a LEFT OUTER JOIN part to the query.

    [$table] (string|array) The table to be joined.

    Use a string to represent the name of the table to be joined. The table
    name can contain a schema prefix (e.g. 'public.user') and/or table alias
    (e.g. 'user u'). The method will automatically quote the table name unless
    it contains some parenthesis (which means the table is given as a
    sub-query or DB expression).

    Use an array to represent joining with a sub-query. The array must contain
    only one element. The value must be a 'Query' object representing the
    sub-query while the corresponding key represents the alias for the
    sub-query.
    [$on] (string|array) The join condition that should appear in the ON part.
    Please refer to 'join()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query


*yii/db/Query::rightJoin*					public
>
 rightJoin($table, $on='\'\'', $params='[]')
<
return ($this) The query object itself

 Appends a RIGHT OUTER JOIN part to the query.

    [$table] (string|array) The table to be joined.

    Use a string to represent the name of the table to be joined. The table
    name can contain a schema prefix (e.g. 'public.user') and/or table alias
    (e.g. 'user u'). The method will automatically quote the table name unless
    it contains some parenthesis (which means the table is given as a
    sub-query or DB expression).

    Use an array to represent joining with a sub-query. The array must contain
    only one element. The value must be a 'Query' object representing the
    sub-query while the corresponding key represents the alias for the
    sub-query.
    [$on] (string|array) The join condition that should appear in the ON part.
    Please refer to 'join()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query


*yii/db/Query::groupBy*					public
>
 groupBy($columns)
<
return ($this) The query object itself

 Sets the GROUP BY part of the query.

    [$columns] (string|array|\yii\db\ExpressionInterface) The columns to be
    grouped by. Columns can be specified in either a string (e.g. "id, name")
    or an array (e.g. ['id', 'name']). The method will automatically quote the
    column names unless a column contains some parenthesis (which means the
    column contains a DB expression).

    Note that if your group-by is an expression containing commas, you should
    always use an array to represent the group-by information. Otherwise, the
    method will not be able to correctly determine the group-by columns.

    Since version 2.0.7, an 'ExpressionInterface' object can be passed to
    specify the GROUP BY part explicitly in plain SQL. Since version 2.0.14,
    an 'ExpressionInterface' object can be passed as well.


*yii/db/Query::addGroupBy*				public
>
 addGroupBy($columns)
<
return ($this) The query object itself

 Adds additional group-by columns to the existing ones.

    [$columns] (string|array|\yii\db\ExpressionInterface) Additional columns
    to be grouped by. Columns can be specified in either a string (e.g. "id,
    name") or an array (e.g. ['id', 'name']). The method will automatically
    quote the column names unless a column contains some parenthesis (which
    means the column contains a DB expression).

    Note that if your group-by is an expression containing commas, you should
    always use an array to represent the group-by information. Otherwise, the
    method will not be able to correctly determine the group-by columns.

    Since version 2.0.7, an 'Expression' object can be passed to specify the
    GROUP BY part explicitly in plain SQL. Since version 2.0.14, an
    'ExpressionInterface' object can be passed as well.


*yii/db/Query::having*					public
>
 having($condition, $params='[]')
<
return ($this) The query object itself

 Sets the HAVING part of the query.

    [$condition] (string|array|\yii\db\ExpressionInterface) The conditions to
    be put after HAVING. Please refer to 'where()' on how to specify this
    parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/Query::andHaving*					public
>
 andHaving($condition, $params='[]')
<
return ($this) The query object itself

 Adds an additional HAVING condition to the existing one.

 The new condition and the existing one will be joined using the 'AND'
 operator.

    [$condition] (string|array|\yii\db\ExpressionInterface) The new HAVING
    condition. Please refer to 'where()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/Query::orHaving*					public
>
 orHaving($condition, $params='[]')
<
return ($this) The query object itself

 Adds an additional HAVING condition to the existing one.

 The new condition and the existing one will be joined using the 'OR'
 operator.

    [$condition] (string|array|\yii\db\ExpressionInterface) The new HAVING
    condition. Please refer to 'where()' on how to specify this parameter.
    [$params] (array) The parameters (name => value) to be bound to the query.


*yii/db/Query::filterHaving*				public
>
 filterHaving($condition)
<
return ($this) The query object itself

 Sets the HAVING part of the query but ignores 'isEmpty()|empty operands'.

 This method is similar to 'having()'. The main difference is that this method
 will remove 'isEmpty()|empty query operands'. As a result, this method is
 best suited for building query conditions based on filter values entered by
 users.

 The following code shows the difference between this method and 'having()':

   // HAVING `age`=:age
   $query->filterHaving(['name' => null, 'age' => 20]);
   // HAVING `age`=:age
   $query->having(['age' => 20]);
   // HAVING `name` IS NULL AND `age`=:age
   $query->having(['name' => null, 'age' => 20]);

 Note that unlike 'having()', you cannot pass binding parameters to this
 method.

    [$condition] (array) The conditions that should be put in the HAVING part.
    See 'having()' on how to specify this parameter.


*yii/db/Query::andFilterHaving*				public
>
 andFilterHaving($condition)
<
return ($this) The query object itself

 Adds an additional HAVING condition to the existing one but ignores
 'isEmpty()|empty operands'.

 The new condition and the existing one will be joined using the 'AND'
 operator.

 This method is similar to 'andHaving()'. The main difference is that this
 method will remove 'isEmpty()|empty query operands'. As a result, this method
 is best suited for building query conditions based on filter values entered
 by users.

    [$condition] (array) The new HAVING condition. Please refer to 'having()'
    on how to specify this parameter.


*yii/db/Query::orFilterHaving*				public
>
 orFilterHaving($condition)
<
return ($this) The query object itself

 Adds an additional HAVING condition to the existing one but ignores
 'isEmpty()|empty operands'.

 The new condition and the existing one will be joined using the 'OR'
 operator.

 This method is similar to 'orHaving()'. The main difference is that this
 method will remove 'isEmpty()|empty query operands'. As a result, this method
 is best suited for building query conditions based on filter values entered
 by users.

    [$condition] (array) The new HAVING condition. Please refer to 'having()'
    on how to specify this parameter.


*yii/db/Query::union*					public
>
 union($sql, $all='false')
<
return ($this) The query object itself

 Appends a SQL statement using UNION operator.

    [$sql] (string|\yii\db\Query) The SQL statement to be appended using UNION
    [$all] (bool) TRUE if using UNION ALL and FALSE if using UNION


*yii/db/Query::params*					public
>
 params($params)
<
return ($this) The query object itself

 Sets the parameters to be bound to the query.

    [$params] (array) List of query parameter values indexed by parameter
    placeholders. For example, '[':name' => 'Dan', ':age' => 31]'.


*yii/db/Query::addParams*					public
>
 addParams($params)
<
return ($this) The query object itself

 Adds additional parameters to be bound to the query.

    [$params] (array) List of query parameter values indexed by parameter
    placeholders. For example, '[':name' => 'Dan', ':age' => 31]'.


*yii/db/Query::cache*					public
>
 cache($duration='true', $dependency='null')
<
return ($this) The Query object itself

 Enables query cache for this Query.

    [$duration] (int|true) The number of seconds that query results can remain
    valid in cache. Use 0 to indicate that the cached data will never expire.
    Use a negative number to indicate that query cache should not be used. Use
    boolean 'true' to indicate that 'Connection::queryCacheDuration' should be
    used. Defaults to 'true'.
    [$dependency] (\yii\caching\Dependency) The cache dependency associated
    with the cached result.


*yii/db/Query::noCache*					public
>
 noCache()
<
return ($this) The Query object itself

 Disables query cache for this Query.


*yii/db/Query::setCommandCache*				protected
>
 setCommandCache($command)
<
return (\yii\db\Command) 

 Sets $command cache, if this query has enabled caching.

    [$command] (\yii\db\Command) 


*yii/db/Query::create*					public
>
 create($from)
<
return (\yii\db\Query) The new Query object

 Creates a new Query object and copies its property values from an existing
 one.

 The properties being copies are the ones to be used by query builders.

    [$from] (\yii\db\Query) The source query object


*yii/db/Query::__toString*				public
>
 __toString()
<
return (string) 

 Returns the SQL representation of Query



 vim:tw=78:ts=8:ft=help:norl:
