
*yii/di/Container*   >> |yii/base/Component|
==================

DESCRIPTION
------------------------------------------------------------------------------

 A dependency injection (DI) container is an object that knows how to
 instantiate and configure objects and all their dependent objects. For more
 information about DI, please refer to [Martin Fowler's
 article](http://martinfowler.com/articles/injection.html).

 Container supports constructor injection as well as property injection.

 To use Container, you first need to set up the class dependencies by calling
 'set()'. You then call 'get()' to create a new class object. Container will
 automatically instantiate dependent objects, inject them into the object
 being created, configure and finally return the newly created object.

 By default, '\Yii::$container' refers to a Container instance which is used
 by '\Yii::createObject()' to create new object instances. You may use this
 method to replace the 'new' operator when creating a new object, which gives
 you the benefit of automatic dependency resolution and default property
 configuration.

 Below is an example of using Container:

   namespace app\models;

   use yii\base\Object;
   use yii\db\Connection;
   use yii\di\Container;

   interface UserFinderInterface
   {
       function findUser();
   }

   class UserFinder extends Object implements UserFinderInterface
   {
       public $db;

       public function __construct(Connection $db, $config = [])
       {
           $this->db = $db;
           parent::__construct($config);
       }

       public function findUser()
       {
       }
   }

   class UserLister extends Object
   {
       public $finder;

       public function __construct(UserFinderInterface $finder, $config = [])
       {
           $this->finder = $finder;
           parent::__construct($config);
       }
   }

   $container = new Container;
   $container->set('yii\db\Connection', [
       'dsn' => '...',
   ]);
   $container->set('app\models\UserFinderInterface', [
       'class' => 'app\models\UserFinder',
   ]);
   $container->set('userLister', 'app\models\UserLister');

   $lister = $container->get('userLister');

   // which is equivalent to:

   $db = new \yii\db\Connection(['dsn' => '...']);
   $finder = new UserFinder($db);
   $lister = new UserLister($finder);




PROPERTY DETAILS
------------------------------------------------------------------------------

$behaviors				*yii/di/Container::$behaviors*

 See |yii/base/Component::$behaviors|

$singleton				*yii/di/Container::$singleton*

 (string) Class name, interface name or alias name

$definitions				*yii/di/Container::$definitions*

 (array) The list of the object definitions or the loaded shared objects (type
 or ID => definition or instance).



METHOD DETAILS
------------------------------------------------------------------------------


*yii/di/Container::className*				public

 See |yii/base/Object::className|


*yii/di/Container::__construct*				public

 See |yii/base/Object::__construct|


*yii/di/Container::init*					public

 See |yii/base/Object::init|


*yii/di/Container::__get*					public

 See |yii/base/Component::__get|


*yii/di/Container::__set*					public

 See |yii/base/Component::__set|


*yii/di/Container::__isset*				public

 See |yii/base/Component::__isset|


*yii/di/Container::__unset*				public

 See |yii/base/Component::__unset|


*yii/di/Container::__call*				public

 See |yii/base/Component::__call|


*yii/di/Container::hasProperty*				public

 See |yii/base/Component::hasProperty|


*yii/di/Container::canGetProperty*			public

 See |yii/base/Component::canGetProperty|


*yii/di/Container::canSetProperty*			public

 See |yii/base/Component::canSetProperty|


*yii/di/Container::hasMethod*				public

 See |yii/base/Component::hasMethod|


*yii/di/Container::__clone*				public

 See |yii/base/Component::__clone|


*yii/di/Container::behaviors*				public

 See |yii/base/Component::behaviors|


*yii/di/Container::hasEventHandlers*			public

 See |yii/base/Component::hasEventHandlers|


*yii/di/Container::on*					public

 See |yii/base/Component::on|


*yii/di/Container::off*					public

 See |yii/base/Component::off|


*yii/di/Container::trigger*				public

 See |yii/base/Component::trigger|


*yii/di/Container::getBehavior*				public

 See |yii/base/Component::getBehavior|


*yii/di/Container::getBehaviors*				public

 See |yii/base/Component::getBehaviors|


*yii/di/Container::attachBehavior*			public

 See |yii/base/Component::attachBehavior|


*yii/di/Container::attachBehaviors*			public

 See |yii/base/Component::attachBehaviors|


*yii/di/Container::detachBehavior*			public

 See |yii/base/Component::detachBehavior|


*yii/di/Container::detachBehaviors*			public

 See |yii/base/Component::detachBehaviors|


*yii/di/Container::ensureBehaviors*			public

 See |yii/base/Component::ensureBehaviors|


*yii/di/Container::get*					public
>
 get($class, $params='[]', $config='[]')
<
return (object) An instance of the requested class.

 You may provide constructor parameters ('$params') and object configurations
 ('$config') that will be used during the creation of the instance.

 If the class implements '\yii\base\Configurable', the '$config' parameter
 will be passed as the last parameter to the class constructor; Otherwise, the
 configuration will be applied *after* the object is instantiated.

 Note that if the class is declared to be singleton by calling
 'setSingleton()', the same instance of the class will be returned each time
 this method is called. In this case, the constructor parameters and object
 configurations will be used only if the class is instantiated the first time.

    [$class] (string) The class name or an alias name (e.g. 'foo') that was
    previously registered via 'set()' or 'setSingleton()'.
    [$params] (array) A list of constructor parameter values. The parameters
    should be provided in the order they appear in the constructor
    declaration. If you want to skip some parameters, you should index the
    remaining ones with the integers that represent their positions in the
    constructor parameter list.
    [$config] (array) A list of name-value pairs that will be used to
    initialize the object properties.


*yii/di/Container::set*					public
>
 set($class, $definition='[]', $params='[]')
<
return ($this) The container itself

 For example,

   // register a class name as is. This can be skipped.
   $container->set('yii\db\Connection');

   // register an interface
   // When a class depends on the interface, the corresponding class
   // will be instantiated as the dependent object
   $container->set('yii\mail\MailInterface', 'yii\swiftmailer\Mailer');

   // register an alias name. You can use $container->get('foo')
   // to create an instance of Connection
   $container->set('foo', 'yii\db\Connection');

   // register a class with configuration. The configuration
   // will be applied when the class is instantiated by get()
   $container->set('yii\db\Connection', [
       'dsn' => 'mysql:host=127.0.0.1;dbname=demo',
       'username' => 'root',
       'password' => '',
       'charset' => 'utf8',
   ]);

   // register an alias name with class configuration
   // In this case, a "class" element is required to specify the class
   $container->set('db', [
       'class' => 'yii\db\Connection',
       'dsn' => 'mysql:host=127.0.0.1;dbname=demo',
       'username' => 'root',
       'password' => '',
       'charset' => 'utf8',
   ]);

   // register a PHP callable
   // The callable will be executed when $container->get('db') is called
   $container->set('db', function ($container, $params, $config) {
       return new \yii\db\Connection($config);
   });

 If a class definition with the same name already exists, it will be
 overwritten with the new one. You may use 'has()' to check if a class
 definition already exists.

    [$class] (string) Class name, interface name or alias name
    [$definition] (mixed) The definition associated with '$class'. It can be
    one of the following:


      - a PHP callable: The callable will be executed when 'get()' is
      invoked. The signature of the callable   should be 'function
    ($container, $params, $config)', where '$params' stands for the list of
    constructor   parameters, '$config' the object configuration, and
    '$container' the container object. The return value   of the callable will
    be returned by 'get()' as the object instance requested. 
      - a configuration array: the array contains name-value pairs that
      will be used to initialize the property   values of the newly created
    object when 'get()' is called. The 'class' element stands for the   the
    class of the object to be created. If 'class' is not specified, '$class'
    will be used as the class name. 
      - a string: a class name, an interface name or an alias name.
    [$params] (array) The list of constructor parameters. The parameters will
    be passed to the class constructor when 'get()' is called.


*yii/di/Container::setSingleton*				public
>
 setSingleton($class, $definition='[]', $params='[]')
<
return ($this) The container itself

 This method is similar to 'set()' except that classes registered via this
 method will only have one instance. Each time 'get()' is called, the same
 instance of the specified class will be returned.

    [$class] (string) Class name, interface name or alias name
    [$definition] (mixed) The definition associated with '$class'. See 'set()'
    for more details.
    [$params] (array) The list of constructor parameters. The parameters will
    be passed to the class constructor when 'get()' is called.


*yii/di/Container::has*					public
>
 has($class)
<
return (boolean) Whether the container has the definition of the specified name..

    [$class] (string) Class name, interface name or alias name


*yii/di/Container::hasSingleton*				public
>
 hasSingleton($class, $checkInstance='false')
<
return (boolean) Whether the given name corresponds to a registered singleton. If
'$checkInstance' is true, the method should return a value indicating whether
the singleton has been instantiated.

    [$class] (string) Class name, interface name or alias name
    [$checkInstance] (boolean) Whether to check if the singleton has been
    instantiated.


*yii/di/Container::clear*					public
>
 clear($class)
<
return (void)

    [$class] (string) Class name, interface name or alias name


*yii/di/Container::normalizeDefinition*			protected
>
 normalizeDefinition($class, $definition)
<
return (array) The normalized class definition

    [$class] (string) Class name
    [$definition] (string|array|callable) The class definition


*yii/di/Container::getDefinitions*			public
>
 getDefinitions()
<
return (array) The list of the object definitions or the loaded shared objects (type
or ID => definition or instance).



*yii/di/Container::build*					protected
>
 build($class, $params, $config)
<
return (object) The newly created instance of the specified class

 This method will resolve dependencies of the specified class, instantiate
 them, and inject them into the new instance of the specified class.

    [$class] (string) The class name
    [$params] (array) Constructor parameters
    [$config] (array) Configurations to be applied to the new instance


*yii/di/Container::mergeParams*				protected
>
 mergeParams($class, $params)
<
return (array) The merged parameters

    [$class] (string) Class name, interface name or alias name
    [$params] (array) The constructor parameters


*yii/di/Container::getDependencies*			protected
>
 getDependencies($class)
<
return (array) The dependencies of the specified class.

    [$class] (string) Class name, interface name or alias name


*yii/di/Container::resolveDependencies*			protected
>
 resolveDependencies($dependencies, $reflection='null')
<
return (array) The resolved dependencies

    [$dependencies] (array) The dependencies
    [$reflection] (\ReflectionClass) The class reflection associated with the
    dependencies


*yii/di/Container::invoke*				public
>
 invoke($callback, $params='[]')
<
return (mixed) The callback return value.

 This methods allows invoking a callback and let type hinted parameter names
 to be resolved as objects of the Container. It additionally allow calling
 function using named parameters.

 For example, the following callback may be invoked using the Container to
 resolve the formatter dependency:

   $formatString = function($string, \yii\i18n\Formatter $formatter) {
      // ...
   }
   Yii::$container->invoke($formatString, ['string' => 'Hello World!']);

 This will pass the string ''Hello World!'' as the first param, and a
 formatter instance created by the DI container as the second param to the
 callable.

    [$callback] (callable) Callable to be invoked.
    [$params] (array) The array of parameters for the function. This can be
    either a list of parameters, or an associative array representing named
    function parameters.


*yii/di/Container::resolveCallableDependencies*		public
>
 resolveCallableDependencies($callback, $params='[]')
<
return (array) The resolved dependencies.

 This method can be used to implement similar functionality as provided by
 'invoke()' in other components.

    [$callback] (callable) Callable to be invoked.
    [$params] (array) The array of parameters for the function, can be either
    numeric or associative.



 vim:tw=78:ts=8:ft=help:norl:
